
cameraTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae70  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000160c  0800b120  0800b120  0001b120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c72c  0800c72c  0001c72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c734  0800c734  0001c734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c738  0800c738  0001c738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800c73c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00096208  24000074  0800c7b0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2409627c  0800c7b0  0002627c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019c66  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000039ac  00000000  00000000  00039d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001248  00000000  00000000  0003d6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010a0  00000000  00000000  0003e900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032b3a  00000000  00000000  0003f9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d1f5  00000000  00000000  000724da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00139521  00000000  00000000  0008f6cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c8bf0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005294  00000000  00000000  001c8c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b108 	.word	0x0800b108

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	0800b108 	.word	0x0800b108

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi_pssi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_DCMI_Init+0x60>)
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <MX_DCMI_Init+0x64>)
 800069c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006a6:	2220      	movs	r2, #32
 80006a8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006dc:	2200      	movs	r2, #0
 80006de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006e2:	f001 f96d 	bl	80019c0 <HAL_DCMI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80006ec:	f000 fd1a 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	24000090 	.word	0x24000090
 80006f8:	48020000 	.word	0x48020000

080006fc <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a7d      	ldr	r2, [pc, #500]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800071a:	4293      	cmp	r3, r2
 800071c:	f040 80f4 	bne.w	8000908 <HAL_DCMI_MspInit+0x20c>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000720:	4b7c      	ldr	r3, [pc, #496]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 8000722:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000726:	4a7b      	ldr	r2, [pc, #492]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000730:	4b78      	ldr	r3, [pc, #480]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 8000732:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800073e:	4b75      	ldr	r3, [pc, #468]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 8000740:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000744:	4a73      	ldr	r2, [pc, #460]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 8000746:	f043 0301 	orr.w	r3, r3, #1
 800074a:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 800074e:	4b71      	ldr	r3, [pc, #452]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 8000750:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	61fb      	str	r3, [r7, #28]
 800075a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800075c:	4b6d      	ldr	r3, [pc, #436]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 800075e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000762:	4a6c      	ldr	r2, [pc, #432]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 8000764:	f043 0310 	orr.w	r3, r3, #16
 8000768:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800076c:	4b69      	ldr	r3, [pc, #420]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 800076e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000772:	f003 0310 	and.w	r3, r3, #16
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b66      	ldr	r3, [pc, #408]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 800077c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000780:	4a64      	ldr	r2, [pc, #400]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800078a:	4b62      	ldr	r3, [pc, #392]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 800078c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000790:	f003 0301 	and.w	r3, r3, #1
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000798:	4b5e      	ldr	r3, [pc, #376]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 800079a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800079e:	4a5d      	ldr	r2, [pc, #372]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007a8:	4b5a      	ldr	r3, [pc, #360]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 80007aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b57      	ldr	r3, [pc, #348]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 80007b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007bc:	4a55      	ldr	r2, [pc, #340]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 80007be:	f043 0304 	orr.w	r3, r3, #4
 80007c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007c6:	4b53      	ldr	r3, [pc, #332]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 80007c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007cc:	f003 0304 	and.w	r3, r3, #4
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d4:	4b4f      	ldr	r3, [pc, #316]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 80007d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007da:	4a4e      	ldr	r2, [pc, #312]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007e4:	4b4b      	ldr	r3, [pc, #300]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 80007e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> DCMI_D1
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80007f2:	2370      	movs	r3, #112	; 0x70
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000802:	230d      	movs	r3, #13
 8000804:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	4619      	mov	r1, r3
 800080c:	4842      	ldr	r0, [pc, #264]	; (8000918 <HAL_DCMI_MspInit+0x21c>)
 800080e:	f004 fbb7 	bl	8004f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000812:	2350      	movs	r3, #80	; 0x50
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000822:	230d      	movs	r3, #13
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	4619      	mov	r1, r3
 800082c:	483b      	ldr	r0, [pc, #236]	; (800091c <HAL_DCMI_MspInit+0x220>)
 800082e:	f004 fba7 	bl	8004f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 8000832:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000844:	230d      	movs	r3, #13
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084c:	4619      	mov	r1, r3
 800084e:	4834      	ldr	r0, [pc, #208]	; (8000920 <HAL_DCMI_MspInit+0x224>)
 8000850:	f004 fb96 	bl	8004f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8000854:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000866:	230d      	movs	r3, #13
 8000868:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086e:	4619      	mov	r1, r3
 8000870:	482c      	ldr	r0, [pc, #176]	; (8000924 <HAL_DCMI_MspInit+0x228>)
 8000872:	f004 fb85 	bl	8004f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000876:	2308      	movs	r3, #8
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000886:	230d      	movs	r3, #13
 8000888:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	4619      	mov	r1, r3
 8000890:	4825      	ldr	r0, [pc, #148]	; (8000928 <HAL_DCMI_MspInit+0x22c>)
 8000892:	f004 fb75 	bl	8004f80 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI_PSSI Init */
    hdma_dcmi_pssi.Instance = DMA1_Stream0;
 8000896:	4b25      	ldr	r3, [pc, #148]	; (800092c <HAL_DCMI_MspInit+0x230>)
 8000898:	4a25      	ldr	r2, [pc, #148]	; (8000930 <HAL_DCMI_MspInit+0x234>)
 800089a:	601a      	str	r2, [r3, #0]
    hdma_dcmi_pssi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 800089c:	4b23      	ldr	r3, [pc, #140]	; (800092c <HAL_DCMI_MspInit+0x230>)
 800089e:	224b      	movs	r2, #75	; 0x4b
 80008a0:	605a      	str	r2, [r3, #4]
    hdma_dcmi_pssi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <HAL_DCMI_MspInit+0x230>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
    hdma_dcmi_pssi.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a8:	4b20      	ldr	r3, [pc, #128]	; (800092c <HAL_DCMI_MspInit+0x230>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
    hdma_dcmi_pssi.Init.MemInc = DMA_MINC_ENABLE;
 80008ae:	4b1f      	ldr	r3, [pc, #124]	; (800092c <HAL_DCMI_MspInit+0x230>)
 80008b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008b4:	611a      	str	r2, [r3, #16]
    hdma_dcmi_pssi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <HAL_DCMI_MspInit+0x230>)
 80008b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008bc:	615a      	str	r2, [r3, #20]
    hdma_dcmi_pssi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008be:	4b1b      	ldr	r3, [pc, #108]	; (800092c <HAL_DCMI_MspInit+0x230>)
 80008c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008c4:	619a      	str	r2, [r3, #24]
    hdma_dcmi_pssi.Init.Mode = DMA_NORMAL;
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <HAL_DCMI_MspInit+0x230>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	61da      	str	r2, [r3, #28]
    hdma_dcmi_pssi.Init.Priority = DMA_PRIORITY_HIGH;
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <HAL_DCMI_MspInit+0x230>)
 80008ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008d2:	621a      	str	r2, [r3, #32]
    hdma_dcmi_pssi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_DCMI_MspInit+0x230>)
 80008d6:	2204      	movs	r2, #4
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi_pssi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <HAL_DCMI_MspInit+0x230>)
 80008dc:	2203      	movs	r2, #3
 80008de:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi_pssi.Init.MemBurst = DMA_MBURST_SINGLE;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_DCMI_MspInit+0x230>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi_pssi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <HAL_DCMI_MspInit+0x230>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi_pssi) != HAL_OK)
 80008ec:	480f      	ldr	r0, [pc, #60]	; (800092c <HAL_DCMI_MspInit+0x230>)
 80008ee:	f001 fad5 	bl	8001e9c <HAL_DMA_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <HAL_DCMI_MspInit+0x200>
    {
      Error_Handler();
 80008f8:	f000 fc14 	bl	8001124 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi_pssi);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a0b      	ldr	r2, [pc, #44]	; (800092c <HAL_DCMI_MspInit+0x230>)
 8000900:	649a      	str	r2, [r3, #72]	; 0x48
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_DCMI_MspInit+0x230>)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000908:	bf00      	nop
 800090a:	3738      	adds	r7, #56	; 0x38
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	48020000 	.word	0x48020000
 8000914:	58024400 	.word	0x58024400
 8000918:	58021000 	.word	0x58021000
 800091c:	58020000 	.word	0x58020000
 8000920:	58020400 	.word	0x58020400
 8000924:	58020800 	.word	0x58020800
 8000928:	58020c00 	.word	0x58020c00
 800092c:	240000e0 	.word	0x240000e0
 8000930:	40020010 	.word	0x40020010

08000934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <MX_DMA_Init+0x3c>)
 800093c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000940:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <MX_DMA_Init+0x3c>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_DMA_Init+0x3c>)
 800094c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	200b      	movs	r0, #11
 800095e:	f000 fffa 	bl	8001956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000962:	200b      	movs	r0, #11
 8000964:	f001 f811 	bl	800198a <HAL_NVIC_EnableIRQ>

}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	58024400 	.word	0x58024400

08000974 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	; 0x38
 8000978:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800098a:	4b80      	ldr	r3, [pc, #512]	; (8000b8c <MX_GPIO_Init+0x218>)
 800098c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000990:	4a7e      	ldr	r2, [pc, #504]	; (8000b8c <MX_GPIO_Init+0x218>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800099a:	4b7c      	ldr	r3, [pc, #496]	; (8000b8c <MX_GPIO_Init+0x218>)
 800099c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009a0:	f003 0310 	and.w	r3, r3, #16
 80009a4:	623b      	str	r3, [r7, #32]
 80009a6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a8:	4b78      	ldr	r3, [pc, #480]	; (8000b8c <MX_GPIO_Init+0x218>)
 80009aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ae:	4a77      	ldr	r2, [pc, #476]	; (8000b8c <MX_GPIO_Init+0x218>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009b8:	4b74      	ldr	r3, [pc, #464]	; (8000b8c <MX_GPIO_Init+0x218>)
 80009ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	61fb      	str	r3, [r7, #28]
 80009c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c6:	4b71      	ldr	r3, [pc, #452]	; (8000b8c <MX_GPIO_Init+0x218>)
 80009c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009cc:	4a6f      	ldr	r2, [pc, #444]	; (8000b8c <MX_GPIO_Init+0x218>)
 80009ce:	f043 0320 	orr.w	r3, r3, #32
 80009d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009d6:	4b6d      	ldr	r3, [pc, #436]	; (8000b8c <MX_GPIO_Init+0x218>)
 80009d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009dc:	f003 0320 	and.w	r3, r3, #32
 80009e0:	61bb      	str	r3, [r7, #24]
 80009e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e4:	4b69      	ldr	r3, [pc, #420]	; (8000b8c <MX_GPIO_Init+0x218>)
 80009e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ea:	4a68      	ldr	r2, [pc, #416]	; (8000b8c <MX_GPIO_Init+0x218>)
 80009ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009f4:	4b65      	ldr	r3, [pc, #404]	; (8000b8c <MX_GPIO_Init+0x218>)
 80009f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b62      	ldr	r3, [pc, #392]	; (8000b8c <MX_GPIO_Init+0x218>)
 8000a04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a08:	4a60      	ldr	r2, [pc, #384]	; (8000b8c <MX_GPIO_Init+0x218>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a12:	4b5e      	ldr	r3, [pc, #376]	; (8000b8c <MX_GPIO_Init+0x218>)
 8000a14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a20:	4b5a      	ldr	r3, [pc, #360]	; (8000b8c <MX_GPIO_Init+0x218>)
 8000a22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a26:	4a59      	ldr	r2, [pc, #356]	; (8000b8c <MX_GPIO_Init+0x218>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a30:	4b56      	ldr	r3, [pc, #344]	; (8000b8c <MX_GPIO_Init+0x218>)
 8000a32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3e:	4b53      	ldr	r3, [pc, #332]	; (8000b8c <MX_GPIO_Init+0x218>)
 8000a40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a44:	4a51      	ldr	r2, [pc, #324]	; (8000b8c <MX_GPIO_Init+0x218>)
 8000a46:	f043 0308 	orr.w	r3, r3, #8
 8000a4a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a4e:	4b4f      	ldr	r3, [pc, #316]	; (8000b8c <MX_GPIO_Init+0x218>)
 8000a50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a54:	f003 0308 	and.w	r3, r3, #8
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a5c:	4b4b      	ldr	r3, [pc, #300]	; (8000b8c <MX_GPIO_Init+0x218>)
 8000a5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a62:	4a4a      	ldr	r2, [pc, #296]	; (8000b8c <MX_GPIO_Init+0x218>)
 8000a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a68:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a6c:	4b47      	ldr	r3, [pc, #284]	; (8000b8c <MX_GPIO_Init+0x218>)
 8000a6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a80:	4843      	ldr	r0, [pc, #268]	; (8000b90 <MX_GPIO_Init+0x21c>)
 8000a82:	f004 fc2d 	bl	80052e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a8c:	4841      	ldr	r0, [pc, #260]	; (8000b94 <MX_GPIO_Init+0x220>)
 8000a8e:	f004 fc27 	bl	80052e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2102      	movs	r1, #2
 8000a96:	4840      	ldr	r0, [pc, #256]	; (8000b98 <MX_GPIO_Init+0x224>)
 8000a98:	f004 fc22 	bl	80052e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	483a      	ldr	r0, [pc, #232]	; (8000b9c <MX_GPIO_Init+0x228>)
 8000ab2:	f004 fa65 	bl	8004f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000acc:	4619      	mov	r1, r3
 8000ace:	4830      	ldr	r0, [pc, #192]	; (8000b90 <MX_GPIO_Init+0x21c>)
 8000ad0:	f004 fa56 	bl	8004f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ad4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	4619      	mov	r1, r3
 8000aec:	4829      	ldr	r0, [pc, #164]	; (8000b94 <MX_GPIO_Init+0x220>)
 8000aee:	f004 fa47 	bl	8004f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000af2:	2380      	movs	r3, #128	; 0x80
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	4826      	ldr	r0, [pc, #152]	; (8000ba0 <MX_GPIO_Init+0x22c>)
 8000b08:	f004 fa3a 	bl	8004f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4820      	ldr	r0, [pc, #128]	; (8000ba4 <MX_GPIO_Init+0x230>)
 8000b22:	f004 fa2d 	bl	8004f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b38:	230a      	movs	r3, #10
 8000b3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b40:	4619      	mov	r1, r3
 8000b42:	4818      	ldr	r0, [pc, #96]	; (8000ba4 <MX_GPIO_Init+0x230>)
 8000b44:	f004 fa1c 	bl	8004f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000b48:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4810      	ldr	r0, [pc, #64]	; (8000ba4 <MX_GPIO_Init+0x230>)
 8000b62:	f004 fa0d 	bl	8004f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b66:	2302      	movs	r3, #2
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <MX_GPIO_Init+0x224>)
 8000b7e:	f004 f9ff 	bl	8004f80 <HAL_GPIO_Init>

}
 8000b82:	bf00      	nop
 8000b84:	3738      	adds	r7, #56	; 0x38
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	58024400 	.word	0x58024400
 8000b90:	58021400 	.word	0x58021400
 8000b94:	58020400 	.word	0x58020400
 8000b98:	58021000 	.word	0x58021000
 8000b9c:	58020800 	.word	0x58020800
 8000ba0:	58021800 	.word	0x58021800
 8000ba4:	58020000 	.word	0x58020000

08000ba8 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_I2C4_Init+0x74>)
 8000bae:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <MX_I2C4_Init+0x78>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10B0DCFB;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_I2C4_Init+0x74>)
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <MX_I2C4_Init+0x7c>)
 8000bb6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_I2C4_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_I2C4_Init+0x74>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_I2C4_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_I2C4_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_I2C4_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_I2C4_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_I2C4_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000be2:	480e      	ldr	r0, [pc, #56]	; (8000c1c <MX_I2C4_Init+0x74>)
 8000be4:	f004 fb96 	bl	8005314 <HAL_I2C_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000bee:	f000 fa99 	bl	8001124 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4809      	ldr	r0, [pc, #36]	; (8000c1c <MX_I2C4_Init+0x74>)
 8000bf6:	f005 f8fd 	bl	8005df4 <HAL_I2CEx_ConfigAnalogFilter>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000c00:	f000 fa90 	bl	8001124 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_I2C4_Init+0x74>)
 8000c08:	f005 f93f 	bl	8005e8a <HAL_I2CEx_ConfigDigitalFilter>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000c12:	f000 fa87 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	24000158 	.word	0x24000158
 8000c20:	58001c00 	.word	0x58001c00
 8000c24:	10b0dcfb 	.word	0x10b0dcfb

08000c28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0b8      	sub	sp, #224	; 0xe0
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	22b8      	movs	r2, #184	; 0xb8
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f009 fa51 	bl	800a0f0 <memset>
  if(i2cHandle->Instance==I2C4)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a25      	ldr	r2, [pc, #148]	; (8000ce8 <HAL_I2C_MspInit+0xc0>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d142      	bne.n	8000cde <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000c58:	2310      	movs	r3, #16
 8000c5a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4618      	mov	r0, r3
 8000c68:	f006 f984 	bl	8006f74 <HAL_RCCEx_PeriphCLKConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c72:	f000 fa57 	bl	8001124 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <HAL_I2C_MspInit+0xc4>)
 8000c78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c7c:	4a1b      	ldr	r2, [pc, #108]	; (8000cec <HAL_I2C_MspInit+0xc4>)
 8000c7e:	f043 0320 	orr.w	r3, r3, #32
 8000c82:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_I2C_MspInit+0xc4>)
 8000c88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c8c:	f003 0320 	and.w	r3, r3, #32
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000c94:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9c:	2312      	movs	r3, #18
 8000c9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <HAL_I2C_MspInit+0xc8>)
 8000cbc:	f004 f960 	bl	8004f80 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_I2C_MspInit+0xc4>)
 8000cc2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000cc6:	4a09      	ldr	r2, [pc, #36]	; (8000cec <HAL_I2C_MspInit+0xc4>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ccc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_I2C_MspInit+0xc4>)
 8000cd2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000cde:	bf00      	nop
 8000ce0:	37e0      	adds	r7, #224	; 0xe0
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	58001c00 	.word	0x58001c00
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	58021400 	.word	0x58021400

08000cf4 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	60ba      	str	r2, [r7, #8]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4603      	mov	r3, r0
 8000d00:	81fb      	strh	r3, [r7, #14]
 8000d02:	460b      	mov	r3, r1
 8000d04:	81bb      	strh	r3, [r7, #12]
 8000d06:	4613      	mov	r3, r2
 8000d08:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8000d0a:	89b9      	ldrh	r1, [r7, #12]
 8000d0c:	89f8      	ldrh	r0, [r7, #14]
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	2202      	movs	r2, #2
 8000d16:	f000 f839 	bl	8000d8c <I2C4_WriteReg>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <BSP_I2C4_WriteReg16+0x32>
  {
    ret = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	e004      	b.n	8000d30 <BSP_I2C4_WriteReg16+0x3c>
  }
  else
  {
	ret  = HAL_I2C_GetError(&hi2c4);
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <BSP_I2C4_WriteReg16+0x48>)
 8000d28:	f004 fdb2 	bl	8005890 <HAL_I2C_GetError>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8000d30:	697b      	ldr	r3, [r7, #20]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000158 	.word	0x24000158

08000d40 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	60ba      	str	r2, [r7, #8]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	81fb      	strh	r3, [r7, #14]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	81bb      	strh	r3, [r7, #12]
 8000d52:	4613      	mov	r3, r2
 8000d54:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8000d56:	89b9      	ldrh	r1, [r7, #12]
 8000d58:	89f8      	ldrh	r0, [r7, #14]
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	2202      	movs	r2, #2
 8000d62:	f000 f837 	bl	8000dd4 <I2C4_ReadReg>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <BSP_I2C4_ReadReg16+0x32>
  {
    ret = HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	e004      	b.n	8000d7c <BSP_I2C4_ReadReg16+0x3c>
  }
  else
  {
	ret  = HAL_I2C_GetError(&hi2c4);
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <BSP_I2C4_ReadReg16+0x48>)
 8000d74:	f004 fd8c 	bl	8005890 <HAL_I2C_GetError>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8000d7c:	697b      	ldr	r3, [r7, #20]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	24000158 	.word	0x24000158

08000d8c <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af04      	add	r7, sp, #16
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	4603      	mov	r3, r0
 8000d96:	81fb      	strh	r3, [r7, #14]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	81bb      	strh	r3, [r7, #12]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hi2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8000da0:	8978      	ldrh	r0, [r7, #10]
 8000da2:	89ba      	ldrh	r2, [r7, #12]
 8000da4:	89f9      	ldrh	r1, [r7, #14]
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	9302      	str	r3, [sp, #8]
 8000dac:	8b3b      	ldrh	r3, [r7, #24]
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	4603      	mov	r3, r0
 8000db6:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <I2C4_WriteReg+0x44>)
 8000db8:	f004 fb3c 	bl	8005434 <HAL_I2C_Mem_Write>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <I2C4_WriteReg+0x3a>
  {
    return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <I2C4_WriteReg+0x3c>
  }

  return HAL_I2C_STATE_ERROR;
 8000dc6:	23e0      	movs	r3, #224	; 0xe0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	24000158 	.word	0x24000158

08000dd4 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af04      	add	r7, sp, #16
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	4603      	mov	r3, r0
 8000dde:	81fb      	strh	r3, [r7, #14]
 8000de0:	460b      	mov	r3, r1
 8000de2:	81bb      	strh	r3, [r7, #12]
 8000de4:	4613      	mov	r3, r2
 8000de6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hi2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8000de8:	8978      	ldrh	r0, [r7, #10]
 8000dea:	89ba      	ldrh	r2, [r7, #12]
 8000dec:	89f9      	ldrh	r1, [r7, #14]
 8000dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df2:	9302      	str	r3, [sp, #8]
 8000df4:	8b3b      	ldrh	r3, [r7, #24]
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <I2C4_ReadReg+0x44>)
 8000e00:	f004 fc2c 	bl	800565c <HAL_I2C_Mem_Read>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d101      	bne.n	8000e0e <I2C4_ReadReg+0x3a>
  {
    return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e000      	b.n	8000e10 <I2C4_ReadReg+0x3c>
  }

  return HAL_I2C_STATE_ERROR;
 8000e0e:	23e0      	movs	r3, #224	; 0xe0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	24000158 	.word	0x24000158

08000e1c <__io_putchar>:
#include "log.h"

PUTCHAR_PROTOTYPE
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e24:	1d39      	adds	r1, r7, #4
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4803      	ldr	r0, [pc, #12]	; (8000e3c <__io_putchar+0x20>)
 8000e2e:	f007 fc1f 	bl	8008670 <HAL_UART_Transmit>
  return ch;
 8000e32:	687b      	ldr	r3, [r7, #4]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	240961d8 	.word	0x240961d8

08000e40 <log_format>:

void log_format(const char* tag, const char* message, va_list args)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
	uint32_t time = HAL_GetTick();
 8000e4c:	f000 fc78 	bl	8001740 <HAL_GetTick>
 8000e50:	6178      	str	r0, [r7, #20]
	printf("%u [%s] ", (unsigned int)time, tag);
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	6979      	ldr	r1, [r7, #20]
 8000e56:	4807      	ldr	r0, [pc, #28]	; (8000e74 <log_format+0x34>)
 8000e58:	f009 f952 	bl	800a100 <iprintf>
	vprintf(message, args);
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	68b8      	ldr	r0, [r7, #8]
 8000e60:	f009 f97c 	bl	800a15c <viprintf>
	printf("\n");
 8000e64:	200a      	movs	r0, #10
 8000e66:	f009 f963 	bl	800a130 <putchar>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	0800b120 	.word	0x0800b120

08000e78 <log_error>:

void log_error(const char* message, ...)
{
 8000e78:	b40f      	push	{r0, r1, r2, r3}
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	607b      	str	r3, [r7, #4]
	log_format("error", message, args);
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6939      	ldr	r1, [r7, #16]
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <log_error+0x28>)
 8000e8c:	f7ff ffd8 	bl	8000e40 <log_format>
	va_end(args);
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e9a:	b004      	add	sp, #16
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	0800b12c 	.word	0x0800b12c

08000ea4 <log_info>:

void log_info(const char* message, ...)
{
 8000ea4:	b40f      	push	{r0, r1, r2, r3}
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	607b      	str	r3, [r7, #4]
	log_format("info", message, args);
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	6939      	ldr	r1, [r7, #16]
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <log_info+0x28>)
 8000eb8:	f7ff ffc2 	bl	8000e40 <log_format>
	va_end(args);
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ec6:	b004      	add	sp, #16
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	0800b134 	.word	0x0800b134

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed6:	f000 fbad 	bl	8001634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eda:	f000 f86b 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ede:	f7ff fd49 	bl	8000974 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ee2:	f000 fac3 	bl	800146c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000ee6:	f000 fb73 	bl	80015d0 <MX_USB_OTG_HS_USB_Init>
  MX_I2C4_Init();
 8000eea:	f7ff fe5d 	bl	8000ba8 <MX_I2C4_Init>
  MX_DMA_Init();
 8000eee:	f7ff fd21 	bl	8000934 <MX_DMA_Init>
  MX_DCMI_Init();
 8000ef2:	f7ff fbcf 	bl	8000694 <MX_DCMI_Init>
  MX_RAMECC_Init();
 8000ef6:	f000 f91d 	bl	8001134 <MX_RAMECC_Init>
  /* USER CODE BEGIN 2 */
  log_info("Main Init");
 8000efa:	4827      	ldr	r0, [pc, #156]	; (8000f98 <main+0xc8>)
 8000efc:	f7ff ffd2 	bl	8000ea4 <log_info>

  int32_t ret = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	607b      	str	r3, [r7, #4]

  if (ret != HAL_OK) {
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d006      	beq.n	8000f18 <main+0x48>
	  log_error("I2C Init failed");
 8000f0a:	4824      	ldr	r0, [pc, #144]	; (8000f9c <main+0xcc>)
 8000f0c:	f7ff ffb4 	bl	8000e78 <log_error>
  }
  else {
	  log_info("Successfully initialized OV5640");
  } */

  while(OV5640_Init())
 8000f10:	e002      	b.n	8000f18 <main+0x48>
  {
	  log_error("OV5640 error, please check !\r\n");
 8000f12:	4823      	ldr	r0, [pc, #140]	; (8000fa0 <main+0xd0>)
 8000f14:	f7ff ffb0 	bl	8000e78 <log_error>
  while(OV5640_Init())
 8000f18:	f008 fd9a 	bl	8009a50 <OV5640_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f7      	bne.n	8000f12 <main+0x42>
  }
  OV5640_RGB565_Mode();
 8000f22:	f008 fdf9 	bl	8009b18 <OV5640_RGB565_Mode>
  OV5640_Focus_Init();
 8000f26:	f008 ffff 	bl	8009f28 <OV5640_Focus_Init>
  OV5640_Light_Mode(0);	   //set auto
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f008 fe18 	bl	8009b60 <OV5640_Light_Mode>
  OV5640_Color_Saturation(3); //default
 8000f30:	2003      	movs	r0, #3
 8000f32:	f008 fe49 	bl	8009bc8 <OV5640_Color_Saturation>
  OV5640_Brightness(4);	//default
 8000f36:	2004      	movs	r0, #4
 8000f38:	f008 fe96 	bl	8009c68 <OV5640_Brightness>
  OV5640_Contrast(3);     //default
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f008 fecd 	bl	8009cdc <OV5640_Contrast>
  OV5640_Sharpness(33);	//set auto
 8000f42:	2021      	movs	r0, #33	; 0x21
 8000f44:	f008 ff26 	bl	8009d94 <OV5640_Sharpness>
  OV5640_Auto_Focus();
 8000f48:	f009 f85c 	bl	800a004 <OV5640_Auto_Focus>
  OV5640_OutSize_Set(4,0, MAX_WIDTH, MAX_HEIGHT);
 8000f4c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f50:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000f54:	2100      	movs	r1, #0
 8000f56:	2004      	movs	r0, #4
 8000f58:	f008 ff82 	bl	8009e60 <OV5640_OutSize_Set>

  __HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME);
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <main+0xd4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <main+0xd4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0201 	orr.w	r2, r2, #1
 8000f6a:	60da      	str	r2, [r3, #12]
  ret = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t) pCameraBuff, CAMERA_BUFF_SIZE);
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <main+0xd8>)
 8000f6e:	f44f 2316 	mov.w	r3, #614400	; 0x96000
 8000f72:	2102      	movs	r1, #2
 8000f74:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <main+0xd4>)
 8000f76:	f000 fd9d 	bl	8001ab4 <HAL_DCMI_Start_DMA>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	607b      	str	r3, [r7, #4]
  if (ret != HAL_OK) {
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d004      	beq.n	8000f8e <main+0xbe>
	  log_error("Unable to start DCMI, error: %d", ret);
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4809      	ldr	r0, [pc, #36]	; (8000fac <main+0xdc>)
 8000f88:	f7ff ff76 	bl	8000e78 <log_error>
 8000f8c:	e002      	b.n	8000f94 <main+0xc4>
  }
  else {
	  log_info("Successfully started DCMI");
 8000f8e:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <main+0xe0>)
 8000f90:	f7ff ff88 	bl	8000ea4 <log_info>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <main+0xc4>
 8000f96:	bf00      	nop
 8000f98:	0800b144 	.word	0x0800b144
 8000f9c:	0800b150 	.word	0x0800b150
 8000fa0:	0800b160 	.word	0x0800b160
 8000fa4:	24000090 	.word	0x24000090
 8000fa8:	240001a4 	.word	0x240001a4
 8000fac:	0800b180 	.word	0x0800b180
 8000fb0:	0800b1a0 	.word	0x0800b1a0

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b09c      	sub	sp, #112	; 0x70
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	224c      	movs	r2, #76	; 0x4c
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f009 f894 	bl	800a0f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2220      	movs	r2, #32
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f009 f88e 	bl	800a0f0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000fd4:	4b30      	ldr	r3, [pc, #192]	; (8001098 <SystemClock_Config+0xe4>)
 8000fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8000fda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000fde:	2004      	movs	r0, #4
 8000fe0:	f004 ffa0 	bl	8005f24 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <SystemClock_Config+0xe8>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a2b      	ldr	r2, [pc, #172]	; (800109c <SystemClock_Config+0xe8>)
 8000fee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b29      	ldr	r3, [pc, #164]	; (800109c <SystemClock_Config+0xe8>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001000:	bf00      	nop
 8001002:	4b26      	ldr	r3, [pc, #152]	; (800109c <SystemClock_Config+0xe8>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800100a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800100e:	d1f8      	bne.n	8001002 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001010:	2321      	movs	r3, #33	; 0x21
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001014:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800101a:	2301      	movs	r3, #1
 800101c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101e:	2302      	movs	r3, #2
 8001020:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001022:	2302      	movs	r3, #2
 8001024:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001026:	2301      	movs	r3, #1
 8001028:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800102a:	2318      	movs	r3, #24
 800102c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800102e:	2302      	movs	r3, #2
 8001030:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001032:	2304      	movs	r3, #4
 8001034:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001036:	2302      	movs	r3, #2
 8001038:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800103a:	230c      	movs	r3, #12
 800103c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800103e:	2300      	movs	r3, #0
 8001040:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	4618      	mov	r0, r3
 800104c:	f005 f802 	bl	8006054 <HAL_RCC_OscConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001056:	f000 f865 	bl	8001124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105a:	233f      	movs	r3, #63	; 0x3f
 800105c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105e:	2303      	movs	r3, #3
 8001060:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2102      	movs	r1, #2
 800107e:	4618      	mov	r0, r3
 8001080:	f005 fbec 	bl	800685c <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800108a:	f000 f84b 	bl	8001124 <Error_Handler>
  }
}
 800108e:	bf00      	nop
 8001090:	3770      	adds	r7, #112	; 0x70
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	58024400 	.word	0x58024400
 800109c:	58024800 	.word	0x58024800

080010a0 <DCMI_PSSI_IRQHandler>:

/* USER CODE BEGIN 4 */
void DCMI_IRQHandler(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_DCMI_IRQHandler(&hdcmi);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <DCMI_PSSI_IRQHandler+0x10>)
 80010a6:	f000 fdc7 	bl	8001c38 <HAL_DCMI_IRQHandler>
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	24000090 	.word	0x24000090

080010b4 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	log_info("Line callback");
 80010bc:	4803      	ldr	r0, [pc, #12]	; (80010cc <HAL_DCMI_LineEventCallback+0x18>)
 80010be:	f7ff fef1 	bl	8000ea4 <log_info>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	0800b1bc 	.word	0x0800b1bc

080010d0 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	log_info("Frame callback");
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <HAL_DCMI_FrameEventCallback+0x18>)
 80010da:	f7ff fee3 	bl	8000ea4 <log_info>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	0800b1cc 	.word	0x0800b1cc

080010ec <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	log_info("Vsync Callback");
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <HAL_DCMI_VsyncEventCallback+0x18>)
 80010f6:	f7ff fed5 	bl	8000ea4 <log_info>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	0800b1dc 	.word	0x0800b1dc

08001108 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	log_info("DCMI error callback");
 8001110:	4803      	ldr	r0, [pc, #12]	; (8001120 <HAL_DCMI_ErrorCallback+0x18>)
 8001112:	f7ff fec7 	bl	8000ea4 <log_info>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	0800b1ec 	.word	0x0800b1ec

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while(1)
  {
    HAL_Delay(100);
 800112c:	2064      	movs	r0, #100	; 0x64
 800112e:	f000 fb13 	bl	8001758 <HAL_Delay>
 8001132:	e7fb      	b.n	800112c <Error_Handler+0x8>

08001134 <MX_RAMECC_Init>:
RAMECC_HandleTypeDef hramecc_m2;
RAMECC_HandleTypeDef hramecc_m3;

/* RAMECC init function */
void MX_RAMECC_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END RAMECC_Init 1 */

  /** Initialize RAMECC M1 : ITCM-RAM
  */
  hramecc_m1.Instance = RAMECC_Monitor1;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_RAMECC_Init+0x4c>)
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <MX_RAMECC_Init+0x50>)
 800113c:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc_m1) != HAL_OK)
 800113e:	4810      	ldr	r0, [pc, #64]	; (8001180 <MX_RAMECC_Init+0x4c>)
 8001140:	f004 ff4a 	bl	8005fd8 <HAL_RAMECC_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_RAMECC_Init+0x1a>
  {
    Error_Handler();
 800114a:	f7ff ffeb 	bl	8001124 <Error_Handler>
  }

  /** Initialize RAMECC M2 : D0TCM-RAM
  */
  hramecc_m2.Instance = RAMECC_Monitor2;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_RAMECC_Init+0x54>)
 8001150:	4a0e      	ldr	r2, [pc, #56]	; (800118c <MX_RAMECC_Init+0x58>)
 8001152:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc_m2) != HAL_OK)
 8001154:	480c      	ldr	r0, [pc, #48]	; (8001188 <MX_RAMECC_Init+0x54>)
 8001156:	f004 ff3f 	bl	8005fd8 <HAL_RAMECC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_RAMECC_Init+0x30>
  {
    Error_Handler();
 8001160:	f7ff ffe0 	bl	8001124 <Error_Handler>
  }

  /** Initialize RAMECC M3 : D1TCM-RAM
  */
  hramecc_m3.Instance = RAMECC_Monitor3;
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <MX_RAMECC_Init+0x5c>)
 8001166:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <MX_RAMECC_Init+0x60>)
 8001168:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc_m3) != HAL_OK)
 800116a:	4809      	ldr	r0, [pc, #36]	; (8001190 <MX_RAMECC_Init+0x5c>)
 800116c:	f004 ff34 	bl	8005fd8 <HAL_RAMECC_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_RAMECC_Init+0x46>
  {
    Error_Handler();
 8001176:	f7ff ffd5 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN RAMECC_Init 2 */

  /* USER CODE END RAMECC_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	240961a4 	.word	0x240961a4
 8001184:	52009020 	.word	0x52009020
 8001188:	240961b4 	.word	0x240961b4
 800118c:	52009040 	.word	0x52009040
 8001190:	240961c4 	.word	0x240961c4
 8001194:	52009060 	.word	0x52009060

08001198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_MspInit+0x30>)
 80011a0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011a4:	4a08      	ldr	r2, [pc, #32]	; (80011c8 <HAL_MspInit+0x30>)
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_MspInit+0x30>)
 80011b0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	58024400 	.word	0x58024400

080011cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <NMI_Handler+0x4>

080011d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <HardFault_Handler+0x4>

080011d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <MemManage_Handler+0x4>

080011de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001218:	f000 fa7e 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}

08001220 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi_pssi);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <DMA1_Stream0_IRQHandler+0x10>)
 8001226:	f001 fe79 	bl	8002f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	240000e0 	.word	0x240000e0

08001234 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	e00a      	b.n	800125c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001246:	f3af 8000 	nop.w
 800124a:	4601      	mov	r1, r0
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	60ba      	str	r2, [r7, #8]
 8001252:	b2ca      	uxtb	r2, r1
 8001254:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3301      	adds	r3, #1
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	429a      	cmp	r2, r3
 8001262:	dbf0      	blt.n	8001246 <_read+0x12>
	}

return len;
 8001264:	687b      	ldr	r3, [r7, #4]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e009      	b.n	8001294 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	60ba      	str	r2, [r7, #8]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fdc7 	bl	8000e1c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	3301      	adds	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	429a      	cmp	r2, r3
 800129a:	dbf1      	blt.n	8001280 <_write+0x12>
	}
	return len;
 800129c:	687b      	ldr	r3, [r7, #4]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_close>:

int _close(int file)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	return -1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ce:	605a      	str	r2, [r3, #4]
	return 0;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <_isatty>:

int _isatty(int file)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
	return 1;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001318:	4a14      	ldr	r2, [pc, #80]	; (800136c <_sbrk+0x5c>)
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <_sbrk+0x60>)
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <_sbrk+0x64>)
 800132e:	4a12      	ldr	r2, [pc, #72]	; (8001378 <_sbrk+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	429a      	cmp	r2, r3
 800133e:	d207      	bcs.n	8001350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001340:	f008 feac 	bl	800a09c <__errno>
 8001344:	4603      	mov	r3, r0
 8001346:	220c      	movs	r2, #12
 8001348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	e009      	b.n	8001364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <_sbrk+0x64>)
 8001360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	24100000 	.word	0x24100000
 8001370:	00000400 	.word	0x00000400
 8001374:	240961d4 	.word	0x240961d4
 8001378:	24096280 	.word	0x24096280

0800137c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001380:	4b32      	ldr	r3, [pc, #200]	; (800144c <SystemInit+0xd0>)
 8001382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001386:	4a31      	ldr	r2, [pc, #196]	; (800144c <SystemInit+0xd0>)
 8001388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800138c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <SystemInit+0xd4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	2b02      	cmp	r3, #2
 800139a:	d807      	bhi.n	80013ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800139c:	4b2c      	ldr	r3, [pc, #176]	; (8001450 <SystemInit+0xd4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 030f 	bic.w	r3, r3, #15
 80013a4:	4a2a      	ldr	r2, [pc, #168]	; (8001450 <SystemInit+0xd4>)
 80013a6:	f043 0303 	orr.w	r3, r3, #3
 80013aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013ac:	4b29      	ldr	r3, [pc, #164]	; (8001454 <SystemInit+0xd8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a28      	ldr	r2, [pc, #160]	; (8001454 <SystemInit+0xd8>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013b8:	4b26      	ldr	r3, [pc, #152]	; (8001454 <SystemInit+0xd8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013be:	4b25      	ldr	r3, [pc, #148]	; (8001454 <SystemInit+0xd8>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4924      	ldr	r1, [pc, #144]	; (8001454 <SystemInit+0xd8>)
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <SystemInit+0xdc>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013ca:	4b21      	ldr	r3, [pc, #132]	; (8001450 <SystemInit+0xd4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d007      	beq.n	80013e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013d6:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <SystemInit+0xd4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 030f 	bic.w	r3, r3, #15
 80013de:	4a1c      	ldr	r2, [pc, #112]	; (8001450 <SystemInit+0xd4>)
 80013e0:	f043 0303 	orr.w	r3, r3, #3
 80013e4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <SystemInit+0xd8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <SystemInit+0xd8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <SystemInit+0xd8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <SystemInit+0xd8>)
 80013fa:	4a18      	ldr	r2, [pc, #96]	; (800145c <SystemInit+0xe0>)
 80013fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <SystemInit+0xd8>)
 8001400:	4a17      	ldr	r2, [pc, #92]	; (8001460 <SystemInit+0xe4>)
 8001402:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <SystemInit+0xd8>)
 8001406:	4a17      	ldr	r2, [pc, #92]	; (8001464 <SystemInit+0xe8>)
 8001408:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <SystemInit+0xd8>)
 800140c:	2200      	movs	r2, #0
 800140e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <SystemInit+0xd8>)
 8001412:	4a14      	ldr	r2, [pc, #80]	; (8001464 <SystemInit+0xe8>)
 8001414:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <SystemInit+0xd8>)
 8001418:	2200      	movs	r2, #0
 800141a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <SystemInit+0xd8>)
 800141e:	4a11      	ldr	r2, [pc, #68]	; (8001464 <SystemInit+0xe8>)
 8001420:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <SystemInit+0xd8>)
 8001424:	2200      	movs	r2, #0
 8001426:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <SystemInit+0xd8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a09      	ldr	r2, [pc, #36]	; (8001454 <SystemInit+0xd8>)
 800142e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001432:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <SystemInit+0xd8>)
 8001436:	2200      	movs	r2, #0
 8001438:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <SystemInit+0xec>)
 800143c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001440:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00
 8001450:	52002000 	.word	0x52002000
 8001454:	58024400 	.word	0x58024400
 8001458:	eaf6ed7f 	.word	0xeaf6ed7f
 800145c:	02020200 	.word	0x02020200
 8001460:	01ff0000 	.word	0x01ff0000
 8001464:	01010280 	.word	0x01010280
 8001468:	52004000 	.word	0x52004000

0800146c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <MX_USART3_UART_Init+0x90>)
 8001472:	4a23      	ldr	r2, [pc, #140]	; (8001500 <MX_USART3_UART_Init+0x94>)
 8001474:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <MX_USART3_UART_Init+0x90>)
 8001478:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800147c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <MX_USART3_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <MX_USART3_UART_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <MX_USART3_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_USART3_UART_Init+0x90>)
 8001492:	220c      	movs	r2, #12
 8001494:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <MX_USART3_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <MX_USART3_UART_Init+0x90>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <MX_USART3_UART_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_USART3_UART_Init+0x90>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <MX_USART3_UART_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014b4:	4811      	ldr	r0, [pc, #68]	; (80014fc <MX_USART3_UART_Init+0x90>)
 80014b6:	f007 f88b 	bl	80085d0 <HAL_UART_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014c0:	f7ff fe30 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c4:	2100      	movs	r1, #0
 80014c6:	480d      	ldr	r0, [pc, #52]	; (80014fc <MX_USART3_UART_Init+0x90>)
 80014c8:	f008 f9c2 	bl	8009850 <HAL_UARTEx_SetTxFifoThreshold>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014d2:	f7ff fe27 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d6:	2100      	movs	r1, #0
 80014d8:	4808      	ldr	r0, [pc, #32]	; (80014fc <MX_USART3_UART_Init+0x90>)
 80014da:	f008 f9f7 	bl	80098cc <HAL_UARTEx_SetRxFifoThreshold>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014e4:	f7ff fe1e 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	; (80014fc <MX_USART3_UART_Init+0x90>)
 80014ea:	f008 f978 	bl	80097de <HAL_UARTEx_DisableFifoMode>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014f4:	f7ff fe16 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	240961d8 	.word	0x240961d8
 8001500:	40004800 	.word	0x40004800

08001504 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b0b8      	sub	sp, #224	; 0xe0
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	22b8      	movs	r2, #184	; 0xb8
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f008 fde3 	bl	800a0f0 <memset>
  if(uartHandle->Instance==USART3)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a25      	ldr	r2, [pc, #148]	; (80015c4 <HAL_UART_MspInit+0xc0>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d142      	bne.n	80015ba <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001534:	2302      	movs	r3, #2
 8001536:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4618      	mov	r0, r3
 8001544:	f005 fd16 	bl	8006f74 <HAL_RCCEx_PeriphCLKConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800154e:	f7ff fde9 	bl	8001124 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <HAL_UART_MspInit+0xc4>)
 8001554:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001558:	4a1b      	ldr	r2, [pc, #108]	; (80015c8 <HAL_UART_MspInit+0xc4>)
 800155a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800155e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001562:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <HAL_UART_MspInit+0xc4>)
 8001564:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HAL_UART_MspInit+0xc4>)
 8001572:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001576:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <HAL_UART_MspInit+0xc4>)
 8001578:	f043 0308 	orr.w	r3, r3, #8
 800157c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_UART_MspInit+0xc4>)
 8001582:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800158e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001592:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015a8:	2307      	movs	r3, #7
 80015aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <HAL_UART_MspInit+0xc8>)
 80015b6:	f003 fce3 	bl	8004f80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015ba:	bf00      	nop
 80015bc:	37e0      	adds	r7, #224	; 0xe0
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40004800 	.word	0x40004800
 80015c8:	58024400 	.word	0x58024400
 80015cc:	58020c00 	.word	0x58020c00

080015d0 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001618 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015e4:	f7ff feca 	bl	800137c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ea:	490d      	ldr	r1, [pc, #52]	; (8001620 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015ec:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001600:	4c0a      	ldr	r4, [pc, #40]	; (800162c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800160e:	f008 fd4b 	bl	800a0a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001612:	f7ff fc5d 	bl	8000ed0 <main>
  bx  lr
 8001616:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001618:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800161c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001620:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001624:	0800c73c 	.word	0x0800c73c
  ldr r2, =_sbss
 8001628:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 800162c:	2409627c 	.word	0x2409627c

08001630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC_IRQHandler>
	...

08001634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163a:	2003      	movs	r0, #3
 800163c:	f000 f980 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001640:	f005 fac2 	bl	8006bc8 <HAL_RCC_GetSysClockFreq>
 8001644:	4602      	mov	r2, r0
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_Init+0x68>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	0a1b      	lsrs	r3, r3, #8
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	4913      	ldr	r1, [pc, #76]	; (80016a0 <HAL_Init+0x6c>)
 8001652:	5ccb      	ldrb	r3, [r1, r3]
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	fa22 f303 	lsr.w	r3, r2, r3
 800165c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <HAL_Init+0x68>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <HAL_Init+0x6c>)
 8001668:	5cd3      	ldrb	r3, [r2, r3]
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
 8001674:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_Init+0x70>)
 8001676:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001678:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <HAL_Init+0x74>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800167e:	200f      	movs	r0, #15
 8001680:	f000 f814 	bl	80016ac <HAL_InitTick>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e002      	b.n	8001694 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800168e:	f7ff fd83 	bl	8001198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	58024400 	.word	0x58024400
 80016a0:	0800b224 	.word	0x0800b224
 80016a4:	24000004 	.word	0x24000004
 80016a8:	24000000 	.word	0x24000000

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_InitTick+0x60>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e021      	b.n	8001704 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_InitTick+0x64>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_InitTick+0x60>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f965 	bl	80019a6 <HAL_SYSTICK_Config>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00e      	b.n	8001704 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d80a      	bhi.n	8001702 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f000 f92f 	bl	8001956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f8:	4a06      	ldr	r2, [pc, #24]	; (8001714 <HAL_InitTick+0x68>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2400000c 	.word	0x2400000c
 8001710:	24000000 	.word	0x24000000
 8001714:	24000008 	.word	0x24000008

08001718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x20>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x24>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a04      	ldr	r2, [pc, #16]	; (800173c <HAL_IncTick+0x24>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	2400000c 	.word	0x2400000c
 800173c:	24096268 	.word	0x24096268

08001740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <HAL_GetTick+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	24096268 	.word	0x24096268

08001758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff ffee 	bl	8001740 <HAL_GetTick>
 8001764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001770:	d005      	beq.n	800177e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_Delay+0x44>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800177e:	bf00      	nop
 8001780:	f7ff ffde 	bl	8001740 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	429a      	cmp	r2, r3
 800178e:	d8f7      	bhi.n	8001780 <HAL_Delay+0x28>
  {
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2400000c 	.word	0x2400000c

080017a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <__NVIC_SetPriorityGrouping+0x40>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017bc:	4013      	ands	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <__NVIC_SetPriorityGrouping+0x40>)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	60d3      	str	r3, [r2, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00
 80017e4:	05fa0000 	.word	0x05fa0000

080017e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <__NVIC_GetPriorityGrouping+0x18>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	f003 0307 	and.w	r3, r3, #7
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800180e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001812:	2b00      	cmp	r3, #0
 8001814:	db0b      	blt.n	800182e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	f003 021f 	and.w	r2, r3, #31
 800181c:	4907      	ldr	r1, [pc, #28]	; (800183c <__NVIC_EnableIRQ+0x38>)
 800181e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	2001      	movs	r0, #1
 8001826:	fa00 f202 	lsl.w	r2, r0, r2
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800190c:	d301      	bcc.n	8001912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190e:	2301      	movs	r3, #1
 8001910:	e00f      	b.n	8001932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <SysTick_Config+0x40>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191a:	210f      	movs	r1, #15
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f7ff ff8e 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <SysTick_Config+0x40>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <SysTick_Config+0x40>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff29 	bl	80017a0 <__NVIC_SetPriorityGrouping>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff40 	bl	80017e8 <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff90 	bl	8001894 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5f 	bl	8001840 <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff33 	bl	8001804 <__NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffa4 	bl	80018fc <SysTick_Config>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e069      	b.n	8001aa6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d102      	bne.n	80019e4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7fe fe8c 	bl	80006fc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6819      	ldr	r1, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <HAL_DCMI_Init+0xf0>)
 8001a06:	400b      	ands	r3, r1
 8001a08:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6819      	ldr	r1, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001a1e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001a2a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001a36:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001a42:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001a4e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b10      	cmp	r3, #16
 8001a5e:	d112      	bne.n	8001a86 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7f1b      	ldrb	r3, [r3, #28]
 8001a64:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7f5b      	ldrb	r3, [r3, #29]
 8001a6a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a6c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7f9b      	ldrb	r3, [r3, #30]
 8001a72:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001a74:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7fdb      	ldrb	r3, [r3, #31]
 8001a7c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001a82:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a84:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f042 021e 	orr.w	r2, r2, #30
 8001a94:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	ffe0f007 	.word	0xffe0f007

08001ab4 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_DCMI_Start_DMA+0x1c>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e0ab      	b.n	8001c28 <HAL_DCMI_Start_DMA+0x174>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001aee:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0202 	bic.w	r2, r2, #2
 8001afe:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6819      	ldr	r1, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b14:	4a46      	ldr	r2, [pc, #280]	; (8001c30 <HAL_DCMI_Start_DMA+0x17c>)
 8001b16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b1c:	4a45      	ldr	r2, [pc, #276]	; (8001c34 <HAL_DCMI_Start_DMA+0x180>)
 8001b1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b24:	2200      	movs	r2, #0
 8001b26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b46:	d219      	bcs.n	8001b7c <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3328      	adds	r3, #40	; 0x28
 8001b52:	4619      	mov	r1, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	f000 fd30 	bl	80025bc <HAL_DMA_Start_IT>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d055      	beq.n	8001c0e <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2240      	movs	r2, #64	; 0x40
 8001b66:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e055      	b.n	8001c28 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b80:	4a2b      	ldr	r2, [pc, #172]	; (8001c30 <HAL_DCMI_Start_DMA+0x17c>)
 8001b82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2201      	movs	r2, #1
 8001b88:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8001b96:	e009      	b.n	8001bac <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9c:	085a      	lsrs	r2, r3, #1
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba6:	005a      	lsls	r2, r3, #1
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb4:	d2f0      	bcs.n	8001b98 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bba:	1e9a      	subs	r2, r3, #2
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	3328      	adds	r3, #40	; 0x28
 8001bde:	4619      	mov	r1, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	f002 fd19 	bl	8004620 <HAL_DMAEx_MultiBufferStart_IT>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00c      	beq.n	8001c0e <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2240      	movs	r2, #64	; 0x40
 8001bf8:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00c      	b.n	8001c28 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 0201 	orr.w	r2, r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	08001d3d 	.word	0x08001d3d
 8001c34:	08001e63 	.word	0x08001e63

08001c38 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d016      	beq.n	8001c80 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2204      	movs	r2, #4
 8001c58:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	f043 0202 	orr.w	r2, r3, #2
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2204      	movs	r2, #4
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c72:	4a31      	ldr	r2, [pc, #196]	; (8001d38 <HAL_DCMI_IRQHandler+0x100>)
 8001c74:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 ff08 	bl	8002a90 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d016      	beq.n	8001cb8 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	f043 0201 	orr.w	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001caa:	4a23      	ldr	r2, [pc, #140]	; (8001d38 <HAL_DCMI_IRQHandler+0x100>)
 8001cac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 feec 	bl	8002a90 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2210      	movs	r2, #16
 8001cc8:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff f9f2 	bl	80010b4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2208      	movs	r2, #8
 8001ce0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff fa02 	bl	80010ec <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d01d      	beq.n	8001d2e <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d107      	bne.n	8001d10 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 021e 	bic.w	r2, r2, #30
 8001d0e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0201 	bic.w	r2, r2, #1
 8001d1e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2201      	movs	r2, #1
 8001d26:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff f9d1 	bl	80010d0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	08001e63 	.word	0x08001e63

08001d3c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d48:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d043      	beq.n	8001dda <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d5e:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d118      	bne.n	8001d9e <DCMI_DMAXferCplt+0x62>
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d015      	beq.n	8001d9e <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d84:	00da      	lsls	r2, r3, #3
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	4413      	add	r3, r2
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f002 ffa5 	bl	8004cdc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d96:	1e5a      	subs	r2, r3, #1
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	639a      	str	r2, [r3, #56]	; 0x38
 8001d9c:	e044      	b.n	8001e28 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d13c      	bne.n	8001e28 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc0:	00da      	lsls	r2, r3, #3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f002 ff87 	bl	8004cdc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd2:	1e5a      	subs	r2, r3, #1
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	639a      	str	r2, [r3, #56]	; 0x38
 8001dd8:	e026      	b.n	8001e28 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d006      	beq.n	8001df8 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	e017      	b.n	8001e28 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10f      	bne.n	8001e28 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0c:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e12:	0099      	lsls	r1, r3, #2
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	440a      	add	r2, r1
 8001e1e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d112      	bne.n	8001e5a <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d103      	bne.n	8001e5a <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b084      	sub	sp, #16
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6e:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d009      	beq.n	8001e8e <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f7ff f93a 	bl	8001108 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ea4:	f7ff fc4c 	bl	8001740 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e37f      	b.n	80025b4 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a66      	ldr	r2, [pc, #408]	; (8002054 <HAL_DMA_Init+0x1b8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d04a      	beq.n	8001f54 <HAL_DMA_Init+0xb8>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a65      	ldr	r2, [pc, #404]	; (8002058 <HAL_DMA_Init+0x1bc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d045      	beq.n	8001f54 <HAL_DMA_Init+0xb8>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a63      	ldr	r2, [pc, #396]	; (800205c <HAL_DMA_Init+0x1c0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d040      	beq.n	8001f54 <HAL_DMA_Init+0xb8>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a62      	ldr	r2, [pc, #392]	; (8002060 <HAL_DMA_Init+0x1c4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d03b      	beq.n	8001f54 <HAL_DMA_Init+0xb8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a60      	ldr	r2, [pc, #384]	; (8002064 <HAL_DMA_Init+0x1c8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d036      	beq.n	8001f54 <HAL_DMA_Init+0xb8>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a5f      	ldr	r2, [pc, #380]	; (8002068 <HAL_DMA_Init+0x1cc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d031      	beq.n	8001f54 <HAL_DMA_Init+0xb8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a5d      	ldr	r2, [pc, #372]	; (800206c <HAL_DMA_Init+0x1d0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d02c      	beq.n	8001f54 <HAL_DMA_Init+0xb8>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a5c      	ldr	r2, [pc, #368]	; (8002070 <HAL_DMA_Init+0x1d4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d027      	beq.n	8001f54 <HAL_DMA_Init+0xb8>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a5a      	ldr	r2, [pc, #360]	; (8002074 <HAL_DMA_Init+0x1d8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d022      	beq.n	8001f54 <HAL_DMA_Init+0xb8>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a59      	ldr	r2, [pc, #356]	; (8002078 <HAL_DMA_Init+0x1dc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d01d      	beq.n	8001f54 <HAL_DMA_Init+0xb8>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a57      	ldr	r2, [pc, #348]	; (800207c <HAL_DMA_Init+0x1e0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d018      	beq.n	8001f54 <HAL_DMA_Init+0xb8>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a56      	ldr	r2, [pc, #344]	; (8002080 <HAL_DMA_Init+0x1e4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d013      	beq.n	8001f54 <HAL_DMA_Init+0xb8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a54      	ldr	r2, [pc, #336]	; (8002084 <HAL_DMA_Init+0x1e8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00e      	beq.n	8001f54 <HAL_DMA_Init+0xb8>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a53      	ldr	r2, [pc, #332]	; (8002088 <HAL_DMA_Init+0x1ec>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d009      	beq.n	8001f54 <HAL_DMA_Init+0xb8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a51      	ldr	r2, [pc, #324]	; (800208c <HAL_DMA_Init+0x1f0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d004      	beq.n	8001f54 <HAL_DMA_Init+0xb8>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a50      	ldr	r2, [pc, #320]	; (8002090 <HAL_DMA_Init+0x1f4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d101      	bne.n	8001f58 <HAL_DMA_Init+0xbc>
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <HAL_DMA_Init+0xbe>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 813c 	beq.w	80021d8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a37      	ldr	r2, [pc, #220]	; (8002054 <HAL_DMA_Init+0x1b8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d04a      	beq.n	8002010 <HAL_DMA_Init+0x174>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a36      	ldr	r2, [pc, #216]	; (8002058 <HAL_DMA_Init+0x1bc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d045      	beq.n	8002010 <HAL_DMA_Init+0x174>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a34      	ldr	r2, [pc, #208]	; (800205c <HAL_DMA_Init+0x1c0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d040      	beq.n	8002010 <HAL_DMA_Init+0x174>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a33      	ldr	r2, [pc, #204]	; (8002060 <HAL_DMA_Init+0x1c4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d03b      	beq.n	8002010 <HAL_DMA_Init+0x174>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a31      	ldr	r2, [pc, #196]	; (8002064 <HAL_DMA_Init+0x1c8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d036      	beq.n	8002010 <HAL_DMA_Init+0x174>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a30      	ldr	r2, [pc, #192]	; (8002068 <HAL_DMA_Init+0x1cc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d031      	beq.n	8002010 <HAL_DMA_Init+0x174>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a2e      	ldr	r2, [pc, #184]	; (800206c <HAL_DMA_Init+0x1d0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d02c      	beq.n	8002010 <HAL_DMA_Init+0x174>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a2d      	ldr	r2, [pc, #180]	; (8002070 <HAL_DMA_Init+0x1d4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d027      	beq.n	8002010 <HAL_DMA_Init+0x174>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a2b      	ldr	r2, [pc, #172]	; (8002074 <HAL_DMA_Init+0x1d8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d022      	beq.n	8002010 <HAL_DMA_Init+0x174>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a2a      	ldr	r2, [pc, #168]	; (8002078 <HAL_DMA_Init+0x1dc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d01d      	beq.n	8002010 <HAL_DMA_Init+0x174>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a28      	ldr	r2, [pc, #160]	; (800207c <HAL_DMA_Init+0x1e0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d018      	beq.n	8002010 <HAL_DMA_Init+0x174>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a27      	ldr	r2, [pc, #156]	; (8002080 <HAL_DMA_Init+0x1e4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d013      	beq.n	8002010 <HAL_DMA_Init+0x174>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a25      	ldr	r2, [pc, #148]	; (8002084 <HAL_DMA_Init+0x1e8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00e      	beq.n	8002010 <HAL_DMA_Init+0x174>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a24      	ldr	r2, [pc, #144]	; (8002088 <HAL_DMA_Init+0x1ec>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d009      	beq.n	8002010 <HAL_DMA_Init+0x174>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a22      	ldr	r2, [pc, #136]	; (800208c <HAL_DMA_Init+0x1f0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d004      	beq.n	8002010 <HAL_DMA_Init+0x174>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a21      	ldr	r2, [pc, #132]	; (8002090 <HAL_DMA_Init+0x1f4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d108      	bne.n	8002022 <HAL_DMA_Init+0x186>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	e007      	b.n	8002032 <HAL_DMA_Init+0x196>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0201 	bic.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002032:	e02f      	b.n	8002094 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002034:	f7ff fb84 	bl	8001740 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b05      	cmp	r3, #5
 8002040:	d928      	bls.n	8002094 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2220      	movs	r2, #32
 8002046:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2203      	movs	r2, #3
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e2af      	b.n	80025b4 <HAL_DMA_Init+0x718>
 8002054:	40020010 	.word	0x40020010
 8002058:	40020028 	.word	0x40020028
 800205c:	40020040 	.word	0x40020040
 8002060:	40020058 	.word	0x40020058
 8002064:	40020070 	.word	0x40020070
 8002068:	40020088 	.word	0x40020088
 800206c:	400200a0 	.word	0x400200a0
 8002070:	400200b8 	.word	0x400200b8
 8002074:	40020410 	.word	0x40020410
 8002078:	40020428 	.word	0x40020428
 800207c:	40020440 	.word	0x40020440
 8002080:	40020458 	.word	0x40020458
 8002084:	40020470 	.word	0x40020470
 8002088:	40020488 	.word	0x40020488
 800208c:	400204a0 	.word	0x400204a0
 8002090:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1c8      	bne.n	8002034 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4b73      	ldr	r3, [pc, #460]	; (800227c <HAL_DMA_Init+0x3e0>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80020ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4313      	orrs	r3, r2
 80020de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d107      	bne.n	80020f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	4313      	orrs	r3, r2
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b28      	cmp	r3, #40	; 0x28
 80020fe:	d903      	bls.n	8002108 <HAL_DMA_Init+0x26c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b2e      	cmp	r3, #46	; 0x2e
 8002106:	d91f      	bls.n	8002148 <HAL_DMA_Init+0x2ac>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b3e      	cmp	r3, #62	; 0x3e
 800210e:	d903      	bls.n	8002118 <HAL_DMA_Init+0x27c>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b42      	cmp	r3, #66	; 0x42
 8002116:	d917      	bls.n	8002148 <HAL_DMA_Init+0x2ac>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b46      	cmp	r3, #70	; 0x46
 800211e:	d903      	bls.n	8002128 <HAL_DMA_Init+0x28c>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b48      	cmp	r3, #72	; 0x48
 8002126:	d90f      	bls.n	8002148 <HAL_DMA_Init+0x2ac>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b4e      	cmp	r3, #78	; 0x4e
 800212e:	d903      	bls.n	8002138 <HAL_DMA_Init+0x29c>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b52      	cmp	r3, #82	; 0x52
 8002136:	d907      	bls.n	8002148 <HAL_DMA_Init+0x2ac>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b73      	cmp	r3, #115	; 0x73
 800213e:	d905      	bls.n	800214c <HAL_DMA_Init+0x2b0>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b77      	cmp	r3, #119	; 0x77
 8002146:	d801      	bhi.n	800214c <HAL_DMA_Init+0x2b0>
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <HAL_DMA_Init+0x2b2>
 800214c:	2300      	movs	r3, #0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002158:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f023 0307 	bic.w	r3, r3, #7
 8002170:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	4313      	orrs	r3, r2
 800217a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	2b04      	cmp	r3, #4
 8002182:	d117      	bne.n	80021b4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	4313      	orrs	r3, r2
 800218c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00e      	beq.n	80021b4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f002 f8b8 	bl	800430c <DMA_CheckFifoParam>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d008      	beq.n	80021b4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2240      	movs	r2, #64	; 0x40
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e1ff      	b.n	80025b4 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f001 fff3 	bl	80041a8 <DMA_CalcBaseAndBitshift>
 80021c2:	4603      	mov	r3, r0
 80021c4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ca:	f003 031f 	and.w	r3, r3, #31
 80021ce:	223f      	movs	r2, #63	; 0x3f
 80021d0:	409a      	lsls	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	e0fe      	b.n	80023d6 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a28      	ldr	r2, [pc, #160]	; (8002280 <HAL_DMA_Init+0x3e4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d04a      	beq.n	8002278 <HAL_DMA_Init+0x3dc>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a27      	ldr	r2, [pc, #156]	; (8002284 <HAL_DMA_Init+0x3e8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d045      	beq.n	8002278 <HAL_DMA_Init+0x3dc>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a25      	ldr	r2, [pc, #148]	; (8002288 <HAL_DMA_Init+0x3ec>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d040      	beq.n	8002278 <HAL_DMA_Init+0x3dc>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a24      	ldr	r2, [pc, #144]	; (800228c <HAL_DMA_Init+0x3f0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d03b      	beq.n	8002278 <HAL_DMA_Init+0x3dc>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a22      	ldr	r2, [pc, #136]	; (8002290 <HAL_DMA_Init+0x3f4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d036      	beq.n	8002278 <HAL_DMA_Init+0x3dc>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a21      	ldr	r2, [pc, #132]	; (8002294 <HAL_DMA_Init+0x3f8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d031      	beq.n	8002278 <HAL_DMA_Init+0x3dc>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1f      	ldr	r2, [pc, #124]	; (8002298 <HAL_DMA_Init+0x3fc>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d02c      	beq.n	8002278 <HAL_DMA_Init+0x3dc>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1e      	ldr	r2, [pc, #120]	; (800229c <HAL_DMA_Init+0x400>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d027      	beq.n	8002278 <HAL_DMA_Init+0x3dc>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <HAL_DMA_Init+0x404>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d022      	beq.n	8002278 <HAL_DMA_Init+0x3dc>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1b      	ldr	r2, [pc, #108]	; (80022a4 <HAL_DMA_Init+0x408>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d01d      	beq.n	8002278 <HAL_DMA_Init+0x3dc>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a19      	ldr	r2, [pc, #100]	; (80022a8 <HAL_DMA_Init+0x40c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d018      	beq.n	8002278 <HAL_DMA_Init+0x3dc>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a18      	ldr	r2, [pc, #96]	; (80022ac <HAL_DMA_Init+0x410>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d013      	beq.n	8002278 <HAL_DMA_Init+0x3dc>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a16      	ldr	r2, [pc, #88]	; (80022b0 <HAL_DMA_Init+0x414>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00e      	beq.n	8002278 <HAL_DMA_Init+0x3dc>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a15      	ldr	r2, [pc, #84]	; (80022b4 <HAL_DMA_Init+0x418>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d009      	beq.n	8002278 <HAL_DMA_Init+0x3dc>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a13      	ldr	r2, [pc, #76]	; (80022b8 <HAL_DMA_Init+0x41c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d004      	beq.n	8002278 <HAL_DMA_Init+0x3dc>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <HAL_DMA_Init+0x420>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d123      	bne.n	80022c0 <HAL_DMA_Init+0x424>
 8002278:	2301      	movs	r3, #1
 800227a:	e022      	b.n	80022c2 <HAL_DMA_Init+0x426>
 800227c:	fe10803f 	.word	0xfe10803f
 8002280:	48022c08 	.word	0x48022c08
 8002284:	48022c1c 	.word	0x48022c1c
 8002288:	48022c30 	.word	0x48022c30
 800228c:	48022c44 	.word	0x48022c44
 8002290:	48022c58 	.word	0x48022c58
 8002294:	48022c6c 	.word	0x48022c6c
 8002298:	48022c80 	.word	0x48022c80
 800229c:	48022c94 	.word	0x48022c94
 80022a0:	58025408 	.word	0x58025408
 80022a4:	5802541c 	.word	0x5802541c
 80022a8:	58025430 	.word	0x58025430
 80022ac:	58025444 	.word	0x58025444
 80022b0:	58025458 	.word	0x58025458
 80022b4:	5802546c 	.word	0x5802546c
 80022b8:	58025480 	.word	0x58025480
 80022bc:	58025494 	.word	0x58025494
 80022c0:	2300      	movs	r3, #0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d07e      	beq.n	80023c4 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a80      	ldr	r2, [pc, #512]	; (80024cc <HAL_DMA_Init+0x630>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d021      	beq.n	8002314 <HAL_DMA_Init+0x478>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a7e      	ldr	r2, [pc, #504]	; (80024d0 <HAL_DMA_Init+0x634>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01c      	beq.n	8002314 <HAL_DMA_Init+0x478>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a7d      	ldr	r2, [pc, #500]	; (80024d4 <HAL_DMA_Init+0x638>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d017      	beq.n	8002314 <HAL_DMA_Init+0x478>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a7b      	ldr	r2, [pc, #492]	; (80024d8 <HAL_DMA_Init+0x63c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d012      	beq.n	8002314 <HAL_DMA_Init+0x478>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a7a      	ldr	r2, [pc, #488]	; (80024dc <HAL_DMA_Init+0x640>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00d      	beq.n	8002314 <HAL_DMA_Init+0x478>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a78      	ldr	r2, [pc, #480]	; (80024e0 <HAL_DMA_Init+0x644>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d008      	beq.n	8002314 <HAL_DMA_Init+0x478>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a77      	ldr	r2, [pc, #476]	; (80024e4 <HAL_DMA_Init+0x648>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d003      	beq.n	8002314 <HAL_DMA_Init+0x478>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a75      	ldr	r2, [pc, #468]	; (80024e8 <HAL_DMA_Init+0x64c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2202      	movs	r2, #2
 800231a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4b6e      	ldr	r3, [pc, #440]	; (80024ec <HAL_DMA_Init+0x650>)
 8002332:	4013      	ands	r3, r2
 8002334:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b40      	cmp	r3, #64	; 0x40
 800233c:	d008      	beq.n	8002350 <HAL_DMA_Init+0x4b4>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b80      	cmp	r3, #128	; 0x80
 8002344:	d102      	bne.n	800234c <HAL_DMA_Init+0x4b0>
 8002346:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800234a:	e002      	b.n	8002352 <HAL_DMA_Init+0x4b6>
 800234c:	2300      	movs	r3, #0
 800234e:	e000      	b.n	8002352 <HAL_DMA_Init+0x4b6>
 8002350:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68d2      	ldr	r2, [r2, #12]
 8002356:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002358:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002360:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002368:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002370:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002378:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002380:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4313      	orrs	r3, r2
 8002386:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	4b56      	ldr	r3, [pc, #344]	; (80024f0 <HAL_DMA_Init+0x654>)
 8002398:	4413      	add	r3, r2
 800239a:	4a56      	ldr	r2, [pc, #344]	; (80024f4 <HAL_DMA_Init+0x658>)
 800239c:	fba2 2303 	umull	r2, r3, r2, r3
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	009a      	lsls	r2, r3, #2
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f001 fefd 	bl	80041a8 <DMA_CalcBaseAndBitshift>
 80023ae:	4603      	mov	r3, r0
 80023b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	2201      	movs	r2, #1
 80023bc:	409a      	lsls	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	e008      	b.n	80023d6 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2240      	movs	r2, #64	; 0x40
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2203      	movs	r2, #3
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0ee      	b.n	80025b4 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a47      	ldr	r2, [pc, #284]	; (80024f8 <HAL_DMA_Init+0x65c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d072      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a45      	ldr	r2, [pc, #276]	; (80024fc <HAL_DMA_Init+0x660>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d06d      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a44      	ldr	r2, [pc, #272]	; (8002500 <HAL_DMA_Init+0x664>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d068      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a42      	ldr	r2, [pc, #264]	; (8002504 <HAL_DMA_Init+0x668>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d063      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a41      	ldr	r2, [pc, #260]	; (8002508 <HAL_DMA_Init+0x66c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d05e      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a3f      	ldr	r2, [pc, #252]	; (800250c <HAL_DMA_Init+0x670>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d059      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a3e      	ldr	r2, [pc, #248]	; (8002510 <HAL_DMA_Init+0x674>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d054      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a3c      	ldr	r2, [pc, #240]	; (8002514 <HAL_DMA_Init+0x678>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d04f      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a3b      	ldr	r2, [pc, #236]	; (8002518 <HAL_DMA_Init+0x67c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d04a      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a39      	ldr	r2, [pc, #228]	; (800251c <HAL_DMA_Init+0x680>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d045      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a38      	ldr	r2, [pc, #224]	; (8002520 <HAL_DMA_Init+0x684>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d040      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a36      	ldr	r2, [pc, #216]	; (8002524 <HAL_DMA_Init+0x688>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d03b      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a35      	ldr	r2, [pc, #212]	; (8002528 <HAL_DMA_Init+0x68c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d036      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a33      	ldr	r2, [pc, #204]	; (800252c <HAL_DMA_Init+0x690>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d031      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a32      	ldr	r2, [pc, #200]	; (8002530 <HAL_DMA_Init+0x694>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d02c      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a30      	ldr	r2, [pc, #192]	; (8002534 <HAL_DMA_Init+0x698>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d027      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a14      	ldr	r2, [pc, #80]	; (80024cc <HAL_DMA_Init+0x630>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d022      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <HAL_DMA_Init+0x634>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01d      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a11      	ldr	r2, [pc, #68]	; (80024d4 <HAL_DMA_Init+0x638>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d018      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0f      	ldr	r2, [pc, #60]	; (80024d8 <HAL_DMA_Init+0x63c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d013      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a0e      	ldr	r2, [pc, #56]	; (80024dc <HAL_DMA_Init+0x640>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d00e      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0c      	ldr	r2, [pc, #48]	; (80024e0 <HAL_DMA_Init+0x644>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d009      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <HAL_DMA_Init+0x648>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_DMA_Init+0x62a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <HAL_DMA_Init+0x64c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d138      	bne.n	8002538 <HAL_DMA_Init+0x69c>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e037      	b.n	800253a <HAL_DMA_Init+0x69e>
 80024ca:	bf00      	nop
 80024cc:	58025408 	.word	0x58025408
 80024d0:	5802541c 	.word	0x5802541c
 80024d4:	58025430 	.word	0x58025430
 80024d8:	58025444 	.word	0x58025444
 80024dc:	58025458 	.word	0x58025458
 80024e0:	5802546c 	.word	0x5802546c
 80024e4:	58025480 	.word	0x58025480
 80024e8:	58025494 	.word	0x58025494
 80024ec:	fffe000f 	.word	0xfffe000f
 80024f0:	a7fdabf8 	.word	0xa7fdabf8
 80024f4:	cccccccd 	.word	0xcccccccd
 80024f8:	40020010 	.word	0x40020010
 80024fc:	40020028 	.word	0x40020028
 8002500:	40020040 	.word	0x40020040
 8002504:	40020058 	.word	0x40020058
 8002508:	40020070 	.word	0x40020070
 800250c:	40020088 	.word	0x40020088
 8002510:	400200a0 	.word	0x400200a0
 8002514:	400200b8 	.word	0x400200b8
 8002518:	40020410 	.word	0x40020410
 800251c:	40020428 	.word	0x40020428
 8002520:	40020440 	.word	0x40020440
 8002524:	40020458 	.word	0x40020458
 8002528:	40020470 	.word	0x40020470
 800252c:	40020488 	.word	0x40020488
 8002530:	400204a0 	.word	0x400204a0
 8002534:	400204b8 	.word	0x400204b8
 8002538:	2300      	movs	r3, #0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d032      	beq.n	80025a4 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f001 ff60 	bl	8004404 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b80      	cmp	r3, #128	; 0x80
 800254a:	d102      	bne.n	8002552 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002566:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d010      	beq.n	8002592 <HAL_DMA_Init+0x6f6>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b08      	cmp	r3, #8
 8002576:	d80c      	bhi.n	8002592 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f001 ffdd 	bl	8004538 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	e008      	b.n	80025a4 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e226      	b.n	8002a26 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_DMA_Start_IT+0x2a>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e21f      	b.n	8002a26 <HAL_DMA_Start_IT+0x46a>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	f040 820a 	bne.w	8002a10 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a68      	ldr	r2, [pc, #416]	; (80027b0 <HAL_DMA_Start_IT+0x1f4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d04a      	beq.n	80026aa <HAL_DMA_Start_IT+0xee>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a66      	ldr	r2, [pc, #408]	; (80027b4 <HAL_DMA_Start_IT+0x1f8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d045      	beq.n	80026aa <HAL_DMA_Start_IT+0xee>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a65      	ldr	r2, [pc, #404]	; (80027b8 <HAL_DMA_Start_IT+0x1fc>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d040      	beq.n	80026aa <HAL_DMA_Start_IT+0xee>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a63      	ldr	r2, [pc, #396]	; (80027bc <HAL_DMA_Start_IT+0x200>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d03b      	beq.n	80026aa <HAL_DMA_Start_IT+0xee>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a62      	ldr	r2, [pc, #392]	; (80027c0 <HAL_DMA_Start_IT+0x204>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d036      	beq.n	80026aa <HAL_DMA_Start_IT+0xee>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a60      	ldr	r2, [pc, #384]	; (80027c4 <HAL_DMA_Start_IT+0x208>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d031      	beq.n	80026aa <HAL_DMA_Start_IT+0xee>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a5f      	ldr	r2, [pc, #380]	; (80027c8 <HAL_DMA_Start_IT+0x20c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d02c      	beq.n	80026aa <HAL_DMA_Start_IT+0xee>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a5d      	ldr	r2, [pc, #372]	; (80027cc <HAL_DMA_Start_IT+0x210>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d027      	beq.n	80026aa <HAL_DMA_Start_IT+0xee>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a5c      	ldr	r2, [pc, #368]	; (80027d0 <HAL_DMA_Start_IT+0x214>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d022      	beq.n	80026aa <HAL_DMA_Start_IT+0xee>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a5a      	ldr	r2, [pc, #360]	; (80027d4 <HAL_DMA_Start_IT+0x218>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d01d      	beq.n	80026aa <HAL_DMA_Start_IT+0xee>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a59      	ldr	r2, [pc, #356]	; (80027d8 <HAL_DMA_Start_IT+0x21c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d018      	beq.n	80026aa <HAL_DMA_Start_IT+0xee>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a57      	ldr	r2, [pc, #348]	; (80027dc <HAL_DMA_Start_IT+0x220>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d013      	beq.n	80026aa <HAL_DMA_Start_IT+0xee>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a56      	ldr	r2, [pc, #344]	; (80027e0 <HAL_DMA_Start_IT+0x224>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d00e      	beq.n	80026aa <HAL_DMA_Start_IT+0xee>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a54      	ldr	r2, [pc, #336]	; (80027e4 <HAL_DMA_Start_IT+0x228>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d009      	beq.n	80026aa <HAL_DMA_Start_IT+0xee>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a53      	ldr	r2, [pc, #332]	; (80027e8 <HAL_DMA_Start_IT+0x22c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d004      	beq.n	80026aa <HAL_DMA_Start_IT+0xee>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a51      	ldr	r2, [pc, #324]	; (80027ec <HAL_DMA_Start_IT+0x230>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d108      	bne.n	80026bc <HAL_DMA_Start_IT+0x100>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0201 	bic.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e007      	b.n	80026cc <HAL_DMA_Start_IT+0x110>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f001 fb84 	bl	8003de0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a34      	ldr	r2, [pc, #208]	; (80027b0 <HAL_DMA_Start_IT+0x1f4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d04a      	beq.n	8002778 <HAL_DMA_Start_IT+0x1bc>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a33      	ldr	r2, [pc, #204]	; (80027b4 <HAL_DMA_Start_IT+0x1f8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d045      	beq.n	8002778 <HAL_DMA_Start_IT+0x1bc>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a31      	ldr	r2, [pc, #196]	; (80027b8 <HAL_DMA_Start_IT+0x1fc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d040      	beq.n	8002778 <HAL_DMA_Start_IT+0x1bc>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a30      	ldr	r2, [pc, #192]	; (80027bc <HAL_DMA_Start_IT+0x200>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d03b      	beq.n	8002778 <HAL_DMA_Start_IT+0x1bc>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a2e      	ldr	r2, [pc, #184]	; (80027c0 <HAL_DMA_Start_IT+0x204>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d036      	beq.n	8002778 <HAL_DMA_Start_IT+0x1bc>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a2d      	ldr	r2, [pc, #180]	; (80027c4 <HAL_DMA_Start_IT+0x208>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d031      	beq.n	8002778 <HAL_DMA_Start_IT+0x1bc>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a2b      	ldr	r2, [pc, #172]	; (80027c8 <HAL_DMA_Start_IT+0x20c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d02c      	beq.n	8002778 <HAL_DMA_Start_IT+0x1bc>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a2a      	ldr	r2, [pc, #168]	; (80027cc <HAL_DMA_Start_IT+0x210>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d027      	beq.n	8002778 <HAL_DMA_Start_IT+0x1bc>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a28      	ldr	r2, [pc, #160]	; (80027d0 <HAL_DMA_Start_IT+0x214>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d022      	beq.n	8002778 <HAL_DMA_Start_IT+0x1bc>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <HAL_DMA_Start_IT+0x218>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d01d      	beq.n	8002778 <HAL_DMA_Start_IT+0x1bc>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a25      	ldr	r2, [pc, #148]	; (80027d8 <HAL_DMA_Start_IT+0x21c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d018      	beq.n	8002778 <HAL_DMA_Start_IT+0x1bc>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a24      	ldr	r2, [pc, #144]	; (80027dc <HAL_DMA_Start_IT+0x220>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d013      	beq.n	8002778 <HAL_DMA_Start_IT+0x1bc>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a22      	ldr	r2, [pc, #136]	; (80027e0 <HAL_DMA_Start_IT+0x224>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00e      	beq.n	8002778 <HAL_DMA_Start_IT+0x1bc>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a21      	ldr	r2, [pc, #132]	; (80027e4 <HAL_DMA_Start_IT+0x228>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d009      	beq.n	8002778 <HAL_DMA_Start_IT+0x1bc>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1f      	ldr	r2, [pc, #124]	; (80027e8 <HAL_DMA_Start_IT+0x22c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d004      	beq.n	8002778 <HAL_DMA_Start_IT+0x1bc>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a1e      	ldr	r2, [pc, #120]	; (80027ec <HAL_DMA_Start_IT+0x230>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d101      	bne.n	800277c <HAL_DMA_Start_IT+0x1c0>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <HAL_DMA_Start_IT+0x1c2>
 800277c:	2300      	movs	r3, #0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d036      	beq.n	80027f0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 021e 	bic.w	r2, r3, #30
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0216 	orr.w	r2, r2, #22
 8002794:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	2b00      	cmp	r3, #0
 800279c:	d03e      	beq.n	800281c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0208 	orr.w	r2, r2, #8
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	e035      	b.n	800281c <HAL_DMA_Start_IT+0x260>
 80027b0:	40020010 	.word	0x40020010
 80027b4:	40020028 	.word	0x40020028
 80027b8:	40020040 	.word	0x40020040
 80027bc:	40020058 	.word	0x40020058
 80027c0:	40020070 	.word	0x40020070
 80027c4:	40020088 	.word	0x40020088
 80027c8:	400200a0 	.word	0x400200a0
 80027cc:	400200b8 	.word	0x400200b8
 80027d0:	40020410 	.word	0x40020410
 80027d4:	40020428 	.word	0x40020428
 80027d8:	40020440 	.word	0x40020440
 80027dc:	40020458 	.word	0x40020458
 80027e0:	40020470 	.word	0x40020470
 80027e4:	40020488 	.word	0x40020488
 80027e8:	400204a0 	.word	0x400204a0
 80027ec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 020e 	bic.w	r2, r3, #14
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 020a 	orr.w	r2, r2, #10
 8002802:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0204 	orr.w	r2, r2, #4
 800281a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a83      	ldr	r2, [pc, #524]	; (8002a30 <HAL_DMA_Start_IT+0x474>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d072      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a82      	ldr	r2, [pc, #520]	; (8002a34 <HAL_DMA_Start_IT+0x478>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d06d      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a80      	ldr	r2, [pc, #512]	; (8002a38 <HAL_DMA_Start_IT+0x47c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d068      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a7f      	ldr	r2, [pc, #508]	; (8002a3c <HAL_DMA_Start_IT+0x480>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d063      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a7d      	ldr	r2, [pc, #500]	; (8002a40 <HAL_DMA_Start_IT+0x484>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d05e      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a7c      	ldr	r2, [pc, #496]	; (8002a44 <HAL_DMA_Start_IT+0x488>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d059      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a7a      	ldr	r2, [pc, #488]	; (8002a48 <HAL_DMA_Start_IT+0x48c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d054      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a79      	ldr	r2, [pc, #484]	; (8002a4c <HAL_DMA_Start_IT+0x490>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d04f      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a77      	ldr	r2, [pc, #476]	; (8002a50 <HAL_DMA_Start_IT+0x494>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d04a      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a76      	ldr	r2, [pc, #472]	; (8002a54 <HAL_DMA_Start_IT+0x498>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d045      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a74      	ldr	r2, [pc, #464]	; (8002a58 <HAL_DMA_Start_IT+0x49c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d040      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a73      	ldr	r2, [pc, #460]	; (8002a5c <HAL_DMA_Start_IT+0x4a0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d03b      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a71      	ldr	r2, [pc, #452]	; (8002a60 <HAL_DMA_Start_IT+0x4a4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d036      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a70      	ldr	r2, [pc, #448]	; (8002a64 <HAL_DMA_Start_IT+0x4a8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d031      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a6e      	ldr	r2, [pc, #440]	; (8002a68 <HAL_DMA_Start_IT+0x4ac>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d02c      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a6d      	ldr	r2, [pc, #436]	; (8002a6c <HAL_DMA_Start_IT+0x4b0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d027      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a6b      	ldr	r2, [pc, #428]	; (8002a70 <HAL_DMA_Start_IT+0x4b4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d022      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6a      	ldr	r2, [pc, #424]	; (8002a74 <HAL_DMA_Start_IT+0x4b8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d01d      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a68      	ldr	r2, [pc, #416]	; (8002a78 <HAL_DMA_Start_IT+0x4bc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d018      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a67      	ldr	r2, [pc, #412]	; (8002a7c <HAL_DMA_Start_IT+0x4c0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d013      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a65      	ldr	r2, [pc, #404]	; (8002a80 <HAL_DMA_Start_IT+0x4c4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00e      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a64      	ldr	r2, [pc, #400]	; (8002a84 <HAL_DMA_Start_IT+0x4c8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d009      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a62      	ldr	r2, [pc, #392]	; (8002a88 <HAL_DMA_Start_IT+0x4cc>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d004      	beq.n	800290c <HAL_DMA_Start_IT+0x350>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a61      	ldr	r2, [pc, #388]	; (8002a8c <HAL_DMA_Start_IT+0x4d0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d101      	bne.n	8002910 <HAL_DMA_Start_IT+0x354>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_DMA_Start_IT+0x356>
 8002910:	2300      	movs	r3, #0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d01a      	beq.n	800294c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002932:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002938:	2b00      	cmp	r3, #0
 800293a:	d007      	beq.n	800294c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800294a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a37      	ldr	r2, [pc, #220]	; (8002a30 <HAL_DMA_Start_IT+0x474>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d04a      	beq.n	80029ec <HAL_DMA_Start_IT+0x430>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a36      	ldr	r2, [pc, #216]	; (8002a34 <HAL_DMA_Start_IT+0x478>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d045      	beq.n	80029ec <HAL_DMA_Start_IT+0x430>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a34      	ldr	r2, [pc, #208]	; (8002a38 <HAL_DMA_Start_IT+0x47c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d040      	beq.n	80029ec <HAL_DMA_Start_IT+0x430>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a33      	ldr	r2, [pc, #204]	; (8002a3c <HAL_DMA_Start_IT+0x480>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d03b      	beq.n	80029ec <HAL_DMA_Start_IT+0x430>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a31      	ldr	r2, [pc, #196]	; (8002a40 <HAL_DMA_Start_IT+0x484>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d036      	beq.n	80029ec <HAL_DMA_Start_IT+0x430>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a30      	ldr	r2, [pc, #192]	; (8002a44 <HAL_DMA_Start_IT+0x488>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d031      	beq.n	80029ec <HAL_DMA_Start_IT+0x430>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a2e      	ldr	r2, [pc, #184]	; (8002a48 <HAL_DMA_Start_IT+0x48c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d02c      	beq.n	80029ec <HAL_DMA_Start_IT+0x430>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a2d      	ldr	r2, [pc, #180]	; (8002a4c <HAL_DMA_Start_IT+0x490>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d027      	beq.n	80029ec <HAL_DMA_Start_IT+0x430>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a2b      	ldr	r2, [pc, #172]	; (8002a50 <HAL_DMA_Start_IT+0x494>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d022      	beq.n	80029ec <HAL_DMA_Start_IT+0x430>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a2a      	ldr	r2, [pc, #168]	; (8002a54 <HAL_DMA_Start_IT+0x498>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d01d      	beq.n	80029ec <HAL_DMA_Start_IT+0x430>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a28      	ldr	r2, [pc, #160]	; (8002a58 <HAL_DMA_Start_IT+0x49c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d018      	beq.n	80029ec <HAL_DMA_Start_IT+0x430>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a27      	ldr	r2, [pc, #156]	; (8002a5c <HAL_DMA_Start_IT+0x4a0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d013      	beq.n	80029ec <HAL_DMA_Start_IT+0x430>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a25      	ldr	r2, [pc, #148]	; (8002a60 <HAL_DMA_Start_IT+0x4a4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00e      	beq.n	80029ec <HAL_DMA_Start_IT+0x430>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a24      	ldr	r2, [pc, #144]	; (8002a64 <HAL_DMA_Start_IT+0x4a8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d009      	beq.n	80029ec <HAL_DMA_Start_IT+0x430>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a22      	ldr	r2, [pc, #136]	; (8002a68 <HAL_DMA_Start_IT+0x4ac>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d004      	beq.n	80029ec <HAL_DMA_Start_IT+0x430>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a21      	ldr	r2, [pc, #132]	; (8002a6c <HAL_DMA_Start_IT+0x4b0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d108      	bne.n	80029fe <HAL_DMA_Start_IT+0x442>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	e012      	b.n	8002a24 <HAL_DMA_Start_IT+0x468>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e009      	b.n	8002a24 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40020010 	.word	0x40020010
 8002a34:	40020028 	.word	0x40020028
 8002a38:	40020040 	.word	0x40020040
 8002a3c:	40020058 	.word	0x40020058
 8002a40:	40020070 	.word	0x40020070
 8002a44:	40020088 	.word	0x40020088
 8002a48:	400200a0 	.word	0x400200a0
 8002a4c:	400200b8 	.word	0x400200b8
 8002a50:	40020410 	.word	0x40020410
 8002a54:	40020428 	.word	0x40020428
 8002a58:	40020440 	.word	0x40020440
 8002a5c:	40020458 	.word	0x40020458
 8002a60:	40020470 	.word	0x40020470
 8002a64:	40020488 	.word	0x40020488
 8002a68:	400204a0 	.word	0x400204a0
 8002a6c:	400204b8 	.word	0x400204b8
 8002a70:	58025408 	.word	0x58025408
 8002a74:	5802541c 	.word	0x5802541c
 8002a78:	58025430 	.word	0x58025430
 8002a7c:	58025444 	.word	0x58025444
 8002a80:	58025458 	.word	0x58025458
 8002a84:	5802546c 	.word	0x5802546c
 8002a88:	58025480 	.word	0x58025480
 8002a8c:	58025494 	.word	0x58025494

08002a90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e237      	b.n	8002f12 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d004      	beq.n	8002ab8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2280      	movs	r2, #128	; 0x80
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e22c      	b.n	8002f12 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a5c      	ldr	r2, [pc, #368]	; (8002c30 <HAL_DMA_Abort_IT+0x1a0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d04a      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a5b      	ldr	r2, [pc, #364]	; (8002c34 <HAL_DMA_Abort_IT+0x1a4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d045      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a59      	ldr	r2, [pc, #356]	; (8002c38 <HAL_DMA_Abort_IT+0x1a8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d040      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a58      	ldr	r2, [pc, #352]	; (8002c3c <HAL_DMA_Abort_IT+0x1ac>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d03b      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a56      	ldr	r2, [pc, #344]	; (8002c40 <HAL_DMA_Abort_IT+0x1b0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d036      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a55      	ldr	r2, [pc, #340]	; (8002c44 <HAL_DMA_Abort_IT+0x1b4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d031      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a53      	ldr	r2, [pc, #332]	; (8002c48 <HAL_DMA_Abort_IT+0x1b8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d02c      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a52      	ldr	r2, [pc, #328]	; (8002c4c <HAL_DMA_Abort_IT+0x1bc>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d027      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a50      	ldr	r2, [pc, #320]	; (8002c50 <HAL_DMA_Abort_IT+0x1c0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d022      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a4f      	ldr	r2, [pc, #316]	; (8002c54 <HAL_DMA_Abort_IT+0x1c4>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d01d      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a4d      	ldr	r2, [pc, #308]	; (8002c58 <HAL_DMA_Abort_IT+0x1c8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d018      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a4c      	ldr	r2, [pc, #304]	; (8002c5c <HAL_DMA_Abort_IT+0x1cc>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d013      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a4a      	ldr	r2, [pc, #296]	; (8002c60 <HAL_DMA_Abort_IT+0x1d0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00e      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a49      	ldr	r2, [pc, #292]	; (8002c64 <HAL_DMA_Abort_IT+0x1d4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d009      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a47      	ldr	r2, [pc, #284]	; (8002c68 <HAL_DMA_Abort_IT+0x1d8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d004      	beq.n	8002b58 <HAL_DMA_Abort_IT+0xc8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a46      	ldr	r2, [pc, #280]	; (8002c6c <HAL_DMA_Abort_IT+0x1dc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d101      	bne.n	8002b5c <HAL_DMA_Abort_IT+0xcc>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <HAL_DMA_Abort_IT+0xce>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 8086 	beq.w	8002c70 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2204      	movs	r2, #4
 8002b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a2f      	ldr	r2, [pc, #188]	; (8002c30 <HAL_DMA_Abort_IT+0x1a0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d04a      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x17c>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a2e      	ldr	r2, [pc, #184]	; (8002c34 <HAL_DMA_Abort_IT+0x1a4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d045      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x17c>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a2c      	ldr	r2, [pc, #176]	; (8002c38 <HAL_DMA_Abort_IT+0x1a8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d040      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x17c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a2b      	ldr	r2, [pc, #172]	; (8002c3c <HAL_DMA_Abort_IT+0x1ac>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d03b      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x17c>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a29      	ldr	r2, [pc, #164]	; (8002c40 <HAL_DMA_Abort_IT+0x1b0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d036      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x17c>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a28      	ldr	r2, [pc, #160]	; (8002c44 <HAL_DMA_Abort_IT+0x1b4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d031      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x17c>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a26      	ldr	r2, [pc, #152]	; (8002c48 <HAL_DMA_Abort_IT+0x1b8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d02c      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x17c>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a25      	ldr	r2, [pc, #148]	; (8002c4c <HAL_DMA_Abort_IT+0x1bc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d027      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x17c>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a23      	ldr	r2, [pc, #140]	; (8002c50 <HAL_DMA_Abort_IT+0x1c0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d022      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x17c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a22      	ldr	r2, [pc, #136]	; (8002c54 <HAL_DMA_Abort_IT+0x1c4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d01d      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x17c>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a20      	ldr	r2, [pc, #128]	; (8002c58 <HAL_DMA_Abort_IT+0x1c8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d018      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x17c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1f      	ldr	r2, [pc, #124]	; (8002c5c <HAL_DMA_Abort_IT+0x1cc>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d013      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x17c>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <HAL_DMA_Abort_IT+0x1d0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00e      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x17c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1c      	ldr	r2, [pc, #112]	; (8002c64 <HAL_DMA_Abort_IT+0x1d4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d009      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x17c>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1a      	ldr	r2, [pc, #104]	; (8002c68 <HAL_DMA_Abort_IT+0x1d8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x17c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a19      	ldr	r2, [pc, #100]	; (8002c6c <HAL_DMA_Abort_IT+0x1dc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d108      	bne.n	8002c1e <HAL_DMA_Abort_IT+0x18e>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	e178      	b.n	8002f10 <HAL_DMA_Abort_IT+0x480>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0201 	bic.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e16f      	b.n	8002f10 <HAL_DMA_Abort_IT+0x480>
 8002c30:	40020010 	.word	0x40020010
 8002c34:	40020028 	.word	0x40020028
 8002c38:	40020040 	.word	0x40020040
 8002c3c:	40020058 	.word	0x40020058
 8002c40:	40020070 	.word	0x40020070
 8002c44:	40020088 	.word	0x40020088
 8002c48:	400200a0 	.word	0x400200a0
 8002c4c:	400200b8 	.word	0x400200b8
 8002c50:	40020410 	.word	0x40020410
 8002c54:	40020428 	.word	0x40020428
 8002c58:	40020440 	.word	0x40020440
 8002c5c:	40020458 	.word	0x40020458
 8002c60:	40020470 	.word	0x40020470
 8002c64:	40020488 	.word	0x40020488
 8002c68:	400204a0 	.word	0x400204a0
 8002c6c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 020e 	bic.w	r2, r2, #14
 8002c7e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a6c      	ldr	r2, [pc, #432]	; (8002e38 <HAL_DMA_Abort_IT+0x3a8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d04a      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x290>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a6b      	ldr	r2, [pc, #428]	; (8002e3c <HAL_DMA_Abort_IT+0x3ac>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d045      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x290>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a69      	ldr	r2, [pc, #420]	; (8002e40 <HAL_DMA_Abort_IT+0x3b0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d040      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x290>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a68      	ldr	r2, [pc, #416]	; (8002e44 <HAL_DMA_Abort_IT+0x3b4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d03b      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x290>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a66      	ldr	r2, [pc, #408]	; (8002e48 <HAL_DMA_Abort_IT+0x3b8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d036      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x290>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a65      	ldr	r2, [pc, #404]	; (8002e4c <HAL_DMA_Abort_IT+0x3bc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d031      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x290>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a63      	ldr	r2, [pc, #396]	; (8002e50 <HAL_DMA_Abort_IT+0x3c0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d02c      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x290>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a62      	ldr	r2, [pc, #392]	; (8002e54 <HAL_DMA_Abort_IT+0x3c4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d027      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x290>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a60      	ldr	r2, [pc, #384]	; (8002e58 <HAL_DMA_Abort_IT+0x3c8>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d022      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x290>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a5f      	ldr	r2, [pc, #380]	; (8002e5c <HAL_DMA_Abort_IT+0x3cc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d01d      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x290>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a5d      	ldr	r2, [pc, #372]	; (8002e60 <HAL_DMA_Abort_IT+0x3d0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d018      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x290>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a5c      	ldr	r2, [pc, #368]	; (8002e64 <HAL_DMA_Abort_IT+0x3d4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d013      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x290>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a5a      	ldr	r2, [pc, #360]	; (8002e68 <HAL_DMA_Abort_IT+0x3d8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00e      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x290>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a59      	ldr	r2, [pc, #356]	; (8002e6c <HAL_DMA_Abort_IT+0x3dc>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d009      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x290>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a57      	ldr	r2, [pc, #348]	; (8002e70 <HAL_DMA_Abort_IT+0x3e0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d004      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x290>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a56      	ldr	r2, [pc, #344]	; (8002e74 <HAL_DMA_Abort_IT+0x3e4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d108      	bne.n	8002d32 <HAL_DMA_Abort_IT+0x2a2>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0201 	bic.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	e007      	b.n	8002d42 <HAL_DMA_Abort_IT+0x2b2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0201 	bic.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a3c      	ldr	r2, [pc, #240]	; (8002e38 <HAL_DMA_Abort_IT+0x3a8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d072      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a3a      	ldr	r2, [pc, #232]	; (8002e3c <HAL_DMA_Abort_IT+0x3ac>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d06d      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a39      	ldr	r2, [pc, #228]	; (8002e40 <HAL_DMA_Abort_IT+0x3b0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d068      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a37      	ldr	r2, [pc, #220]	; (8002e44 <HAL_DMA_Abort_IT+0x3b4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d063      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a36      	ldr	r2, [pc, #216]	; (8002e48 <HAL_DMA_Abort_IT+0x3b8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d05e      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a34      	ldr	r2, [pc, #208]	; (8002e4c <HAL_DMA_Abort_IT+0x3bc>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d059      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a33      	ldr	r2, [pc, #204]	; (8002e50 <HAL_DMA_Abort_IT+0x3c0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d054      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a31      	ldr	r2, [pc, #196]	; (8002e54 <HAL_DMA_Abort_IT+0x3c4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d04f      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a30      	ldr	r2, [pc, #192]	; (8002e58 <HAL_DMA_Abort_IT+0x3c8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d04a      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a2e      	ldr	r2, [pc, #184]	; (8002e5c <HAL_DMA_Abort_IT+0x3cc>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d045      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a2d      	ldr	r2, [pc, #180]	; (8002e60 <HAL_DMA_Abort_IT+0x3d0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d040      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a2b      	ldr	r2, [pc, #172]	; (8002e64 <HAL_DMA_Abort_IT+0x3d4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d03b      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a2a      	ldr	r2, [pc, #168]	; (8002e68 <HAL_DMA_Abort_IT+0x3d8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d036      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a28      	ldr	r2, [pc, #160]	; (8002e6c <HAL_DMA_Abort_IT+0x3dc>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d031      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a27      	ldr	r2, [pc, #156]	; (8002e70 <HAL_DMA_Abort_IT+0x3e0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d02c      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a25      	ldr	r2, [pc, #148]	; (8002e74 <HAL_DMA_Abort_IT+0x3e4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d027      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a24      	ldr	r2, [pc, #144]	; (8002e78 <HAL_DMA_Abort_IT+0x3e8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d022      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a22      	ldr	r2, [pc, #136]	; (8002e7c <HAL_DMA_Abort_IT+0x3ec>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d01d      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a21      	ldr	r2, [pc, #132]	; (8002e80 <HAL_DMA_Abort_IT+0x3f0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d018      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a1f      	ldr	r2, [pc, #124]	; (8002e84 <HAL_DMA_Abort_IT+0x3f4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d013      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a1e      	ldr	r2, [pc, #120]	; (8002e88 <HAL_DMA_Abort_IT+0x3f8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00e      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <HAL_DMA_Abort_IT+0x3fc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d009      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a1b      	ldr	r2, [pc, #108]	; (8002e90 <HAL_DMA_Abort_IT+0x400>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d004      	beq.n	8002e32 <HAL_DMA_Abort_IT+0x3a2>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a19      	ldr	r2, [pc, #100]	; (8002e94 <HAL_DMA_Abort_IT+0x404>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d132      	bne.n	8002e98 <HAL_DMA_Abort_IT+0x408>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e031      	b.n	8002e9a <HAL_DMA_Abort_IT+0x40a>
 8002e36:	bf00      	nop
 8002e38:	40020010 	.word	0x40020010
 8002e3c:	40020028 	.word	0x40020028
 8002e40:	40020040 	.word	0x40020040
 8002e44:	40020058 	.word	0x40020058
 8002e48:	40020070 	.word	0x40020070
 8002e4c:	40020088 	.word	0x40020088
 8002e50:	400200a0 	.word	0x400200a0
 8002e54:	400200b8 	.word	0x400200b8
 8002e58:	40020410 	.word	0x40020410
 8002e5c:	40020428 	.word	0x40020428
 8002e60:	40020440 	.word	0x40020440
 8002e64:	40020458 	.word	0x40020458
 8002e68:	40020470 	.word	0x40020470
 8002e6c:	40020488 	.word	0x40020488
 8002e70:	400204a0 	.word	0x400204a0
 8002e74:	400204b8 	.word	0x400204b8
 8002e78:	58025408 	.word	0x58025408
 8002e7c:	5802541c 	.word	0x5802541c
 8002e80:	58025430 	.word	0x58025430
 8002e84:	58025444 	.word	0x58025444
 8002e88:	58025458 	.word	0x58025458
 8002e8c:	5802546c 	.word	0x5802546c
 8002e90:	58025480 	.word	0x58025480
 8002e94:	58025494 	.word	0x58025494
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d028      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ecc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00c      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ee4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002eee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop

08002f1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08a      	sub	sp, #40	; 0x28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f28:	4b67      	ldr	r3, [pc, #412]	; (80030c8 <HAL_DMA_IRQHandler+0x1ac>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a67      	ldr	r2, [pc, #412]	; (80030cc <HAL_DMA_IRQHandler+0x1b0>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	0a9b      	lsrs	r3, r3, #10
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a5f      	ldr	r2, [pc, #380]	; (80030d0 <HAL_DMA_IRQHandler+0x1b4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d04a      	beq.n	8002fee <HAL_DMA_IRQHandler+0xd2>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a5d      	ldr	r2, [pc, #372]	; (80030d4 <HAL_DMA_IRQHandler+0x1b8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d045      	beq.n	8002fee <HAL_DMA_IRQHandler+0xd2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a5c      	ldr	r2, [pc, #368]	; (80030d8 <HAL_DMA_IRQHandler+0x1bc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d040      	beq.n	8002fee <HAL_DMA_IRQHandler+0xd2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a5a      	ldr	r2, [pc, #360]	; (80030dc <HAL_DMA_IRQHandler+0x1c0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d03b      	beq.n	8002fee <HAL_DMA_IRQHandler+0xd2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a59      	ldr	r2, [pc, #356]	; (80030e0 <HAL_DMA_IRQHandler+0x1c4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d036      	beq.n	8002fee <HAL_DMA_IRQHandler+0xd2>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a57      	ldr	r2, [pc, #348]	; (80030e4 <HAL_DMA_IRQHandler+0x1c8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d031      	beq.n	8002fee <HAL_DMA_IRQHandler+0xd2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a56      	ldr	r2, [pc, #344]	; (80030e8 <HAL_DMA_IRQHandler+0x1cc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d02c      	beq.n	8002fee <HAL_DMA_IRQHandler+0xd2>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a54      	ldr	r2, [pc, #336]	; (80030ec <HAL_DMA_IRQHandler+0x1d0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d027      	beq.n	8002fee <HAL_DMA_IRQHandler+0xd2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a53      	ldr	r2, [pc, #332]	; (80030f0 <HAL_DMA_IRQHandler+0x1d4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d022      	beq.n	8002fee <HAL_DMA_IRQHandler+0xd2>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a51      	ldr	r2, [pc, #324]	; (80030f4 <HAL_DMA_IRQHandler+0x1d8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01d      	beq.n	8002fee <HAL_DMA_IRQHandler+0xd2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a50      	ldr	r2, [pc, #320]	; (80030f8 <HAL_DMA_IRQHandler+0x1dc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d018      	beq.n	8002fee <HAL_DMA_IRQHandler+0xd2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a4e      	ldr	r2, [pc, #312]	; (80030fc <HAL_DMA_IRQHandler+0x1e0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_DMA_IRQHandler+0xd2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a4d      	ldr	r2, [pc, #308]	; (8003100 <HAL_DMA_IRQHandler+0x1e4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00e      	beq.n	8002fee <HAL_DMA_IRQHandler+0xd2>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a4b      	ldr	r2, [pc, #300]	; (8003104 <HAL_DMA_IRQHandler+0x1e8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d009      	beq.n	8002fee <HAL_DMA_IRQHandler+0xd2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a4a      	ldr	r2, [pc, #296]	; (8003108 <HAL_DMA_IRQHandler+0x1ec>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d004      	beq.n	8002fee <HAL_DMA_IRQHandler+0xd2>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a48      	ldr	r2, [pc, #288]	; (800310c <HAL_DMA_IRQHandler+0x1f0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d101      	bne.n	8002ff2 <HAL_DMA_IRQHandler+0xd6>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <HAL_DMA_IRQHandler+0xd8>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 842b 	beq.w	8003850 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	2208      	movs	r2, #8
 8003004:	409a      	lsls	r2, r3
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 80a2 	beq.w	8003154 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a2e      	ldr	r2, [pc, #184]	; (80030d0 <HAL_DMA_IRQHandler+0x1b4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d04a      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x194>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a2d      	ldr	r2, [pc, #180]	; (80030d4 <HAL_DMA_IRQHandler+0x1b8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d045      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x194>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a2b      	ldr	r2, [pc, #172]	; (80030d8 <HAL_DMA_IRQHandler+0x1bc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d040      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x194>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a2a      	ldr	r2, [pc, #168]	; (80030dc <HAL_DMA_IRQHandler+0x1c0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d03b      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x194>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a28      	ldr	r2, [pc, #160]	; (80030e0 <HAL_DMA_IRQHandler+0x1c4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d036      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x194>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a27      	ldr	r2, [pc, #156]	; (80030e4 <HAL_DMA_IRQHandler+0x1c8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d031      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x194>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a25      	ldr	r2, [pc, #148]	; (80030e8 <HAL_DMA_IRQHandler+0x1cc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d02c      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x194>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a24      	ldr	r2, [pc, #144]	; (80030ec <HAL_DMA_IRQHandler+0x1d0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d027      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x194>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a22      	ldr	r2, [pc, #136]	; (80030f0 <HAL_DMA_IRQHandler+0x1d4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d022      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x194>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a21      	ldr	r2, [pc, #132]	; (80030f4 <HAL_DMA_IRQHandler+0x1d8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d01d      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x194>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <HAL_DMA_IRQHandler+0x1dc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d018      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x194>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <HAL_DMA_IRQHandler+0x1e0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d013      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x194>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <HAL_DMA_IRQHandler+0x1e4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00e      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x194>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <HAL_DMA_IRQHandler+0x1e8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d009      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x194>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a19      	ldr	r2, [pc, #100]	; (8003108 <HAL_DMA_IRQHandler+0x1ec>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d004      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x194>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a18      	ldr	r2, [pc, #96]	; (800310c <HAL_DMA_IRQHandler+0x1f0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d12f      	bne.n	8003110 <HAL_DMA_IRQHandler+0x1f4>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf14      	ite	ne
 80030be:	2301      	movne	r3, #1
 80030c0:	2300      	moveq	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	e02e      	b.n	8003124 <HAL_DMA_IRQHandler+0x208>
 80030c6:	bf00      	nop
 80030c8:	24000000 	.word	0x24000000
 80030cc:	1b4e81b5 	.word	0x1b4e81b5
 80030d0:	40020010 	.word	0x40020010
 80030d4:	40020028 	.word	0x40020028
 80030d8:	40020040 	.word	0x40020040
 80030dc:	40020058 	.word	0x40020058
 80030e0:	40020070 	.word	0x40020070
 80030e4:	40020088 	.word	0x40020088
 80030e8:	400200a0 	.word	0x400200a0
 80030ec:	400200b8 	.word	0x400200b8
 80030f0:	40020410 	.word	0x40020410
 80030f4:	40020428 	.word	0x40020428
 80030f8:	40020440 	.word	0x40020440
 80030fc:	40020458 	.word	0x40020458
 8003100:	40020470 	.word	0x40020470
 8003104:	40020488 	.word	0x40020488
 8003108:	400204a0 	.word	0x400204a0
 800310c:	400204b8 	.word	0x400204b8
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	bf14      	ite	ne
 800311e:	2301      	movne	r3, #1
 8003120:	2300      	moveq	r3, #0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d015      	beq.n	8003154 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0204 	bic.w	r2, r2, #4
 8003136:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	2208      	movs	r2, #8
 8003142:	409a      	lsls	r2, r3
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d06e      	beq.n	8003248 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a69      	ldr	r2, [pc, #420]	; (8003314 <HAL_DMA_IRQHandler+0x3f8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d04a      	beq.n	800320a <HAL_DMA_IRQHandler+0x2ee>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a67      	ldr	r2, [pc, #412]	; (8003318 <HAL_DMA_IRQHandler+0x3fc>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d045      	beq.n	800320a <HAL_DMA_IRQHandler+0x2ee>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a66      	ldr	r2, [pc, #408]	; (800331c <HAL_DMA_IRQHandler+0x400>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d040      	beq.n	800320a <HAL_DMA_IRQHandler+0x2ee>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a64      	ldr	r2, [pc, #400]	; (8003320 <HAL_DMA_IRQHandler+0x404>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d03b      	beq.n	800320a <HAL_DMA_IRQHandler+0x2ee>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a63      	ldr	r2, [pc, #396]	; (8003324 <HAL_DMA_IRQHandler+0x408>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d036      	beq.n	800320a <HAL_DMA_IRQHandler+0x2ee>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a61      	ldr	r2, [pc, #388]	; (8003328 <HAL_DMA_IRQHandler+0x40c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d031      	beq.n	800320a <HAL_DMA_IRQHandler+0x2ee>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a60      	ldr	r2, [pc, #384]	; (800332c <HAL_DMA_IRQHandler+0x410>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d02c      	beq.n	800320a <HAL_DMA_IRQHandler+0x2ee>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a5e      	ldr	r2, [pc, #376]	; (8003330 <HAL_DMA_IRQHandler+0x414>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d027      	beq.n	800320a <HAL_DMA_IRQHandler+0x2ee>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a5d      	ldr	r2, [pc, #372]	; (8003334 <HAL_DMA_IRQHandler+0x418>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d022      	beq.n	800320a <HAL_DMA_IRQHandler+0x2ee>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a5b      	ldr	r2, [pc, #364]	; (8003338 <HAL_DMA_IRQHandler+0x41c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d01d      	beq.n	800320a <HAL_DMA_IRQHandler+0x2ee>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a5a      	ldr	r2, [pc, #360]	; (800333c <HAL_DMA_IRQHandler+0x420>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d018      	beq.n	800320a <HAL_DMA_IRQHandler+0x2ee>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a58      	ldr	r2, [pc, #352]	; (8003340 <HAL_DMA_IRQHandler+0x424>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <HAL_DMA_IRQHandler+0x2ee>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a57      	ldr	r2, [pc, #348]	; (8003344 <HAL_DMA_IRQHandler+0x428>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00e      	beq.n	800320a <HAL_DMA_IRQHandler+0x2ee>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a55      	ldr	r2, [pc, #340]	; (8003348 <HAL_DMA_IRQHandler+0x42c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d009      	beq.n	800320a <HAL_DMA_IRQHandler+0x2ee>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a54      	ldr	r2, [pc, #336]	; (800334c <HAL_DMA_IRQHandler+0x430>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d004      	beq.n	800320a <HAL_DMA_IRQHandler+0x2ee>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a52      	ldr	r2, [pc, #328]	; (8003350 <HAL_DMA_IRQHandler+0x434>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d10a      	bne.n	8003220 <HAL_DMA_IRQHandler+0x304>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf14      	ite	ne
 8003218:	2301      	movne	r3, #1
 800321a:	2300      	moveq	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e003      	b.n	8003228 <HAL_DMA_IRQHandler+0x30c>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2300      	movs	r3, #0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00d      	beq.n	8003248 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	2201      	movs	r2, #1
 8003236:	409a      	lsls	r2, r3
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	f043 0202 	orr.w	r2, r3, #2
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	f003 031f 	and.w	r3, r3, #31
 8003250:	2204      	movs	r2, #4
 8003252:	409a      	lsls	r2, r3
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 808f 	beq.w	800337c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a2c      	ldr	r2, [pc, #176]	; (8003314 <HAL_DMA_IRQHandler+0x3f8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d04a      	beq.n	80032fe <HAL_DMA_IRQHandler+0x3e2>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a2a      	ldr	r2, [pc, #168]	; (8003318 <HAL_DMA_IRQHandler+0x3fc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d045      	beq.n	80032fe <HAL_DMA_IRQHandler+0x3e2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a29      	ldr	r2, [pc, #164]	; (800331c <HAL_DMA_IRQHandler+0x400>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d040      	beq.n	80032fe <HAL_DMA_IRQHandler+0x3e2>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a27      	ldr	r2, [pc, #156]	; (8003320 <HAL_DMA_IRQHandler+0x404>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d03b      	beq.n	80032fe <HAL_DMA_IRQHandler+0x3e2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a26      	ldr	r2, [pc, #152]	; (8003324 <HAL_DMA_IRQHandler+0x408>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d036      	beq.n	80032fe <HAL_DMA_IRQHandler+0x3e2>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a24      	ldr	r2, [pc, #144]	; (8003328 <HAL_DMA_IRQHandler+0x40c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d031      	beq.n	80032fe <HAL_DMA_IRQHandler+0x3e2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a23      	ldr	r2, [pc, #140]	; (800332c <HAL_DMA_IRQHandler+0x410>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d02c      	beq.n	80032fe <HAL_DMA_IRQHandler+0x3e2>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a21      	ldr	r2, [pc, #132]	; (8003330 <HAL_DMA_IRQHandler+0x414>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d027      	beq.n	80032fe <HAL_DMA_IRQHandler+0x3e2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a20      	ldr	r2, [pc, #128]	; (8003334 <HAL_DMA_IRQHandler+0x418>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d022      	beq.n	80032fe <HAL_DMA_IRQHandler+0x3e2>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1e      	ldr	r2, [pc, #120]	; (8003338 <HAL_DMA_IRQHandler+0x41c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01d      	beq.n	80032fe <HAL_DMA_IRQHandler+0x3e2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1d      	ldr	r2, [pc, #116]	; (800333c <HAL_DMA_IRQHandler+0x420>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d018      	beq.n	80032fe <HAL_DMA_IRQHandler+0x3e2>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1b      	ldr	r2, [pc, #108]	; (8003340 <HAL_DMA_IRQHandler+0x424>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d013      	beq.n	80032fe <HAL_DMA_IRQHandler+0x3e2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1a      	ldr	r2, [pc, #104]	; (8003344 <HAL_DMA_IRQHandler+0x428>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00e      	beq.n	80032fe <HAL_DMA_IRQHandler+0x3e2>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a18      	ldr	r2, [pc, #96]	; (8003348 <HAL_DMA_IRQHandler+0x42c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d009      	beq.n	80032fe <HAL_DMA_IRQHandler+0x3e2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a17      	ldr	r2, [pc, #92]	; (800334c <HAL_DMA_IRQHandler+0x430>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d004      	beq.n	80032fe <HAL_DMA_IRQHandler+0x3e2>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a15      	ldr	r2, [pc, #84]	; (8003350 <HAL_DMA_IRQHandler+0x434>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d12a      	bne.n	8003354 <HAL_DMA_IRQHandler+0x438>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf14      	ite	ne
 800330c:	2301      	movne	r3, #1
 800330e:	2300      	moveq	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	e023      	b.n	800335c <HAL_DMA_IRQHandler+0x440>
 8003314:	40020010 	.word	0x40020010
 8003318:	40020028 	.word	0x40020028
 800331c:	40020040 	.word	0x40020040
 8003320:	40020058 	.word	0x40020058
 8003324:	40020070 	.word	0x40020070
 8003328:	40020088 	.word	0x40020088
 800332c:	400200a0 	.word	0x400200a0
 8003330:	400200b8 	.word	0x400200b8
 8003334:	40020410 	.word	0x40020410
 8003338:	40020428 	.word	0x40020428
 800333c:	40020440 	.word	0x40020440
 8003340:	40020458 	.word	0x40020458
 8003344:	40020470 	.word	0x40020470
 8003348:	40020488 	.word	0x40020488
 800334c:	400204a0 	.word	0x400204a0
 8003350:	400204b8 	.word	0x400204b8
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2300      	movs	r3, #0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00d      	beq.n	800337c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	2204      	movs	r2, #4
 800336a:	409a      	lsls	r2, r3
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003374:	f043 0204 	orr.w	r2, r3, #4
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2210      	movs	r2, #16
 8003386:	409a      	lsls	r2, r3
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80a6 	beq.w	80034de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a85      	ldr	r2, [pc, #532]	; (80035ac <HAL_DMA_IRQHandler+0x690>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d04a      	beq.n	8003432 <HAL_DMA_IRQHandler+0x516>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a83      	ldr	r2, [pc, #524]	; (80035b0 <HAL_DMA_IRQHandler+0x694>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d045      	beq.n	8003432 <HAL_DMA_IRQHandler+0x516>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a82      	ldr	r2, [pc, #520]	; (80035b4 <HAL_DMA_IRQHandler+0x698>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d040      	beq.n	8003432 <HAL_DMA_IRQHandler+0x516>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a80      	ldr	r2, [pc, #512]	; (80035b8 <HAL_DMA_IRQHandler+0x69c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d03b      	beq.n	8003432 <HAL_DMA_IRQHandler+0x516>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a7f      	ldr	r2, [pc, #508]	; (80035bc <HAL_DMA_IRQHandler+0x6a0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d036      	beq.n	8003432 <HAL_DMA_IRQHandler+0x516>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a7d      	ldr	r2, [pc, #500]	; (80035c0 <HAL_DMA_IRQHandler+0x6a4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d031      	beq.n	8003432 <HAL_DMA_IRQHandler+0x516>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a7c      	ldr	r2, [pc, #496]	; (80035c4 <HAL_DMA_IRQHandler+0x6a8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d02c      	beq.n	8003432 <HAL_DMA_IRQHandler+0x516>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a7a      	ldr	r2, [pc, #488]	; (80035c8 <HAL_DMA_IRQHandler+0x6ac>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d027      	beq.n	8003432 <HAL_DMA_IRQHandler+0x516>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a79      	ldr	r2, [pc, #484]	; (80035cc <HAL_DMA_IRQHandler+0x6b0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d022      	beq.n	8003432 <HAL_DMA_IRQHandler+0x516>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a77      	ldr	r2, [pc, #476]	; (80035d0 <HAL_DMA_IRQHandler+0x6b4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01d      	beq.n	8003432 <HAL_DMA_IRQHandler+0x516>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a76      	ldr	r2, [pc, #472]	; (80035d4 <HAL_DMA_IRQHandler+0x6b8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d018      	beq.n	8003432 <HAL_DMA_IRQHandler+0x516>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a74      	ldr	r2, [pc, #464]	; (80035d8 <HAL_DMA_IRQHandler+0x6bc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d013      	beq.n	8003432 <HAL_DMA_IRQHandler+0x516>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a73      	ldr	r2, [pc, #460]	; (80035dc <HAL_DMA_IRQHandler+0x6c0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00e      	beq.n	8003432 <HAL_DMA_IRQHandler+0x516>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a71      	ldr	r2, [pc, #452]	; (80035e0 <HAL_DMA_IRQHandler+0x6c4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d009      	beq.n	8003432 <HAL_DMA_IRQHandler+0x516>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a70      	ldr	r2, [pc, #448]	; (80035e4 <HAL_DMA_IRQHandler+0x6c8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d004      	beq.n	8003432 <HAL_DMA_IRQHandler+0x516>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a6e      	ldr	r2, [pc, #440]	; (80035e8 <HAL_DMA_IRQHandler+0x6cc>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d10a      	bne.n	8003448 <HAL_DMA_IRQHandler+0x52c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf14      	ite	ne
 8003440:	2301      	movne	r3, #1
 8003442:	2300      	moveq	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e009      	b.n	800345c <HAL_DMA_IRQHandler+0x540>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b00      	cmp	r3, #0
 8003454:	bf14      	ite	ne
 8003456:	2301      	movne	r3, #1
 8003458:	2300      	moveq	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d03e      	beq.n	80034de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	2210      	movs	r2, #16
 800346a:	409a      	lsls	r2, r3
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d018      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d108      	bne.n	800349e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d024      	beq.n	80034de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
 800349c:	e01f      	b.n	80034de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01b      	beq.n	80034de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	4798      	blx	r3
 80034ae:	e016      	b.n	80034de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d107      	bne.n	80034ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0208 	bic.w	r2, r2, #8
 80034cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	2220      	movs	r2, #32
 80034e8:	409a      	lsls	r2, r3
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 8110 	beq.w	8003714 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a2c      	ldr	r2, [pc, #176]	; (80035ac <HAL_DMA_IRQHandler+0x690>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d04a      	beq.n	8003594 <HAL_DMA_IRQHandler+0x678>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a2b      	ldr	r2, [pc, #172]	; (80035b0 <HAL_DMA_IRQHandler+0x694>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d045      	beq.n	8003594 <HAL_DMA_IRQHandler+0x678>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a29      	ldr	r2, [pc, #164]	; (80035b4 <HAL_DMA_IRQHandler+0x698>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d040      	beq.n	8003594 <HAL_DMA_IRQHandler+0x678>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a28      	ldr	r2, [pc, #160]	; (80035b8 <HAL_DMA_IRQHandler+0x69c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d03b      	beq.n	8003594 <HAL_DMA_IRQHandler+0x678>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a26      	ldr	r2, [pc, #152]	; (80035bc <HAL_DMA_IRQHandler+0x6a0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d036      	beq.n	8003594 <HAL_DMA_IRQHandler+0x678>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a25      	ldr	r2, [pc, #148]	; (80035c0 <HAL_DMA_IRQHandler+0x6a4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d031      	beq.n	8003594 <HAL_DMA_IRQHandler+0x678>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a23      	ldr	r2, [pc, #140]	; (80035c4 <HAL_DMA_IRQHandler+0x6a8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d02c      	beq.n	8003594 <HAL_DMA_IRQHandler+0x678>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <HAL_DMA_IRQHandler+0x6ac>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d027      	beq.n	8003594 <HAL_DMA_IRQHandler+0x678>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a20      	ldr	r2, [pc, #128]	; (80035cc <HAL_DMA_IRQHandler+0x6b0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d022      	beq.n	8003594 <HAL_DMA_IRQHandler+0x678>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <HAL_DMA_IRQHandler+0x6b4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d01d      	beq.n	8003594 <HAL_DMA_IRQHandler+0x678>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1d      	ldr	r2, [pc, #116]	; (80035d4 <HAL_DMA_IRQHandler+0x6b8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d018      	beq.n	8003594 <HAL_DMA_IRQHandler+0x678>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <HAL_DMA_IRQHandler+0x6bc>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d013      	beq.n	8003594 <HAL_DMA_IRQHandler+0x678>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a1a      	ldr	r2, [pc, #104]	; (80035dc <HAL_DMA_IRQHandler+0x6c0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00e      	beq.n	8003594 <HAL_DMA_IRQHandler+0x678>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <HAL_DMA_IRQHandler+0x6c4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d009      	beq.n	8003594 <HAL_DMA_IRQHandler+0x678>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a17      	ldr	r2, [pc, #92]	; (80035e4 <HAL_DMA_IRQHandler+0x6c8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d004      	beq.n	8003594 <HAL_DMA_IRQHandler+0x678>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a16      	ldr	r2, [pc, #88]	; (80035e8 <HAL_DMA_IRQHandler+0x6cc>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d12b      	bne.n	80035ec <HAL_DMA_IRQHandler+0x6d0>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bf14      	ite	ne
 80035a2:	2301      	movne	r3, #1
 80035a4:	2300      	moveq	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	e02a      	b.n	8003600 <HAL_DMA_IRQHandler+0x6e4>
 80035aa:	bf00      	nop
 80035ac:	40020010 	.word	0x40020010
 80035b0:	40020028 	.word	0x40020028
 80035b4:	40020040 	.word	0x40020040
 80035b8:	40020058 	.word	0x40020058
 80035bc:	40020070 	.word	0x40020070
 80035c0:	40020088 	.word	0x40020088
 80035c4:	400200a0 	.word	0x400200a0
 80035c8:	400200b8 	.word	0x400200b8
 80035cc:	40020410 	.word	0x40020410
 80035d0:	40020428 	.word	0x40020428
 80035d4:	40020440 	.word	0x40020440
 80035d8:	40020458 	.word	0x40020458
 80035dc:	40020470 	.word	0x40020470
 80035e0:	40020488 	.word	0x40020488
 80035e4:	400204a0 	.word	0x400204a0
 80035e8:	400204b8 	.word	0x400204b8
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bf14      	ite	ne
 80035fa:	2301      	movne	r3, #1
 80035fc:	2300      	moveq	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8087 	beq.w	8003714 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	2220      	movs	r2, #32
 8003610:	409a      	lsls	r2, r3
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b04      	cmp	r3, #4
 8003620:	d139      	bne.n	8003696 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0216 	bic.w	r2, r2, #22
 8003630:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003640:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d103      	bne.n	8003652 <HAL_DMA_IRQHandler+0x736>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364e:	2b00      	cmp	r3, #0
 8003650:	d007      	beq.n	8003662 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0208 	bic.w	r2, r2, #8
 8003660:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	223f      	movs	r2, #63	; 0x3f
 800366c:	409a      	lsls	r2, r3
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 8382 	beq.w	8003d90 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
          }
          return;
 8003694:	e37c      	b.n	8003d90 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d018      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d108      	bne.n	80036c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d02c      	beq.n	8003714 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	4798      	blx	r3
 80036c2:	e027      	b.n	8003714 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d023      	beq.n	8003714 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
 80036d4:	e01e      	b.n	8003714 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10f      	bne.n	8003704 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0210 	bic.w	r2, r2, #16
 80036f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 833e 	beq.w	8003d9a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8088 	beq.w	800383c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2204      	movs	r2, #4
 8003730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a89      	ldr	r2, [pc, #548]	; (8003960 <HAL_DMA_IRQHandler+0xa44>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d04a      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x8b8>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a88      	ldr	r2, [pc, #544]	; (8003964 <HAL_DMA_IRQHandler+0xa48>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d045      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x8b8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a86      	ldr	r2, [pc, #536]	; (8003968 <HAL_DMA_IRQHandler+0xa4c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d040      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x8b8>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a85      	ldr	r2, [pc, #532]	; (800396c <HAL_DMA_IRQHandler+0xa50>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d03b      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x8b8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a83      	ldr	r2, [pc, #524]	; (8003970 <HAL_DMA_IRQHandler+0xa54>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d036      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x8b8>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a82      	ldr	r2, [pc, #520]	; (8003974 <HAL_DMA_IRQHandler+0xa58>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d031      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x8b8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a80      	ldr	r2, [pc, #512]	; (8003978 <HAL_DMA_IRQHandler+0xa5c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d02c      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x8b8>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a7f      	ldr	r2, [pc, #508]	; (800397c <HAL_DMA_IRQHandler+0xa60>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d027      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x8b8>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a7d      	ldr	r2, [pc, #500]	; (8003980 <HAL_DMA_IRQHandler+0xa64>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d022      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x8b8>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a7c      	ldr	r2, [pc, #496]	; (8003984 <HAL_DMA_IRQHandler+0xa68>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d01d      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x8b8>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a7a      	ldr	r2, [pc, #488]	; (8003988 <HAL_DMA_IRQHandler+0xa6c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d018      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x8b8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a79      	ldr	r2, [pc, #484]	; (800398c <HAL_DMA_IRQHandler+0xa70>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d013      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x8b8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a77      	ldr	r2, [pc, #476]	; (8003990 <HAL_DMA_IRQHandler+0xa74>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00e      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x8b8>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a76      	ldr	r2, [pc, #472]	; (8003994 <HAL_DMA_IRQHandler+0xa78>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d009      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x8b8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a74      	ldr	r2, [pc, #464]	; (8003998 <HAL_DMA_IRQHandler+0xa7c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d004      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x8b8>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a73      	ldr	r2, [pc, #460]	; (800399c <HAL_DMA_IRQHandler+0xa80>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d108      	bne.n	80037e6 <HAL_DMA_IRQHandler+0x8ca>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0201 	bic.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	e007      	b.n	80037f6 <HAL_DMA_IRQHandler+0x8da>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0201 	bic.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	3301      	adds	r3, #1
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fe:	429a      	cmp	r2, r3
 8003800:	d307      	bcc.n	8003812 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f2      	bne.n	80037f6 <HAL_DMA_IRQHandler+0x8da>
 8003810:	e000      	b.n	8003814 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003812:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2203      	movs	r2, #3
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800382a:	e003      	b.n	8003834 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 82aa 	beq.w	8003d9a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	4798      	blx	r3
 800384e:	e2a4      	b.n	8003d9a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a52      	ldr	r2, [pc, #328]	; (80039a0 <HAL_DMA_IRQHandler+0xa84>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d04a      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x9d4>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a51      	ldr	r2, [pc, #324]	; (80039a4 <HAL_DMA_IRQHandler+0xa88>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d045      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x9d4>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a4f      	ldr	r2, [pc, #316]	; (80039a8 <HAL_DMA_IRQHandler+0xa8c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d040      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x9d4>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a4e      	ldr	r2, [pc, #312]	; (80039ac <HAL_DMA_IRQHandler+0xa90>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d03b      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x9d4>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a4c      	ldr	r2, [pc, #304]	; (80039b0 <HAL_DMA_IRQHandler+0xa94>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d036      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x9d4>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a4b      	ldr	r2, [pc, #300]	; (80039b4 <HAL_DMA_IRQHandler+0xa98>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d031      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x9d4>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a49      	ldr	r2, [pc, #292]	; (80039b8 <HAL_DMA_IRQHandler+0xa9c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d02c      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x9d4>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a48      	ldr	r2, [pc, #288]	; (80039bc <HAL_DMA_IRQHandler+0xaa0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d027      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x9d4>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a46      	ldr	r2, [pc, #280]	; (80039c0 <HAL_DMA_IRQHandler+0xaa4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d022      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x9d4>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a45      	ldr	r2, [pc, #276]	; (80039c4 <HAL_DMA_IRQHandler+0xaa8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d01d      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x9d4>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a43      	ldr	r2, [pc, #268]	; (80039c8 <HAL_DMA_IRQHandler+0xaac>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d018      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x9d4>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a42      	ldr	r2, [pc, #264]	; (80039cc <HAL_DMA_IRQHandler+0xab0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d013      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x9d4>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a40      	ldr	r2, [pc, #256]	; (80039d0 <HAL_DMA_IRQHandler+0xab4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00e      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x9d4>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a3f      	ldr	r2, [pc, #252]	; (80039d4 <HAL_DMA_IRQHandler+0xab8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d009      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x9d4>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a3d      	ldr	r2, [pc, #244]	; (80039d8 <HAL_DMA_IRQHandler+0xabc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d004      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x9d4>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a3c      	ldr	r2, [pc, #240]	; (80039dc <HAL_DMA_IRQHandler+0xac0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d101      	bne.n	80038f4 <HAL_DMA_IRQHandler+0x9d8>
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <HAL_DMA_IRQHandler+0x9da>
 80038f4:	2300      	movs	r3, #0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 824f 	beq.w	8003d9a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	2204      	movs	r2, #4
 800390e:	409a      	lsls	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	4013      	ands	r3, r2
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80dd 	beq.w	8003ad4 <HAL_DMA_IRQHandler+0xbb8>
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80d7 	beq.w	8003ad4 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	2204      	movs	r2, #4
 8003930:	409a      	lsls	r2, r3
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d059      	beq.n	80039f4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d14a      	bne.n	80039e0 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 8220 	beq.w	8003d94 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800395c:	e21a      	b.n	8003d94 <HAL_DMA_IRQHandler+0xe78>
 800395e:	bf00      	nop
 8003960:	40020010 	.word	0x40020010
 8003964:	40020028 	.word	0x40020028
 8003968:	40020040 	.word	0x40020040
 800396c:	40020058 	.word	0x40020058
 8003970:	40020070 	.word	0x40020070
 8003974:	40020088 	.word	0x40020088
 8003978:	400200a0 	.word	0x400200a0
 800397c:	400200b8 	.word	0x400200b8
 8003980:	40020410 	.word	0x40020410
 8003984:	40020428 	.word	0x40020428
 8003988:	40020440 	.word	0x40020440
 800398c:	40020458 	.word	0x40020458
 8003990:	40020470 	.word	0x40020470
 8003994:	40020488 	.word	0x40020488
 8003998:	400204a0 	.word	0x400204a0
 800399c:	400204b8 	.word	0x400204b8
 80039a0:	48022c08 	.word	0x48022c08
 80039a4:	48022c1c 	.word	0x48022c1c
 80039a8:	48022c30 	.word	0x48022c30
 80039ac:	48022c44 	.word	0x48022c44
 80039b0:	48022c58 	.word	0x48022c58
 80039b4:	48022c6c 	.word	0x48022c6c
 80039b8:	48022c80 	.word	0x48022c80
 80039bc:	48022c94 	.word	0x48022c94
 80039c0:	58025408 	.word	0x58025408
 80039c4:	5802541c 	.word	0x5802541c
 80039c8:	58025430 	.word	0x58025430
 80039cc:	58025444 	.word	0x58025444
 80039d0:	58025458 	.word	0x58025458
 80039d4:	5802546c 	.word	0x5802546c
 80039d8:	58025480 	.word	0x58025480
 80039dc:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 81d5 	beq.w	8003d94 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039f2:	e1cf      	b.n	8003d94 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d160      	bne.n	8003ac0 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a7f      	ldr	r2, [pc, #508]	; (8003c00 <HAL_DMA_IRQHandler+0xce4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d04a      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xb82>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a7d      	ldr	r2, [pc, #500]	; (8003c04 <HAL_DMA_IRQHandler+0xce8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d045      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xb82>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a7c      	ldr	r2, [pc, #496]	; (8003c08 <HAL_DMA_IRQHandler+0xcec>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d040      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xb82>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a7a      	ldr	r2, [pc, #488]	; (8003c0c <HAL_DMA_IRQHandler+0xcf0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d03b      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xb82>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a79      	ldr	r2, [pc, #484]	; (8003c10 <HAL_DMA_IRQHandler+0xcf4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d036      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xb82>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a77      	ldr	r2, [pc, #476]	; (8003c14 <HAL_DMA_IRQHandler+0xcf8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d031      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xb82>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a76      	ldr	r2, [pc, #472]	; (8003c18 <HAL_DMA_IRQHandler+0xcfc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d02c      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xb82>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a74      	ldr	r2, [pc, #464]	; (8003c1c <HAL_DMA_IRQHandler+0xd00>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d027      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xb82>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a73      	ldr	r2, [pc, #460]	; (8003c20 <HAL_DMA_IRQHandler+0xd04>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d022      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xb82>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a71      	ldr	r2, [pc, #452]	; (8003c24 <HAL_DMA_IRQHandler+0xd08>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01d      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xb82>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a70      	ldr	r2, [pc, #448]	; (8003c28 <HAL_DMA_IRQHandler+0xd0c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d018      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xb82>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a6e      	ldr	r2, [pc, #440]	; (8003c2c <HAL_DMA_IRQHandler+0xd10>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xb82>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a6d      	ldr	r2, [pc, #436]	; (8003c30 <HAL_DMA_IRQHandler+0xd14>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00e      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xb82>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a6b      	ldr	r2, [pc, #428]	; (8003c34 <HAL_DMA_IRQHandler+0xd18>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d009      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xb82>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a6a      	ldr	r2, [pc, #424]	; (8003c38 <HAL_DMA_IRQHandler+0xd1c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xb82>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a68      	ldr	r2, [pc, #416]	; (8003c3c <HAL_DMA_IRQHandler+0xd20>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d108      	bne.n	8003ab0 <HAL_DMA_IRQHandler+0xb94>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0208 	bic.w	r2, r2, #8
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e007      	b.n	8003ac0 <HAL_DMA_IRQHandler+0xba4>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0204 	bic.w	r2, r2, #4
 8003abe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 8165 	beq.w	8003d94 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ad2:	e15f      	b.n	8003d94 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	2202      	movs	r2, #2
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80c5 	beq.w	8003c74 <HAL_DMA_IRQHandler+0xd58>
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 80bf 	beq.w	8003c74 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afa:	f003 031f 	and.w	r3, r3, #31
 8003afe:	2202      	movs	r2, #2
 8003b00:	409a      	lsls	r2, r3
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d018      	beq.n	8003b42 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 813a 	beq.w	8003d98 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b2c:	e134      	b.n	8003d98 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8130 	beq.w	8003d98 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b40:	e12a      	b.n	8003d98 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f040 8089 	bne.w	8003c60 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a2b      	ldr	r2, [pc, #172]	; (8003c00 <HAL_DMA_IRQHandler+0xce4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d04a      	beq.n	8003bee <HAL_DMA_IRQHandler+0xcd2>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a29      	ldr	r2, [pc, #164]	; (8003c04 <HAL_DMA_IRQHandler+0xce8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d045      	beq.n	8003bee <HAL_DMA_IRQHandler+0xcd2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a28      	ldr	r2, [pc, #160]	; (8003c08 <HAL_DMA_IRQHandler+0xcec>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d040      	beq.n	8003bee <HAL_DMA_IRQHandler+0xcd2>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a26      	ldr	r2, [pc, #152]	; (8003c0c <HAL_DMA_IRQHandler+0xcf0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d03b      	beq.n	8003bee <HAL_DMA_IRQHandler+0xcd2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a25      	ldr	r2, [pc, #148]	; (8003c10 <HAL_DMA_IRQHandler+0xcf4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d036      	beq.n	8003bee <HAL_DMA_IRQHandler+0xcd2>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a23      	ldr	r2, [pc, #140]	; (8003c14 <HAL_DMA_IRQHandler+0xcf8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d031      	beq.n	8003bee <HAL_DMA_IRQHandler+0xcd2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a22      	ldr	r2, [pc, #136]	; (8003c18 <HAL_DMA_IRQHandler+0xcfc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d02c      	beq.n	8003bee <HAL_DMA_IRQHandler+0xcd2>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a20      	ldr	r2, [pc, #128]	; (8003c1c <HAL_DMA_IRQHandler+0xd00>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d027      	beq.n	8003bee <HAL_DMA_IRQHandler+0xcd2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a1f      	ldr	r2, [pc, #124]	; (8003c20 <HAL_DMA_IRQHandler+0xd04>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d022      	beq.n	8003bee <HAL_DMA_IRQHandler+0xcd2>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <HAL_DMA_IRQHandler+0xd08>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d01d      	beq.n	8003bee <HAL_DMA_IRQHandler+0xcd2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a1c      	ldr	r2, [pc, #112]	; (8003c28 <HAL_DMA_IRQHandler+0xd0c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d018      	beq.n	8003bee <HAL_DMA_IRQHandler+0xcd2>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1a      	ldr	r2, [pc, #104]	; (8003c2c <HAL_DMA_IRQHandler+0xd10>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d013      	beq.n	8003bee <HAL_DMA_IRQHandler+0xcd2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a19      	ldr	r2, [pc, #100]	; (8003c30 <HAL_DMA_IRQHandler+0xd14>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00e      	beq.n	8003bee <HAL_DMA_IRQHandler+0xcd2>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a17      	ldr	r2, [pc, #92]	; (8003c34 <HAL_DMA_IRQHandler+0xd18>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d009      	beq.n	8003bee <HAL_DMA_IRQHandler+0xcd2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <HAL_DMA_IRQHandler+0xd1c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d004      	beq.n	8003bee <HAL_DMA_IRQHandler+0xcd2>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a14      	ldr	r2, [pc, #80]	; (8003c3c <HAL_DMA_IRQHandler+0xd20>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d128      	bne.n	8003c40 <HAL_DMA_IRQHandler+0xd24>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0214 	bic.w	r2, r2, #20
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	e027      	b.n	8003c50 <HAL_DMA_IRQHandler+0xd34>
 8003c00:	40020010 	.word	0x40020010
 8003c04:	40020028 	.word	0x40020028
 8003c08:	40020040 	.word	0x40020040
 8003c0c:	40020058 	.word	0x40020058
 8003c10:	40020070 	.word	0x40020070
 8003c14:	40020088 	.word	0x40020088
 8003c18:	400200a0 	.word	0x400200a0
 8003c1c:	400200b8 	.word	0x400200b8
 8003c20:	40020410 	.word	0x40020410
 8003c24:	40020428 	.word	0x40020428
 8003c28:	40020440 	.word	0x40020440
 8003c2c:	40020458 	.word	0x40020458
 8003c30:	40020470 	.word	0x40020470
 8003c34:	40020488 	.word	0x40020488
 8003c38:	400204a0 	.word	0x400204a0
 8003c3c:	400204b8 	.word	0x400204b8
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 020a 	bic.w	r2, r2, #10
 8003c4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 8097 	beq.w	8003d98 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c72:	e091      	b.n	8003d98 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8088 	beq.w	8003d9a <HAL_DMA_IRQHandler+0xe7e>
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8082 	beq.w	8003d9a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a41      	ldr	r2, [pc, #260]	; (8003da0 <HAL_DMA_IRQHandler+0xe84>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d04a      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xe1a>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a3f      	ldr	r2, [pc, #252]	; (8003da4 <HAL_DMA_IRQHandler+0xe88>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d045      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xe1a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a3e      	ldr	r2, [pc, #248]	; (8003da8 <HAL_DMA_IRQHandler+0xe8c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d040      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xe1a>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a3c      	ldr	r2, [pc, #240]	; (8003dac <HAL_DMA_IRQHandler+0xe90>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d03b      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xe1a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a3b      	ldr	r2, [pc, #236]	; (8003db0 <HAL_DMA_IRQHandler+0xe94>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d036      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xe1a>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a39      	ldr	r2, [pc, #228]	; (8003db4 <HAL_DMA_IRQHandler+0xe98>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d031      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xe1a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a38      	ldr	r2, [pc, #224]	; (8003db8 <HAL_DMA_IRQHandler+0xe9c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d02c      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xe1a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a36      	ldr	r2, [pc, #216]	; (8003dbc <HAL_DMA_IRQHandler+0xea0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d027      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xe1a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a35      	ldr	r2, [pc, #212]	; (8003dc0 <HAL_DMA_IRQHandler+0xea4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d022      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xe1a>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a33      	ldr	r2, [pc, #204]	; (8003dc4 <HAL_DMA_IRQHandler+0xea8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d01d      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xe1a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a32      	ldr	r2, [pc, #200]	; (8003dc8 <HAL_DMA_IRQHandler+0xeac>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d018      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xe1a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a30      	ldr	r2, [pc, #192]	; (8003dcc <HAL_DMA_IRQHandler+0xeb0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xe1a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a2f      	ldr	r2, [pc, #188]	; (8003dd0 <HAL_DMA_IRQHandler+0xeb4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00e      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xe1a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a2d      	ldr	r2, [pc, #180]	; (8003dd4 <HAL_DMA_IRQHandler+0xeb8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xe1a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a2c      	ldr	r2, [pc, #176]	; (8003dd8 <HAL_DMA_IRQHandler+0xebc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xe1a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a2a      	ldr	r2, [pc, #168]	; (8003ddc <HAL_DMA_IRQHandler+0xec0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d108      	bne.n	8003d48 <HAL_DMA_IRQHandler+0xe2c>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 021c 	bic.w	r2, r2, #28
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	e007      	b.n	8003d58 <HAL_DMA_IRQHandler+0xe3c>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 020e 	bic.w	r2, r2, #14
 8003d56:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	2201      	movs	r2, #1
 8003d62:	409a      	lsls	r2, r3
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	4798      	blx	r3
 8003d8e:	e004      	b.n	8003d9a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003d90:	bf00      	nop
 8003d92:	e002      	b.n	8003d9a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d94:	bf00      	nop
 8003d96:	e000      	b.n	8003d9a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d98:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d9a:	3728      	adds	r7, #40	; 0x28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40020010 	.word	0x40020010
 8003da4:	40020028 	.word	0x40020028
 8003da8:	40020040 	.word	0x40020040
 8003dac:	40020058 	.word	0x40020058
 8003db0:	40020070 	.word	0x40020070
 8003db4:	40020088 	.word	0x40020088
 8003db8:	400200a0 	.word	0x400200a0
 8003dbc:	400200b8 	.word	0x400200b8
 8003dc0:	40020410 	.word	0x40020410
 8003dc4:	40020428 	.word	0x40020428
 8003dc8:	40020440 	.word	0x40020440
 8003dcc:	40020458 	.word	0x40020458
 8003dd0:	40020470 	.word	0x40020470
 8003dd4:	40020488 	.word	0x40020488
 8003dd8:	400204a0 	.word	0x400204a0
 8003ddc:	400204b8 	.word	0x400204b8

08003de0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a7f      	ldr	r2, [pc, #508]	; (8003ffc <DMA_SetConfig+0x21c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d072      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a7d      	ldr	r2, [pc, #500]	; (8004000 <DMA_SetConfig+0x220>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d06d      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a7c      	ldr	r2, [pc, #496]	; (8004004 <DMA_SetConfig+0x224>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d068      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a7a      	ldr	r2, [pc, #488]	; (8004008 <DMA_SetConfig+0x228>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d063      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a79      	ldr	r2, [pc, #484]	; (800400c <DMA_SetConfig+0x22c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d05e      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a77      	ldr	r2, [pc, #476]	; (8004010 <DMA_SetConfig+0x230>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d059      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a76      	ldr	r2, [pc, #472]	; (8004014 <DMA_SetConfig+0x234>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d054      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a74      	ldr	r2, [pc, #464]	; (8004018 <DMA_SetConfig+0x238>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d04f      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a73      	ldr	r2, [pc, #460]	; (800401c <DMA_SetConfig+0x23c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d04a      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a71      	ldr	r2, [pc, #452]	; (8004020 <DMA_SetConfig+0x240>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d045      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a70      	ldr	r2, [pc, #448]	; (8004024 <DMA_SetConfig+0x244>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d040      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a6e      	ldr	r2, [pc, #440]	; (8004028 <DMA_SetConfig+0x248>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d03b      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a6d      	ldr	r2, [pc, #436]	; (800402c <DMA_SetConfig+0x24c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d036      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a6b      	ldr	r2, [pc, #428]	; (8004030 <DMA_SetConfig+0x250>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d031      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a6a      	ldr	r2, [pc, #424]	; (8004034 <DMA_SetConfig+0x254>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d02c      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a68      	ldr	r2, [pc, #416]	; (8004038 <DMA_SetConfig+0x258>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d027      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a67      	ldr	r2, [pc, #412]	; (800403c <DMA_SetConfig+0x25c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d022      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a65      	ldr	r2, [pc, #404]	; (8004040 <DMA_SetConfig+0x260>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d01d      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a64      	ldr	r2, [pc, #400]	; (8004044 <DMA_SetConfig+0x264>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d018      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a62      	ldr	r2, [pc, #392]	; (8004048 <DMA_SetConfig+0x268>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d013      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a61      	ldr	r2, [pc, #388]	; (800404c <DMA_SetConfig+0x26c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00e      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a5f      	ldr	r2, [pc, #380]	; (8004050 <DMA_SetConfig+0x270>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d009      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a5e      	ldr	r2, [pc, #376]	; (8004054 <DMA_SetConfig+0x274>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d004      	beq.n	8003eea <DMA_SetConfig+0x10a>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a5c      	ldr	r2, [pc, #368]	; (8004058 <DMA_SetConfig+0x278>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d101      	bne.n	8003eee <DMA_SetConfig+0x10e>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <DMA_SetConfig+0x110>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00d      	beq.n	8003f10 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003efc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d004      	beq.n	8003f10 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f0e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a39      	ldr	r2, [pc, #228]	; (8003ffc <DMA_SetConfig+0x21c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d04a      	beq.n	8003fb0 <DMA_SetConfig+0x1d0>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a38      	ldr	r2, [pc, #224]	; (8004000 <DMA_SetConfig+0x220>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d045      	beq.n	8003fb0 <DMA_SetConfig+0x1d0>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a36      	ldr	r2, [pc, #216]	; (8004004 <DMA_SetConfig+0x224>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d040      	beq.n	8003fb0 <DMA_SetConfig+0x1d0>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a35      	ldr	r2, [pc, #212]	; (8004008 <DMA_SetConfig+0x228>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d03b      	beq.n	8003fb0 <DMA_SetConfig+0x1d0>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a33      	ldr	r2, [pc, #204]	; (800400c <DMA_SetConfig+0x22c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d036      	beq.n	8003fb0 <DMA_SetConfig+0x1d0>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a32      	ldr	r2, [pc, #200]	; (8004010 <DMA_SetConfig+0x230>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d031      	beq.n	8003fb0 <DMA_SetConfig+0x1d0>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a30      	ldr	r2, [pc, #192]	; (8004014 <DMA_SetConfig+0x234>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d02c      	beq.n	8003fb0 <DMA_SetConfig+0x1d0>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a2f      	ldr	r2, [pc, #188]	; (8004018 <DMA_SetConfig+0x238>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d027      	beq.n	8003fb0 <DMA_SetConfig+0x1d0>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a2d      	ldr	r2, [pc, #180]	; (800401c <DMA_SetConfig+0x23c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d022      	beq.n	8003fb0 <DMA_SetConfig+0x1d0>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a2c      	ldr	r2, [pc, #176]	; (8004020 <DMA_SetConfig+0x240>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d01d      	beq.n	8003fb0 <DMA_SetConfig+0x1d0>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a2a      	ldr	r2, [pc, #168]	; (8004024 <DMA_SetConfig+0x244>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d018      	beq.n	8003fb0 <DMA_SetConfig+0x1d0>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a29      	ldr	r2, [pc, #164]	; (8004028 <DMA_SetConfig+0x248>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d013      	beq.n	8003fb0 <DMA_SetConfig+0x1d0>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a27      	ldr	r2, [pc, #156]	; (800402c <DMA_SetConfig+0x24c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00e      	beq.n	8003fb0 <DMA_SetConfig+0x1d0>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a26      	ldr	r2, [pc, #152]	; (8004030 <DMA_SetConfig+0x250>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d009      	beq.n	8003fb0 <DMA_SetConfig+0x1d0>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a24      	ldr	r2, [pc, #144]	; (8004034 <DMA_SetConfig+0x254>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <DMA_SetConfig+0x1d0>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a23      	ldr	r2, [pc, #140]	; (8004038 <DMA_SetConfig+0x258>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d101      	bne.n	8003fb4 <DMA_SetConfig+0x1d4>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <DMA_SetConfig+0x1d6>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d059      	beq.n	800406e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbe:	f003 031f 	and.w	r3, r3, #31
 8003fc2:	223f      	movs	r2, #63	; 0x3f
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fd8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b40      	cmp	r3, #64	; 0x40
 8003fe8:	d138      	bne.n	800405c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ffa:	e0ae      	b.n	800415a <DMA_SetConfig+0x37a>
 8003ffc:	40020010 	.word	0x40020010
 8004000:	40020028 	.word	0x40020028
 8004004:	40020040 	.word	0x40020040
 8004008:	40020058 	.word	0x40020058
 800400c:	40020070 	.word	0x40020070
 8004010:	40020088 	.word	0x40020088
 8004014:	400200a0 	.word	0x400200a0
 8004018:	400200b8 	.word	0x400200b8
 800401c:	40020410 	.word	0x40020410
 8004020:	40020428 	.word	0x40020428
 8004024:	40020440 	.word	0x40020440
 8004028:	40020458 	.word	0x40020458
 800402c:	40020470 	.word	0x40020470
 8004030:	40020488 	.word	0x40020488
 8004034:	400204a0 	.word	0x400204a0
 8004038:	400204b8 	.word	0x400204b8
 800403c:	58025408 	.word	0x58025408
 8004040:	5802541c 	.word	0x5802541c
 8004044:	58025430 	.word	0x58025430
 8004048:	58025444 	.word	0x58025444
 800404c:	58025458 	.word	0x58025458
 8004050:	5802546c 	.word	0x5802546c
 8004054:	58025480 	.word	0x58025480
 8004058:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	60da      	str	r2, [r3, #12]
}
 800406c:	e075      	b.n	800415a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a3d      	ldr	r2, [pc, #244]	; (8004168 <DMA_SetConfig+0x388>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d04a      	beq.n	800410e <DMA_SetConfig+0x32e>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a3b      	ldr	r2, [pc, #236]	; (800416c <DMA_SetConfig+0x38c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d045      	beq.n	800410e <DMA_SetConfig+0x32e>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a3a      	ldr	r2, [pc, #232]	; (8004170 <DMA_SetConfig+0x390>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d040      	beq.n	800410e <DMA_SetConfig+0x32e>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a38      	ldr	r2, [pc, #224]	; (8004174 <DMA_SetConfig+0x394>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d03b      	beq.n	800410e <DMA_SetConfig+0x32e>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a37      	ldr	r2, [pc, #220]	; (8004178 <DMA_SetConfig+0x398>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d036      	beq.n	800410e <DMA_SetConfig+0x32e>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a35      	ldr	r2, [pc, #212]	; (800417c <DMA_SetConfig+0x39c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d031      	beq.n	800410e <DMA_SetConfig+0x32e>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a34      	ldr	r2, [pc, #208]	; (8004180 <DMA_SetConfig+0x3a0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d02c      	beq.n	800410e <DMA_SetConfig+0x32e>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a32      	ldr	r2, [pc, #200]	; (8004184 <DMA_SetConfig+0x3a4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d027      	beq.n	800410e <DMA_SetConfig+0x32e>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a31      	ldr	r2, [pc, #196]	; (8004188 <DMA_SetConfig+0x3a8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d022      	beq.n	800410e <DMA_SetConfig+0x32e>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a2f      	ldr	r2, [pc, #188]	; (800418c <DMA_SetConfig+0x3ac>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d01d      	beq.n	800410e <DMA_SetConfig+0x32e>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a2e      	ldr	r2, [pc, #184]	; (8004190 <DMA_SetConfig+0x3b0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d018      	beq.n	800410e <DMA_SetConfig+0x32e>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a2c      	ldr	r2, [pc, #176]	; (8004194 <DMA_SetConfig+0x3b4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <DMA_SetConfig+0x32e>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a2b      	ldr	r2, [pc, #172]	; (8004198 <DMA_SetConfig+0x3b8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00e      	beq.n	800410e <DMA_SetConfig+0x32e>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a29      	ldr	r2, [pc, #164]	; (800419c <DMA_SetConfig+0x3bc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d009      	beq.n	800410e <DMA_SetConfig+0x32e>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a28      	ldr	r2, [pc, #160]	; (80041a0 <DMA_SetConfig+0x3c0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d004      	beq.n	800410e <DMA_SetConfig+0x32e>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a26      	ldr	r2, [pc, #152]	; (80041a4 <DMA_SetConfig+0x3c4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <DMA_SetConfig+0x332>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <DMA_SetConfig+0x334>
 8004112:	2300      	movs	r3, #0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d020      	beq.n	800415a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	2201      	movs	r2, #1
 8004122:	409a      	lsls	r2, r3
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b40      	cmp	r3, #64	; 0x40
 8004136:	d108      	bne.n	800414a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	60da      	str	r2, [r3, #12]
}
 8004148:	e007      	b.n	800415a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	60da      	str	r2, [r3, #12]
}
 800415a:	bf00      	nop
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	48022c08 	.word	0x48022c08
 800416c:	48022c1c 	.word	0x48022c1c
 8004170:	48022c30 	.word	0x48022c30
 8004174:	48022c44 	.word	0x48022c44
 8004178:	48022c58 	.word	0x48022c58
 800417c:	48022c6c 	.word	0x48022c6c
 8004180:	48022c80 	.word	0x48022c80
 8004184:	48022c94 	.word	0x48022c94
 8004188:	58025408 	.word	0x58025408
 800418c:	5802541c 	.word	0x5802541c
 8004190:	58025430 	.word	0x58025430
 8004194:	58025444 	.word	0x58025444
 8004198:	58025458 	.word	0x58025458
 800419c:	5802546c 	.word	0x5802546c
 80041a0:	58025480 	.word	0x58025480
 80041a4:	58025494 	.word	0x58025494

080041a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a42      	ldr	r2, [pc, #264]	; (80042c0 <DMA_CalcBaseAndBitshift+0x118>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d04a      	beq.n	8004250 <DMA_CalcBaseAndBitshift+0xa8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a41      	ldr	r2, [pc, #260]	; (80042c4 <DMA_CalcBaseAndBitshift+0x11c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d045      	beq.n	8004250 <DMA_CalcBaseAndBitshift+0xa8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a3f      	ldr	r2, [pc, #252]	; (80042c8 <DMA_CalcBaseAndBitshift+0x120>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d040      	beq.n	8004250 <DMA_CalcBaseAndBitshift+0xa8>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a3e      	ldr	r2, [pc, #248]	; (80042cc <DMA_CalcBaseAndBitshift+0x124>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d03b      	beq.n	8004250 <DMA_CalcBaseAndBitshift+0xa8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a3c      	ldr	r2, [pc, #240]	; (80042d0 <DMA_CalcBaseAndBitshift+0x128>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d036      	beq.n	8004250 <DMA_CalcBaseAndBitshift+0xa8>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a3b      	ldr	r2, [pc, #236]	; (80042d4 <DMA_CalcBaseAndBitshift+0x12c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d031      	beq.n	8004250 <DMA_CalcBaseAndBitshift+0xa8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a39      	ldr	r2, [pc, #228]	; (80042d8 <DMA_CalcBaseAndBitshift+0x130>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d02c      	beq.n	8004250 <DMA_CalcBaseAndBitshift+0xa8>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a38      	ldr	r2, [pc, #224]	; (80042dc <DMA_CalcBaseAndBitshift+0x134>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d027      	beq.n	8004250 <DMA_CalcBaseAndBitshift+0xa8>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a36      	ldr	r2, [pc, #216]	; (80042e0 <DMA_CalcBaseAndBitshift+0x138>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d022      	beq.n	8004250 <DMA_CalcBaseAndBitshift+0xa8>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a35      	ldr	r2, [pc, #212]	; (80042e4 <DMA_CalcBaseAndBitshift+0x13c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d01d      	beq.n	8004250 <DMA_CalcBaseAndBitshift+0xa8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a33      	ldr	r2, [pc, #204]	; (80042e8 <DMA_CalcBaseAndBitshift+0x140>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d018      	beq.n	8004250 <DMA_CalcBaseAndBitshift+0xa8>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a32      	ldr	r2, [pc, #200]	; (80042ec <DMA_CalcBaseAndBitshift+0x144>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d013      	beq.n	8004250 <DMA_CalcBaseAndBitshift+0xa8>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a30      	ldr	r2, [pc, #192]	; (80042f0 <DMA_CalcBaseAndBitshift+0x148>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00e      	beq.n	8004250 <DMA_CalcBaseAndBitshift+0xa8>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a2f      	ldr	r2, [pc, #188]	; (80042f4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d009      	beq.n	8004250 <DMA_CalcBaseAndBitshift+0xa8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a2d      	ldr	r2, [pc, #180]	; (80042f8 <DMA_CalcBaseAndBitshift+0x150>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <DMA_CalcBaseAndBitshift+0xa8>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a2c      	ldr	r2, [pc, #176]	; (80042fc <DMA_CalcBaseAndBitshift+0x154>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d101      	bne.n	8004254 <DMA_CalcBaseAndBitshift+0xac>
 8004250:	2301      	movs	r3, #1
 8004252:	e000      	b.n	8004256 <DMA_CalcBaseAndBitshift+0xae>
 8004254:	2300      	movs	r3, #0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d024      	beq.n	80042a4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	3b10      	subs	r3, #16
 8004262:	4a27      	ldr	r2, [pc, #156]	; (8004300 <DMA_CalcBaseAndBitshift+0x158>)
 8004264:	fba2 2303 	umull	r2, r3, r2, r3
 8004268:	091b      	lsrs	r3, r3, #4
 800426a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	4a24      	ldr	r2, [pc, #144]	; (8004304 <DMA_CalcBaseAndBitshift+0x15c>)
 8004274:	5cd3      	ldrb	r3, [r2, r3]
 8004276:	461a      	mov	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b03      	cmp	r3, #3
 8004280:	d908      	bls.n	8004294 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	4b1f      	ldr	r3, [pc, #124]	; (8004308 <DMA_CalcBaseAndBitshift+0x160>)
 800428a:	4013      	ands	r3, r2
 800428c:	1d1a      	adds	r2, r3, #4
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	659a      	str	r2, [r3, #88]	; 0x58
 8004292:	e00d      	b.n	80042b0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <DMA_CalcBaseAndBitshift+0x160>)
 800429c:	4013      	ands	r3, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6593      	str	r3, [r2, #88]	; 0x58
 80042a2:	e005      	b.n	80042b0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	40020010 	.word	0x40020010
 80042c4:	40020028 	.word	0x40020028
 80042c8:	40020040 	.word	0x40020040
 80042cc:	40020058 	.word	0x40020058
 80042d0:	40020070 	.word	0x40020070
 80042d4:	40020088 	.word	0x40020088
 80042d8:	400200a0 	.word	0x400200a0
 80042dc:	400200b8 	.word	0x400200b8
 80042e0:	40020410 	.word	0x40020410
 80042e4:	40020428 	.word	0x40020428
 80042e8:	40020440 	.word	0x40020440
 80042ec:	40020458 	.word	0x40020458
 80042f0:	40020470 	.word	0x40020470
 80042f4:	40020488 	.word	0x40020488
 80042f8:	400204a0 	.word	0x400204a0
 80042fc:	400204b8 	.word	0x400204b8
 8004300:	aaaaaaab 	.word	0xaaaaaaab
 8004304:	0800b234 	.word	0x0800b234
 8004308:	fffffc00 	.word	0xfffffc00

0800430c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d120      	bne.n	8004362 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004324:	2b03      	cmp	r3, #3
 8004326:	d858      	bhi.n	80043da <DMA_CheckFifoParam+0xce>
 8004328:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <DMA_CheckFifoParam+0x24>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004341 	.word	0x08004341
 8004334:	08004353 	.word	0x08004353
 8004338:	08004341 	.word	0x08004341
 800433c:	080043db 	.word	0x080043db
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d048      	beq.n	80043de <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004350:	e045      	b.n	80043de <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800435a:	d142      	bne.n	80043e2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004360:	e03f      	b.n	80043e2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436a:	d123      	bne.n	80043b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	2b03      	cmp	r3, #3
 8004372:	d838      	bhi.n	80043e6 <DMA_CheckFifoParam+0xda>
 8004374:	a201      	add	r2, pc, #4	; (adr r2, 800437c <DMA_CheckFifoParam+0x70>)
 8004376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437a:	bf00      	nop
 800437c:	0800438d 	.word	0x0800438d
 8004380:	08004393 	.word	0x08004393
 8004384:	0800438d 	.word	0x0800438d
 8004388:	080043a5 	.word	0x080043a5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
        break;
 8004390:	e030      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d025      	beq.n	80043ea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043a2:	e022      	b.n	80043ea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043ac:	d11f      	bne.n	80043ee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043b2:	e01c      	b.n	80043ee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d902      	bls.n	80043c2 <DMA_CheckFifoParam+0xb6>
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d003      	beq.n	80043c8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80043c0:	e018      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
        break;
 80043c6:	e015      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00e      	beq.n	80043f2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
    break;
 80043d8:	e00b      	b.n	80043f2 <DMA_CheckFifoParam+0xe6>
        break;
 80043da:	bf00      	nop
 80043dc:	e00a      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
        break;
 80043de:	bf00      	nop
 80043e0:	e008      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
        break;
 80043e2:	bf00      	nop
 80043e4:	e006      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
        break;
 80043e6:	bf00      	nop
 80043e8:	e004      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
        break;
 80043ea:	bf00      	nop
 80043ec:	e002      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
        break;
 80043ee:	bf00      	nop
 80043f0:	e000      	b.n	80043f4 <DMA_CheckFifoParam+0xe8>
    break;
 80043f2:	bf00      	nop
    }
  }

  return status;
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop

08004404 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a38      	ldr	r2, [pc, #224]	; (80044f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d022      	beq.n	8004462 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a36      	ldr	r2, [pc, #216]	; (80044fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d01d      	beq.n	8004462 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a35      	ldr	r2, [pc, #212]	; (8004500 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d018      	beq.n	8004462 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a33      	ldr	r2, [pc, #204]	; (8004504 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d013      	beq.n	8004462 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a32      	ldr	r2, [pc, #200]	; (8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00e      	beq.n	8004462 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a30      	ldr	r2, [pc, #192]	; (800450c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d009      	beq.n	8004462 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a2f      	ldr	r2, [pc, #188]	; (8004510 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d004      	beq.n	8004462 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a2d      	ldr	r2, [pc, #180]	; (8004514 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d101      	bne.n	8004466 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004466:	2300      	movs	r3, #0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01a      	beq.n	80044a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	3b08      	subs	r3, #8
 8004474:	4a28      	ldr	r2, [pc, #160]	; (8004518 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	091b      	lsrs	r3, r3, #4
 800447c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4b26      	ldr	r3, [pc, #152]	; (800451c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	461a      	mov	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a24      	ldr	r2, [pc, #144]	; (8004520 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004490:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	2201      	movs	r2, #1
 800449a:	409a      	lsls	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80044a0:	e024      	b.n	80044ec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	3b10      	subs	r3, #16
 80044aa:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80044ac:	fba2 2303 	umull	r2, r3, r2, r3
 80044b0:	091b      	lsrs	r3, r3, #4
 80044b2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4a1c      	ldr	r2, [pc, #112]	; (8004528 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d806      	bhi.n	80044ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4a1b      	ldr	r2, [pc, #108]	; (800452c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d902      	bls.n	80044ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3308      	adds	r3, #8
 80044c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4b18      	ldr	r3, [pc, #96]	; (8004530 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	461a      	mov	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a16      	ldr	r2, [pc, #88]	; (8004534 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80044dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f003 031f 	and.w	r3, r3, #31
 80044e4:	2201      	movs	r2, #1
 80044e6:	409a      	lsls	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044ec:	bf00      	nop
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	58025408 	.word	0x58025408
 80044fc:	5802541c 	.word	0x5802541c
 8004500:	58025430 	.word	0x58025430
 8004504:	58025444 	.word	0x58025444
 8004508:	58025458 	.word	0x58025458
 800450c:	5802546c 	.word	0x5802546c
 8004510:	58025480 	.word	0x58025480
 8004514:	58025494 	.word	0x58025494
 8004518:	cccccccd 	.word	0xcccccccd
 800451c:	16009600 	.word	0x16009600
 8004520:	58025880 	.word	0x58025880
 8004524:	aaaaaaab 	.word	0xaaaaaaab
 8004528:	400204b8 	.word	0x400204b8
 800452c:	4002040f 	.word	0x4002040f
 8004530:	10008200 	.word	0x10008200
 8004534:	40020880 	.word	0x40020880

08004538 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	b2db      	uxtb	r3, r3
 8004546:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d04a      	beq.n	80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b08      	cmp	r3, #8
 8004552:	d847      	bhi.n	80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a25      	ldr	r2, [pc, #148]	; (80045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d022      	beq.n	80045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a24      	ldr	r2, [pc, #144]	; (80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d01d      	beq.n	80045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a22      	ldr	r2, [pc, #136]	; (80045f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d018      	beq.n	80045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a21      	ldr	r2, [pc, #132]	; (80045fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d013      	beq.n	80045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a1f      	ldr	r2, [pc, #124]	; (8004600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00e      	beq.n	80045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1e      	ldr	r2, [pc, #120]	; (8004604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d009      	beq.n	80045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1c      	ldr	r2, [pc, #112]	; (8004608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d004      	beq.n	80045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1b      	ldr	r2, [pc, #108]	; (800460c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d101      	bne.n	80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80045a8:	2300      	movs	r3, #0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4b17      	ldr	r3, [pc, #92]	; (8004610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	461a      	mov	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a15      	ldr	r2, [pc, #84]	; (8004614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80045c0:	671a      	str	r2, [r3, #112]	; 0x70
 80045c2:	e009      	b.n	80045d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4b14      	ldr	r3, [pc, #80]	; (8004618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	461a      	mov	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a11      	ldr	r2, [pc, #68]	; (800461c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80045d6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3b01      	subs	r3, #1
 80045dc:	2201      	movs	r2, #1
 80045de:	409a      	lsls	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	58025408 	.word	0x58025408
 80045f4:	5802541c 	.word	0x5802541c
 80045f8:	58025430 	.word	0x58025430
 80045fc:	58025444 	.word	0x58025444
 8004600:	58025458 	.word	0x58025458
 8004604:	5802546c 	.word	0x5802546c
 8004608:	58025480 	.word	0x58025480
 800460c:	58025494 	.word	0x58025494
 8004610:	1600963f 	.word	0x1600963f
 8004614:	58025940 	.word	0x58025940
 8004618:	1000823f 	.word	0x1000823f
 800461c:	40020940 	.word	0x40020940

08004620 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	2b80      	cmp	r3, #128	; 0x80
 8004638:	d105      	bne.n	8004646 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004640:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e315      	b.n	8004c72 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8004650:	2302      	movs	r3, #2
 8004652:	e30e      	b.n	8004c72 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	f040 82fd 	bne.w	8004c64 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2202      	movs	r2, #2
 800466e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a82      	ldr	r2, [pc, #520]	; (8004888 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d04a      	beq.n	8004718 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a81      	ldr	r2, [pc, #516]	; (800488c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d045      	beq.n	8004718 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a7f      	ldr	r2, [pc, #508]	; (8004890 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d040      	beq.n	8004718 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a7e      	ldr	r2, [pc, #504]	; (8004894 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d03b      	beq.n	8004718 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a7c      	ldr	r2, [pc, #496]	; (8004898 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d036      	beq.n	8004718 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a7b      	ldr	r2, [pc, #492]	; (800489c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d031      	beq.n	8004718 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a79      	ldr	r2, [pc, #484]	; (80048a0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d02c      	beq.n	8004718 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a78      	ldr	r2, [pc, #480]	; (80048a4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d027      	beq.n	8004718 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a76      	ldr	r2, [pc, #472]	; (80048a8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d022      	beq.n	8004718 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a75      	ldr	r2, [pc, #468]	; (80048ac <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d01d      	beq.n	8004718 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a73      	ldr	r2, [pc, #460]	; (80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d018      	beq.n	8004718 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a72      	ldr	r2, [pc, #456]	; (80048b4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d013      	beq.n	8004718 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a70      	ldr	r2, [pc, #448]	; (80048b8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00e      	beq.n	8004718 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a6f      	ldr	r2, [pc, #444]	; (80048bc <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d009      	beq.n	8004718 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a6d      	ldr	r2, [pc, #436]	; (80048c0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d004      	beq.n	8004718 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a6c      	ldr	r2, [pc, #432]	; (80048c4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d101      	bne.n	800471c <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 800471c:	2300      	movs	r3, #0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d018      	beq.n	8004754 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004730:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473e:	3308      	adds	r3, #8
 8004740:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	223f      	movs	r2, #63	; 0x3f
 800474c:	409a      	lsls	r2, r3
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	e018      	b.n	8004786 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6819      	ldr	r1, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	f248 0320 	movw	r3, #32800	; 0x8020
 8004762:	430b      	orrs	r3, r1
 8004764:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004772:	3304      	adds	r3, #4
 8004774:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	2201      	movs	r2, #1
 8004780:	409a      	lsls	r2, r3
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	68b9      	ldr	r1, [r7, #8]
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 fb41 	bl	8004e14 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a3c      	ldr	r2, [pc, #240]	; (8004888 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d072      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a3a      	ldr	r2, [pc, #232]	; (800488c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d06d      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a39      	ldr	r2, [pc, #228]	; (8004890 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d068      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a37      	ldr	r2, [pc, #220]	; (8004894 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d063      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a36      	ldr	r2, [pc, #216]	; (8004898 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d05e      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a34      	ldr	r2, [pc, #208]	; (800489c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d059      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a33      	ldr	r2, [pc, #204]	; (80048a0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d054      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a31      	ldr	r2, [pc, #196]	; (80048a4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d04f      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a30      	ldr	r2, [pc, #192]	; (80048a8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d04a      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a2e      	ldr	r2, [pc, #184]	; (80048ac <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d045      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a2d      	ldr	r2, [pc, #180]	; (80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d040      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a2b      	ldr	r2, [pc, #172]	; (80048b4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d03b      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a2a      	ldr	r2, [pc, #168]	; (80048b8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d036      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a28      	ldr	r2, [pc, #160]	; (80048bc <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d031      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a27      	ldr	r2, [pc, #156]	; (80048c0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d02c      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a25      	ldr	r2, [pc, #148]	; (80048c4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d027      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a24      	ldr	r2, [pc, #144]	; (80048c8 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d022      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a22      	ldr	r2, [pc, #136]	; (80048cc <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d01d      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a21      	ldr	r2, [pc, #132]	; (80048d0 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d018      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1f      	ldr	r2, [pc, #124]	; (80048d4 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1e      	ldr	r2, [pc, #120]	; (80048d8 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00e      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1c      	ldr	r2, [pc, #112]	; (80048dc <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d009      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1b      	ldr	r2, [pc, #108]	; (80048e0 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d004      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a19      	ldr	r2, [pc, #100]	; (80048e4 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d132      	bne.n	80048e8 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8004882:	2301      	movs	r3, #1
 8004884:	e031      	b.n	80048ea <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8004886:	bf00      	nop
 8004888:	40020010 	.word	0x40020010
 800488c:	40020028 	.word	0x40020028
 8004890:	40020040 	.word	0x40020040
 8004894:	40020058 	.word	0x40020058
 8004898:	40020070 	.word	0x40020070
 800489c:	40020088 	.word	0x40020088
 80048a0:	400200a0 	.word	0x400200a0
 80048a4:	400200b8 	.word	0x400200b8
 80048a8:	40020410 	.word	0x40020410
 80048ac:	40020428 	.word	0x40020428
 80048b0:	40020440 	.word	0x40020440
 80048b4:	40020458 	.word	0x40020458
 80048b8:	40020470 	.word	0x40020470
 80048bc:	40020488 	.word	0x40020488
 80048c0:	400204a0 	.word	0x400204a0
 80048c4:	400204b8 	.word	0x400204b8
 80048c8:	58025408 	.word	0x58025408
 80048cc:	5802541c 	.word	0x5802541c
 80048d0:	58025430 	.word	0x58025430
 80048d4:	58025444 	.word	0x58025444
 80048d8:	58025458 	.word	0x58025458
 80048dc:	5802546c 	.word	0x5802546c
 80048e0:	58025480 	.word	0x58025480
 80048e4:	58025494 	.word	0x58025494
 80048e8:	2300      	movs	r3, #0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00d      	beq.n	800490a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80048f6:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d004      	beq.n	800490a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004908:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a3b      	ldr	r2, [pc, #236]	; (80049fc <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d04a      	beq.n	80049aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a39      	ldr	r2, [pc, #228]	; (8004a00 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d045      	beq.n	80049aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a38      	ldr	r2, [pc, #224]	; (8004a04 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d040      	beq.n	80049aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a36      	ldr	r2, [pc, #216]	; (8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d03b      	beq.n	80049aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a35      	ldr	r2, [pc, #212]	; (8004a0c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d036      	beq.n	80049aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a33      	ldr	r2, [pc, #204]	; (8004a10 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d031      	beq.n	80049aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a32      	ldr	r2, [pc, #200]	; (8004a14 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d02c      	beq.n	80049aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a30      	ldr	r2, [pc, #192]	; (8004a18 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d027      	beq.n	80049aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a2f      	ldr	r2, [pc, #188]	; (8004a1c <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d022      	beq.n	80049aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a2d      	ldr	r2, [pc, #180]	; (8004a20 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d01d      	beq.n	80049aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a2c      	ldr	r2, [pc, #176]	; (8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d018      	beq.n	80049aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a2a      	ldr	r2, [pc, #168]	; (8004a28 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d013      	beq.n	80049aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a29      	ldr	r2, [pc, #164]	; (8004a2c <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00e      	beq.n	80049aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a27      	ldr	r2, [pc, #156]	; (8004a30 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d009      	beq.n	80049aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a26      	ldr	r2, [pc, #152]	; (8004a34 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d004      	beq.n	80049aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a24      	ldr	r2, [pc, #144]	; (8004a38 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d101      	bne.n	80049ae <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80049ae:	2300      	movs	r3, #0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d043      	beq.n	8004a3c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f023 021e 	bic.w	r2, r3, #30
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0216 	orr.w	r2, r2, #22
 80049c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695a      	ldr	r2, [r3, #20]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049d6:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d103      	bne.n	80049e8 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d043      	beq.n	8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0208 	orr.w	r2, r2, #8
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	e03a      	b.n	8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 80049fa:	bf00      	nop
 80049fc:	40020010 	.word	0x40020010
 8004a00:	40020028 	.word	0x40020028
 8004a04:	40020040 	.word	0x40020040
 8004a08:	40020058 	.word	0x40020058
 8004a0c:	40020070 	.word	0x40020070
 8004a10:	40020088 	.word	0x40020088
 8004a14:	400200a0 	.word	0x400200a0
 8004a18:	400200b8 	.word	0x400200b8
 8004a1c:	40020410 	.word	0x40020410
 8004a20:	40020428 	.word	0x40020428
 8004a24:	40020440 	.word	0x40020440
 8004a28:	40020458 	.word	0x40020458
 8004a2c:	40020470 	.word	0x40020470
 8004a30:	40020488 	.word	0x40020488
 8004a34:	400204a0 	.word	0x400204a0
 8004a38:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f023 020e 	bic.w	r2, r3, #14
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 020a 	orr.w	r2, r2, #10
 8004a4e:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d103      	bne.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0204 	orr.w	r2, r2, #4
 8004a6e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a81      	ldr	r2, [pc, #516]	; (8004c7c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d072      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a80      	ldr	r2, [pc, #512]	; (8004c80 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d06d      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a7e      	ldr	r2, [pc, #504]	; (8004c84 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d068      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a7d      	ldr	r2, [pc, #500]	; (8004c88 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d063      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a7b      	ldr	r2, [pc, #492]	; (8004c8c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d05e      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a7a      	ldr	r2, [pc, #488]	; (8004c90 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d059      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a78      	ldr	r2, [pc, #480]	; (8004c94 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d054      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a77      	ldr	r2, [pc, #476]	; (8004c98 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d04f      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a75      	ldr	r2, [pc, #468]	; (8004c9c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d04a      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a74      	ldr	r2, [pc, #464]	; (8004ca0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d045      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a72      	ldr	r2, [pc, #456]	; (8004ca4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d040      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a71      	ldr	r2, [pc, #452]	; (8004ca8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d03b      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a6f      	ldr	r2, [pc, #444]	; (8004cac <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d036      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a6e      	ldr	r2, [pc, #440]	; (8004cb0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d031      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a6c      	ldr	r2, [pc, #432]	; (8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d02c      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a6b      	ldr	r2, [pc, #428]	; (8004cb8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d027      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a69      	ldr	r2, [pc, #420]	; (8004cbc <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d022      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a68      	ldr	r2, [pc, #416]	; (8004cc0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d01d      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a66      	ldr	r2, [pc, #408]	; (8004cc4 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d018      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a65      	ldr	r2, [pc, #404]	; (8004cc8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d013      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a63      	ldr	r2, [pc, #396]	; (8004ccc <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00e      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a62      	ldr	r2, [pc, #392]	; (8004cd0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d009      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a60      	ldr	r2, [pc, #384]	; (8004cd4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a5f      	ldr	r2, [pc, #380]	; (8004cd8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d101      	bne.n	8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8004b64:	2300      	movs	r3, #0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d01a      	beq.n	8004ba0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b86:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b9e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a35      	ldr	r2, [pc, #212]	; (8004c7c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d04a      	beq.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a34      	ldr	r2, [pc, #208]	; (8004c80 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d045      	beq.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a32      	ldr	r2, [pc, #200]	; (8004c84 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d040      	beq.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a31      	ldr	r2, [pc, #196]	; (8004c88 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d03b      	beq.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a2f      	ldr	r2, [pc, #188]	; (8004c8c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d036      	beq.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a2e      	ldr	r2, [pc, #184]	; (8004c90 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d031      	beq.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a2c      	ldr	r2, [pc, #176]	; (8004c94 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d02c      	beq.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a2b      	ldr	r2, [pc, #172]	; (8004c98 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d027      	beq.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a29      	ldr	r2, [pc, #164]	; (8004c9c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d022      	beq.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a28      	ldr	r2, [pc, #160]	; (8004ca0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d01d      	beq.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a26      	ldr	r2, [pc, #152]	; (8004ca4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d018      	beq.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a25      	ldr	r2, [pc, #148]	; (8004ca8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d013      	beq.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a23      	ldr	r2, [pc, #140]	; (8004cac <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00e      	beq.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a22      	ldr	r2, [pc, #136]	; (8004cb0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d009      	beq.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a20      	ldr	r2, [pc, #128]	; (8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d004      	beq.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a1f      	ldr	r2, [pc, #124]	; (8004cb8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d108      	bne.n	8004c52 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	e00e      	b.n	8004c70 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0201 	orr.w	r2, r2, #1
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	e005      	b.n	8004c70 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40020010 	.word	0x40020010
 8004c80:	40020028 	.word	0x40020028
 8004c84:	40020040 	.word	0x40020040
 8004c88:	40020058 	.word	0x40020058
 8004c8c:	40020070 	.word	0x40020070
 8004c90:	40020088 	.word	0x40020088
 8004c94:	400200a0 	.word	0x400200a0
 8004c98:	400200b8 	.word	0x400200b8
 8004c9c:	40020410 	.word	0x40020410
 8004ca0:	40020428 	.word	0x40020428
 8004ca4:	40020440 	.word	0x40020440
 8004ca8:	40020458 	.word	0x40020458
 8004cac:	40020470 	.word	0x40020470
 8004cb0:	40020488 	.word	0x40020488
 8004cb4:	400204a0 	.word	0x400204a0
 8004cb8:	400204b8 	.word	0x400204b8
 8004cbc:	58025408 	.word	0x58025408
 8004cc0:	5802541c 	.word	0x5802541c
 8004cc4:	58025430 	.word	0x58025430
 8004cc8:	58025444 	.word	0x58025444
 8004ccc:	58025458 	.word	0x58025458
 8004cd0:	5802546c 	.word	0x5802546c
 8004cd4:	58025480 	.word	0x58025480
 8004cd8:	58025494 	.word	0x58025494

08004cdc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a39      	ldr	r2, [pc, #228]	; (8004dd4 <HAL_DMAEx_ChangeMemory+0xf8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d04a      	beq.n	8004d8a <HAL_DMAEx_ChangeMemory+0xae>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a37      	ldr	r2, [pc, #220]	; (8004dd8 <HAL_DMAEx_ChangeMemory+0xfc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d045      	beq.n	8004d8a <HAL_DMAEx_ChangeMemory+0xae>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a36      	ldr	r2, [pc, #216]	; (8004ddc <HAL_DMAEx_ChangeMemory+0x100>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d040      	beq.n	8004d8a <HAL_DMAEx_ChangeMemory+0xae>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a34      	ldr	r2, [pc, #208]	; (8004de0 <HAL_DMAEx_ChangeMemory+0x104>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d03b      	beq.n	8004d8a <HAL_DMAEx_ChangeMemory+0xae>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a33      	ldr	r2, [pc, #204]	; (8004de4 <HAL_DMAEx_ChangeMemory+0x108>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d036      	beq.n	8004d8a <HAL_DMAEx_ChangeMemory+0xae>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a31      	ldr	r2, [pc, #196]	; (8004de8 <HAL_DMAEx_ChangeMemory+0x10c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d031      	beq.n	8004d8a <HAL_DMAEx_ChangeMemory+0xae>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a30      	ldr	r2, [pc, #192]	; (8004dec <HAL_DMAEx_ChangeMemory+0x110>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d02c      	beq.n	8004d8a <HAL_DMAEx_ChangeMemory+0xae>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a2e      	ldr	r2, [pc, #184]	; (8004df0 <HAL_DMAEx_ChangeMemory+0x114>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d027      	beq.n	8004d8a <HAL_DMAEx_ChangeMemory+0xae>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a2d      	ldr	r2, [pc, #180]	; (8004df4 <HAL_DMAEx_ChangeMemory+0x118>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d022      	beq.n	8004d8a <HAL_DMAEx_ChangeMemory+0xae>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a2b      	ldr	r2, [pc, #172]	; (8004df8 <HAL_DMAEx_ChangeMemory+0x11c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d01d      	beq.n	8004d8a <HAL_DMAEx_ChangeMemory+0xae>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a2a      	ldr	r2, [pc, #168]	; (8004dfc <HAL_DMAEx_ChangeMemory+0x120>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d018      	beq.n	8004d8a <HAL_DMAEx_ChangeMemory+0xae>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a28      	ldr	r2, [pc, #160]	; (8004e00 <HAL_DMAEx_ChangeMemory+0x124>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d013      	beq.n	8004d8a <HAL_DMAEx_ChangeMemory+0xae>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a27      	ldr	r2, [pc, #156]	; (8004e04 <HAL_DMAEx_ChangeMemory+0x128>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00e      	beq.n	8004d8a <HAL_DMAEx_ChangeMemory+0xae>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a25      	ldr	r2, [pc, #148]	; (8004e08 <HAL_DMAEx_ChangeMemory+0x12c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d009      	beq.n	8004d8a <HAL_DMAEx_ChangeMemory+0xae>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a24      	ldr	r2, [pc, #144]	; (8004e0c <HAL_DMAEx_ChangeMemory+0x130>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d004      	beq.n	8004d8a <HAL_DMAEx_ChangeMemory+0xae>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a22      	ldr	r2, [pc, #136]	; (8004e10 <HAL_DMAEx_ChangeMemory+0x134>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d101      	bne.n	8004d8e <HAL_DMAEx_ChangeMemory+0xb2>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <HAL_DMAEx_ChangeMemory+0xb4>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00c      	beq.n	8004dae <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8004d94:	79fb      	ldrb	r3, [r7, #7]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d104      	bne.n	8004da4 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	60da      	str	r2, [r3, #12]
 8004da2:	e010      	b.n	8004dc6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	611a      	str	r2, [r3, #16]
 8004dac:	e00b      	b.n	8004dc6 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	60da      	str	r2, [r3, #12]
 8004dbc:	e003      	b.n	8004dc6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	40020010 	.word	0x40020010
 8004dd8:	40020028 	.word	0x40020028
 8004ddc:	40020040 	.word	0x40020040
 8004de0:	40020058 	.word	0x40020058
 8004de4:	40020070 	.word	0x40020070
 8004de8:	40020088 	.word	0x40020088
 8004dec:	400200a0 	.word	0x400200a0
 8004df0:	400200b8 	.word	0x400200b8
 8004df4:	40020410 	.word	0x40020410
 8004df8:	40020428 	.word	0x40020428
 8004dfc:	40020440 	.word	0x40020440
 8004e00:	40020458 	.word	0x40020458
 8004e04:	40020470 	.word	0x40020470
 8004e08:	40020488 	.word	0x40020488
 8004e0c:	400204a0 	.word	0x400204a0
 8004e10:	400204b8 	.word	0x400204b8

08004e14 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a46      	ldr	r2, [pc, #280]	; (8004f40 <DMA_MultiBufferSetConfig+0x12c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d04a      	beq.n	8004ec2 <DMA_MultiBufferSetConfig+0xae>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a44      	ldr	r2, [pc, #272]	; (8004f44 <DMA_MultiBufferSetConfig+0x130>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d045      	beq.n	8004ec2 <DMA_MultiBufferSetConfig+0xae>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a43      	ldr	r2, [pc, #268]	; (8004f48 <DMA_MultiBufferSetConfig+0x134>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d040      	beq.n	8004ec2 <DMA_MultiBufferSetConfig+0xae>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a41      	ldr	r2, [pc, #260]	; (8004f4c <DMA_MultiBufferSetConfig+0x138>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d03b      	beq.n	8004ec2 <DMA_MultiBufferSetConfig+0xae>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a40      	ldr	r2, [pc, #256]	; (8004f50 <DMA_MultiBufferSetConfig+0x13c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d036      	beq.n	8004ec2 <DMA_MultiBufferSetConfig+0xae>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a3e      	ldr	r2, [pc, #248]	; (8004f54 <DMA_MultiBufferSetConfig+0x140>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d031      	beq.n	8004ec2 <DMA_MultiBufferSetConfig+0xae>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a3d      	ldr	r2, [pc, #244]	; (8004f58 <DMA_MultiBufferSetConfig+0x144>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d02c      	beq.n	8004ec2 <DMA_MultiBufferSetConfig+0xae>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a3b      	ldr	r2, [pc, #236]	; (8004f5c <DMA_MultiBufferSetConfig+0x148>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d027      	beq.n	8004ec2 <DMA_MultiBufferSetConfig+0xae>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a3a      	ldr	r2, [pc, #232]	; (8004f60 <DMA_MultiBufferSetConfig+0x14c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d022      	beq.n	8004ec2 <DMA_MultiBufferSetConfig+0xae>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a38      	ldr	r2, [pc, #224]	; (8004f64 <DMA_MultiBufferSetConfig+0x150>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d01d      	beq.n	8004ec2 <DMA_MultiBufferSetConfig+0xae>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a37      	ldr	r2, [pc, #220]	; (8004f68 <DMA_MultiBufferSetConfig+0x154>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d018      	beq.n	8004ec2 <DMA_MultiBufferSetConfig+0xae>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a35      	ldr	r2, [pc, #212]	; (8004f6c <DMA_MultiBufferSetConfig+0x158>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d013      	beq.n	8004ec2 <DMA_MultiBufferSetConfig+0xae>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a34      	ldr	r2, [pc, #208]	; (8004f70 <DMA_MultiBufferSetConfig+0x15c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00e      	beq.n	8004ec2 <DMA_MultiBufferSetConfig+0xae>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a32      	ldr	r2, [pc, #200]	; (8004f74 <DMA_MultiBufferSetConfig+0x160>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d009      	beq.n	8004ec2 <DMA_MultiBufferSetConfig+0xae>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a31      	ldr	r2, [pc, #196]	; (8004f78 <DMA_MultiBufferSetConfig+0x164>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d004      	beq.n	8004ec2 <DMA_MultiBufferSetConfig+0xae>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a2f      	ldr	r2, [pc, #188]	; (8004f7c <DMA_MultiBufferSetConfig+0x168>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d101      	bne.n	8004ec6 <DMA_MultiBufferSetConfig+0xb2>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <DMA_MultiBufferSetConfig+0xb4>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d019      	beq.n	8004f00 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b40      	cmp	r3, #64	; 0x40
 8004eda:	d108      	bne.n	8004eee <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8004eec:	e021      	b.n	8004f32 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	60da      	str	r2, [r3, #12]
}
 8004efe:	e018      	b.n	8004f32 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d108      	bne.n	8004f22 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	60da      	str	r2, [r3, #12]
}
 8004f20:	e007      	b.n	8004f32 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	60da      	str	r2, [r3, #12]
}
 8004f32:	bf00      	nop
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40020010 	.word	0x40020010
 8004f44:	40020028 	.word	0x40020028
 8004f48:	40020040 	.word	0x40020040
 8004f4c:	40020058 	.word	0x40020058
 8004f50:	40020070 	.word	0x40020070
 8004f54:	40020088 	.word	0x40020088
 8004f58:	400200a0 	.word	0x400200a0
 8004f5c:	400200b8 	.word	0x400200b8
 8004f60:	40020410 	.word	0x40020410
 8004f64:	40020428 	.word	0x40020428
 8004f68:	40020440 	.word	0x40020440
 8004f6c:	40020458 	.word	0x40020458
 8004f70:	40020470 	.word	0x40020470
 8004f74:	40020488 	.word	0x40020488
 8004f78:	400204a0 	.word	0x400204a0
 8004f7c:	400204b8 	.word	0x400204b8

08004f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b089      	sub	sp, #36	; 0x24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f8e:	4b89      	ldr	r3, [pc, #548]	; (80051b4 <HAL_GPIO_Init+0x234>)
 8004f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f92:	e194      	b.n	80052be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	2101      	movs	r1, #1
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 8186 	beq.w	80052b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d005      	beq.n	8004fc4 <HAL_GPIO_Init+0x44>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d130      	bne.n	8005026 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	2203      	movs	r2, #3
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	43db      	mvns	r3, r3
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	4013      	ands	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	091b      	lsrs	r3, r3, #4
 8005010:	f003 0201 	and.w	r2, r3, #1
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	4313      	orrs	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b03      	cmp	r3, #3
 8005030:	d017      	beq.n	8005062 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	2203      	movs	r2, #3
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	43db      	mvns	r3, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4013      	ands	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4313      	orrs	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d123      	bne.n	80050b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	08da      	lsrs	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3208      	adds	r2, #8
 8005076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800507a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	220f      	movs	r2, #15
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43db      	mvns	r3, r3
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	4013      	ands	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	08da      	lsrs	r2, r3, #3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3208      	adds	r2, #8
 80050b0:	69b9      	ldr	r1, [r7, #24]
 80050b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	2203      	movs	r2, #3
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
 80050c6:	43db      	mvns	r3, r3
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	4013      	ands	r3, r2
 80050cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f003 0203 	and.w	r2, r3, #3
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 80e0 	beq.w	80052b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f8:	4b2f      	ldr	r3, [pc, #188]	; (80051b8 <HAL_GPIO_Init+0x238>)
 80050fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80050fe:	4a2e      	ldr	r2, [pc, #184]	; (80051b8 <HAL_GPIO_Init+0x238>)
 8005100:	f043 0302 	orr.w	r3, r3, #2
 8005104:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005108:	4b2b      	ldr	r3, [pc, #172]	; (80051b8 <HAL_GPIO_Init+0x238>)
 800510a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005116:	4a29      	ldr	r2, [pc, #164]	; (80051bc <HAL_GPIO_Init+0x23c>)
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	089b      	lsrs	r3, r3, #2
 800511c:	3302      	adds	r3, #2
 800511e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	220f      	movs	r2, #15
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	43db      	mvns	r3, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	4013      	ands	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a20      	ldr	r2, [pc, #128]	; (80051c0 <HAL_GPIO_Init+0x240>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d052      	beq.n	80051e8 <HAL_GPIO_Init+0x268>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1f      	ldr	r2, [pc, #124]	; (80051c4 <HAL_GPIO_Init+0x244>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d031      	beq.n	80051ae <HAL_GPIO_Init+0x22e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a1e      	ldr	r2, [pc, #120]	; (80051c8 <HAL_GPIO_Init+0x248>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d02b      	beq.n	80051aa <HAL_GPIO_Init+0x22a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1d      	ldr	r2, [pc, #116]	; (80051cc <HAL_GPIO_Init+0x24c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d025      	beq.n	80051a6 <HAL_GPIO_Init+0x226>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1c      	ldr	r2, [pc, #112]	; (80051d0 <HAL_GPIO_Init+0x250>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d01f      	beq.n	80051a2 <HAL_GPIO_Init+0x222>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a1b      	ldr	r2, [pc, #108]	; (80051d4 <HAL_GPIO_Init+0x254>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d019      	beq.n	800519e <HAL_GPIO_Init+0x21e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a1a      	ldr	r2, [pc, #104]	; (80051d8 <HAL_GPIO_Init+0x258>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <HAL_GPIO_Init+0x21a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a19      	ldr	r2, [pc, #100]	; (80051dc <HAL_GPIO_Init+0x25c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00d      	beq.n	8005196 <HAL_GPIO_Init+0x216>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <HAL_GPIO_Init+0x260>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d007      	beq.n	8005192 <HAL_GPIO_Init+0x212>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <HAL_GPIO_Init+0x264>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d101      	bne.n	800518e <HAL_GPIO_Init+0x20e>
 800518a:	2309      	movs	r3, #9
 800518c:	e02d      	b.n	80051ea <HAL_GPIO_Init+0x26a>
 800518e:	230a      	movs	r3, #10
 8005190:	e02b      	b.n	80051ea <HAL_GPIO_Init+0x26a>
 8005192:	2308      	movs	r3, #8
 8005194:	e029      	b.n	80051ea <HAL_GPIO_Init+0x26a>
 8005196:	2307      	movs	r3, #7
 8005198:	e027      	b.n	80051ea <HAL_GPIO_Init+0x26a>
 800519a:	2306      	movs	r3, #6
 800519c:	e025      	b.n	80051ea <HAL_GPIO_Init+0x26a>
 800519e:	2305      	movs	r3, #5
 80051a0:	e023      	b.n	80051ea <HAL_GPIO_Init+0x26a>
 80051a2:	2304      	movs	r3, #4
 80051a4:	e021      	b.n	80051ea <HAL_GPIO_Init+0x26a>
 80051a6:	2303      	movs	r3, #3
 80051a8:	e01f      	b.n	80051ea <HAL_GPIO_Init+0x26a>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e01d      	b.n	80051ea <HAL_GPIO_Init+0x26a>
 80051ae:	2301      	movs	r3, #1
 80051b0:	e01b      	b.n	80051ea <HAL_GPIO_Init+0x26a>
 80051b2:	bf00      	nop
 80051b4:	58000080 	.word	0x58000080
 80051b8:	58024400 	.word	0x58024400
 80051bc:	58000400 	.word	0x58000400
 80051c0:	58020000 	.word	0x58020000
 80051c4:	58020400 	.word	0x58020400
 80051c8:	58020800 	.word	0x58020800
 80051cc:	58020c00 	.word	0x58020c00
 80051d0:	58021000 	.word	0x58021000
 80051d4:	58021400 	.word	0x58021400
 80051d8:	58021800 	.word	0x58021800
 80051dc:	58021c00 	.word	0x58021c00
 80051e0:	58022000 	.word	0x58022000
 80051e4:	58022400 	.word	0x58022400
 80051e8:	2300      	movs	r3, #0
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	f002 0203 	and.w	r2, r2, #3
 80051f0:	0092      	lsls	r2, r2, #2
 80051f2:	4093      	lsls	r3, r2
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051fa:	4938      	ldr	r1, [pc, #224]	; (80052dc <HAL_GPIO_Init+0x35c>)
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	089b      	lsrs	r3, r3, #2
 8005200:	3302      	adds	r3, #2
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	43db      	mvns	r3, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4013      	ands	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800522e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	43db      	mvns	r3, r3
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	4013      	ands	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800525c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	43db      	mvns	r3, r3
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	4013      	ands	r3, r2
 8005272:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	43db      	mvns	r3, r3
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	4013      	ands	r3, r2
 800529c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	3301      	adds	r3, #1
 80052bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	fa22 f303 	lsr.w	r3, r2, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f47f ae63 	bne.w	8004f94 <HAL_GPIO_Init+0x14>
  }
}
 80052ce:	bf00      	nop
 80052d0:	bf00      	nop
 80052d2:	3724      	adds	r7, #36	; 0x24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	58000400 	.word	0x58000400

080052e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	807b      	strh	r3, [r7, #2]
 80052ec:	4613      	mov	r3, r2
 80052ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052f0:	787b      	ldrb	r3, [r7, #1]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052f6:	887a      	ldrh	r2, [r7, #2]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80052fc:	e003      	b.n	8005306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80052fe:	887b      	ldrh	r3, [r7, #2]
 8005300:	041a      	lsls	r2, r3, #16
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	619a      	str	r2, [r3, #24]
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
	...

08005314 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e07f      	b.n	8005426 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fb fc74 	bl	8000c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2224      	movs	r2, #36	; 0x24
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0201 	bic.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005364:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005374:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d107      	bne.n	800538e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800538a:	609a      	str	r2, [r3, #8]
 800538c:	e006      	b.n	800539c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800539a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d104      	bne.n	80053ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6859      	ldr	r1, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	4b1d      	ldr	r3, [pc, #116]	; (8005430 <HAL_I2C_Init+0x11c>)
 80053ba:	430b      	orrs	r3, r1
 80053bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69d9      	ldr	r1, [r3, #28]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a1a      	ldr	r2, [r3, #32]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	02008000 	.word	0x02008000

08005434 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af02      	add	r7, sp, #8
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	4608      	mov	r0, r1
 800543e:	4611      	mov	r1, r2
 8005440:	461a      	mov	r2, r3
 8005442:	4603      	mov	r3, r0
 8005444:	817b      	strh	r3, [r7, #10]
 8005446:	460b      	mov	r3, r1
 8005448:	813b      	strh	r3, [r7, #8]
 800544a:	4613      	mov	r3, r2
 800544c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b20      	cmp	r3, #32
 8005458:	f040 80f9 	bne.w	800564e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <HAL_I2C_Mem_Write+0x34>
 8005462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005464:	2b00      	cmp	r3, #0
 8005466:	d105      	bne.n	8005474 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800546e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e0ed      	b.n	8005650 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <HAL_I2C_Mem_Write+0x4e>
 800547e:	2302      	movs	r3, #2
 8005480:	e0e6      	b.n	8005650 <HAL_I2C_Mem_Write+0x21c>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800548a:	f7fc f959 	bl	8001740 <HAL_GetTick>
 800548e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	2319      	movs	r3, #25
 8005496:	2201      	movs	r2, #1
 8005498:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 facf 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0d1      	b.n	8005650 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2221      	movs	r2, #33	; 0x21
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2240      	movs	r2, #64	; 0x40
 80054b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a3a      	ldr	r2, [r7, #32]
 80054c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80054cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054d4:	88f8      	ldrh	r0, [r7, #6]
 80054d6:	893a      	ldrh	r2, [r7, #8]
 80054d8:	8979      	ldrh	r1, [r7, #10]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	4603      	mov	r3, r0
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 f9df 	bl	80058a8 <I2C_RequestMemoryWrite>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e0a9      	b.n	8005650 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005500:	b29b      	uxth	r3, r3
 8005502:	2bff      	cmp	r3, #255	; 0xff
 8005504:	d90e      	bls.n	8005524 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	22ff      	movs	r2, #255	; 0xff
 800550a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005510:	b2da      	uxtb	r2, r3
 8005512:	8979      	ldrh	r1, [r7, #10]
 8005514:	2300      	movs	r3, #0
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 fc37 	bl	8005d90 <I2C_TransferConfig>
 8005522:	e00f      	b.n	8005544 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005532:	b2da      	uxtb	r2, r3
 8005534:	8979      	ldrh	r1, [r7, #10]
 8005536:	2300      	movs	r3, #0
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 fc26 	bl	8005d90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 fab9 	bl	8005ac0 <I2C_WaitOnTXISFlagUntilTimeout>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e07b      	b.n	8005650 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	781a      	ldrb	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558c:	b29b      	uxth	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d034      	beq.n	80055fc <HAL_I2C_Mem_Write+0x1c8>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005596:	2b00      	cmp	r3, #0
 8005598:	d130      	bne.n	80055fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	2200      	movs	r2, #0
 80055a2:	2180      	movs	r1, #128	; 0x80
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 fa4b 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e04d      	b.n	8005650 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	2bff      	cmp	r3, #255	; 0xff
 80055bc:	d90e      	bls.n	80055dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	22ff      	movs	r2, #255	; 0xff
 80055c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	8979      	ldrh	r1, [r7, #10]
 80055cc:	2300      	movs	r3, #0
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 fbdb 	bl	8005d90 <I2C_TransferConfig>
 80055da:	e00f      	b.n	80055fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	8979      	ldrh	r1, [r7, #10]
 80055ee:	2300      	movs	r3, #0
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 fbca 	bl	8005d90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d19e      	bne.n	8005544 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 fa98 	bl	8005b40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e01a      	b.n	8005650 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2220      	movs	r2, #32
 8005620:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6859      	ldr	r1, [r3, #4]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <HAL_I2C_Mem_Write+0x224>)
 800562e:	400b      	ands	r3, r1
 8005630:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2220      	movs	r2, #32
 8005636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	e000      	b.n	8005650 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800564e:	2302      	movs	r3, #2
  }
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	fe00e800 	.word	0xfe00e800

0800565c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af02      	add	r7, sp, #8
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	4608      	mov	r0, r1
 8005666:	4611      	mov	r1, r2
 8005668:	461a      	mov	r2, r3
 800566a:	4603      	mov	r3, r0
 800566c:	817b      	strh	r3, [r7, #10]
 800566e:	460b      	mov	r3, r1
 8005670:	813b      	strh	r3, [r7, #8]
 8005672:	4613      	mov	r3, r2
 8005674:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b20      	cmp	r3, #32
 8005680:	f040 80fd 	bne.w	800587e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <HAL_I2C_Mem_Read+0x34>
 800568a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800568c:	2b00      	cmp	r3, #0
 800568e:	d105      	bne.n	800569c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005696:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e0f1      	b.n	8005880 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d101      	bne.n	80056aa <HAL_I2C_Mem_Read+0x4e>
 80056a6:	2302      	movs	r3, #2
 80056a8:	e0ea      	b.n	8005880 <HAL_I2C_Mem_Read+0x224>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056b2:	f7fc f845 	bl	8001740 <HAL_GetTick>
 80056b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	2319      	movs	r3, #25
 80056be:	2201      	movs	r2, #1
 80056c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f9bb 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e0d5      	b.n	8005880 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2222      	movs	r2, #34	; 0x22
 80056d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2240      	movs	r2, #64	; 0x40
 80056e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a3a      	ldr	r2, [r7, #32]
 80056ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056fc:	88f8      	ldrh	r0, [r7, #6]
 80056fe:	893a      	ldrh	r2, [r7, #8]
 8005700:	8979      	ldrh	r1, [r7, #10]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	9301      	str	r3, [sp, #4]
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	4603      	mov	r3, r0
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 f91f 	bl	8005950 <I2C_RequestMemoryRead>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e0ad      	b.n	8005880 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005728:	b29b      	uxth	r3, r3
 800572a:	2bff      	cmp	r3, #255	; 0xff
 800572c:	d90e      	bls.n	800574c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	22ff      	movs	r2, #255	; 0xff
 8005732:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005738:	b2da      	uxtb	r2, r3
 800573a:	8979      	ldrh	r1, [r7, #10]
 800573c:	4b52      	ldr	r3, [pc, #328]	; (8005888 <HAL_I2C_Mem_Read+0x22c>)
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 fb23 	bl	8005d90 <I2C_TransferConfig>
 800574a:	e00f      	b.n	800576c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800575a:	b2da      	uxtb	r2, r3
 800575c:	8979      	ldrh	r1, [r7, #10]
 800575e:	4b4a      	ldr	r3, [pc, #296]	; (8005888 <HAL_I2C_Mem_Read+0x22c>)
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 fb12 	bl	8005d90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	2200      	movs	r2, #0
 8005774:	2104      	movs	r1, #4
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f962 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e07c      	b.n	8005880 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a2:	3b01      	subs	r3, #1
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	3b01      	subs	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d034      	beq.n	800582c <HAL_I2C_Mem_Read+0x1d0>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d130      	bne.n	800582c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	2200      	movs	r2, #0
 80057d2:	2180      	movs	r1, #128	; 0x80
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f933 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e04d      	b.n	8005880 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2bff      	cmp	r3, #255	; 0xff
 80057ec:	d90e      	bls.n	800580c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	22ff      	movs	r2, #255	; 0xff
 80057f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	8979      	ldrh	r1, [r7, #10]
 80057fc:	2300      	movs	r3, #0
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 fac3 	bl	8005d90 <I2C_TransferConfig>
 800580a:	e00f      	b.n	800582c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005810:	b29a      	uxth	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581a:	b2da      	uxtb	r2, r3
 800581c:	8979      	ldrh	r1, [r7, #10]
 800581e:	2300      	movs	r3, #0
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 fab2 	bl	8005d90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d19a      	bne.n	800576c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 f980 	bl	8005b40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e01a      	b.n	8005880 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2220      	movs	r2, #32
 8005850:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6859      	ldr	r1, [r3, #4]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	4b0b      	ldr	r3, [pc, #44]	; (800588c <HAL_I2C_Mem_Read+0x230>)
 800585e:	400b      	ands	r3, r1
 8005860:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	e000      	b.n	8005880 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800587e:	2302      	movs	r3, #2
  }
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	80002400 	.word	0x80002400
 800588c:	fe00e800 	.word	0xfe00e800

08005890 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800589c:	4618      	mov	r0, r3
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	4608      	mov	r0, r1
 80058b2:	4611      	mov	r1, r2
 80058b4:	461a      	mov	r2, r3
 80058b6:	4603      	mov	r3, r0
 80058b8:	817b      	strh	r3, [r7, #10]
 80058ba:	460b      	mov	r3, r1
 80058bc:	813b      	strh	r3, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80058c2:	88fb      	ldrh	r3, [r7, #6]
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	8979      	ldrh	r1, [r7, #10]
 80058c8:	4b20      	ldr	r3, [pc, #128]	; (800594c <I2C_RequestMemoryWrite+0xa4>)
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fa5d 	bl	8005d90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	69b9      	ldr	r1, [r7, #24]
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f8f0 	bl	8005ac0 <I2C_WaitOnTXISFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e02c      	b.n	8005944 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058ea:	88fb      	ldrh	r3, [r7, #6]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d105      	bne.n	80058fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058f0:	893b      	ldrh	r3, [r7, #8]
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	629a      	str	r2, [r3, #40]	; 0x28
 80058fa:	e015      	b.n	8005928 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058fc:	893b      	ldrh	r3, [r7, #8]
 80058fe:	0a1b      	lsrs	r3, r3, #8
 8005900:	b29b      	uxth	r3, r3
 8005902:	b2da      	uxtb	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	69b9      	ldr	r1, [r7, #24]
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 f8d6 	bl	8005ac0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e012      	b.n	8005944 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800591e:	893b      	ldrh	r3, [r7, #8]
 8005920:	b2da      	uxtb	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	2200      	movs	r2, #0
 8005930:	2180      	movs	r1, #128	; 0x80
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 f884 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	80002000 	.word	0x80002000

08005950 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af02      	add	r7, sp, #8
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	4608      	mov	r0, r1
 800595a:	4611      	mov	r1, r2
 800595c:	461a      	mov	r2, r3
 800595e:	4603      	mov	r3, r0
 8005960:	817b      	strh	r3, [r7, #10]
 8005962:	460b      	mov	r3, r1
 8005964:	813b      	strh	r3, [r7, #8]
 8005966:	4613      	mov	r3, r2
 8005968:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800596a:	88fb      	ldrh	r3, [r7, #6]
 800596c:	b2da      	uxtb	r2, r3
 800596e:	8979      	ldrh	r1, [r7, #10]
 8005970:	4b20      	ldr	r3, [pc, #128]	; (80059f4 <I2C_RequestMemoryRead+0xa4>)
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	2300      	movs	r3, #0
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 fa0a 	bl	8005d90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	69b9      	ldr	r1, [r7, #24]
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 f89d 	bl	8005ac0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e02c      	b.n	80059ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005990:	88fb      	ldrh	r3, [r7, #6]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d105      	bne.n	80059a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005996:	893b      	ldrh	r3, [r7, #8]
 8005998:	b2da      	uxtb	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	629a      	str	r2, [r3, #40]	; 0x28
 80059a0:	e015      	b.n	80059ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80059a2:	893b      	ldrh	r3, [r7, #8]
 80059a4:	0a1b      	lsrs	r3, r3, #8
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	69b9      	ldr	r1, [r7, #24]
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f883 	bl	8005ac0 <I2C_WaitOnTXISFlagUntilTimeout>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e012      	b.n	80059ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059c4:	893b      	ldrh	r3, [r7, #8]
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	2200      	movs	r2, #0
 80059d6:	2140      	movs	r1, #64	; 0x40
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 f831 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	80002000 	.word	0x80002000

080059f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d103      	bne.n	8005a16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2200      	movs	r2, #0
 8005a14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d007      	beq.n	8005a34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699a      	ldr	r2, [r3, #24]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0201 	orr.w	r2, r2, #1
 8005a32:	619a      	str	r2, [r3, #24]
  }
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a50:	e022      	b.n	8005a98 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a58:	d01e      	beq.n	8005a98 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a5a:	f7fb fe71 	bl	8001740 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d302      	bcc.n	8005a70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d113      	bne.n	8005a98 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a74:	f043 0220 	orr.w	r2, r3, #32
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e00f      	b.n	8005ab8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	bf0c      	ite	eq
 8005aa8:	2301      	moveq	r3, #1
 8005aaa:	2300      	movne	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	461a      	mov	r2, r3
 8005ab0:	79fb      	ldrb	r3, [r7, #7]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d0cd      	beq.n	8005a52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005acc:	e02c      	b.n	8005b28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	68b9      	ldr	r1, [r7, #8]
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 f870 	bl	8005bb8 <I2C_IsErrorOccurred>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e02a      	b.n	8005b38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae8:	d01e      	beq.n	8005b28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aea:	f7fb fe29 	bl	8001740 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d302      	bcc.n	8005b00 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d113      	bne.n	8005b28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b04:	f043 0220 	orr.w	r2, r3, #32
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e007      	b.n	8005b38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d1cb      	bne.n	8005ace <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b4c:	e028      	b.n	8005ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	68b9      	ldr	r1, [r7, #8]
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 f830 	bl	8005bb8 <I2C_IsErrorOccurred>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e026      	b.n	8005bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b62:	f7fb fded 	bl	8001740 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d302      	bcc.n	8005b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d113      	bne.n	8005ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7c:	f043 0220 	orr.w	r2, r3, #32
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e007      	b.n	8005bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f003 0320 	and.w	r3, r3, #32
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	d1cf      	bne.n	8005b4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08a      	sub	sp, #40	; 0x28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d075      	beq.n	8005cd0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2210      	movs	r2, #16
 8005bea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005bec:	e056      	b.n	8005c9c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf4:	d052      	beq.n	8005c9c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bf6:	f7fb fda3 	bl	8001740 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d302      	bcc.n	8005c0c <I2C_IsErrorOccurred+0x54>
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d147      	bne.n	8005c9c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c2e:	d12e      	bne.n	8005c8e <I2C_IsErrorOccurred+0xd6>
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c36:	d02a      	beq.n	8005c8e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005c38:	7cfb      	ldrb	r3, [r7, #19]
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	d027      	beq.n	8005c8e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c4c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005c4e:	f7fb fd77 	bl	8001740 <HAL_GetTick>
 8005c52:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c54:	e01b      	b.n	8005c8e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005c56:	f7fb fd73 	bl	8001740 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b19      	cmp	r3, #25
 8005c62:	d914      	bls.n	8005c8e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c68:	f043 0220 	orr.w	r2, r3, #32
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d1dc      	bne.n	8005c56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d003      	beq.n	8005cb2 <I2C_IsErrorOccurred+0xfa>
 8005caa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d09d      	beq.n	8005bee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d103      	bne.n	8005cc2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	f043 0304 	orr.w	r3, r3, #4
 8005cc8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	f043 0301 	orr.w	r3, r3, #1
 8005ce8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cf2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00b      	beq.n	8005d1c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	f043 0308 	orr.w	r3, r3, #8
 8005d0a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00b      	beq.n	8005d3e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	f043 0302 	orr.w	r3, r3, #2
 8005d2c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d01c      	beq.n	8005d80 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f7ff fe56 	bl	80059f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6859      	ldr	r1, [r3, #4]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <I2C_IsErrorOccurred+0x1d4>)
 8005d58:	400b      	ands	r3, r1
 8005d5a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3728      	adds	r7, #40	; 0x28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	fe00e800 	.word	0xfe00e800

08005d90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	607b      	str	r3, [r7, #4]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	817b      	strh	r3, [r7, #10]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005da2:	897b      	ldrh	r3, [r7, #10]
 8005da4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005da8:	7a7b      	ldrb	r3, [r7, #9]
 8005daa:	041b      	lsls	r3, r3, #16
 8005dac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005db0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dbe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	0d5b      	lsrs	r3, r3, #21
 8005dca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005dce:	4b08      	ldr	r3, [pc, #32]	; (8005df0 <I2C_TransferConfig+0x60>)
 8005dd0:	430b      	orrs	r3, r1
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	ea02 0103 	and.w	r1, r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	03ff63ff 	.word	0x03ff63ff

08005df4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	d138      	bne.n	8005e7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e14:	2302      	movs	r3, #2
 8005e16:	e032      	b.n	8005e7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2224      	movs	r2, #36	; 0x24
 8005e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0201 	bic.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6819      	ldr	r1, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0201 	orr.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	e000      	b.n	8005e7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e7c:	2302      	movs	r3, #2
  }
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b085      	sub	sp, #20
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b20      	cmp	r3, #32
 8005e9e:	d139      	bne.n	8005f14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d101      	bne.n	8005eae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	e033      	b.n	8005f16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2224      	movs	r2, #36	; 0x24
 8005eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0201 	bic.w	r2, r2, #1
 8005ecc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005edc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	021b      	lsls	r3, r3, #8
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0201 	orr.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	e000      	b.n	8005f16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f14:	2302      	movs	r3, #2
  }
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005f2c:	4b29      	ldr	r3, [pc, #164]	; (8005fd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	2b06      	cmp	r3, #6
 8005f36:	d00a      	beq.n	8005f4e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f38:	4b26      	ldr	r3, [pc, #152]	; (8005fd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d001      	beq.n	8005f4a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e040      	b.n	8005fcc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e03e      	b.n	8005fcc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005f4e:	4b21      	ldr	r3, [pc, #132]	; (8005fd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005f56:	491f      	ldr	r1, [pc, #124]	; (8005fd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f5e:	f7fb fbef 	bl	8001740 <HAL_GetTick>
 8005f62:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f64:	e009      	b.n	8005f7a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f66:	f7fb fbeb 	bl	8001740 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f74:	d901      	bls.n	8005f7a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e028      	b.n	8005fcc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f7a:	4b16      	ldr	r3, [pc, #88]	; (8005fd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f86:	d1ee      	bne.n	8005f66 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b1e      	cmp	r3, #30
 8005f8c:	d008      	beq.n	8005fa0 <HAL_PWREx_ConfigSupply+0x7c>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b2e      	cmp	r3, #46	; 0x2e
 8005f92:	d005      	beq.n	8005fa0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b1d      	cmp	r3, #29
 8005f98:	d002      	beq.n	8005fa0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b2d      	cmp	r3, #45	; 0x2d
 8005f9e:	d114      	bne.n	8005fca <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005fa0:	f7fb fbce 	bl	8001740 <HAL_GetTick>
 8005fa4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005fa6:	e009      	b.n	8005fbc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005fa8:	f7fb fbca 	bl	8001740 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fb6:	d901      	bls.n	8005fbc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e007      	b.n	8005fcc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005fbc:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc8:	d1ee      	bne.n	8005fa8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	58024800 	.word	0x58024800

08005fd8 <HAL_RAMECC_Init>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init (RAMECC_HandleTypeDef *hramecc)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_RAMECC_Init+0x12>
  {
    /* Return HAL status */
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e02d      	b.n	8006046 <HAL_RAMECC_Init+0x6e>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2202      	movs	r2, #2
 8005fee:	711a      	strb	r2, [r3, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0220 	bic.w	r2, r2, #32
 8005ffe:	601a      	str	r2, [r3, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6812      	ldr	r2, [r2, #0]
 800600e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006012:	f023 030f 	bic.w	r3, r3, #15
 8006016:	6013      	str	r3, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 021c 	bic.w	r2, r2, #28
 8006026:	601a      	str	r2, [r3, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0207 	bic.w	r2, r2, #7
 8006036:	605a      	str	r2, [r3, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	609a      	str	r2, [r3, #8]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
	...

08006054 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08c      	sub	sp, #48	; 0x30
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e3f4      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 80b3 	beq.w	80061da <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006074:	4b95      	ldr	r3, [pc, #596]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800607c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800607e:	4b93      	ldr	r3, [pc, #588]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006082:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006086:	2b10      	cmp	r3, #16
 8006088:	d007      	beq.n	800609a <HAL_RCC_OscConfig+0x46>
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	2b18      	cmp	r3, #24
 800608e:	d112      	bne.n	80060b6 <HAL_RCC_OscConfig+0x62>
 8006090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	2b02      	cmp	r3, #2
 8006098:	d10d      	bne.n	80060b6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800609a:	4b8c      	ldr	r3, [pc, #560]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 8098 	beq.w	80061d8 <HAL_RCC_OscConfig+0x184>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f040 8093 	bne.w	80061d8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e3cc      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060be:	d106      	bne.n	80060ce <HAL_RCC_OscConfig+0x7a>
 80060c0:	4b82      	ldr	r3, [pc, #520]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a81      	ldr	r2, [pc, #516]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 80060c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	e058      	b.n	8006180 <HAL_RCC_OscConfig+0x12c>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d112      	bne.n	80060fc <HAL_RCC_OscConfig+0xa8>
 80060d6:	4b7d      	ldr	r3, [pc, #500]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a7c      	ldr	r2, [pc, #496]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 80060dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	4b7a      	ldr	r3, [pc, #488]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a79      	ldr	r2, [pc, #484]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 80060e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	4b77      	ldr	r3, [pc, #476]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a76      	ldr	r2, [pc, #472]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 80060f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060f8:	6013      	str	r3, [r2, #0]
 80060fa:	e041      	b.n	8006180 <HAL_RCC_OscConfig+0x12c>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006104:	d112      	bne.n	800612c <HAL_RCC_OscConfig+0xd8>
 8006106:	4b71      	ldr	r3, [pc, #452]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a70      	ldr	r2, [pc, #448]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 800610c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	4b6e      	ldr	r3, [pc, #440]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a6d      	ldr	r2, [pc, #436]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006118:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800611c:	6013      	str	r3, [r2, #0]
 800611e:	4b6b      	ldr	r3, [pc, #428]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a6a      	ldr	r2, [pc, #424]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	e029      	b.n	8006180 <HAL_RCC_OscConfig+0x12c>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8006134:	d112      	bne.n	800615c <HAL_RCC_OscConfig+0x108>
 8006136:	4b65      	ldr	r3, [pc, #404]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a64      	ldr	r2, [pc, #400]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 800613c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	4b62      	ldr	r3, [pc, #392]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a61      	ldr	r2, [pc, #388]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006148:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	4b5f      	ldr	r3, [pc, #380]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a5e      	ldr	r2, [pc, #376]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	e011      	b.n	8006180 <HAL_RCC_OscConfig+0x12c>
 800615c:	4b5b      	ldr	r3, [pc, #364]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a5a      	ldr	r2, [pc, #360]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	4b58      	ldr	r3, [pc, #352]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a57      	ldr	r2, [pc, #348]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 800616e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	4b55      	ldr	r3, [pc, #340]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a54      	ldr	r2, [pc, #336]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 800617a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800617e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d013      	beq.n	80061b0 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006188:	f7fb fada 	bl	8001740 <HAL_GetTick>
 800618c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006190:	f7fb fad6 	bl	8001740 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b64      	cmp	r3, #100	; 0x64
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e356      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061a2:	4b4a      	ldr	r3, [pc, #296]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0f0      	beq.n	8006190 <HAL_RCC_OscConfig+0x13c>
 80061ae:	e014      	b.n	80061da <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b0:	f7fb fac6 	bl	8001740 <HAL_GetTick>
 80061b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061b8:	f7fb fac2 	bl	8001740 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b64      	cmp	r3, #100	; 0x64
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e342      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061ca:	4b40      	ldr	r3, [pc, #256]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f0      	bne.n	80061b8 <HAL_RCC_OscConfig+0x164>
 80061d6:	e000      	b.n	80061da <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 808d 	beq.w	8006302 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061e8:	4b38      	ldr	r3, [pc, #224]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061f2:	4b36      	ldr	r3, [pc, #216]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 80061f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d007      	beq.n	800620e <HAL_RCC_OscConfig+0x1ba>
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	2b18      	cmp	r3, #24
 8006202:	d137      	bne.n	8006274 <HAL_RCC_OscConfig+0x220>
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d132      	bne.n	8006274 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800620e:	4b2f      	ldr	r3, [pc, #188]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0304 	and.w	r3, r3, #4
 8006216:	2b00      	cmp	r3, #0
 8006218:	d005      	beq.n	8006226 <HAL_RCC_OscConfig+0x1d2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e314      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006226:	4b29      	ldr	r3, [pc, #164]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f023 0219 	bic.w	r2, r3, #25
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	4926      	ldr	r1, [pc, #152]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006234:	4313      	orrs	r3, r2
 8006236:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006238:	f7fb fa82 	bl	8001740 <HAL_GetTick>
 800623c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006240:	f7fb fa7e 	bl	8001740 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e2fe      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006252:	4b1e      	ldr	r3, [pc, #120]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0304 	and.w	r3, r3, #4
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0f0      	beq.n	8006240 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800625e:	4b1b      	ldr	r3, [pc, #108]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	061b      	lsls	r3, r3, #24
 800626c:	4917      	ldr	r1, [pc, #92]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 800626e:	4313      	orrs	r3, r2
 8006270:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006272:	e046      	b.n	8006302 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d029      	beq.n	80062d0 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800627c:	4b13      	ldr	r3, [pc, #76]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f023 0219 	bic.w	r2, r3, #25
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	4910      	ldr	r1, [pc, #64]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 800628a:	4313      	orrs	r3, r2
 800628c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628e:	f7fb fa57 	bl	8001740 <HAL_GetTick>
 8006292:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006294:	e008      	b.n	80062a8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006296:	f7fb fa53 	bl	8001740 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d901      	bls.n	80062a8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e2d3      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062a8:	4b08      	ldr	r3, [pc, #32]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0f0      	beq.n	8006296 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062b4:	4b05      	ldr	r3, [pc, #20]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	061b      	lsls	r3, r3, #24
 80062c2:	4902      	ldr	r1, [pc, #8]	; (80062cc <HAL_RCC_OscConfig+0x278>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	604b      	str	r3, [r1, #4]
 80062c8:	e01b      	b.n	8006302 <HAL_RCC_OscConfig+0x2ae>
 80062ca:	bf00      	nop
 80062cc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062d0:	4b97      	ldr	r3, [pc, #604]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a96      	ldr	r2, [pc, #600]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 80062d6:	f023 0301 	bic.w	r3, r3, #1
 80062da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062dc:	f7fb fa30 	bl	8001740 <HAL_GetTick>
 80062e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062e4:	f7fb fa2c 	bl	8001740 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e2ac      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062f6:	4b8e      	ldr	r3, [pc, #568]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1f0      	bne.n	80062e4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0310 	and.w	r3, r3, #16
 800630a:	2b00      	cmp	r3, #0
 800630c:	d06a      	beq.n	80063e4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800630e:	4b88      	ldr	r3, [pc, #544]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006316:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006318:	4b85      	ldr	r3, [pc, #532]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 800631a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	2b08      	cmp	r3, #8
 8006322:	d007      	beq.n	8006334 <HAL_RCC_OscConfig+0x2e0>
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	2b18      	cmp	r3, #24
 8006328:	d11b      	bne.n	8006362 <HAL_RCC_OscConfig+0x30e>
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f003 0303 	and.w	r3, r3, #3
 8006330:	2b01      	cmp	r3, #1
 8006332:	d116      	bne.n	8006362 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006334:	4b7e      	ldr	r3, [pc, #504]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800633c:	2b00      	cmp	r3, #0
 800633e:	d005      	beq.n	800634c <HAL_RCC_OscConfig+0x2f8>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	2b80      	cmp	r3, #128	; 0x80
 8006346:	d001      	beq.n	800634c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e281      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800634c:	4b78      	ldr	r3, [pc, #480]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	061b      	lsls	r3, r3, #24
 800635a:	4975      	ldr	r1, [pc, #468]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 800635c:	4313      	orrs	r3, r2
 800635e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006360:	e040      	b.n	80063e4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d023      	beq.n	80063b2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800636a:	4b71      	ldr	r3, [pc, #452]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a70      	ldr	r2, [pc, #448]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 8006370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006376:	f7fb f9e3 	bl	8001740 <HAL_GetTick>
 800637a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800637c:	e008      	b.n	8006390 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800637e:	f7fb f9df 	bl	8001740 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e25f      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006390:	4b67      	ldr	r3, [pc, #412]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0f0      	beq.n	800637e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800639c:	4b64      	ldr	r3, [pc, #400]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	061b      	lsls	r3, r3, #24
 80063aa:	4961      	ldr	r1, [pc, #388]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60cb      	str	r3, [r1, #12]
 80063b0:	e018      	b.n	80063e4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80063b2:	4b5f      	ldr	r3, [pc, #380]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a5e      	ldr	r2, [pc, #376]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 80063b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063be:	f7fb f9bf 	bl	8001740 <HAL_GetTick>
 80063c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063c4:	e008      	b.n	80063d8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80063c6:	f7fb f9bb 	bl	8001740 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e23b      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063d8:	4b55      	ldr	r3, [pc, #340]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1f0      	bne.n	80063c6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0308 	and.w	r3, r3, #8
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d036      	beq.n	800645e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d019      	beq.n	800642c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063f8:	4b4d      	ldr	r3, [pc, #308]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 80063fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063fc:	4a4c      	ldr	r2, [pc, #304]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 80063fe:	f043 0301 	orr.w	r3, r3, #1
 8006402:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006404:	f7fb f99c 	bl	8001740 <HAL_GetTick>
 8006408:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800640c:	f7fb f998 	bl	8001740 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e218      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800641e:	4b44      	ldr	r3, [pc, #272]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 8006420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0f0      	beq.n	800640c <HAL_RCC_OscConfig+0x3b8>
 800642a:	e018      	b.n	800645e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800642c:	4b40      	ldr	r3, [pc, #256]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 800642e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006430:	4a3f      	ldr	r2, [pc, #252]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 8006432:	f023 0301 	bic.w	r3, r3, #1
 8006436:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006438:	f7fb f982 	bl	8001740 <HAL_GetTick>
 800643c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006440:	f7fb f97e 	bl	8001740 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e1fe      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006452:	4b37      	ldr	r3, [pc, #220]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 8006454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1f0      	bne.n	8006440 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b00      	cmp	r3, #0
 8006468:	d036      	beq.n	80064d8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d019      	beq.n	80064a6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006472:	4b2f      	ldr	r3, [pc, #188]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a2e      	ldr	r2, [pc, #184]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 8006478:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800647c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800647e:	f7fb f95f 	bl	8001740 <HAL_GetTick>
 8006482:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006484:	e008      	b.n	8006498 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006486:	f7fb f95b 	bl	8001740 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e1db      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006498:	4b25      	ldr	r3, [pc, #148]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0f0      	beq.n	8006486 <HAL_RCC_OscConfig+0x432>
 80064a4:	e018      	b.n	80064d8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064a6:	4b22      	ldr	r3, [pc, #136]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a21      	ldr	r2, [pc, #132]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 80064ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064b2:	f7fb f945 	bl	8001740 <HAL_GetTick>
 80064b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064b8:	e008      	b.n	80064cc <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80064ba:	f7fb f941 	bl	8001740 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e1c1      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064cc:	4b18      	ldr	r3, [pc, #96]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1f0      	bne.n	80064ba <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 80af 	beq.w	8006644 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80064e6:	4b13      	ldr	r3, [pc, #76]	; (8006534 <HAL_RCC_OscConfig+0x4e0>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a12      	ldr	r2, [pc, #72]	; (8006534 <HAL_RCC_OscConfig+0x4e0>)
 80064ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064f2:	f7fb f925 	bl	8001740 <HAL_GetTick>
 80064f6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80064fa:	f7fb f921 	bl	8001740 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b64      	cmp	r3, #100	; 0x64
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e1a1      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800650c:	4b09      	ldr	r3, [pc, #36]	; (8006534 <HAL_RCC_OscConfig+0x4e0>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0f0      	beq.n	80064fa <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d10b      	bne.n	8006538 <HAL_RCC_OscConfig+0x4e4>
 8006520:	4b03      	ldr	r3, [pc, #12]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 8006522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006524:	4a02      	ldr	r2, [pc, #8]	; (8006530 <HAL_RCC_OscConfig+0x4dc>)
 8006526:	f043 0301 	orr.w	r3, r3, #1
 800652a:	6713      	str	r3, [r2, #112]	; 0x70
 800652c:	e05b      	b.n	80065e6 <HAL_RCC_OscConfig+0x592>
 800652e:	bf00      	nop
 8006530:	58024400 	.word	0x58024400
 8006534:	58024800 	.word	0x58024800
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d112      	bne.n	8006566 <HAL_RCC_OscConfig+0x512>
 8006540:	4b9d      	ldr	r3, [pc, #628]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006544:	4a9c      	ldr	r2, [pc, #624]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006546:	f023 0301 	bic.w	r3, r3, #1
 800654a:	6713      	str	r3, [r2, #112]	; 0x70
 800654c:	4b9a      	ldr	r3, [pc, #616]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 800654e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006550:	4a99      	ldr	r2, [pc, #612]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006556:	6713      	str	r3, [r2, #112]	; 0x70
 8006558:	4b97      	ldr	r3, [pc, #604]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 800655a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655c:	4a96      	ldr	r2, [pc, #600]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 800655e:	f023 0304 	bic.w	r3, r3, #4
 8006562:	6713      	str	r3, [r2, #112]	; 0x70
 8006564:	e03f      	b.n	80065e6 <HAL_RCC_OscConfig+0x592>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	2b05      	cmp	r3, #5
 800656c:	d112      	bne.n	8006594 <HAL_RCC_OscConfig+0x540>
 800656e:	4b92      	ldr	r3, [pc, #584]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006572:	4a91      	ldr	r2, [pc, #580]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006574:	f043 0304 	orr.w	r3, r3, #4
 8006578:	6713      	str	r3, [r2, #112]	; 0x70
 800657a:	4b8f      	ldr	r3, [pc, #572]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 800657c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657e:	4a8e      	ldr	r2, [pc, #568]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006584:	6713      	str	r3, [r2, #112]	; 0x70
 8006586:	4b8c      	ldr	r3, [pc, #560]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658a:	4a8b      	ldr	r2, [pc, #556]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 800658c:	f043 0301 	orr.w	r3, r3, #1
 8006590:	6713      	str	r3, [r2, #112]	; 0x70
 8006592:	e028      	b.n	80065e6 <HAL_RCC_OscConfig+0x592>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	2b85      	cmp	r3, #133	; 0x85
 800659a:	d112      	bne.n	80065c2 <HAL_RCC_OscConfig+0x56e>
 800659c:	4b86      	ldr	r3, [pc, #536]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 800659e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a0:	4a85      	ldr	r2, [pc, #532]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 80065a2:	f043 0304 	orr.w	r3, r3, #4
 80065a6:	6713      	str	r3, [r2, #112]	; 0x70
 80065a8:	4b83      	ldr	r3, [pc, #524]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 80065aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ac:	4a82      	ldr	r2, [pc, #520]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 80065ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b2:	6713      	str	r3, [r2, #112]	; 0x70
 80065b4:	4b80      	ldr	r3, [pc, #512]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 80065b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b8:	4a7f      	ldr	r2, [pc, #508]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 80065ba:	f043 0301 	orr.w	r3, r3, #1
 80065be:	6713      	str	r3, [r2, #112]	; 0x70
 80065c0:	e011      	b.n	80065e6 <HAL_RCC_OscConfig+0x592>
 80065c2:	4b7d      	ldr	r3, [pc, #500]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 80065c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c6:	4a7c      	ldr	r2, [pc, #496]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 80065c8:	f023 0301 	bic.w	r3, r3, #1
 80065cc:	6713      	str	r3, [r2, #112]	; 0x70
 80065ce:	4b7a      	ldr	r3, [pc, #488]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 80065d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d2:	4a79      	ldr	r2, [pc, #484]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 80065d4:	f023 0304 	bic.w	r3, r3, #4
 80065d8:	6713      	str	r3, [r2, #112]	; 0x70
 80065da:	4b77      	ldr	r3, [pc, #476]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 80065dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065de:	4a76      	ldr	r2, [pc, #472]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 80065e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d015      	beq.n	800661a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ee:	f7fb f8a7 	bl	8001740 <HAL_GetTick>
 80065f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065f4:	e00a      	b.n	800660c <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065f6:	f7fb f8a3 	bl	8001740 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	f241 3288 	movw	r2, #5000	; 0x1388
 8006604:	4293      	cmp	r3, r2
 8006606:	d901      	bls.n	800660c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e121      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800660c:	4b6a      	ldr	r3, [pc, #424]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 800660e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0ee      	beq.n	80065f6 <HAL_RCC_OscConfig+0x5a2>
 8006618:	e014      	b.n	8006644 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800661a:	f7fb f891 	bl	8001740 <HAL_GetTick>
 800661e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006620:	e00a      	b.n	8006638 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006622:	f7fb f88d 	bl	8001740 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006630:	4293      	cmp	r3, r2
 8006632:	d901      	bls.n	8006638 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e10b      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006638:	4b5f      	ldr	r3, [pc, #380]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 800663a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1ee      	bne.n	8006622 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 8100 	beq.w	800684e <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800664e:	4b5a      	ldr	r3, [pc, #360]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006656:	2b18      	cmp	r3, #24
 8006658:	f000 80bb 	beq.w	80067d2 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	2b02      	cmp	r3, #2
 8006662:	f040 8095 	bne.w	8006790 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006666:	4b54      	ldr	r3, [pc, #336]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a53      	ldr	r2, [pc, #332]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 800666c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006672:	f7fb f865 	bl	8001740 <HAL_GetTick>
 8006676:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006678:	e008      	b.n	800668c <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800667a:	f7fb f861 	bl	8001740 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b02      	cmp	r3, #2
 8006686:	d901      	bls.n	800668c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e0e1      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800668c:	4b4a      	ldr	r3, [pc, #296]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1f0      	bne.n	800667a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006698:	4b47      	ldr	r3, [pc, #284]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 800669a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800669c:	4b47      	ldr	r3, [pc, #284]	; (80067bc <HAL_RCC_OscConfig+0x768>)
 800669e:	4013      	ands	r3, r2
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80066a8:	0112      	lsls	r2, r2, #4
 80066aa:	430a      	orrs	r2, r1
 80066ac:	4942      	ldr	r1, [pc, #264]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	628b      	str	r3, [r1, #40]	; 0x28
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b6:	3b01      	subs	r3, #1
 80066b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c0:	3b01      	subs	r3, #1
 80066c2:	025b      	lsls	r3, r3, #9
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066cc:	3b01      	subs	r3, #1
 80066ce:	041b      	lsls	r3, r3, #16
 80066d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066d4:	431a      	orrs	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066da:	3b01      	subs	r3, #1
 80066dc:	061b      	lsls	r3, r3, #24
 80066de:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066e2:	4935      	ldr	r1, [pc, #212]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80066e8:	4b33      	ldr	r3, [pc, #204]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 80066ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ec:	4a32      	ldr	r2, [pc, #200]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 80066ee:	f023 0301 	bic.w	r3, r3, #1
 80066f2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066f4:	4b30      	ldr	r3, [pc, #192]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 80066f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f8:	4b31      	ldr	r3, [pc, #196]	; (80067c0 <HAL_RCC_OscConfig+0x76c>)
 80066fa:	4013      	ands	r3, r2
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006700:	00d2      	lsls	r2, r2, #3
 8006702:	492d      	ldr	r1, [pc, #180]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006704:	4313      	orrs	r3, r2
 8006706:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006708:	4b2b      	ldr	r3, [pc, #172]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 800670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670c:	f023 020c 	bic.w	r2, r3, #12
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	4928      	ldr	r1, [pc, #160]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006716:	4313      	orrs	r3, r2
 8006718:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800671a:	4b27      	ldr	r3, [pc, #156]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 800671c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671e:	f023 0202 	bic.w	r2, r3, #2
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006726:	4924      	ldr	r1, [pc, #144]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006728:	4313      	orrs	r3, r2
 800672a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800672c:	4b22      	ldr	r3, [pc, #136]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 800672e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006730:	4a21      	ldr	r2, [pc, #132]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006736:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006738:	4b1f      	ldr	r3, [pc, #124]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 800673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673c:	4a1e      	ldr	r2, [pc, #120]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 800673e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006742:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006744:	4b1c      	ldr	r3, [pc, #112]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	4a1b      	ldr	r2, [pc, #108]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 800674a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800674e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006750:	4b19      	ldr	r3, [pc, #100]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	4a18      	ldr	r2, [pc, #96]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006756:	f043 0301 	orr.w	r3, r3, #1
 800675a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800675c:	4b16      	ldr	r3, [pc, #88]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a15      	ldr	r2, [pc, #84]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006768:	f7fa ffea 	bl	8001740 <HAL_GetTick>
 800676c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800676e:	e008      	b.n	8006782 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006770:	f7fa ffe6 	bl	8001740 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	2b02      	cmp	r3, #2
 800677c:	d901      	bls.n	8006782 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e066      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006782:	4b0d      	ldr	r3, [pc, #52]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d0f0      	beq.n	8006770 <HAL_RCC_OscConfig+0x71c>
 800678e:	e05e      	b.n	800684e <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006790:	4b09      	ldr	r3, [pc, #36]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a08      	ldr	r2, [pc, #32]	; (80067b8 <HAL_RCC_OscConfig+0x764>)
 8006796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800679a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800679c:	f7fa ffd0 	bl	8001740 <HAL_GetTick>
 80067a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067a2:	e00f      	b.n	80067c4 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067a4:	f7fa ffcc 	bl	8001740 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d908      	bls.n	80067c4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e04c      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
 80067b6:	bf00      	nop
 80067b8:	58024400 	.word	0x58024400
 80067bc:	fffffc0c 	.word	0xfffffc0c
 80067c0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067c4:	4b24      	ldr	r3, [pc, #144]	; (8006858 <HAL_RCC_OscConfig+0x804>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e9      	bne.n	80067a4 <HAL_RCC_OscConfig+0x750>
 80067d0:	e03d      	b.n	800684e <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80067d2:	4b21      	ldr	r3, [pc, #132]	; (8006858 <HAL_RCC_OscConfig+0x804>)
 80067d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80067d8:	4b1f      	ldr	r3, [pc, #124]	; (8006858 <HAL_RCC_OscConfig+0x804>)
 80067da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067dc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d031      	beq.n	800684a <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f003 0203 	and.w	r2, r3, #3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d12a      	bne.n	800684a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	091b      	lsrs	r3, r3, #4
 80067f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006800:	429a      	cmp	r2, r3
 8006802:	d122      	bne.n	800684a <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006810:	429a      	cmp	r2, r3
 8006812:	d11a      	bne.n	800684a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	0a5b      	lsrs	r3, r3, #9
 8006818:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006820:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006822:	429a      	cmp	r2, r3
 8006824:	d111      	bne.n	800684a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	0c1b      	lsrs	r3, r3, #16
 800682a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006832:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006834:	429a      	cmp	r2, r3
 8006836:	d108      	bne.n	800684a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	0e1b      	lsrs	r3, r3, #24
 800683c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006844:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006846:	429a      	cmp	r2, r3
 8006848:	d001      	beq.n	800684e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e000      	b.n	8006850 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3730      	adds	r7, #48	; 0x30
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	58024400 	.word	0x58024400

0800685c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e19c      	b.n	8006baa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006870:	4b8a      	ldr	r3, [pc, #552]	; (8006a9c <HAL_RCC_ClockConfig+0x240>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 030f 	and.w	r3, r3, #15
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d910      	bls.n	80068a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800687e:	4b87      	ldr	r3, [pc, #540]	; (8006a9c <HAL_RCC_ClockConfig+0x240>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f023 020f 	bic.w	r2, r3, #15
 8006886:	4985      	ldr	r1, [pc, #532]	; (8006a9c <HAL_RCC_ClockConfig+0x240>)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	4313      	orrs	r3, r2
 800688c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800688e:	4b83      	ldr	r3, [pc, #524]	; (8006a9c <HAL_RCC_ClockConfig+0x240>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 030f 	and.w	r3, r3, #15
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	d001      	beq.n	80068a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e184      	b.n	8006baa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d010      	beq.n	80068ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691a      	ldr	r2, [r3, #16]
 80068b0:	4b7b      	ldr	r3, [pc, #492]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d908      	bls.n	80068ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068bc:	4b78      	ldr	r3, [pc, #480]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	4975      	ldr	r1, [pc, #468]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0308 	and.w	r3, r3, #8
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d010      	beq.n	80068fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	695a      	ldr	r2, [r3, #20]
 80068de:	4b70      	ldr	r3, [pc, #448]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d908      	bls.n	80068fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068ea:	4b6d      	ldr	r3, [pc, #436]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	496a      	ldr	r1, [pc, #424]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0310 	and.w	r3, r3, #16
 8006904:	2b00      	cmp	r3, #0
 8006906:	d010      	beq.n	800692a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699a      	ldr	r2, [r3, #24]
 800690c:	4b64      	ldr	r3, [pc, #400]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006914:	429a      	cmp	r2, r3
 8006916:	d908      	bls.n	800692a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006918:	4b61      	ldr	r3, [pc, #388]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	495e      	ldr	r1, [pc, #376]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006926:	4313      	orrs	r3, r2
 8006928:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b00      	cmp	r3, #0
 8006934:	d010      	beq.n	8006958 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69da      	ldr	r2, [r3, #28]
 800693a:	4b59      	ldr	r3, [pc, #356]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006942:	429a      	cmp	r2, r3
 8006944:	d908      	bls.n	8006958 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006946:	4b56      	ldr	r3, [pc, #344]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	4953      	ldr	r1, [pc, #332]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006954:	4313      	orrs	r3, r2
 8006956:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d010      	beq.n	8006986 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	4b4d      	ldr	r3, [pc, #308]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	429a      	cmp	r2, r3
 8006972:	d908      	bls.n	8006986 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006974:	4b4a      	ldr	r3, [pc, #296]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	f023 020f 	bic.w	r2, r3, #15
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	4947      	ldr	r1, [pc, #284]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006982:	4313      	orrs	r3, r2
 8006984:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d055      	beq.n	8006a3e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006992:	4b43      	ldr	r3, [pc, #268]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	4940      	ldr	r1, [pc, #256]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d107      	bne.n	80069bc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069ac:	4b3c      	ldr	r3, [pc, #240]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d121      	bne.n	80069fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e0f6      	b.n	8006baa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d107      	bne.n	80069d4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069c4:	4b36      	ldr	r3, [pc, #216]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d115      	bne.n	80069fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e0ea      	b.n	8006baa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d107      	bne.n	80069ec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80069dc:	4b30      	ldr	r3, [pc, #192]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d109      	bne.n	80069fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e0de      	b.n	8006baa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069ec:	4b2c      	ldr	r3, [pc, #176]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e0d6      	b.n	8006baa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069fc:	4b28      	ldr	r3, [pc, #160]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	f023 0207 	bic.w	r2, r3, #7
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	4925      	ldr	r1, [pc, #148]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a0e:	f7fa fe97 	bl	8001740 <HAL_GetTick>
 8006a12:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a14:	e00a      	b.n	8006a2c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a16:	f7fa fe93 	bl	8001740 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d901      	bls.n	8006a2c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e0be      	b.n	8006baa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a2c:	4b1c      	ldr	r3, [pc, #112]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d1eb      	bne.n	8006a16 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d010      	beq.n	8006a6c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	4b14      	ldr	r3, [pc, #80]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d208      	bcs.n	8006a6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a5a:	4b11      	ldr	r3, [pc, #68]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	f023 020f 	bic.w	r2, r3, #15
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	490e      	ldr	r1, [pc, #56]	; (8006aa0 <HAL_RCC_ClockConfig+0x244>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a6c:	4b0b      	ldr	r3, [pc, #44]	; (8006a9c <HAL_RCC_ClockConfig+0x240>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d214      	bcs.n	8006aa4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a7a:	4b08      	ldr	r3, [pc, #32]	; (8006a9c <HAL_RCC_ClockConfig+0x240>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f023 020f 	bic.w	r2, r3, #15
 8006a82:	4906      	ldr	r1, [pc, #24]	; (8006a9c <HAL_RCC_ClockConfig+0x240>)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a8a:	4b04      	ldr	r3, [pc, #16]	; (8006a9c <HAL_RCC_ClockConfig+0x240>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 030f 	and.w	r3, r3, #15
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d005      	beq.n	8006aa4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e086      	b.n	8006baa <HAL_RCC_ClockConfig+0x34e>
 8006a9c:	52002000 	.word	0x52002000
 8006aa0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d010      	beq.n	8006ad2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	4b3f      	ldr	r3, [pc, #252]	; (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d208      	bcs.n	8006ad2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ac0:	4b3c      	ldr	r3, [pc, #240]	; (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	4939      	ldr	r1, [pc, #228]	; (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0308 	and.w	r3, r3, #8
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d010      	beq.n	8006b00 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	695a      	ldr	r2, [r3, #20]
 8006ae2:	4b34      	ldr	r3, [pc, #208]	; (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d208      	bcs.n	8006b00 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006aee:	4b31      	ldr	r3, [pc, #196]	; (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	492e      	ldr	r1, [pc, #184]	; (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0310 	and.w	r3, r3, #16
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d010      	beq.n	8006b2e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	699a      	ldr	r2, [r3, #24]
 8006b10:	4b28      	ldr	r3, [pc, #160]	; (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d208      	bcs.n	8006b2e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b1c:	4b25      	ldr	r3, [pc, #148]	; (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	4922      	ldr	r1, [pc, #136]	; (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0320 	and.w	r3, r3, #32
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d010      	beq.n	8006b5c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	69da      	ldr	r2, [r3, #28]
 8006b3e:	4b1d      	ldr	r3, [pc, #116]	; (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d208      	bcs.n	8006b5c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006b4a:	4b1a      	ldr	r3, [pc, #104]	; (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	4917      	ldr	r1, [pc, #92]	; (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006b5c:	f000 f834 	bl	8006bc8 <HAL_RCC_GetSysClockFreq>
 8006b60:	4602      	mov	r2, r0
 8006b62:	4b14      	ldr	r3, [pc, #80]	; (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	0a1b      	lsrs	r3, r3, #8
 8006b68:	f003 030f 	and.w	r3, r3, #15
 8006b6c:	4912      	ldr	r1, [pc, #72]	; (8006bb8 <HAL_RCC_ClockConfig+0x35c>)
 8006b6e:	5ccb      	ldrb	r3, [r1, r3]
 8006b70:	f003 031f 	and.w	r3, r3, #31
 8006b74:	fa22 f303 	lsr.w	r3, r2, r3
 8006b78:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006b7a:	4b0e      	ldr	r3, [pc, #56]	; (8006bb4 <HAL_RCC_ClockConfig+0x358>)
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	4a0d      	ldr	r2, [pc, #52]	; (8006bb8 <HAL_RCC_ClockConfig+0x35c>)
 8006b84:	5cd3      	ldrb	r3, [r2, r3]
 8006b86:	f003 031f 	and.w	r3, r3, #31
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b90:	4a0a      	ldr	r2, [pc, #40]	; (8006bbc <HAL_RCC_ClockConfig+0x360>)
 8006b92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b94:	4a0a      	ldr	r2, [pc, #40]	; (8006bc0 <HAL_RCC_ClockConfig+0x364>)
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006b9a:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <HAL_RCC_ClockConfig+0x368>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fa fd84 	bl	80016ac <HAL_InitTick>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	58024400 	.word	0x58024400
 8006bb8:	0800b224 	.word	0x0800b224
 8006bbc:	24000004 	.word	0x24000004
 8006bc0:	24000000 	.word	0x24000000
 8006bc4:	24000008 	.word	0x24000008

08006bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b089      	sub	sp, #36	; 0x24
 8006bcc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bce:	4bb3      	ldr	r3, [pc, #716]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bd6:	2b18      	cmp	r3, #24
 8006bd8:	f200 8155 	bhi.w	8006e86 <HAL_RCC_GetSysClockFreq+0x2be>
 8006bdc:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be2:	bf00      	nop
 8006be4:	08006c49 	.word	0x08006c49
 8006be8:	08006e87 	.word	0x08006e87
 8006bec:	08006e87 	.word	0x08006e87
 8006bf0:	08006e87 	.word	0x08006e87
 8006bf4:	08006e87 	.word	0x08006e87
 8006bf8:	08006e87 	.word	0x08006e87
 8006bfc:	08006e87 	.word	0x08006e87
 8006c00:	08006e87 	.word	0x08006e87
 8006c04:	08006c6f 	.word	0x08006c6f
 8006c08:	08006e87 	.word	0x08006e87
 8006c0c:	08006e87 	.word	0x08006e87
 8006c10:	08006e87 	.word	0x08006e87
 8006c14:	08006e87 	.word	0x08006e87
 8006c18:	08006e87 	.word	0x08006e87
 8006c1c:	08006e87 	.word	0x08006e87
 8006c20:	08006e87 	.word	0x08006e87
 8006c24:	08006c75 	.word	0x08006c75
 8006c28:	08006e87 	.word	0x08006e87
 8006c2c:	08006e87 	.word	0x08006e87
 8006c30:	08006e87 	.word	0x08006e87
 8006c34:	08006e87 	.word	0x08006e87
 8006c38:	08006e87 	.word	0x08006e87
 8006c3c:	08006e87 	.word	0x08006e87
 8006c40:	08006e87 	.word	0x08006e87
 8006c44:	08006c7b 	.word	0x08006c7b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c48:	4b94      	ldr	r3, [pc, #592]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d009      	beq.n	8006c68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c54:	4b91      	ldr	r3, [pc, #580]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	08db      	lsrs	r3, r3, #3
 8006c5a:	f003 0303 	and.w	r3, r3, #3
 8006c5e:	4a90      	ldr	r2, [pc, #576]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c60:	fa22 f303 	lsr.w	r3, r2, r3
 8006c64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006c66:	e111      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006c68:	4b8d      	ldr	r3, [pc, #564]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c6a:	61bb      	str	r3, [r7, #24]
    break;
 8006c6c:	e10e      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006c6e:	4b8d      	ldr	r3, [pc, #564]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c70:	61bb      	str	r3, [r7, #24]
    break;
 8006c72:	e10b      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006c74:	4b8c      	ldr	r3, [pc, #560]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006c76:	61bb      	str	r3, [r7, #24]
    break;
 8006c78:	e108      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c7a:	4b88      	ldr	r3, [pc, #544]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7e:	f003 0303 	and.w	r3, r3, #3
 8006c82:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006c84:	4b85      	ldr	r3, [pc, #532]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c88:	091b      	lsrs	r3, r3, #4
 8006c8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c8e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c90:	4b82      	ldr	r3, [pc, #520]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006c9a:	4b80      	ldr	r3, [pc, #512]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9e:	08db      	lsrs	r3, r3, #3
 8006ca0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	fb02 f303 	mul.w	r3, r2, r3
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 80e1 	beq.w	8006e80 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	f000 8083 	beq.w	8006dcc <HAL_RCC_GetSysClockFreq+0x204>
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	f200 80a1 	bhi.w	8006e10 <HAL_RCC_GetSysClockFreq+0x248>
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_RCC_GetSysClockFreq+0x114>
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d056      	beq.n	8006d88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006cda:	e099      	b.n	8006e10 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cdc:	4b6f      	ldr	r3, [pc, #444]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0320 	and.w	r3, r3, #32
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d02d      	beq.n	8006d44 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ce8:	4b6c      	ldr	r3, [pc, #432]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	08db      	lsrs	r3, r3, #3
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	4a6b      	ldr	r2, [pc, #428]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	ee07 3a90 	vmov	s15, r3
 8006d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d12:	4b62      	ldr	r3, [pc, #392]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d26:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006eac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006d42:	e087      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006eb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d56:	4b51      	ldr	r3, [pc, #324]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d66:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d6a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006eac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d86:	e065      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006eb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d9a:	4b40      	ldr	r3, [pc, #256]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006daa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006eac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dca:	e043      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006eb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dde:	4b2f      	ldr	r3, [pc, #188]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dee:	ed97 6a02 	vldr	s12, [r7, #8]
 8006df2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006eac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e0e:	e021      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006eb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e22:	4b1e      	ldr	r3, [pc, #120]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e32:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006eac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e52:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006e54:	4b11      	ldr	r3, [pc, #68]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e58:	0a5b      	lsrs	r3, r3, #9
 8006e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e5e:	3301      	adds	r3, #1
 8006e60:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	ee07 3a90 	vmov	s15, r3
 8006e68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e78:	ee17 3a90 	vmov	r3, s15
 8006e7c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006e7e:	e005      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	61bb      	str	r3, [r7, #24]
    break;
 8006e84:	e002      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006e86:	4b07      	ldr	r3, [pc, #28]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e88:	61bb      	str	r3, [r7, #24]
    break;
 8006e8a:	bf00      	nop
  }

  return sysclockfreq;
 8006e8c:	69bb      	ldr	r3, [r7, #24]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3724      	adds	r7, #36	; 0x24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	58024400 	.word	0x58024400
 8006ea0:	03d09000 	.word	0x03d09000
 8006ea4:	003d0900 	.word	0x003d0900
 8006ea8:	007a1200 	.word	0x007a1200
 8006eac:	46000000 	.word	0x46000000
 8006eb0:	4c742400 	.word	0x4c742400
 8006eb4:	4a742400 	.word	0x4a742400
 8006eb8:	4af42400 	.word	0x4af42400

08006ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006ec2:	f7ff fe81 	bl	8006bc8 <HAL_RCC_GetSysClockFreq>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	4b10      	ldr	r3, [pc, #64]	; (8006f0c <HAL_RCC_GetHCLKFreq+0x50>)
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	0a1b      	lsrs	r3, r3, #8
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	490f      	ldr	r1, [pc, #60]	; (8006f10 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ed4:	5ccb      	ldrb	r3, [r1, r3]
 8006ed6:	f003 031f 	and.w	r3, r3, #31
 8006eda:	fa22 f303 	lsr.w	r3, r2, r3
 8006ede:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006ee0:	4b0a      	ldr	r3, [pc, #40]	; (8006f0c <HAL_RCC_GetHCLKFreq+0x50>)
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	f003 030f 	and.w	r3, r3, #15
 8006ee8:	4a09      	ldr	r2, [pc, #36]	; (8006f10 <HAL_RCC_GetHCLKFreq+0x54>)
 8006eea:	5cd3      	ldrb	r3, [r2, r3]
 8006eec:	f003 031f 	and.w	r3, r3, #31
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef6:	4a07      	ldr	r2, [pc, #28]	; (8006f14 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ef8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006efa:	4a07      	ldr	r2, [pc, #28]	; (8006f18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006f00:	4b04      	ldr	r3, [pc, #16]	; (8006f14 <HAL_RCC_GetHCLKFreq+0x58>)
 8006f02:	681b      	ldr	r3, [r3, #0]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	58024400 	.word	0x58024400
 8006f10:	0800b224 	.word	0x0800b224
 8006f14:	24000004 	.word	0x24000004
 8006f18:	24000000 	.word	0x24000000

08006f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006f20:	f7ff ffcc 	bl	8006ebc <HAL_RCC_GetHCLKFreq>
 8006f24:	4602      	mov	r2, r0
 8006f26:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	091b      	lsrs	r3, r3, #4
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	4904      	ldr	r1, [pc, #16]	; (8006f44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f32:	5ccb      	ldrb	r3, [r1, r3]
 8006f34:	f003 031f 	and.w	r3, r3, #31
 8006f38:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	58024400 	.word	0x58024400
 8006f44:	0800b224 	.word	0x0800b224

08006f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006f4c:	f7ff ffb6 	bl	8006ebc <HAL_RCC_GetHCLKFreq>
 8006f50:	4602      	mov	r2, r0
 8006f52:	4b06      	ldr	r3, [pc, #24]	; (8006f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	0a1b      	lsrs	r3, r3, #8
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	4904      	ldr	r1, [pc, #16]	; (8006f70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f5e:	5ccb      	ldrb	r3, [r1, r3]
 8006f60:	f003 031f 	and.w	r3, r3, #31
 8006f64:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	58024400 	.word	0x58024400
 8006f70:	0800b224 	.word	0x0800b224

08006f74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f80:	2300      	movs	r3, #0
 8006f82:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d03f      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f98:	d02a      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006f9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f9e:	d824      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006fa0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fa4:	d018      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006fa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006faa:	d81e      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006fb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fb4:	d007      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006fb6:	e018      	b.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb8:	4b9f      	ldr	r3, [pc, #636]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	4a9e      	ldr	r2, [pc, #632]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fc4:	e015      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	2102      	movs	r1, #2
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f001 f99b 	bl	8008308 <RCCEx_PLL2_Config>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fd6:	e00c      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3324      	adds	r3, #36	; 0x24
 8006fdc:	2102      	movs	r1, #2
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f001 fa44 	bl	800846c <RCCEx_PLL3_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fe8:	e003      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	75fb      	strb	r3, [r7, #23]
      break;
 8006fee:	e000      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006ff0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d109      	bne.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ff8:	4b8f      	ldr	r3, [pc, #572]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ffc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007004:	498c      	ldr	r1, [pc, #560]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007006:	4313      	orrs	r3, r2
 8007008:	650b      	str	r3, [r1, #80]	; 0x50
 800700a:	e001      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700c:	7dfb      	ldrb	r3, [r7, #23]
 800700e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007018:	2b00      	cmp	r3, #0
 800701a:	d03d      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007020:	2b04      	cmp	r3, #4
 8007022:	d826      	bhi.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007024:	a201      	add	r2, pc, #4	; (adr r2, 800702c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702a:	bf00      	nop
 800702c:	08007041 	.word	0x08007041
 8007030:	0800704f 	.word	0x0800704f
 8007034:	08007061 	.word	0x08007061
 8007038:	08007079 	.word	0x08007079
 800703c:	08007079 	.word	0x08007079
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007040:	4b7d      	ldr	r3, [pc, #500]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	4a7c      	ldr	r2, [pc, #496]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800704a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800704c:	e015      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3304      	adds	r3, #4
 8007052:	2100      	movs	r1, #0
 8007054:	4618      	mov	r0, r3
 8007056:	f001 f957 	bl	8008308 <RCCEx_PLL2_Config>
 800705a:	4603      	mov	r3, r0
 800705c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800705e:	e00c      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3324      	adds	r3, #36	; 0x24
 8007064:	2100      	movs	r1, #0
 8007066:	4618      	mov	r0, r3
 8007068:	f001 fa00 	bl	800846c <RCCEx_PLL3_Config>
 800706c:	4603      	mov	r3, r0
 800706e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007070:	e003      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	75fb      	strb	r3, [r7, #23]
      break;
 8007076:	e000      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800707a:	7dfb      	ldrb	r3, [r7, #23]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d109      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007080:	4b6d      	ldr	r3, [pc, #436]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007084:	f023 0207 	bic.w	r2, r3, #7
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708c:	496a      	ldr	r1, [pc, #424]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800708e:	4313      	orrs	r3, r2
 8007090:	650b      	str	r3, [r1, #80]	; 0x50
 8007092:	e001      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007094:	7dfb      	ldrb	r3, [r7, #23]
 8007096:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d04a      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80070ac:	d031      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80070ae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80070b2:	d82b      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80070b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b8:	d02d      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80070ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070be:	d825      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80070c0:	2bc0      	cmp	r3, #192	; 0xc0
 80070c2:	d02a      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80070c4:	2bc0      	cmp	r3, #192	; 0xc0
 80070c6:	d821      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80070c8:	2b80      	cmp	r3, #128	; 0x80
 80070ca:	d016      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x186>
 80070cc:	2b80      	cmp	r3, #128	; 0x80
 80070ce:	d81d      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x166>
 80070d4:	2b40      	cmp	r3, #64	; 0x40
 80070d6:	d007      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80070d8:	e018      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070da:	4b57      	ldr	r3, [pc, #348]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	4a56      	ldr	r2, [pc, #344]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80070e6:	e019      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	3304      	adds	r3, #4
 80070ec:	2100      	movs	r1, #0
 80070ee:	4618      	mov	r0, r3
 80070f0:	f001 f90a 	bl	8008308 <RCCEx_PLL2_Config>
 80070f4:	4603      	mov	r3, r0
 80070f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80070f8:	e010      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3324      	adds	r3, #36	; 0x24
 80070fe:	2100      	movs	r1, #0
 8007100:	4618      	mov	r0, r3
 8007102:	f001 f9b3 	bl	800846c <RCCEx_PLL3_Config>
 8007106:	4603      	mov	r3, r0
 8007108:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800710a:	e007      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	75fb      	strb	r3, [r7, #23]
      break;
 8007110:	e004      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8007112:	bf00      	nop
 8007114:	e002      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8007116:	bf00      	nop
 8007118:	e000      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800711a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800711c:	7dfb      	ldrb	r3, [r7, #23]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007122:	4b45      	ldr	r3, [pc, #276]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007126:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712e:	4942      	ldr	r1, [pc, #264]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007130:	4313      	orrs	r3, r2
 8007132:	650b      	str	r3, [r1, #80]	; 0x50
 8007134:	e001      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007136:	7dfb      	ldrb	r3, [r7, #23]
 8007138:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007142:	2b00      	cmp	r3, #0
 8007144:	d04f      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800714a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800714e:	d036      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007150:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007154:	d830      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800715a:	d032      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800715c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007160:	d82a      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007162:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007166:	d02e      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8007168:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800716c:	d824      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800716e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007172:	d018      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8007174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007178:	d81e      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800717e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007182:	d007      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8007184:	e018      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007186:	4b2c      	ldr	r3, [pc, #176]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	4a2b      	ldr	r2, [pc, #172]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800718c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007190:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8007192:	e019      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3304      	adds	r3, #4
 8007198:	2100      	movs	r1, #0
 800719a:	4618      	mov	r0, r3
 800719c:	f001 f8b4 	bl	8008308 <RCCEx_PLL2_Config>
 80071a0:	4603      	mov	r3, r0
 80071a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80071a4:	e010      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3324      	adds	r3, #36	; 0x24
 80071aa:	2100      	movs	r1, #0
 80071ac:	4618      	mov	r0, r3
 80071ae:	f001 f95d 	bl	800846c <RCCEx_PLL3_Config>
 80071b2:	4603      	mov	r3, r0
 80071b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80071b6:	e007      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	75fb      	strb	r3, [r7, #23]
      break;
 80071bc:	e004      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80071be:	bf00      	nop
 80071c0:	e002      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80071c2:	bf00      	nop
 80071c4:	e000      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80071c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d109      	bne.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80071ce:	4b1a      	ldr	r3, [pc, #104]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80071d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d2:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071da:	4917      	ldr	r1, [pc, #92]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	650b      	str	r3, [r1, #80]	; 0x50
 80071e0:	e001      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e2:	7dfb      	ldrb	r3, [r7, #23]
 80071e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d034      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071f6:	2b30      	cmp	r3, #48	; 0x30
 80071f8:	d01c      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80071fa:	2b30      	cmp	r3, #48	; 0x30
 80071fc:	d817      	bhi.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80071fe:	2b20      	cmp	r3, #32
 8007200:	d00c      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007202:	2b20      	cmp	r3, #32
 8007204:	d813      	bhi.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007206:	2b00      	cmp	r3, #0
 8007208:	d018      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800720a:	2b10      	cmp	r3, #16
 800720c:	d10f      	bne.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800720e:	4b0a      	ldr	r3, [pc, #40]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007212:	4a09      	ldr	r2, [pc, #36]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007218:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800721a:	e010      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3304      	adds	r3, #4
 8007220:	2102      	movs	r1, #2
 8007222:	4618      	mov	r0, r3
 8007224:	f001 f870 	bl	8008308 <RCCEx_PLL2_Config>
 8007228:	4603      	mov	r3, r0
 800722a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800722c:	e007      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	75fb      	strb	r3, [r7, #23]
      break;
 8007232:	e004      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8007234:	bf00      	nop
 8007236:	e002      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007238:	58024400 	.word	0x58024400
      break;
 800723c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800723e:	7dfb      	ldrb	r3, [r7, #23]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d109      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007244:	4b9b      	ldr	r3, [pc, #620]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007248:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007250:	4998      	ldr	r1, [pc, #608]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007252:	4313      	orrs	r3, r2
 8007254:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007256:	e001      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007258:	7dfb      	ldrb	r3, [r7, #23]
 800725a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d047      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800726c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007270:	d030      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007272:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007276:	d82a      	bhi.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007278:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800727c:	d02c      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800727e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007282:	d824      	bhi.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007288:	d018      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x348>
 800728a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800728e:	d81e      	bhi.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8007294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007298:	d007      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x336>
 800729a:	e018      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800729c:	4b85      	ldr	r3, [pc, #532]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	4a84      	ldr	r2, [pc, #528]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80072a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072a8:	e017      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	3304      	adds	r3, #4
 80072ae:	2100      	movs	r1, #0
 80072b0:	4618      	mov	r0, r3
 80072b2:	f001 f829 	bl	8008308 <RCCEx_PLL2_Config>
 80072b6:	4603      	mov	r3, r0
 80072b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072ba:	e00e      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3324      	adds	r3, #36	; 0x24
 80072c0:	2100      	movs	r1, #0
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 f8d2 	bl	800846c <RCCEx_PLL3_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072cc:	e005      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	75fb      	strb	r3, [r7, #23]
      break;
 80072d2:	e002      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80072d4:	bf00      	nop
 80072d6:	e000      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80072d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d109      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072e0:	4b74      	ldr	r3, [pc, #464]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80072e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ec:	4971      	ldr	r1, [pc, #452]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	650b      	str	r3, [r1, #80]	; 0x50
 80072f2:	e001      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
 80072f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d049      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800730c:	d02e      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800730e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007312:	d828      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007314:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007318:	d02a      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800731a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800731e:	d822      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007320:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007324:	d026      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8007326:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800732a:	d81c      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800732c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007330:	d010      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007332:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007336:	d816      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01d      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800733c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007340:	d111      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3304      	adds	r3, #4
 8007346:	2101      	movs	r1, #1
 8007348:	4618      	mov	r0, r3
 800734a:	f000 ffdd 	bl	8008308 <RCCEx_PLL2_Config>
 800734e:	4603      	mov	r3, r0
 8007350:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007352:	e012      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3324      	adds	r3, #36	; 0x24
 8007358:	2101      	movs	r1, #1
 800735a:	4618      	mov	r0, r3
 800735c:	f001 f886 	bl	800846c <RCCEx_PLL3_Config>
 8007360:	4603      	mov	r3, r0
 8007362:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007364:	e009      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	75fb      	strb	r3, [r7, #23]
      break;
 800736a:	e006      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800736c:	bf00      	nop
 800736e:	e004      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007370:	bf00      	nop
 8007372:	e002      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007374:	bf00      	nop
 8007376:	e000      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d109      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007380:	4b4c      	ldr	r3, [pc, #304]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007384:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800738c:	4949      	ldr	r1, [pc, #292]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800738e:	4313      	orrs	r3, r2
 8007390:	650b      	str	r3, [r1, #80]	; 0x50
 8007392:	e001      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007394:	7dfb      	ldrb	r3, [r7, #23]
 8007396:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d053      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80073aa:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80073ae:	d034      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80073b0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80073b4:	d82e      	bhi.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80073b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073ba:	d030      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80073bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073c0:	d828      	bhi.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80073c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c6:	d02c      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80073c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073cc:	d822      	bhi.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80073ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073d2:	d028      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80073d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073d8:	d81c      	bhi.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80073da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073de:	d010      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80073e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073e4:	d816      	bhi.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d01f      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80073ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073ee:	d111      	bne.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3304      	adds	r3, #4
 80073f4:	2101      	movs	r1, #1
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 ff86 	bl	8008308 <RCCEx_PLL2_Config>
 80073fc:	4603      	mov	r3, r0
 80073fe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007400:	e014      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3324      	adds	r3, #36	; 0x24
 8007406:	2101      	movs	r1, #1
 8007408:	4618      	mov	r0, r3
 800740a:	f001 f82f 	bl	800846c <RCCEx_PLL3_Config>
 800740e:	4603      	mov	r3, r0
 8007410:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007412:	e00b      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	75fb      	strb	r3, [r7, #23]
      break;
 8007418:	e008      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800741a:	bf00      	nop
 800741c:	e006      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800741e:	bf00      	nop
 8007420:	e004      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007422:	bf00      	nop
 8007424:	e002      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007426:	bf00      	nop
 8007428:	e000      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800742a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800742c:	7dfb      	ldrb	r3, [r7, #23]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10a      	bne.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007432:	4b20      	ldr	r3, [pc, #128]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007436:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007440:	491c      	ldr	r1, [pc, #112]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007442:	4313      	orrs	r3, r2
 8007444:	658b      	str	r3, [r1, #88]	; 0x58
 8007446:	e001      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d031      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800745c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007460:	d00e      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007466:	d814      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007468:	2b00      	cmp	r3, #0
 800746a:	d015      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800746c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007470:	d10f      	bne.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007472:	4b10      	ldr	r3, [pc, #64]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007476:	4a0f      	ldr	r2, [pc, #60]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800747c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800747e:	e00c      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	3304      	adds	r3, #4
 8007484:	2101      	movs	r1, #1
 8007486:	4618      	mov	r0, r3
 8007488:	f000 ff3e 	bl	8008308 <RCCEx_PLL2_Config>
 800748c:	4603      	mov	r3, r0
 800748e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007490:	e003      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	75fb      	strb	r3, [r7, #23]
      break;
 8007496:	e000      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8007498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800749a:	7dfb      	ldrb	r3, [r7, #23]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10b      	bne.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074a0:	4b04      	ldr	r3, [pc, #16]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80074a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ac:	4901      	ldr	r1, [pc, #4]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	650b      	str	r3, [r1, #80]	; 0x50
 80074b2:	e003      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x548>
 80074b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d032      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d81b      	bhi.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80074d0:	a201      	add	r2, pc, #4	; (adr r2, 80074d8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80074d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d6:	bf00      	nop
 80074d8:	0800750f 	.word	0x0800750f
 80074dc:	080074e9 	.word	0x080074e9
 80074e0:	080074f7 	.word	0x080074f7
 80074e4:	0800750f 	.word	0x0800750f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e8:	4bb2      	ldr	r3, [pc, #712]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	4ab1      	ldr	r2, [pc, #708]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80074ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80074f4:	e00c      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3304      	adds	r3, #4
 80074fa:	2102      	movs	r1, #2
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 ff03 	bl	8008308 <RCCEx_PLL2_Config>
 8007502:	4603      	mov	r3, r0
 8007504:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007506:	e003      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	75fb      	strb	r3, [r7, #23]
      break;
 800750c:	e000      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800750e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007510:	7dfb      	ldrb	r3, [r7, #23]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d109      	bne.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007516:	4ba7      	ldr	r3, [pc, #668]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751a:	f023 0203 	bic.w	r2, r3, #3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007522:	49a4      	ldr	r1, [pc, #656]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007524:	4313      	orrs	r3, r2
 8007526:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007528:	e001      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752a:	7dfb      	ldrb	r3, [r7, #23]
 800752c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 8086 	beq.w	8007648 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800753c:	4b9e      	ldr	r3, [pc, #632]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a9d      	ldr	r2, [pc, #628]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007546:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007548:	f7fa f8fa 	bl	8001740 <HAL_GetTick>
 800754c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800754e:	e009      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007550:	f7fa f8f6 	bl	8001740 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b64      	cmp	r3, #100	; 0x64
 800755c:	d902      	bls.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	75fb      	strb	r3, [r7, #23]
        break;
 8007562:	e005      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007564:	4b94      	ldr	r3, [pc, #592]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0ef      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d166      	bne.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007576:	4b8f      	ldr	r3, [pc, #572]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007578:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007580:	4053      	eors	r3, r2
 8007582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007586:	2b00      	cmp	r3, #0
 8007588:	d013      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800758a:	4b8a      	ldr	r3, [pc, #552]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800758c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007592:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007594:	4b87      	ldr	r3, [pc, #540]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007598:	4a86      	ldr	r2, [pc, #536]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800759a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800759e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075a0:	4b84      	ldr	r3, [pc, #528]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80075a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a4:	4a83      	ldr	r2, [pc, #524]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80075a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075aa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80075ac:	4a81      	ldr	r2, [pc, #516]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075bc:	d115      	bne.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075be:	f7fa f8bf 	bl	8001740 <HAL_GetTick>
 80075c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075c4:	e00b      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075c6:	f7fa f8bb 	bl	8001740 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d902      	bls.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	75fb      	strb	r3, [r7, #23]
            break;
 80075dc:	e005      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075de:	4b75      	ldr	r3, [pc, #468]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80075e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d0ed      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d126      	bne.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075fe:	d10d      	bne.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8007600:	4b6c      	ldr	r3, [pc, #432]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800760e:	0919      	lsrs	r1, r3, #4
 8007610:	4b6a      	ldr	r3, [pc, #424]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007612:	400b      	ands	r3, r1
 8007614:	4967      	ldr	r1, [pc, #412]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007616:	4313      	orrs	r3, r2
 8007618:	610b      	str	r3, [r1, #16]
 800761a:	e005      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 800761c:	4b65      	ldr	r3, [pc, #404]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	4a64      	ldr	r2, [pc, #400]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007622:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007626:	6113      	str	r3, [r2, #16]
 8007628:	4b62      	ldr	r3, [pc, #392]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800762a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007636:	495f      	ldr	r1, [pc, #380]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007638:	4313      	orrs	r3, r2
 800763a:	670b      	str	r3, [r1, #112]	; 0x70
 800763c:	e004      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800763e:	7dfb      	ldrb	r3, [r7, #23]
 8007640:	75bb      	strb	r3, [r7, #22]
 8007642:	e001      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007644:	7dfb      	ldrb	r3, [r7, #23]
 8007646:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d07f      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800765a:	2b28      	cmp	r3, #40	; 0x28
 800765c:	d866      	bhi.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 800765e:	a201      	add	r2, pc, #4	; (adr r2, 8007664 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8007660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007664:	08007733 	.word	0x08007733
 8007668:	0800772d 	.word	0x0800772d
 800766c:	0800772d 	.word	0x0800772d
 8007670:	0800772d 	.word	0x0800772d
 8007674:	0800772d 	.word	0x0800772d
 8007678:	0800772d 	.word	0x0800772d
 800767c:	0800772d 	.word	0x0800772d
 8007680:	0800772d 	.word	0x0800772d
 8007684:	08007709 	.word	0x08007709
 8007688:	0800772d 	.word	0x0800772d
 800768c:	0800772d 	.word	0x0800772d
 8007690:	0800772d 	.word	0x0800772d
 8007694:	0800772d 	.word	0x0800772d
 8007698:	0800772d 	.word	0x0800772d
 800769c:	0800772d 	.word	0x0800772d
 80076a0:	0800772d 	.word	0x0800772d
 80076a4:	0800771b 	.word	0x0800771b
 80076a8:	0800772d 	.word	0x0800772d
 80076ac:	0800772d 	.word	0x0800772d
 80076b0:	0800772d 	.word	0x0800772d
 80076b4:	0800772d 	.word	0x0800772d
 80076b8:	0800772d 	.word	0x0800772d
 80076bc:	0800772d 	.word	0x0800772d
 80076c0:	0800772d 	.word	0x0800772d
 80076c4:	08007733 	.word	0x08007733
 80076c8:	0800772d 	.word	0x0800772d
 80076cc:	0800772d 	.word	0x0800772d
 80076d0:	0800772d 	.word	0x0800772d
 80076d4:	0800772d 	.word	0x0800772d
 80076d8:	0800772d 	.word	0x0800772d
 80076dc:	0800772d 	.word	0x0800772d
 80076e0:	0800772d 	.word	0x0800772d
 80076e4:	08007733 	.word	0x08007733
 80076e8:	0800772d 	.word	0x0800772d
 80076ec:	0800772d 	.word	0x0800772d
 80076f0:	0800772d 	.word	0x0800772d
 80076f4:	0800772d 	.word	0x0800772d
 80076f8:	0800772d 	.word	0x0800772d
 80076fc:	0800772d 	.word	0x0800772d
 8007700:	0800772d 	.word	0x0800772d
 8007704:	08007733 	.word	0x08007733
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	3304      	adds	r3, #4
 800770c:	2101      	movs	r1, #1
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fdfa 	bl	8008308 <RCCEx_PLL2_Config>
 8007714:	4603      	mov	r3, r0
 8007716:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007718:	e00c      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	3324      	adds	r3, #36	; 0x24
 800771e:	2101      	movs	r1, #1
 8007720:	4618      	mov	r0, r3
 8007722:	f000 fea3 	bl	800846c <RCCEx_PLL3_Config>
 8007726:	4603      	mov	r3, r0
 8007728:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800772a:	e003      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	75fb      	strb	r3, [r7, #23]
      break;
 8007730:	e000      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8007732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007734:	7dfb      	ldrb	r3, [r7, #23]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10a      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800773a:	4b1e      	ldr	r3, [pc, #120]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800773c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007748:	491a      	ldr	r1, [pc, #104]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800774a:	4313      	orrs	r3, r2
 800774c:	654b      	str	r3, [r1, #84]	; 0x54
 800774e:	e001      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007750:	7dfb      	ldrb	r3, [r7, #23]
 8007752:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d03f      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007764:	2b05      	cmp	r3, #5
 8007766:	d821      	bhi.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x838>
 8007768:	a201      	add	r2, pc, #4	; (adr r2, 8007770 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800776a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776e:	bf00      	nop
 8007770:	080077c1 	.word	0x080077c1
 8007774:	08007789 	.word	0x08007789
 8007778:	0800779b 	.word	0x0800779b
 800777c:	080077c1 	.word	0x080077c1
 8007780:	080077c1 	.word	0x080077c1
 8007784:	080077c1 	.word	0x080077c1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	3304      	adds	r3, #4
 800778c:	2101      	movs	r1, #1
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fdba 	bl	8008308 <RCCEx_PLL2_Config>
 8007794:	4603      	mov	r3, r0
 8007796:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007798:	e013      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	3324      	adds	r3, #36	; 0x24
 800779e:	2101      	movs	r1, #1
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 fe63 	bl	800846c <RCCEx_PLL3_Config>
 80077a6:	4603      	mov	r3, r0
 80077a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80077aa:	e00a      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	75fb      	strb	r3, [r7, #23]
      break;
 80077b0:	e007      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80077b2:	bf00      	nop
 80077b4:	58024400 	.word	0x58024400
 80077b8:	58024800 	.word	0x58024800
 80077bc:	00ffffcf 	.word	0x00ffffcf
      break;
 80077c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d109      	bne.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80077c8:	4b9f      	ldr	r3, [pc, #636]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80077ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077cc:	f023 0207 	bic.w	r2, r3, #7
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077d4:	499c      	ldr	r1, [pc, #624]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	654b      	str	r3, [r1, #84]	; 0x54
 80077da:	e001      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077dc:	7dfb      	ldrb	r3, [r7, #23]
 80077de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0304 	and.w	r3, r3, #4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d039      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077f2:	2b05      	cmp	r3, #5
 80077f4:	d820      	bhi.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80077f6:	a201      	add	r2, pc, #4	; (adr r2, 80077fc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80077f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fc:	0800783f 	.word	0x0800783f
 8007800:	08007815 	.word	0x08007815
 8007804:	08007827 	.word	0x08007827
 8007808:	0800783f 	.word	0x0800783f
 800780c:	0800783f 	.word	0x0800783f
 8007810:	0800783f 	.word	0x0800783f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3304      	adds	r3, #4
 8007818:	2101      	movs	r1, #1
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fd74 	bl	8008308 <RCCEx_PLL2_Config>
 8007820:	4603      	mov	r3, r0
 8007822:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007824:	e00c      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3324      	adds	r3, #36	; 0x24
 800782a:	2101      	movs	r1, #1
 800782c:	4618      	mov	r0, r3
 800782e:	f000 fe1d 	bl	800846c <RCCEx_PLL3_Config>
 8007832:	4603      	mov	r3, r0
 8007834:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007836:	e003      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	75fb      	strb	r3, [r7, #23]
      break;
 800783c:	e000      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800783e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007840:	7dfb      	ldrb	r3, [r7, #23]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10a      	bne.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007846:	4b80      	ldr	r3, [pc, #512]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784a:	f023 0207 	bic.w	r2, r3, #7
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007854:	497c      	ldr	r1, [pc, #496]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007856:	4313      	orrs	r3, r2
 8007858:	658b      	str	r3, [r1, #88]	; 0x58
 800785a:	e001      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800785c:	7dfb      	ldrb	r3, [r7, #23]
 800785e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0320 	and.w	r3, r3, #32
 8007868:	2b00      	cmp	r3, #0
 800786a:	d04b      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007872:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007876:	d02e      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8007878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800787c:	d828      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800787e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007882:	d02a      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007888:	d822      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800788a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800788e:	d026      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007890:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007894:	d81c      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800789a:	d010      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800789c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078a0:	d816      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d01d      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80078a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078aa:	d111      	bne.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	3304      	adds	r3, #4
 80078b0:	2100      	movs	r1, #0
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fd28 	bl	8008308 <RCCEx_PLL2_Config>
 80078b8:	4603      	mov	r3, r0
 80078ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80078bc:	e012      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3324      	adds	r3, #36	; 0x24
 80078c2:	2102      	movs	r1, #2
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 fdd1 	bl	800846c <RCCEx_PLL3_Config>
 80078ca:	4603      	mov	r3, r0
 80078cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80078ce:	e009      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	75fb      	strb	r3, [r7, #23]
      break;
 80078d4:	e006      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80078d6:	bf00      	nop
 80078d8:	e004      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80078da:	bf00      	nop
 80078dc:	e002      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80078de:	bf00      	nop
 80078e0:	e000      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80078e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10a      	bne.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078ea:	4b57      	ldr	r3, [pc, #348]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80078ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078f8:	4953      	ldr	r1, [pc, #332]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	654b      	str	r3, [r1, #84]	; 0x54
 80078fe:	e001      	b.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007900:	7dfb      	ldrb	r3, [r7, #23]
 8007902:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790c:	2b00      	cmp	r3, #0
 800790e:	d04b      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007916:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800791a:	d02e      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800791c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007920:	d828      	bhi.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007926:	d02a      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800792c:	d822      	bhi.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800792e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007932:	d026      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007934:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007938:	d81c      	bhi.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800793a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800793e:	d010      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8007940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007944:	d816      	bhi.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007946:	2b00      	cmp	r3, #0
 8007948:	d01d      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800794a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800794e:	d111      	bne.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3304      	adds	r3, #4
 8007954:	2100      	movs	r1, #0
 8007956:	4618      	mov	r0, r3
 8007958:	f000 fcd6 	bl	8008308 <RCCEx_PLL2_Config>
 800795c:	4603      	mov	r3, r0
 800795e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007960:	e012      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3324      	adds	r3, #36	; 0x24
 8007966:	2102      	movs	r1, #2
 8007968:	4618      	mov	r0, r3
 800796a:	f000 fd7f 	bl	800846c <RCCEx_PLL3_Config>
 800796e:	4603      	mov	r3, r0
 8007970:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007972:	e009      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	75fb      	strb	r3, [r7, #23]
      break;
 8007978:	e006      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800797a:	bf00      	nop
 800797c:	e004      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800797e:	bf00      	nop
 8007980:	e002      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007982:	bf00      	nop
 8007984:	e000      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007988:	7dfb      	ldrb	r3, [r7, #23]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10a      	bne.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800798e:	4b2e      	ldr	r3, [pc, #184]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007992:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800799c:	492a      	ldr	r1, [pc, #168]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	658b      	str	r3, [r1, #88]	; 0x58
 80079a2:	e001      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a4:	7dfb      	ldrb	r3, [r7, #23]
 80079a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d04d      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80079ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80079be:	d02e      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80079c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80079c4:	d828      	bhi.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80079c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079ca:	d02a      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80079cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079d0:	d822      	bhi.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80079d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80079d6:	d026      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80079d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80079dc:	d81c      	bhi.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80079de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079e2:	d010      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80079e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079e8:	d816      	bhi.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d01d      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80079ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079f2:	d111      	bne.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3304      	adds	r3, #4
 80079f8:	2100      	movs	r1, #0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 fc84 	bl	8008308 <RCCEx_PLL2_Config>
 8007a00:	4603      	mov	r3, r0
 8007a02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007a04:	e012      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	3324      	adds	r3, #36	; 0x24
 8007a0a:	2102      	movs	r1, #2
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 fd2d 	bl	800846c <RCCEx_PLL3_Config>
 8007a12:	4603      	mov	r3, r0
 8007a14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007a16:	e009      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a1c:	e006      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007a1e:	bf00      	nop
 8007a20:	e004      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007a22:	bf00      	nop
 8007a24:	e002      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007a26:	bf00      	nop
 8007a28:	e000      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007a2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a2c:	7dfb      	ldrb	r3, [r7, #23]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10c      	bne.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a32:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a40:	4901      	ldr	r1, [pc, #4]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	658b      	str	r3, [r1, #88]	; 0x58
 8007a46:	e003      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007a48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a4c:	7dfb      	ldrb	r3, [r7, #23]
 8007a4e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0308 	and.w	r3, r3, #8
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d01a      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a66:	d10a      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3324      	adds	r3, #36	; 0x24
 8007a6c:	2102      	movs	r1, #2
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fcfc 	bl	800846c <RCCEx_PLL3_Config>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007a7e:	4b8c      	ldr	r3, [pc, #560]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a8c:	4988      	ldr	r1, [pc, #544]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0310 	and.w	r3, r3, #16
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d01a      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aa8:	d10a      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	3324      	adds	r3, #36	; 0x24
 8007aae:	2102      	movs	r1, #2
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f000 fcdb 	bl	800846c <RCCEx_PLL3_Config>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ac0:	4b7b      	ldr	r3, [pc, #492]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ace:	4978      	ldr	r1, [pc, #480]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d034      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ae6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aea:	d01d      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8007aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007af0:	d817      	bhi.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8007af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007afa:	d009      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007afc:	e011      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3304      	adds	r3, #4
 8007b02:	2100      	movs	r1, #0
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 fbff 	bl	8008308 <RCCEx_PLL2_Config>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007b0e:	e00c      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3324      	adds	r3, #36	; 0x24
 8007b14:	2102      	movs	r1, #2
 8007b16:	4618      	mov	r0, r3
 8007b18:	f000 fca8 	bl	800846c <RCCEx_PLL3_Config>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007b20:	e003      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	75fb      	strb	r3, [r7, #23]
      break;
 8007b26:	e000      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8007b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10a      	bne.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b30:	4b5f      	ldr	r3, [pc, #380]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b3e:	495c      	ldr	r1, [pc, #368]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	658b      	str	r3, [r1, #88]	; 0x58
 8007b44:	e001      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d033      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b60:	d01c      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007b62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b66:	d816      	bhi.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007b68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b6c:	d003      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8007b6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b72:	d007      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007b74:	e00f      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b76:	4b4e      	ldr	r3, [pc, #312]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7a:	4a4d      	ldr	r2, [pc, #308]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b82:	e00c      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3324      	adds	r3, #36	; 0x24
 8007b88:	2101      	movs	r1, #1
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 fc6e 	bl	800846c <RCCEx_PLL3_Config>
 8007b90:	4603      	mov	r3, r0
 8007b92:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b94:	e003      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	75fb      	strb	r3, [r7, #23]
      break;
 8007b9a:	e000      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007b9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10a      	bne.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ba4:	4b42      	ldr	r3, [pc, #264]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bb2:	493f      	ldr	r1, [pc, #252]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	654b      	str	r3, [r1, #84]	; 0x54
 8007bb8:	e001      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d029      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8007bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd6:	d007      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007bd8:	e00f      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bda:	4b35      	ldr	r3, [pc, #212]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bde:	4a34      	ldr	r2, [pc, #208]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007be4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007be6:	e00b      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	3304      	adds	r3, #4
 8007bec:	2102      	movs	r1, #2
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fb8a 	bl	8008308 <RCCEx_PLL2_Config>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007bf8:	e002      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8007bfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c00:	7dfb      	ldrb	r3, [r7, #23]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d109      	bne.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007c06:	4b2a      	ldr	r3, [pc, #168]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c12:	4927      	ldr	r1, [pc, #156]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007c18:	e001      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
 8007c1c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	3324      	adds	r3, #36	; 0x24
 8007c2e:	2102      	movs	r1, #2
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fc1b 	bl	800846c <RCCEx_PLL3_Config>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d035      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c56:	d017      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c5c:	d811      	bhi.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c62:	d013      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8007c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c68:	d80b      	bhi.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d010      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8007c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c72:	d106      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c74:	4b0e      	ldr	r3, [pc, #56]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c78:	4a0d      	ldr	r2, [pc, #52]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007c80:	e007      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	75fb      	strb	r3, [r7, #23]
      break;
 8007c86:	e004      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007c88:	bf00      	nop
 8007c8a:	e002      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007c8c:	bf00      	nop
 8007c8e:	e000      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10d      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c98:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ca6:	4902      	ldr	r1, [pc, #8]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	654b      	str	r3, [r1, #84]	; 0x54
 8007cac:	e004      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007cae:	bf00      	nop
 8007cb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
 8007cb6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d008      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007cc4:	4b30      	ldr	r3, [pc, #192]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cd0:	492d      	ldr	r1, [pc, #180]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d008      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ce2:	4b29      	ldr	r3, [pc, #164]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ce6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cee:	4926      	ldr	r1, [pc, #152]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d008      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007d00:	4b21      	ldr	r3, [pc, #132]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d04:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0c:	491e      	ldr	r1, [pc, #120]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00d      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d1e:	4b1a      	ldr	r3, [pc, #104]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	4a19      	ldr	r2, [pc, #100]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007d24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d28:	6113      	str	r3, [r2, #16]
 8007d2a:	4b17      	ldr	r3, [pc, #92]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007d2c:	691a      	ldr	r2, [r3, #16]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007d34:	4914      	ldr	r1, [pc, #80]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	da08      	bge.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007d42:	4b11      	ldr	r3, [pc, #68]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d4e:	490e      	ldr	r1, [pc, #56]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d009      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d60:	4b09      	ldr	r3, [pc, #36]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d6e:	4906      	ldr	r1, [pc, #24]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007d70:	4313      	orrs	r3, r2
 8007d72:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007d74:	7dbb      	ldrb	r3, [r7, #22]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	e000      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	58024400 	.word	0x58024400

08007d8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007d90:	f7ff f894 	bl	8006ebc <HAL_RCC_GetHCLKFreq>
 8007d94:	4602      	mov	r2, r0
 8007d96:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	091b      	lsrs	r3, r3, #4
 8007d9c:	f003 0307 	and.w	r3, r3, #7
 8007da0:	4904      	ldr	r1, [pc, #16]	; (8007db4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007da2:	5ccb      	ldrb	r3, [r1, r3]
 8007da4:	f003 031f 	and.w	r3, r3, #31
 8007da8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	58024400 	.word	0x58024400
 8007db4:	0800b224 	.word	0x0800b224

08007db8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b089      	sub	sp, #36	; 0x24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007dc0:	4ba1      	ldr	r3, [pc, #644]	; (8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc4:	f003 0303 	and.w	r3, r3, #3
 8007dc8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007dca:	4b9f      	ldr	r3, [pc, #636]	; (8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dce:	0b1b      	lsrs	r3, r3, #12
 8007dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dd4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007dd6:	4b9c      	ldr	r3, [pc, #624]	; (8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dda:	091b      	lsrs	r3, r3, #4
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007de2:	4b99      	ldr	r3, [pc, #612]	; (8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de6:	08db      	lsrs	r3, r3, #3
 8007de8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	fb02 f303 	mul.w	r3, r2, r3
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 8111 	beq.w	8008028 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	f000 8083 	beq.w	8007f14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	f200 80a1 	bhi.w	8007f58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d056      	beq.n	8007ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007e22:	e099      	b.n	8007f58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e24:	4b88      	ldr	r3, [pc, #544]	; (8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0320 	and.w	r3, r3, #32
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d02d      	beq.n	8007e8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e30:	4b85      	ldr	r3, [pc, #532]	; (8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	08db      	lsrs	r3, r3, #3
 8007e36:	f003 0303 	and.w	r3, r3, #3
 8007e3a:	4a84      	ldr	r2, [pc, #528]	; (800804c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e40:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	ee07 3a90 	vmov	s15, r3
 8007e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	ee07 3a90 	vmov	s15, r3
 8007e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e5a:	4b7b      	ldr	r3, [pc, #492]	; (8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e62:	ee07 3a90 	vmov	s15, r3
 8007e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e8a:	e087      	b.n	8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	ee07 3a90 	vmov	s15, r3
 8007e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008054 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e9e:	4b6a      	ldr	r3, [pc, #424]	; (8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ea6:	ee07 3a90 	vmov	s15, r3
 8007eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ece:	e065      	b.n	8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	ee07 3a90 	vmov	s15, r3
 8007ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ee2:	4b59      	ldr	r3, [pc, #356]	; (8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eea:	ee07 3a90 	vmov	s15, r3
 8007eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ef6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f12:	e043      	b.n	8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	ee07 3a90 	vmov	s15, r3
 8007f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800805c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f26:	4b48      	ldr	r3, [pc, #288]	; (8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2e:	ee07 3a90 	vmov	s15, r3
 8007f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f56:	e021      	b.n	8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	ee07 3a90 	vmov	s15, r3
 8007f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f6a:	4b37      	ldr	r3, [pc, #220]	; (8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f72:	ee07 3a90 	vmov	s15, r3
 8007f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007f9c:	4b2a      	ldr	r3, [pc, #168]	; (8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa0:	0a5b      	lsrs	r3, r3, #9
 8007fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa6:	ee07 3a90 	vmov	s15, r3
 8007faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fc2:	ee17 2a90 	vmov	r2, s15
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007fca:	4b1f      	ldr	r3, [pc, #124]	; (8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fce:	0c1b      	lsrs	r3, r3, #16
 8007fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd4:	ee07 3a90 	vmov	s15, r3
 8007fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ff0:	ee17 2a90 	vmov	r2, s15
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007ff8:	4b13      	ldr	r3, [pc, #76]	; (8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffc:	0e1b      	lsrs	r3, r3, #24
 8007ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008002:	ee07 3a90 	vmov	s15, r3
 8008006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800800a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800800e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008012:	edd7 6a07 	vldr	s13, [r7, #28]
 8008016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800801a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800801e:	ee17 2a90 	vmov	r2, s15
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008026:	e008      	b.n	800803a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	609a      	str	r2, [r3, #8]
}
 800803a:	bf00      	nop
 800803c:	3724      	adds	r7, #36	; 0x24
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	58024400 	.word	0x58024400
 800804c:	03d09000 	.word	0x03d09000
 8008050:	46000000 	.word	0x46000000
 8008054:	4c742400 	.word	0x4c742400
 8008058:	4a742400 	.word	0x4a742400
 800805c:	4af42400 	.word	0x4af42400

08008060 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008060:	b480      	push	{r7}
 8008062:	b089      	sub	sp, #36	; 0x24
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008068:	4ba1      	ldr	r3, [pc, #644]	; (80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800806a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806c:	f003 0303 	and.w	r3, r3, #3
 8008070:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008072:	4b9f      	ldr	r3, [pc, #636]	; (80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008076:	0d1b      	lsrs	r3, r3, #20
 8008078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800807c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800807e:	4b9c      	ldr	r3, [pc, #624]	; (80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008082:	0a1b      	lsrs	r3, r3, #8
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800808a:	4b99      	ldr	r3, [pc, #612]	; (80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800808c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808e:	08db      	lsrs	r3, r3, #3
 8008090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	fb02 f303 	mul.w	r3, r2, r3
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 8111 	beq.w	80082d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	f000 8083 	beq.w	80081bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	f200 80a1 	bhi.w	8008200 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d056      	beq.n	8008178 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80080ca:	e099      	b.n	8008200 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080cc:	4b88      	ldr	r3, [pc, #544]	; (80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0320 	and.w	r3, r3, #32
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d02d      	beq.n	8008134 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080d8:	4b85      	ldr	r3, [pc, #532]	; (80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	08db      	lsrs	r3, r3, #3
 80080de:	f003 0303 	and.w	r3, r3, #3
 80080e2:	4a84      	ldr	r2, [pc, #528]	; (80082f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80080e4:	fa22 f303 	lsr.w	r3, r2, r3
 80080e8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	ee07 3a90 	vmov	s15, r3
 80080f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	ee07 3a90 	vmov	s15, r3
 80080fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008102:	4b7b      	ldr	r3, [pc, #492]	; (80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800810a:	ee07 3a90 	vmov	s15, r3
 800810e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008112:	ed97 6a03 	vldr	s12, [r7, #12]
 8008116:	eddf 5a78 	vldr	s11, [pc, #480]	; 80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800811a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800811e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800812a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800812e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008132:	e087      	b.n	8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	ee07 3a90 	vmov	s15, r3
 800813a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800813e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80082fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008146:	4b6a      	ldr	r3, [pc, #424]	; (80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800814e:	ee07 3a90 	vmov	s15, r3
 8008152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008156:	ed97 6a03 	vldr	s12, [r7, #12]
 800815a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800815e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800816a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800816e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008172:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008176:	e065      	b.n	8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	ee07 3a90 	vmov	s15, r3
 800817e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008182:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800818a:	4b59      	ldr	r3, [pc, #356]	; (80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800818c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008192:	ee07 3a90 	vmov	s15, r3
 8008196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800819a:	ed97 6a03 	vldr	s12, [r7, #12]
 800819e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081ba:	e043      	b.n	8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	ee07 3a90 	vmov	s15, r3
 80081c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80081ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ce:	4b48      	ldr	r3, [pc, #288]	; (80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d6:	ee07 3a90 	vmov	s15, r3
 80081da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081de:	ed97 6a03 	vldr	s12, [r7, #12]
 80081e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081fe:	e021      	b.n	8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	ee07 3a90 	vmov	s15, r3
 8008206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800820a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800820e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008212:	4b37      	ldr	r3, [pc, #220]	; (80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800821a:	ee07 3a90 	vmov	s15, r3
 800821e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008222:	ed97 6a03 	vldr	s12, [r7, #12]
 8008226:	eddf 5a34 	vldr	s11, [pc, #208]	; 80082f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800822a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800822e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800823a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800823e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008242:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008244:	4b2a      	ldr	r3, [pc, #168]	; (80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008248:	0a5b      	lsrs	r3, r3, #9
 800824a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800824e:	ee07 3a90 	vmov	s15, r3
 8008252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008256:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800825a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800825e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800826a:	ee17 2a90 	vmov	r2, s15
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008272:	4b1f      	ldr	r3, [pc, #124]	; (80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008276:	0c1b      	lsrs	r3, r3, #16
 8008278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800827c:	ee07 3a90 	vmov	s15, r3
 8008280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008288:	ee37 7a87 	vadd.f32	s14, s15, s14
 800828c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008298:	ee17 2a90 	vmov	r2, s15
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80082a0:	4b13      	ldr	r3, [pc, #76]	; (80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a4:	0e1b      	lsrs	r3, r3, #24
 80082a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082aa:	ee07 3a90 	vmov	s15, r3
 80082ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80082be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082c6:	ee17 2a90 	vmov	r2, s15
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80082ce:	e008      	b.n	80082e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	609a      	str	r2, [r3, #8]
}
 80082e2:	bf00      	nop
 80082e4:	3724      	adds	r7, #36	; 0x24
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	58024400 	.word	0x58024400
 80082f4:	03d09000 	.word	0x03d09000
 80082f8:	46000000 	.word	0x46000000
 80082fc:	4c742400 	.word	0x4c742400
 8008300:	4a742400 	.word	0x4a742400
 8008304:	4af42400 	.word	0x4af42400

08008308 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008316:	4b53      	ldr	r3, [pc, #332]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 8008318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831a:	f003 0303 	and.w	r3, r3, #3
 800831e:	2b03      	cmp	r3, #3
 8008320:	d101      	bne.n	8008326 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e099      	b.n	800845a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008326:	4b4f      	ldr	r3, [pc, #316]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a4e      	ldr	r2, [pc, #312]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 800832c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008332:	f7f9 fa05 	bl	8001740 <HAL_GetTick>
 8008336:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008338:	e008      	b.n	800834c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800833a:	f7f9 fa01 	bl	8001740 <HAL_GetTick>
 800833e:	4602      	mov	r2, r0
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	2b02      	cmp	r3, #2
 8008346:	d901      	bls.n	800834c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e086      	b.n	800845a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800834c:	4b45      	ldr	r3, [pc, #276]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1f0      	bne.n	800833a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008358:	4b42      	ldr	r3, [pc, #264]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 800835a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	031b      	lsls	r3, r3, #12
 8008366:	493f      	ldr	r1, [pc, #252]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 8008368:	4313      	orrs	r3, r2
 800836a:	628b      	str	r3, [r1, #40]	; 0x28
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	3b01      	subs	r3, #1
 8008372:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	3b01      	subs	r3, #1
 800837c:	025b      	lsls	r3, r3, #9
 800837e:	b29b      	uxth	r3, r3
 8008380:	431a      	orrs	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	3b01      	subs	r3, #1
 8008388:	041b      	lsls	r3, r3, #16
 800838a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800838e:	431a      	orrs	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	3b01      	subs	r3, #1
 8008396:	061b      	lsls	r3, r3, #24
 8008398:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800839c:	4931      	ldr	r1, [pc, #196]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80083a2:	4b30      	ldr	r3, [pc, #192]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 80083a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	492d      	ldr	r1, [pc, #180]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80083b4:	4b2b      	ldr	r3, [pc, #172]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	f023 0220 	bic.w	r2, r3, #32
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	4928      	ldr	r1, [pc, #160]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80083c6:	4b27      	ldr	r3, [pc, #156]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 80083c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ca:	4a26      	ldr	r2, [pc, #152]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 80083cc:	f023 0310 	bic.w	r3, r3, #16
 80083d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80083d2:	4b24      	ldr	r3, [pc, #144]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 80083d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083d6:	4b24      	ldr	r3, [pc, #144]	; (8008468 <RCCEx_PLL2_Config+0x160>)
 80083d8:	4013      	ands	r3, r2
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	69d2      	ldr	r2, [r2, #28]
 80083de:	00d2      	lsls	r2, r2, #3
 80083e0:	4920      	ldr	r1, [pc, #128]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80083e6:	4b1f      	ldr	r3, [pc, #124]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 80083e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ea:	4a1e      	ldr	r2, [pc, #120]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 80083ec:	f043 0310 	orr.w	r3, r3, #16
 80083f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d106      	bne.n	8008406 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80083f8:	4b1a      	ldr	r3, [pc, #104]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	4a19      	ldr	r2, [pc, #100]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 80083fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008402:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008404:	e00f      	b.n	8008426 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d106      	bne.n	800841a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800840c:	4b15      	ldr	r3, [pc, #84]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 800840e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008410:	4a14      	ldr	r2, [pc, #80]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 8008412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008416:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008418:	e005      	b.n	8008426 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800841a:	4b12      	ldr	r3, [pc, #72]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 800841c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841e:	4a11      	ldr	r2, [pc, #68]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 8008420:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008424:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008426:	4b0f      	ldr	r3, [pc, #60]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a0e      	ldr	r2, [pc, #56]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 800842c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008432:	f7f9 f985 	bl	8001740 <HAL_GetTick>
 8008436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008438:	e008      	b.n	800844c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800843a:	f7f9 f981 	bl	8001740 <HAL_GetTick>
 800843e:	4602      	mov	r2, r0
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	2b02      	cmp	r3, #2
 8008446:	d901      	bls.n	800844c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e006      	b.n	800845a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800844c:	4b05      	ldr	r3, [pc, #20]	; (8008464 <RCCEx_PLL2_Config+0x15c>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d0f0      	beq.n	800843a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008458:	7bfb      	ldrb	r3, [r7, #15]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	58024400 	.word	0x58024400
 8008468:	ffff0007 	.word	0xffff0007

0800846c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800847a:	4b53      	ldr	r3, [pc, #332]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 800847c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847e:	f003 0303 	and.w	r3, r3, #3
 8008482:	2b03      	cmp	r3, #3
 8008484:	d101      	bne.n	800848a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e099      	b.n	80085be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800848a:	4b4f      	ldr	r3, [pc, #316]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a4e      	ldr	r2, [pc, #312]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 8008490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008496:	f7f9 f953 	bl	8001740 <HAL_GetTick>
 800849a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800849c:	e008      	b.n	80084b0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800849e:	f7f9 f94f 	bl	8001740 <HAL_GetTick>
 80084a2:	4602      	mov	r2, r0
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d901      	bls.n	80084b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e086      	b.n	80085be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084b0:	4b45      	ldr	r3, [pc, #276]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1f0      	bne.n	800849e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80084bc:	4b42      	ldr	r3, [pc, #264]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 80084be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	051b      	lsls	r3, r3, #20
 80084ca:	493f      	ldr	r1, [pc, #252]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	628b      	str	r3, [r1, #40]	; 0x28
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	3b01      	subs	r3, #1
 80084d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	3b01      	subs	r3, #1
 80084e0:	025b      	lsls	r3, r3, #9
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	431a      	orrs	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	041b      	lsls	r3, r3, #16
 80084ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084f2:	431a      	orrs	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	3b01      	subs	r3, #1
 80084fa:	061b      	lsls	r3, r3, #24
 80084fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008500:	4931      	ldr	r1, [pc, #196]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 8008502:	4313      	orrs	r3, r2
 8008504:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008506:	4b30      	ldr	r3, [pc, #192]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 8008508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	492d      	ldr	r1, [pc, #180]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 8008514:	4313      	orrs	r3, r2
 8008516:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008518:	4b2b      	ldr	r3, [pc, #172]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 800851a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	4928      	ldr	r1, [pc, #160]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 8008526:	4313      	orrs	r3, r2
 8008528:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800852a:	4b27      	ldr	r3, [pc, #156]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 800852c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852e:	4a26      	ldr	r2, [pc, #152]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 8008530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008534:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008536:	4b24      	ldr	r3, [pc, #144]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 8008538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800853a:	4b24      	ldr	r3, [pc, #144]	; (80085cc <RCCEx_PLL3_Config+0x160>)
 800853c:	4013      	ands	r3, r2
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	69d2      	ldr	r2, [r2, #28]
 8008542:	00d2      	lsls	r2, r2, #3
 8008544:	4920      	ldr	r1, [pc, #128]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 8008546:	4313      	orrs	r3, r2
 8008548:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800854a:	4b1f      	ldr	r3, [pc, #124]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 800854c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854e:	4a1e      	ldr	r2, [pc, #120]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 8008550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008554:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d106      	bne.n	800856a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800855c:	4b1a      	ldr	r3, [pc, #104]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 800855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008560:	4a19      	ldr	r2, [pc, #100]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 8008562:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008566:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008568:	e00f      	b.n	800858a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d106      	bne.n	800857e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008570:	4b15      	ldr	r3, [pc, #84]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 8008572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008574:	4a14      	ldr	r2, [pc, #80]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 8008576:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800857a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800857c:	e005      	b.n	800858a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800857e:	4b12      	ldr	r3, [pc, #72]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 8008580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008582:	4a11      	ldr	r2, [pc, #68]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 8008584:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008588:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800858a:	4b0f      	ldr	r3, [pc, #60]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a0e      	ldr	r2, [pc, #56]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 8008590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008596:	f7f9 f8d3 	bl	8001740 <HAL_GetTick>
 800859a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800859c:	e008      	b.n	80085b0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800859e:	f7f9 f8cf 	bl	8001740 <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d901      	bls.n	80085b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e006      	b.n	80085be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085b0:	4b05      	ldr	r3, [pc, #20]	; (80085c8 <RCCEx_PLL3_Config+0x15c>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0f0      	beq.n	800859e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	58024400 	.word	0x58024400
 80085cc:	ffff0007 	.word	0xffff0007

080085d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d101      	bne.n	80085e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e042      	b.n	8008668 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d106      	bne.n	80085fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7f8 ff85 	bl	8001504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2224      	movs	r2, #36	; 0x24
 80085fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f022 0201 	bic.w	r2, r2, #1
 8008610:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f8c2 	bl	800879c <UART_SetConfig>
 8008618:	4603      	mov	r3, r0
 800861a:	2b01      	cmp	r3, #1
 800861c:	d101      	bne.n	8008622 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e022      	b.n	8008668 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008626:	2b00      	cmp	r3, #0
 8008628:	d002      	beq.n	8008630 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 ff22 	bl	8009474 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800863e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689a      	ldr	r2, [r3, #8]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800864e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f042 0201 	orr.w	r2, r2, #1
 800865e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 ffa9 	bl	80095b8 <UART_CheckIdleState>
 8008666:	4603      	mov	r3, r0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b08a      	sub	sp, #40	; 0x28
 8008674:	af02      	add	r7, sp, #8
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	603b      	str	r3, [r7, #0]
 800867c:	4613      	mov	r3, r2
 800867e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008686:	2b20      	cmp	r3, #32
 8008688:	f040 8083 	bne.w	8008792 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d002      	beq.n	8008698 <HAL_UART_Transmit+0x28>
 8008692:	88fb      	ldrh	r3, [r7, #6]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e07b      	b.n	8008794 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d101      	bne.n	80086aa <HAL_UART_Transmit+0x3a>
 80086a6:	2302      	movs	r3, #2
 80086a8:	e074      	b.n	8008794 <HAL_UART_Transmit+0x124>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2221      	movs	r2, #33	; 0x21
 80086be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086c2:	f7f9 f83d 	bl	8001740 <HAL_GetTick>
 80086c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	88fa      	ldrh	r2, [r7, #6]
 80086cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	88fa      	ldrh	r2, [r7, #6]
 80086d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086e0:	d108      	bne.n	80086f4 <HAL_UART_Transmit+0x84>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d104      	bne.n	80086f4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80086ea:	2300      	movs	r3, #0
 80086ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	61bb      	str	r3, [r7, #24]
 80086f2:	e003      	b.n	80086fc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086f8:	2300      	movs	r3, #0
 80086fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008704:	e02c      	b.n	8008760 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	2200      	movs	r2, #0
 800870e:	2180      	movs	r1, #128	; 0x80
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f000 ff9c 	bl	800964e <UART_WaitOnFlagUntilTimeout>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	e039      	b.n	8008794 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d10b      	bne.n	800873e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	881b      	ldrh	r3, [r3, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008734:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	3302      	adds	r3, #2
 800873a:	61bb      	str	r3, [r7, #24]
 800873c:	e007      	b.n	800874e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	781a      	ldrb	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	3301      	adds	r3, #1
 800874c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008754:	b29b      	uxth	r3, r3
 8008756:	3b01      	subs	r3, #1
 8008758:	b29a      	uxth	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008766:	b29b      	uxth	r3, r3
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1cc      	bne.n	8008706 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	2200      	movs	r2, #0
 8008774:	2140      	movs	r1, #64	; 0x40
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 ff69 	bl	800964e <UART_WaitOnFlagUntilTimeout>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d001      	beq.n	8008786 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e006      	b.n	8008794 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2220      	movs	r2, #32
 800878a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	e000      	b.n	8008794 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008792:	2302      	movs	r3, #2
  }
}
 8008794:	4618      	mov	r0, r3
 8008796:	3720      	adds	r7, #32
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800879c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087a0:	b092      	sub	sp, #72	; 0x48
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	689a      	ldr	r2, [r3, #8]
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	431a      	orrs	r2, r3
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	431a      	orrs	r2, r3
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	69db      	ldr	r3, [r3, #28]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	4bbe      	ldr	r3, [pc, #760]	; (8008ac4 <UART_SetConfig+0x328>)
 80087cc:	4013      	ands	r3, r2
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	6812      	ldr	r2, [r2, #0]
 80087d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087d4:	430b      	orrs	r3, r1
 80087d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	68da      	ldr	r2, [r3, #12]
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	430a      	orrs	r2, r1
 80087ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4ab3      	ldr	r2, [pc, #716]	; (8008ac8 <UART_SetConfig+0x32c>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d004      	beq.n	8008808 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008804:	4313      	orrs	r3, r2
 8008806:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	689a      	ldr	r2, [r3, #8]
 800880e:	4baf      	ldr	r3, [pc, #700]	; (8008acc <UART_SetConfig+0x330>)
 8008810:	4013      	ands	r3, r2
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	6812      	ldr	r2, [r2, #0]
 8008816:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008818:	430b      	orrs	r3, r1
 800881a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008822:	f023 010f 	bic.w	r1, r3, #15
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4aa6      	ldr	r2, [pc, #664]	; (8008ad0 <UART_SetConfig+0x334>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d177      	bne.n	800892c <UART_SetConfig+0x190>
 800883c:	4ba5      	ldr	r3, [pc, #660]	; (8008ad4 <UART_SetConfig+0x338>)
 800883e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008840:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008844:	2b28      	cmp	r3, #40	; 0x28
 8008846:	d86d      	bhi.n	8008924 <UART_SetConfig+0x188>
 8008848:	a201      	add	r2, pc, #4	; (adr r2, 8008850 <UART_SetConfig+0xb4>)
 800884a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884e:	bf00      	nop
 8008850:	080088f5 	.word	0x080088f5
 8008854:	08008925 	.word	0x08008925
 8008858:	08008925 	.word	0x08008925
 800885c:	08008925 	.word	0x08008925
 8008860:	08008925 	.word	0x08008925
 8008864:	08008925 	.word	0x08008925
 8008868:	08008925 	.word	0x08008925
 800886c:	08008925 	.word	0x08008925
 8008870:	080088fd 	.word	0x080088fd
 8008874:	08008925 	.word	0x08008925
 8008878:	08008925 	.word	0x08008925
 800887c:	08008925 	.word	0x08008925
 8008880:	08008925 	.word	0x08008925
 8008884:	08008925 	.word	0x08008925
 8008888:	08008925 	.word	0x08008925
 800888c:	08008925 	.word	0x08008925
 8008890:	08008905 	.word	0x08008905
 8008894:	08008925 	.word	0x08008925
 8008898:	08008925 	.word	0x08008925
 800889c:	08008925 	.word	0x08008925
 80088a0:	08008925 	.word	0x08008925
 80088a4:	08008925 	.word	0x08008925
 80088a8:	08008925 	.word	0x08008925
 80088ac:	08008925 	.word	0x08008925
 80088b0:	0800890d 	.word	0x0800890d
 80088b4:	08008925 	.word	0x08008925
 80088b8:	08008925 	.word	0x08008925
 80088bc:	08008925 	.word	0x08008925
 80088c0:	08008925 	.word	0x08008925
 80088c4:	08008925 	.word	0x08008925
 80088c8:	08008925 	.word	0x08008925
 80088cc:	08008925 	.word	0x08008925
 80088d0:	08008915 	.word	0x08008915
 80088d4:	08008925 	.word	0x08008925
 80088d8:	08008925 	.word	0x08008925
 80088dc:	08008925 	.word	0x08008925
 80088e0:	08008925 	.word	0x08008925
 80088e4:	08008925 	.word	0x08008925
 80088e8:	08008925 	.word	0x08008925
 80088ec:	08008925 	.word	0x08008925
 80088f0:	0800891d 	.word	0x0800891d
 80088f4:	2301      	movs	r3, #1
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088fa:	e326      	b.n	8008f4a <UART_SetConfig+0x7ae>
 80088fc:	2304      	movs	r3, #4
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008902:	e322      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008904:	2308      	movs	r3, #8
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890a:	e31e      	b.n	8008f4a <UART_SetConfig+0x7ae>
 800890c:	2310      	movs	r3, #16
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008912:	e31a      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008914:	2320      	movs	r3, #32
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891a:	e316      	b.n	8008f4a <UART_SetConfig+0x7ae>
 800891c:	2340      	movs	r3, #64	; 0x40
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008922:	e312      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008924:	2380      	movs	r3, #128	; 0x80
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800892a:	e30e      	b.n	8008f4a <UART_SetConfig+0x7ae>
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a69      	ldr	r2, [pc, #420]	; (8008ad8 <UART_SetConfig+0x33c>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d130      	bne.n	8008998 <UART_SetConfig+0x1fc>
 8008936:	4b67      	ldr	r3, [pc, #412]	; (8008ad4 <UART_SetConfig+0x338>)
 8008938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800893a:	f003 0307 	and.w	r3, r3, #7
 800893e:	2b05      	cmp	r3, #5
 8008940:	d826      	bhi.n	8008990 <UART_SetConfig+0x1f4>
 8008942:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <UART_SetConfig+0x1ac>)
 8008944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008948:	08008961 	.word	0x08008961
 800894c:	08008969 	.word	0x08008969
 8008950:	08008971 	.word	0x08008971
 8008954:	08008979 	.word	0x08008979
 8008958:	08008981 	.word	0x08008981
 800895c:	08008989 	.word	0x08008989
 8008960:	2300      	movs	r3, #0
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008966:	e2f0      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008968:	2304      	movs	r3, #4
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800896e:	e2ec      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008970:	2308      	movs	r3, #8
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008976:	e2e8      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008978:	2310      	movs	r3, #16
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897e:	e2e4      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008980:	2320      	movs	r3, #32
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008986:	e2e0      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008988:	2340      	movs	r3, #64	; 0x40
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898e:	e2dc      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008990:	2380      	movs	r3, #128	; 0x80
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008996:	e2d8      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a4f      	ldr	r2, [pc, #316]	; (8008adc <UART_SetConfig+0x340>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d130      	bne.n	8008a04 <UART_SetConfig+0x268>
 80089a2:	4b4c      	ldr	r3, [pc, #304]	; (8008ad4 <UART_SetConfig+0x338>)
 80089a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a6:	f003 0307 	and.w	r3, r3, #7
 80089aa:	2b05      	cmp	r3, #5
 80089ac:	d826      	bhi.n	80089fc <UART_SetConfig+0x260>
 80089ae:	a201      	add	r2, pc, #4	; (adr r2, 80089b4 <UART_SetConfig+0x218>)
 80089b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b4:	080089cd 	.word	0x080089cd
 80089b8:	080089d5 	.word	0x080089d5
 80089bc:	080089dd 	.word	0x080089dd
 80089c0:	080089e5 	.word	0x080089e5
 80089c4:	080089ed 	.word	0x080089ed
 80089c8:	080089f5 	.word	0x080089f5
 80089cc:	2300      	movs	r3, #0
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089d2:	e2ba      	b.n	8008f4a <UART_SetConfig+0x7ae>
 80089d4:	2304      	movs	r3, #4
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089da:	e2b6      	b.n	8008f4a <UART_SetConfig+0x7ae>
 80089dc:	2308      	movs	r3, #8
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089e2:	e2b2      	b.n	8008f4a <UART_SetConfig+0x7ae>
 80089e4:	2310      	movs	r3, #16
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ea:	e2ae      	b.n	8008f4a <UART_SetConfig+0x7ae>
 80089ec:	2320      	movs	r3, #32
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089f2:	e2aa      	b.n	8008f4a <UART_SetConfig+0x7ae>
 80089f4:	2340      	movs	r3, #64	; 0x40
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089fa:	e2a6      	b.n	8008f4a <UART_SetConfig+0x7ae>
 80089fc:	2380      	movs	r3, #128	; 0x80
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a02:	e2a2      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a35      	ldr	r2, [pc, #212]	; (8008ae0 <UART_SetConfig+0x344>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d130      	bne.n	8008a70 <UART_SetConfig+0x2d4>
 8008a0e:	4b31      	ldr	r3, [pc, #196]	; (8008ad4 <UART_SetConfig+0x338>)
 8008a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a12:	f003 0307 	and.w	r3, r3, #7
 8008a16:	2b05      	cmp	r3, #5
 8008a18:	d826      	bhi.n	8008a68 <UART_SetConfig+0x2cc>
 8008a1a:	a201      	add	r2, pc, #4	; (adr r2, 8008a20 <UART_SetConfig+0x284>)
 8008a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a20:	08008a39 	.word	0x08008a39
 8008a24:	08008a41 	.word	0x08008a41
 8008a28:	08008a49 	.word	0x08008a49
 8008a2c:	08008a51 	.word	0x08008a51
 8008a30:	08008a59 	.word	0x08008a59
 8008a34:	08008a61 	.word	0x08008a61
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a3e:	e284      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008a40:	2304      	movs	r3, #4
 8008a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a46:	e280      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008a48:	2308      	movs	r3, #8
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a4e:	e27c      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008a50:	2310      	movs	r3, #16
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a56:	e278      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008a58:	2320      	movs	r3, #32
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5e:	e274      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008a60:	2340      	movs	r3, #64	; 0x40
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a66:	e270      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008a68:	2380      	movs	r3, #128	; 0x80
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a6e:	e26c      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a1b      	ldr	r2, [pc, #108]	; (8008ae4 <UART_SetConfig+0x348>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d142      	bne.n	8008b00 <UART_SetConfig+0x364>
 8008a7a:	4b16      	ldr	r3, [pc, #88]	; (8008ad4 <UART_SetConfig+0x338>)
 8008a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	2b05      	cmp	r3, #5
 8008a84:	d838      	bhi.n	8008af8 <UART_SetConfig+0x35c>
 8008a86:	a201      	add	r2, pc, #4	; (adr r2, 8008a8c <UART_SetConfig+0x2f0>)
 8008a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8c:	08008aa5 	.word	0x08008aa5
 8008a90:	08008aad 	.word	0x08008aad
 8008a94:	08008ab5 	.word	0x08008ab5
 8008a98:	08008abd 	.word	0x08008abd
 8008a9c:	08008ae9 	.word	0x08008ae9
 8008aa0:	08008af1 	.word	0x08008af1
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aaa:	e24e      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008aac:	2304      	movs	r3, #4
 8008aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab2:	e24a      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008ab4:	2308      	movs	r3, #8
 8008ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aba:	e246      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008abc:	2310      	movs	r3, #16
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac2:	e242      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008ac4:	cfff69f3 	.word	0xcfff69f3
 8008ac8:	58000c00 	.word	0x58000c00
 8008acc:	11fff4ff 	.word	0x11fff4ff
 8008ad0:	40011000 	.word	0x40011000
 8008ad4:	58024400 	.word	0x58024400
 8008ad8:	40004400 	.word	0x40004400
 8008adc:	40004800 	.word	0x40004800
 8008ae0:	40004c00 	.word	0x40004c00
 8008ae4:	40005000 	.word	0x40005000
 8008ae8:	2320      	movs	r3, #32
 8008aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aee:	e22c      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008af0:	2340      	movs	r3, #64	; 0x40
 8008af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af6:	e228      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008af8:	2380      	movs	r3, #128	; 0x80
 8008afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008afe:	e224      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4ab1      	ldr	r2, [pc, #708]	; (8008dcc <UART_SetConfig+0x630>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d176      	bne.n	8008bf8 <UART_SetConfig+0x45c>
 8008b0a:	4bb1      	ldr	r3, [pc, #708]	; (8008dd0 <UART_SetConfig+0x634>)
 8008b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b12:	2b28      	cmp	r3, #40	; 0x28
 8008b14:	d86c      	bhi.n	8008bf0 <UART_SetConfig+0x454>
 8008b16:	a201      	add	r2, pc, #4	; (adr r2, 8008b1c <UART_SetConfig+0x380>)
 8008b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1c:	08008bc1 	.word	0x08008bc1
 8008b20:	08008bf1 	.word	0x08008bf1
 8008b24:	08008bf1 	.word	0x08008bf1
 8008b28:	08008bf1 	.word	0x08008bf1
 8008b2c:	08008bf1 	.word	0x08008bf1
 8008b30:	08008bf1 	.word	0x08008bf1
 8008b34:	08008bf1 	.word	0x08008bf1
 8008b38:	08008bf1 	.word	0x08008bf1
 8008b3c:	08008bc9 	.word	0x08008bc9
 8008b40:	08008bf1 	.word	0x08008bf1
 8008b44:	08008bf1 	.word	0x08008bf1
 8008b48:	08008bf1 	.word	0x08008bf1
 8008b4c:	08008bf1 	.word	0x08008bf1
 8008b50:	08008bf1 	.word	0x08008bf1
 8008b54:	08008bf1 	.word	0x08008bf1
 8008b58:	08008bf1 	.word	0x08008bf1
 8008b5c:	08008bd1 	.word	0x08008bd1
 8008b60:	08008bf1 	.word	0x08008bf1
 8008b64:	08008bf1 	.word	0x08008bf1
 8008b68:	08008bf1 	.word	0x08008bf1
 8008b6c:	08008bf1 	.word	0x08008bf1
 8008b70:	08008bf1 	.word	0x08008bf1
 8008b74:	08008bf1 	.word	0x08008bf1
 8008b78:	08008bf1 	.word	0x08008bf1
 8008b7c:	08008bd9 	.word	0x08008bd9
 8008b80:	08008bf1 	.word	0x08008bf1
 8008b84:	08008bf1 	.word	0x08008bf1
 8008b88:	08008bf1 	.word	0x08008bf1
 8008b8c:	08008bf1 	.word	0x08008bf1
 8008b90:	08008bf1 	.word	0x08008bf1
 8008b94:	08008bf1 	.word	0x08008bf1
 8008b98:	08008bf1 	.word	0x08008bf1
 8008b9c:	08008be1 	.word	0x08008be1
 8008ba0:	08008bf1 	.word	0x08008bf1
 8008ba4:	08008bf1 	.word	0x08008bf1
 8008ba8:	08008bf1 	.word	0x08008bf1
 8008bac:	08008bf1 	.word	0x08008bf1
 8008bb0:	08008bf1 	.word	0x08008bf1
 8008bb4:	08008bf1 	.word	0x08008bf1
 8008bb8:	08008bf1 	.word	0x08008bf1
 8008bbc:	08008be9 	.word	0x08008be9
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc6:	e1c0      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008bc8:	2304      	movs	r3, #4
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bce:	e1bc      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008bd0:	2308      	movs	r3, #8
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bd6:	e1b8      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008bd8:	2310      	movs	r3, #16
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bde:	e1b4      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008be0:	2320      	movs	r3, #32
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be6:	e1b0      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008be8:	2340      	movs	r3, #64	; 0x40
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bee:	e1ac      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008bf0:	2380      	movs	r3, #128	; 0x80
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bf6:	e1a8      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a75      	ldr	r2, [pc, #468]	; (8008dd4 <UART_SetConfig+0x638>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d130      	bne.n	8008c64 <UART_SetConfig+0x4c8>
 8008c02:	4b73      	ldr	r3, [pc, #460]	; (8008dd0 <UART_SetConfig+0x634>)
 8008c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c06:	f003 0307 	and.w	r3, r3, #7
 8008c0a:	2b05      	cmp	r3, #5
 8008c0c:	d826      	bhi.n	8008c5c <UART_SetConfig+0x4c0>
 8008c0e:	a201      	add	r2, pc, #4	; (adr r2, 8008c14 <UART_SetConfig+0x478>)
 8008c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c14:	08008c2d 	.word	0x08008c2d
 8008c18:	08008c35 	.word	0x08008c35
 8008c1c:	08008c3d 	.word	0x08008c3d
 8008c20:	08008c45 	.word	0x08008c45
 8008c24:	08008c4d 	.word	0x08008c4d
 8008c28:	08008c55 	.word	0x08008c55
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c32:	e18a      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008c34:	2304      	movs	r3, #4
 8008c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c3a:	e186      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008c3c:	2308      	movs	r3, #8
 8008c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c42:	e182      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008c44:	2310      	movs	r3, #16
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c4a:	e17e      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008c4c:	2320      	movs	r3, #32
 8008c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c52:	e17a      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008c54:	2340      	movs	r3, #64	; 0x40
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c5a:	e176      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008c5c:	2380      	movs	r3, #128	; 0x80
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c62:	e172      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a5b      	ldr	r2, [pc, #364]	; (8008dd8 <UART_SetConfig+0x63c>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d130      	bne.n	8008cd0 <UART_SetConfig+0x534>
 8008c6e:	4b58      	ldr	r3, [pc, #352]	; (8008dd0 <UART_SetConfig+0x634>)
 8008c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c72:	f003 0307 	and.w	r3, r3, #7
 8008c76:	2b05      	cmp	r3, #5
 8008c78:	d826      	bhi.n	8008cc8 <UART_SetConfig+0x52c>
 8008c7a:	a201      	add	r2, pc, #4	; (adr r2, 8008c80 <UART_SetConfig+0x4e4>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008c99 	.word	0x08008c99
 8008c84:	08008ca1 	.word	0x08008ca1
 8008c88:	08008ca9 	.word	0x08008ca9
 8008c8c:	08008cb1 	.word	0x08008cb1
 8008c90:	08008cb9 	.word	0x08008cb9
 8008c94:	08008cc1 	.word	0x08008cc1
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c9e:	e154      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008ca0:	2304      	movs	r3, #4
 8008ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ca6:	e150      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008ca8:	2308      	movs	r3, #8
 8008caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cae:	e14c      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008cb0:	2310      	movs	r3, #16
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cb6:	e148      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008cb8:	2320      	movs	r3, #32
 8008cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cbe:	e144      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008cc0:	2340      	movs	r3, #64	; 0x40
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cc6:	e140      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008cc8:	2380      	movs	r3, #128	; 0x80
 8008cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cce:	e13c      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a41      	ldr	r2, [pc, #260]	; (8008ddc <UART_SetConfig+0x640>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	f040 8082 	bne.w	8008de0 <UART_SetConfig+0x644>
 8008cdc:	4b3c      	ldr	r3, [pc, #240]	; (8008dd0 <UART_SetConfig+0x634>)
 8008cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ce4:	2b28      	cmp	r3, #40	; 0x28
 8008ce6:	d86d      	bhi.n	8008dc4 <UART_SetConfig+0x628>
 8008ce8:	a201      	add	r2, pc, #4	; (adr r2, 8008cf0 <UART_SetConfig+0x554>)
 8008cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cee:	bf00      	nop
 8008cf0:	08008d95 	.word	0x08008d95
 8008cf4:	08008dc5 	.word	0x08008dc5
 8008cf8:	08008dc5 	.word	0x08008dc5
 8008cfc:	08008dc5 	.word	0x08008dc5
 8008d00:	08008dc5 	.word	0x08008dc5
 8008d04:	08008dc5 	.word	0x08008dc5
 8008d08:	08008dc5 	.word	0x08008dc5
 8008d0c:	08008dc5 	.word	0x08008dc5
 8008d10:	08008d9d 	.word	0x08008d9d
 8008d14:	08008dc5 	.word	0x08008dc5
 8008d18:	08008dc5 	.word	0x08008dc5
 8008d1c:	08008dc5 	.word	0x08008dc5
 8008d20:	08008dc5 	.word	0x08008dc5
 8008d24:	08008dc5 	.word	0x08008dc5
 8008d28:	08008dc5 	.word	0x08008dc5
 8008d2c:	08008dc5 	.word	0x08008dc5
 8008d30:	08008da5 	.word	0x08008da5
 8008d34:	08008dc5 	.word	0x08008dc5
 8008d38:	08008dc5 	.word	0x08008dc5
 8008d3c:	08008dc5 	.word	0x08008dc5
 8008d40:	08008dc5 	.word	0x08008dc5
 8008d44:	08008dc5 	.word	0x08008dc5
 8008d48:	08008dc5 	.word	0x08008dc5
 8008d4c:	08008dc5 	.word	0x08008dc5
 8008d50:	08008dad 	.word	0x08008dad
 8008d54:	08008dc5 	.word	0x08008dc5
 8008d58:	08008dc5 	.word	0x08008dc5
 8008d5c:	08008dc5 	.word	0x08008dc5
 8008d60:	08008dc5 	.word	0x08008dc5
 8008d64:	08008dc5 	.word	0x08008dc5
 8008d68:	08008dc5 	.word	0x08008dc5
 8008d6c:	08008dc5 	.word	0x08008dc5
 8008d70:	08008db5 	.word	0x08008db5
 8008d74:	08008dc5 	.word	0x08008dc5
 8008d78:	08008dc5 	.word	0x08008dc5
 8008d7c:	08008dc5 	.word	0x08008dc5
 8008d80:	08008dc5 	.word	0x08008dc5
 8008d84:	08008dc5 	.word	0x08008dc5
 8008d88:	08008dc5 	.word	0x08008dc5
 8008d8c:	08008dc5 	.word	0x08008dc5
 8008d90:	08008dbd 	.word	0x08008dbd
 8008d94:	2301      	movs	r3, #1
 8008d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d9a:	e0d6      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008d9c:	2304      	movs	r3, #4
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da2:	e0d2      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008da4:	2308      	movs	r3, #8
 8008da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008daa:	e0ce      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008dac:	2310      	movs	r3, #16
 8008dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008db2:	e0ca      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008db4:	2320      	movs	r3, #32
 8008db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dba:	e0c6      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008dbc:	2340      	movs	r3, #64	; 0x40
 8008dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dc2:	e0c2      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008dc4:	2380      	movs	r3, #128	; 0x80
 8008dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dca:	e0be      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008dcc:	40011400 	.word	0x40011400
 8008dd0:	58024400 	.word	0x58024400
 8008dd4:	40007800 	.word	0x40007800
 8008dd8:	40007c00 	.word	0x40007c00
 8008ddc:	40011800 	.word	0x40011800
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4aad      	ldr	r2, [pc, #692]	; (800909c <UART_SetConfig+0x900>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d176      	bne.n	8008ed8 <UART_SetConfig+0x73c>
 8008dea:	4bad      	ldr	r3, [pc, #692]	; (80090a0 <UART_SetConfig+0x904>)
 8008dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008df2:	2b28      	cmp	r3, #40	; 0x28
 8008df4:	d86c      	bhi.n	8008ed0 <UART_SetConfig+0x734>
 8008df6:	a201      	add	r2, pc, #4	; (adr r2, 8008dfc <UART_SetConfig+0x660>)
 8008df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfc:	08008ea1 	.word	0x08008ea1
 8008e00:	08008ed1 	.word	0x08008ed1
 8008e04:	08008ed1 	.word	0x08008ed1
 8008e08:	08008ed1 	.word	0x08008ed1
 8008e0c:	08008ed1 	.word	0x08008ed1
 8008e10:	08008ed1 	.word	0x08008ed1
 8008e14:	08008ed1 	.word	0x08008ed1
 8008e18:	08008ed1 	.word	0x08008ed1
 8008e1c:	08008ea9 	.word	0x08008ea9
 8008e20:	08008ed1 	.word	0x08008ed1
 8008e24:	08008ed1 	.word	0x08008ed1
 8008e28:	08008ed1 	.word	0x08008ed1
 8008e2c:	08008ed1 	.word	0x08008ed1
 8008e30:	08008ed1 	.word	0x08008ed1
 8008e34:	08008ed1 	.word	0x08008ed1
 8008e38:	08008ed1 	.word	0x08008ed1
 8008e3c:	08008eb1 	.word	0x08008eb1
 8008e40:	08008ed1 	.word	0x08008ed1
 8008e44:	08008ed1 	.word	0x08008ed1
 8008e48:	08008ed1 	.word	0x08008ed1
 8008e4c:	08008ed1 	.word	0x08008ed1
 8008e50:	08008ed1 	.word	0x08008ed1
 8008e54:	08008ed1 	.word	0x08008ed1
 8008e58:	08008ed1 	.word	0x08008ed1
 8008e5c:	08008eb9 	.word	0x08008eb9
 8008e60:	08008ed1 	.word	0x08008ed1
 8008e64:	08008ed1 	.word	0x08008ed1
 8008e68:	08008ed1 	.word	0x08008ed1
 8008e6c:	08008ed1 	.word	0x08008ed1
 8008e70:	08008ed1 	.word	0x08008ed1
 8008e74:	08008ed1 	.word	0x08008ed1
 8008e78:	08008ed1 	.word	0x08008ed1
 8008e7c:	08008ec1 	.word	0x08008ec1
 8008e80:	08008ed1 	.word	0x08008ed1
 8008e84:	08008ed1 	.word	0x08008ed1
 8008e88:	08008ed1 	.word	0x08008ed1
 8008e8c:	08008ed1 	.word	0x08008ed1
 8008e90:	08008ed1 	.word	0x08008ed1
 8008e94:	08008ed1 	.word	0x08008ed1
 8008e98:	08008ed1 	.word	0x08008ed1
 8008e9c:	08008ec9 	.word	0x08008ec9
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ea6:	e050      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008ea8:	2304      	movs	r3, #4
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eae:	e04c      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008eb0:	2308      	movs	r3, #8
 8008eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eb6:	e048      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008eb8:	2310      	movs	r3, #16
 8008eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ebe:	e044      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008ec0:	2320      	movs	r3, #32
 8008ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ec6:	e040      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008ec8:	2340      	movs	r3, #64	; 0x40
 8008eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ece:	e03c      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008ed0:	2380      	movs	r3, #128	; 0x80
 8008ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ed6:	e038      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a71      	ldr	r2, [pc, #452]	; (80090a4 <UART_SetConfig+0x908>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d130      	bne.n	8008f44 <UART_SetConfig+0x7a8>
 8008ee2:	4b6f      	ldr	r3, [pc, #444]	; (80090a0 <UART_SetConfig+0x904>)
 8008ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ee6:	f003 0307 	and.w	r3, r3, #7
 8008eea:	2b05      	cmp	r3, #5
 8008eec:	d826      	bhi.n	8008f3c <UART_SetConfig+0x7a0>
 8008eee:	a201      	add	r2, pc, #4	; (adr r2, 8008ef4 <UART_SetConfig+0x758>)
 8008ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef4:	08008f0d 	.word	0x08008f0d
 8008ef8:	08008f15 	.word	0x08008f15
 8008efc:	08008f1d 	.word	0x08008f1d
 8008f00:	08008f25 	.word	0x08008f25
 8008f04:	08008f2d 	.word	0x08008f2d
 8008f08:	08008f35 	.word	0x08008f35
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f12:	e01a      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008f14:	2304      	movs	r3, #4
 8008f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f1a:	e016      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008f1c:	2308      	movs	r3, #8
 8008f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f22:	e012      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008f24:	2310      	movs	r3, #16
 8008f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f2a:	e00e      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008f2c:	2320      	movs	r3, #32
 8008f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f32:	e00a      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008f34:	2340      	movs	r3, #64	; 0x40
 8008f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f3a:	e006      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008f3c:	2380      	movs	r3, #128	; 0x80
 8008f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f42:	e002      	b.n	8008f4a <UART_SetConfig+0x7ae>
 8008f44:	2380      	movs	r3, #128	; 0x80
 8008f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a55      	ldr	r2, [pc, #340]	; (80090a4 <UART_SetConfig+0x908>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	f040 80f8 	bne.w	8009146 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f5a:	2b20      	cmp	r3, #32
 8008f5c:	dc46      	bgt.n	8008fec <UART_SetConfig+0x850>
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	db75      	blt.n	800904e <UART_SetConfig+0x8b2>
 8008f62:	3b02      	subs	r3, #2
 8008f64:	2b1e      	cmp	r3, #30
 8008f66:	d872      	bhi.n	800904e <UART_SetConfig+0x8b2>
 8008f68:	a201      	add	r2, pc, #4	; (adr r2, 8008f70 <UART_SetConfig+0x7d4>)
 8008f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6e:	bf00      	nop
 8008f70:	08008ff3 	.word	0x08008ff3
 8008f74:	0800904f 	.word	0x0800904f
 8008f78:	08008ffb 	.word	0x08008ffb
 8008f7c:	0800904f 	.word	0x0800904f
 8008f80:	0800904f 	.word	0x0800904f
 8008f84:	0800904f 	.word	0x0800904f
 8008f88:	0800900b 	.word	0x0800900b
 8008f8c:	0800904f 	.word	0x0800904f
 8008f90:	0800904f 	.word	0x0800904f
 8008f94:	0800904f 	.word	0x0800904f
 8008f98:	0800904f 	.word	0x0800904f
 8008f9c:	0800904f 	.word	0x0800904f
 8008fa0:	0800904f 	.word	0x0800904f
 8008fa4:	0800904f 	.word	0x0800904f
 8008fa8:	0800901b 	.word	0x0800901b
 8008fac:	0800904f 	.word	0x0800904f
 8008fb0:	0800904f 	.word	0x0800904f
 8008fb4:	0800904f 	.word	0x0800904f
 8008fb8:	0800904f 	.word	0x0800904f
 8008fbc:	0800904f 	.word	0x0800904f
 8008fc0:	0800904f 	.word	0x0800904f
 8008fc4:	0800904f 	.word	0x0800904f
 8008fc8:	0800904f 	.word	0x0800904f
 8008fcc:	0800904f 	.word	0x0800904f
 8008fd0:	0800904f 	.word	0x0800904f
 8008fd4:	0800904f 	.word	0x0800904f
 8008fd8:	0800904f 	.word	0x0800904f
 8008fdc:	0800904f 	.word	0x0800904f
 8008fe0:	0800904f 	.word	0x0800904f
 8008fe4:	0800904f 	.word	0x0800904f
 8008fe8:	08009041 	.word	0x08009041
 8008fec:	2b40      	cmp	r3, #64	; 0x40
 8008fee:	d02a      	beq.n	8009046 <UART_SetConfig+0x8aa>
 8008ff0:	e02d      	b.n	800904e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008ff2:	f7fe fecb 	bl	8007d8c <HAL_RCCEx_GetD3PCLK1Freq>
 8008ff6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ff8:	e02f      	b.n	800905a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe feda 	bl	8007db8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009008:	e027      	b.n	800905a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800900a:	f107 0318 	add.w	r3, r7, #24
 800900e:	4618      	mov	r0, r3
 8009010:	f7ff f826 	bl	8008060 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009018:	e01f      	b.n	800905a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800901a:	4b21      	ldr	r3, [pc, #132]	; (80090a0 <UART_SetConfig+0x904>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 0320 	and.w	r3, r3, #32
 8009022:	2b00      	cmp	r3, #0
 8009024:	d009      	beq.n	800903a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009026:	4b1e      	ldr	r3, [pc, #120]	; (80090a0 <UART_SetConfig+0x904>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	08db      	lsrs	r3, r3, #3
 800902c:	f003 0303 	and.w	r3, r3, #3
 8009030:	4a1d      	ldr	r2, [pc, #116]	; (80090a8 <UART_SetConfig+0x90c>)
 8009032:	fa22 f303 	lsr.w	r3, r2, r3
 8009036:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009038:	e00f      	b.n	800905a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800903a:	4b1b      	ldr	r3, [pc, #108]	; (80090a8 <UART_SetConfig+0x90c>)
 800903c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800903e:	e00c      	b.n	800905a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009040:	4b1a      	ldr	r3, [pc, #104]	; (80090ac <UART_SetConfig+0x910>)
 8009042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009044:	e009      	b.n	800905a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800904a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800904c:	e005      	b.n	800905a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800904e:	2300      	movs	r3, #0
 8009050:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009058:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800905a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800905c:	2b00      	cmp	r3, #0
 800905e:	f000 81ee 	beq.w	800943e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009066:	4a12      	ldr	r2, [pc, #72]	; (80090b0 <UART_SetConfig+0x914>)
 8009068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800906c:	461a      	mov	r2, r3
 800906e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009070:	fbb3 f3f2 	udiv	r3, r3, r2
 8009074:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	685a      	ldr	r2, [r3, #4]
 800907a:	4613      	mov	r3, r2
 800907c:	005b      	lsls	r3, r3, #1
 800907e:	4413      	add	r3, r2
 8009080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009082:	429a      	cmp	r2, r3
 8009084:	d305      	bcc.n	8009092 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800908c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800908e:	429a      	cmp	r2, r3
 8009090:	d910      	bls.n	80090b4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009098:	e1d1      	b.n	800943e <UART_SetConfig+0xca2>
 800909a:	bf00      	nop
 800909c:	40011c00 	.word	0x40011c00
 80090a0:	58024400 	.word	0x58024400
 80090a4:	58000c00 	.word	0x58000c00
 80090a8:	03d09000 	.word	0x03d09000
 80090ac:	003d0900 	.word	0x003d0900
 80090b0:	0800b23c 	.word	0x0800b23c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b6:	2200      	movs	r2, #0
 80090b8:	60bb      	str	r3, [r7, #8]
 80090ba:	60fa      	str	r2, [r7, #12]
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	4ac0      	ldr	r2, [pc, #768]	; (80093c4 <UART_SetConfig+0xc28>)
 80090c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	2200      	movs	r2, #0
 80090ca:	603b      	str	r3, [r7, #0]
 80090cc:	607a      	str	r2, [r7, #4]
 80090ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090d6:	f7f7 f95b 	bl	8000390 <__aeabi_uldivmod>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	4610      	mov	r0, r2
 80090e0:	4619      	mov	r1, r3
 80090e2:	f04f 0200 	mov.w	r2, #0
 80090e6:	f04f 0300 	mov.w	r3, #0
 80090ea:	020b      	lsls	r3, r1, #8
 80090ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80090f0:	0202      	lsls	r2, r0, #8
 80090f2:	6979      	ldr	r1, [r7, #20]
 80090f4:	6849      	ldr	r1, [r1, #4]
 80090f6:	0849      	lsrs	r1, r1, #1
 80090f8:	2000      	movs	r0, #0
 80090fa:	460c      	mov	r4, r1
 80090fc:	4605      	mov	r5, r0
 80090fe:	eb12 0804 	adds.w	r8, r2, r4
 8009102:	eb43 0905 	adc.w	r9, r3, r5
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	469a      	mov	sl, r3
 800910e:	4693      	mov	fp, r2
 8009110:	4652      	mov	r2, sl
 8009112:	465b      	mov	r3, fp
 8009114:	4640      	mov	r0, r8
 8009116:	4649      	mov	r1, r9
 8009118:	f7f7 f93a 	bl	8000390 <__aeabi_uldivmod>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	4613      	mov	r3, r2
 8009122:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800912a:	d308      	bcc.n	800913e <UART_SetConfig+0x9a2>
 800912c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009132:	d204      	bcs.n	800913e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800913a:	60da      	str	r2, [r3, #12]
 800913c:	e17f      	b.n	800943e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009144:	e17b      	b.n	800943e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	69db      	ldr	r3, [r3, #28]
 800914a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800914e:	f040 80bd 	bne.w	80092cc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009152:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009156:	2b20      	cmp	r3, #32
 8009158:	dc48      	bgt.n	80091ec <UART_SetConfig+0xa50>
 800915a:	2b00      	cmp	r3, #0
 800915c:	db7b      	blt.n	8009256 <UART_SetConfig+0xaba>
 800915e:	2b20      	cmp	r3, #32
 8009160:	d879      	bhi.n	8009256 <UART_SetConfig+0xaba>
 8009162:	a201      	add	r2, pc, #4	; (adr r2, 8009168 <UART_SetConfig+0x9cc>)
 8009164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009168:	080091f3 	.word	0x080091f3
 800916c:	080091fb 	.word	0x080091fb
 8009170:	08009257 	.word	0x08009257
 8009174:	08009257 	.word	0x08009257
 8009178:	08009203 	.word	0x08009203
 800917c:	08009257 	.word	0x08009257
 8009180:	08009257 	.word	0x08009257
 8009184:	08009257 	.word	0x08009257
 8009188:	08009213 	.word	0x08009213
 800918c:	08009257 	.word	0x08009257
 8009190:	08009257 	.word	0x08009257
 8009194:	08009257 	.word	0x08009257
 8009198:	08009257 	.word	0x08009257
 800919c:	08009257 	.word	0x08009257
 80091a0:	08009257 	.word	0x08009257
 80091a4:	08009257 	.word	0x08009257
 80091a8:	08009223 	.word	0x08009223
 80091ac:	08009257 	.word	0x08009257
 80091b0:	08009257 	.word	0x08009257
 80091b4:	08009257 	.word	0x08009257
 80091b8:	08009257 	.word	0x08009257
 80091bc:	08009257 	.word	0x08009257
 80091c0:	08009257 	.word	0x08009257
 80091c4:	08009257 	.word	0x08009257
 80091c8:	08009257 	.word	0x08009257
 80091cc:	08009257 	.word	0x08009257
 80091d0:	08009257 	.word	0x08009257
 80091d4:	08009257 	.word	0x08009257
 80091d8:	08009257 	.word	0x08009257
 80091dc:	08009257 	.word	0x08009257
 80091e0:	08009257 	.word	0x08009257
 80091e4:	08009257 	.word	0x08009257
 80091e8:	08009249 	.word	0x08009249
 80091ec:	2b40      	cmp	r3, #64	; 0x40
 80091ee:	d02e      	beq.n	800924e <UART_SetConfig+0xab2>
 80091f0:	e031      	b.n	8009256 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091f2:	f7fd fe93 	bl	8006f1c <HAL_RCC_GetPCLK1Freq>
 80091f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091f8:	e033      	b.n	8009262 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091fa:	f7fd fea5 	bl	8006f48 <HAL_RCC_GetPCLK2Freq>
 80091fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009200:	e02f      	b.n	8009262 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009206:	4618      	mov	r0, r3
 8009208:	f7fe fdd6 	bl	8007db8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009210:	e027      	b.n	8009262 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009212:	f107 0318 	add.w	r3, r7, #24
 8009216:	4618      	mov	r0, r3
 8009218:	f7fe ff22 	bl	8008060 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009220:	e01f      	b.n	8009262 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009222:	4b69      	ldr	r3, [pc, #420]	; (80093c8 <UART_SetConfig+0xc2c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0320 	and.w	r3, r3, #32
 800922a:	2b00      	cmp	r3, #0
 800922c:	d009      	beq.n	8009242 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800922e:	4b66      	ldr	r3, [pc, #408]	; (80093c8 <UART_SetConfig+0xc2c>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	08db      	lsrs	r3, r3, #3
 8009234:	f003 0303 	and.w	r3, r3, #3
 8009238:	4a64      	ldr	r2, [pc, #400]	; (80093cc <UART_SetConfig+0xc30>)
 800923a:	fa22 f303 	lsr.w	r3, r2, r3
 800923e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009240:	e00f      	b.n	8009262 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009242:	4b62      	ldr	r3, [pc, #392]	; (80093cc <UART_SetConfig+0xc30>)
 8009244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009246:	e00c      	b.n	8009262 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009248:	4b61      	ldr	r3, [pc, #388]	; (80093d0 <UART_SetConfig+0xc34>)
 800924a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800924c:	e009      	b.n	8009262 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800924e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009254:	e005      	b.n	8009262 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009256:	2300      	movs	r3, #0
 8009258:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009260:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 80ea 	beq.w	800943e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926e:	4a55      	ldr	r2, [pc, #340]	; (80093c4 <UART_SetConfig+0xc28>)
 8009270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009274:	461a      	mov	r2, r3
 8009276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009278:	fbb3 f3f2 	udiv	r3, r3, r2
 800927c:	005a      	lsls	r2, r3, #1
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	085b      	lsrs	r3, r3, #1
 8009284:	441a      	add	r2, r3
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	fbb2 f3f3 	udiv	r3, r2, r3
 800928e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009292:	2b0f      	cmp	r3, #15
 8009294:	d916      	bls.n	80092c4 <UART_SetConfig+0xb28>
 8009296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800929c:	d212      	bcs.n	80092c4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800929e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	f023 030f 	bic.w	r3, r3, #15
 80092a6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092aa:	085b      	lsrs	r3, r3, #1
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	f003 0307 	and.w	r3, r3, #7
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80092b6:	4313      	orrs	r3, r2
 80092b8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80092c0:	60da      	str	r2, [r3, #12]
 80092c2:	e0bc      	b.n	800943e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80092ca:	e0b8      	b.n	800943e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80092cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80092d0:	2b20      	cmp	r3, #32
 80092d2:	dc4b      	bgt.n	800936c <UART_SetConfig+0xbd0>
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f2c0 8087 	blt.w	80093e8 <UART_SetConfig+0xc4c>
 80092da:	2b20      	cmp	r3, #32
 80092dc:	f200 8084 	bhi.w	80093e8 <UART_SetConfig+0xc4c>
 80092e0:	a201      	add	r2, pc, #4	; (adr r2, 80092e8 <UART_SetConfig+0xb4c>)
 80092e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e6:	bf00      	nop
 80092e8:	08009373 	.word	0x08009373
 80092ec:	0800937b 	.word	0x0800937b
 80092f0:	080093e9 	.word	0x080093e9
 80092f4:	080093e9 	.word	0x080093e9
 80092f8:	08009383 	.word	0x08009383
 80092fc:	080093e9 	.word	0x080093e9
 8009300:	080093e9 	.word	0x080093e9
 8009304:	080093e9 	.word	0x080093e9
 8009308:	08009393 	.word	0x08009393
 800930c:	080093e9 	.word	0x080093e9
 8009310:	080093e9 	.word	0x080093e9
 8009314:	080093e9 	.word	0x080093e9
 8009318:	080093e9 	.word	0x080093e9
 800931c:	080093e9 	.word	0x080093e9
 8009320:	080093e9 	.word	0x080093e9
 8009324:	080093e9 	.word	0x080093e9
 8009328:	080093a3 	.word	0x080093a3
 800932c:	080093e9 	.word	0x080093e9
 8009330:	080093e9 	.word	0x080093e9
 8009334:	080093e9 	.word	0x080093e9
 8009338:	080093e9 	.word	0x080093e9
 800933c:	080093e9 	.word	0x080093e9
 8009340:	080093e9 	.word	0x080093e9
 8009344:	080093e9 	.word	0x080093e9
 8009348:	080093e9 	.word	0x080093e9
 800934c:	080093e9 	.word	0x080093e9
 8009350:	080093e9 	.word	0x080093e9
 8009354:	080093e9 	.word	0x080093e9
 8009358:	080093e9 	.word	0x080093e9
 800935c:	080093e9 	.word	0x080093e9
 8009360:	080093e9 	.word	0x080093e9
 8009364:	080093e9 	.word	0x080093e9
 8009368:	080093db 	.word	0x080093db
 800936c:	2b40      	cmp	r3, #64	; 0x40
 800936e:	d037      	beq.n	80093e0 <UART_SetConfig+0xc44>
 8009370:	e03a      	b.n	80093e8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009372:	f7fd fdd3 	bl	8006f1c <HAL_RCC_GetPCLK1Freq>
 8009376:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009378:	e03c      	b.n	80093f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800937a:	f7fd fde5 	bl	8006f48 <HAL_RCC_GetPCLK2Freq>
 800937e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009380:	e038      	b.n	80093f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009386:	4618      	mov	r0, r3
 8009388:	f7fe fd16 	bl	8007db8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009390:	e030      	b.n	80093f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009392:	f107 0318 	add.w	r3, r7, #24
 8009396:	4618      	mov	r0, r3
 8009398:	f7fe fe62 	bl	8008060 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093a0:	e028      	b.n	80093f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093a2:	4b09      	ldr	r3, [pc, #36]	; (80093c8 <UART_SetConfig+0xc2c>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 0320 	and.w	r3, r3, #32
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d012      	beq.n	80093d4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093ae:	4b06      	ldr	r3, [pc, #24]	; (80093c8 <UART_SetConfig+0xc2c>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	08db      	lsrs	r3, r3, #3
 80093b4:	f003 0303 	and.w	r3, r3, #3
 80093b8:	4a04      	ldr	r2, [pc, #16]	; (80093cc <UART_SetConfig+0xc30>)
 80093ba:	fa22 f303 	lsr.w	r3, r2, r3
 80093be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093c0:	e018      	b.n	80093f4 <UART_SetConfig+0xc58>
 80093c2:	bf00      	nop
 80093c4:	0800b23c 	.word	0x0800b23c
 80093c8:	58024400 	.word	0x58024400
 80093cc:	03d09000 	.word	0x03d09000
 80093d0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80093d4:	4b24      	ldr	r3, [pc, #144]	; (8009468 <UART_SetConfig+0xccc>)
 80093d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093d8:	e00c      	b.n	80093f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093da:	4b24      	ldr	r3, [pc, #144]	; (800946c <UART_SetConfig+0xcd0>)
 80093dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093de:	e009      	b.n	80093f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093e6:	e005      	b.n	80093f4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80093e8:	2300      	movs	r3, #0
 80093ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80093f2:	bf00      	nop
    }

    if (pclk != 0U)
 80093f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d021      	beq.n	800943e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fe:	4a1c      	ldr	r2, [pc, #112]	; (8009470 <UART_SetConfig+0xcd4>)
 8009400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009404:	461a      	mov	r2, r3
 8009406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009408:	fbb3 f2f2 	udiv	r2, r3, r2
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	085b      	lsrs	r3, r3, #1
 8009412:	441a      	add	r2, r3
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	fbb2 f3f3 	udiv	r3, r2, r3
 800941c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800941e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009420:	2b0f      	cmp	r3, #15
 8009422:	d909      	bls.n	8009438 <UART_SetConfig+0xc9c>
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800942a:	d205      	bcs.n	8009438 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800942c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942e:	b29a      	uxth	r2, r3
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	60da      	str	r2, [r3, #12]
 8009436:	e002      	b.n	800943e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2201      	movs	r2, #1
 8009442:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	2201      	movs	r2, #1
 800944a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	2200      	movs	r2, #0
 8009452:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	2200      	movs	r2, #0
 8009458:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800945a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800945e:	4618      	mov	r0, r3
 8009460:	3748      	adds	r7, #72	; 0x48
 8009462:	46bd      	mov	sp, r7
 8009464:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009468:	03d09000 	.word	0x03d09000
 800946c:	003d0900 	.word	0x003d0900
 8009470:	0800b23c 	.word	0x0800b23c

08009474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00a      	beq.n	800949e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	430a      	orrs	r2, r1
 800949c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a2:	f003 0302 	and.w	r3, r3, #2
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00a      	beq.n	80094c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	430a      	orrs	r2, r1
 80094be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c4:	f003 0304 	and.w	r3, r3, #4
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00a      	beq.n	80094e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e6:	f003 0308 	and.w	r3, r3, #8
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00a      	beq.n	8009504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	430a      	orrs	r2, r1
 8009502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009508:	f003 0310 	and.w	r3, r3, #16
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00a      	beq.n	8009526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	430a      	orrs	r2, r1
 8009524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952a:	f003 0320 	and.w	r3, r3, #32
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00a      	beq.n	8009548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	430a      	orrs	r2, r1
 8009546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009550:	2b00      	cmp	r3, #0
 8009552:	d01a      	beq.n	800958a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800956e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009572:	d10a      	bne.n	800958a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	430a      	orrs	r2, r1
 8009588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800958e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00a      	beq.n	80095ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	430a      	orrs	r2, r1
 80095aa:	605a      	str	r2, [r3, #4]
  }
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af02      	add	r7, sp, #8
 80095be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095c8:	f7f8 f8ba 	bl	8001740 <HAL_GetTick>
 80095cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 0308 	and.w	r3, r3, #8
 80095d8:	2b08      	cmp	r3, #8
 80095da:	d10e      	bne.n	80095fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f82f 	bl	800964e <UART_WaitOnFlagUntilTimeout>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d001      	beq.n	80095fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095f6:	2303      	movs	r3, #3
 80095f8:	e025      	b.n	8009646 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 0304 	and.w	r3, r3, #4
 8009604:	2b04      	cmp	r3, #4
 8009606:	d10e      	bne.n	8009626 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f819 	bl	800964e <UART_WaitOnFlagUntilTimeout>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009622:	2303      	movs	r3, #3
 8009624:	e00f      	b.n	8009646 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2220      	movs	r2, #32
 800962a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2220      	movs	r2, #32
 8009632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b09c      	sub	sp, #112	; 0x70
 8009652:	af00      	add	r7, sp, #0
 8009654:	60f8      	str	r0, [r7, #12]
 8009656:	60b9      	str	r1, [r7, #8]
 8009658:	603b      	str	r3, [r7, #0]
 800965a:	4613      	mov	r3, r2
 800965c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800965e:	e0a9      	b.n	80097b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009666:	f000 80a5 	beq.w	80097b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800966a:	f7f8 f869 	bl	8001740 <HAL_GetTick>
 800966e:	4602      	mov	r2, r0
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	1ad3      	subs	r3, r2, r3
 8009674:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009676:	429a      	cmp	r2, r3
 8009678:	d302      	bcc.n	8009680 <UART_WaitOnFlagUntilTimeout+0x32>
 800967a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800967c:	2b00      	cmp	r3, #0
 800967e:	d140      	bne.n	8009702 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009688:	e853 3f00 	ldrex	r3, [r3]
 800968c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800968e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009690:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009694:	667b      	str	r3, [r7, #100]	; 0x64
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800969e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80096a6:	e841 2300 	strex	r3, r2, [r1]
 80096aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80096ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1e6      	bne.n	8009680 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3308      	adds	r3, #8
 80096b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096bc:	e853 3f00 	ldrex	r3, [r3]
 80096c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c4:	f023 0301 	bic.w	r3, r3, #1
 80096c8:	663b      	str	r3, [r7, #96]	; 0x60
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	3308      	adds	r3, #8
 80096d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80096d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80096d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80096d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096da:	e841 2300 	strex	r3, r2, [r1]
 80096de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80096e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1e5      	bne.n	80096b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2220      	movs	r2, #32
 80096ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2220      	movs	r2, #32
 80096f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80096fe:	2303      	movs	r3, #3
 8009700:	e069      	b.n	80097d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 0304 	and.w	r3, r3, #4
 800970c:	2b00      	cmp	r3, #0
 800970e:	d051      	beq.n	80097b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	69db      	ldr	r3, [r3, #28]
 8009716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800971a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800971e:	d149      	bne.n	80097b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009728:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009732:	e853 3f00 	ldrex	r3, [r3]
 8009736:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800973e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	461a      	mov	r2, r3
 8009746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009748:	637b      	str	r3, [r7, #52]	; 0x34
 800974a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800974e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009750:	e841 2300 	strex	r3, r2, [r1]
 8009754:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1e6      	bne.n	800972a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	3308      	adds	r3, #8
 8009762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	e853 3f00 	ldrex	r3, [r3]
 800976a:	613b      	str	r3, [r7, #16]
   return(result);
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	f023 0301 	bic.w	r3, r3, #1
 8009772:	66bb      	str	r3, [r7, #104]	; 0x68
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	3308      	adds	r3, #8
 800977a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800977c:	623a      	str	r2, [r7, #32]
 800977e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	69f9      	ldr	r1, [r7, #28]
 8009782:	6a3a      	ldr	r2, [r7, #32]
 8009784:	e841 2300 	strex	r3, r2, [r1]
 8009788:	61bb      	str	r3, [r7, #24]
   return(result);
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e5      	bne.n	800975c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2220      	movs	r2, #32
 8009794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2220      	movs	r2, #32
 800979c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2220      	movs	r2, #32
 80097a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80097b0:	2303      	movs	r3, #3
 80097b2:	e010      	b.n	80097d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	69da      	ldr	r2, [r3, #28]
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	4013      	ands	r3, r2
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	bf0c      	ite	eq
 80097c4:	2301      	moveq	r3, #1
 80097c6:	2300      	movne	r3, #0
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	461a      	mov	r2, r3
 80097cc:	79fb      	ldrb	r3, [r7, #7]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	f43f af46 	beq.w	8009660 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3770      	adds	r7, #112	; 0x70
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80097de:	b480      	push	{r7}
 80097e0:	b085      	sub	sp, #20
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d101      	bne.n	80097f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80097f0:	2302      	movs	r3, #2
 80097f2:	e027      	b.n	8009844 <HAL_UARTEx_DisableFifoMode+0x66>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2224      	movs	r2, #36	; 0x24
 8009800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f022 0201 	bic.w	r2, r2, #1
 800981a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009822:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2220      	movs	r2, #32
 8009836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3714      	adds	r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009860:	2b01      	cmp	r3, #1
 8009862:	d101      	bne.n	8009868 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009864:	2302      	movs	r3, #2
 8009866:	e02d      	b.n	80098c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2224      	movs	r2, #36	; 0x24
 8009874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f022 0201 	bic.w	r2, r2, #1
 800988e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	430a      	orrs	r2, r1
 80098a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f84f 	bl	8009948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2220      	movs	r2, #32
 80098b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d101      	bne.n	80098e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80098e0:	2302      	movs	r3, #2
 80098e2:	e02d      	b.n	8009940 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2224      	movs	r2, #36	; 0x24
 80098f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f022 0201 	bic.w	r2, r2, #1
 800990a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	683a      	ldr	r2, [r7, #0]
 800991c:	430a      	orrs	r2, r1
 800991e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f811 	bl	8009948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2220      	movs	r2, #32
 8009932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009954:	2b00      	cmp	r3, #0
 8009956:	d108      	bne.n	800996a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009968:	e031      	b.n	80099ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800996a:	2310      	movs	r3, #16
 800996c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800996e:	2310      	movs	r3, #16
 8009970:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	0e5b      	lsrs	r3, r3, #25
 800997a:	b2db      	uxtb	r3, r3
 800997c:	f003 0307 	and.w	r3, r3, #7
 8009980:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	0f5b      	lsrs	r3, r3, #29
 800998a:	b2db      	uxtb	r3, r3
 800998c:	f003 0307 	and.w	r3, r3, #7
 8009990:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009992:	7bbb      	ldrb	r3, [r7, #14]
 8009994:	7b3a      	ldrb	r2, [r7, #12]
 8009996:	4911      	ldr	r1, [pc, #68]	; (80099dc <UARTEx_SetNbDataToProcess+0x94>)
 8009998:	5c8a      	ldrb	r2, [r1, r2]
 800999a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800999e:	7b3a      	ldrb	r2, [r7, #12]
 80099a0:	490f      	ldr	r1, [pc, #60]	; (80099e0 <UARTEx_SetNbDataToProcess+0x98>)
 80099a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80099a8:	b29a      	uxth	r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099b0:	7bfb      	ldrb	r3, [r7, #15]
 80099b2:	7b7a      	ldrb	r2, [r7, #13]
 80099b4:	4909      	ldr	r1, [pc, #36]	; (80099dc <UARTEx_SetNbDataToProcess+0x94>)
 80099b6:	5c8a      	ldrb	r2, [r1, r2]
 80099b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80099bc:	7b7a      	ldrb	r2, [r7, #13]
 80099be:	4908      	ldr	r1, [pc, #32]	; (80099e0 <UARTEx_SetNbDataToProcess+0x98>)
 80099c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80099ce:	bf00      	nop
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	0800b254 	.word	0x0800b254
 80099e0:	0800b25c 	.word	0x0800b25c

080099e4 <OV5640_WR_Reg>:
	400, 240,	//WQVGA
	352, 288,	//CIF
};

uint8_t OV5640_WR_Reg(uint16_t reg, uint8_t data)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	4603      	mov	r3, r0
 80099ec:	460a      	mov	r2, r1
 80099ee:	80fb      	strh	r3, [r7, #6]
 80099f0:	4613      	mov	r3, r2
 80099f2:	717b      	strb	r3, [r7, #5]

	uint8_t res = 0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	73fb      	strb	r3, [r7, #15]
	res = BSP_I2C4_WriteReg16(OV5640_ADDR, reg, &data, 1);
 80099f8:	1d7a      	adds	r2, r7, #5
 80099fa:	88f9      	ldrh	r1, [r7, #6]
 80099fc:	2301      	movs	r3, #1
 80099fe:	2078      	movs	r0, #120	; 0x78
 8009a00:	f7f7 f978 	bl	8000cf4 <BSP_I2C4_WriteReg16>
 8009a04:	4603      	mov	r3, r0
 8009a06:	73fb      	strb	r3, [r7, #15]
  	return	res;
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
	...

08009a14 <OV5640_RD_Reg>:


uint8_t OV5640_RD_Reg(uint16_t reg)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	80fb      	strh	r3, [r7, #6]
	uint8_t val=0;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	72fb      	strb	r3, [r7, #11]
	int32_t ret;
	ret = BSP_I2C4_ReadReg16(OV5640_ADDR, reg, &val, 1);
 8009a22:	f107 020b 	add.w	r2, r7, #11
 8009a26:	88f9      	ldrh	r1, [r7, #6]
 8009a28:	2301      	movs	r3, #1
 8009a2a:	2078      	movs	r0, #120	; 0x78
 8009a2c:	f7f7 f988 	bl	8000d40 <BSP_I2C4_ReadReg16>
 8009a30:	60f8      	str	r0, [r7, #12]
	if (ret != 0) {
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d003      	beq.n	8009a40 <OV5640_RD_Reg+0x2c>
		printf("I2C read error: %d \n", ret);
 8009a38:	68f9      	ldr	r1, [r7, #12]
 8009a3a:	4804      	ldr	r0, [pc, #16]	; (8009a4c <OV5640_RD_Reg+0x38>)
 8009a3c:	f000 fb60 	bl	800a100 <iprintf>
	}

  	return val;
 8009a40:	7afb      	ldrb	r3, [r7, #11]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	0800b200 	.word	0x0800b200

08009a50 <OV5640_Init>:
 
uint8_t OV5640_Init(void)
{ 
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
	uint16_t i=0;
 8009a56:	2300      	movs	r3, #0
 8009a58:	80fb      	strh	r3, [r7, #6]
	uint16_t reg;
        
        
 
	OV5640_PWDN_Pin_RESET;		//POWER ON;
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	2000      	movs	r0, #0
 8009a60:	f7fb fc3e 	bl	80052e0 <HAL_GPIO_WritePin>
        
        HAL_Delay(30); 
 8009a64:	201e      	movs	r0, #30
 8009a66:	f7f7 fe77 	bl	8001758 <HAL_Delay>
              
	reg=OV5640_RD_Reg(OV5640_CHIPIDH);	
 8009a6a:	f243 000a 	movw	r0, #12298	; 0x300a
 8009a6e:	f7ff ffd1 	bl	8009a14 <OV5640_RD_Reg>
 8009a72:	4603      	mov	r3, r0
 8009a74:	80bb      	strh	r3, [r7, #4]
	reg<<=8;
 8009a76:	88bb      	ldrh	r3, [r7, #4]
 8009a78:	021b      	lsls	r3, r3, #8
 8009a7a:	80bb      	strh	r3, [r7, #4]
	reg|=OV5640_RD_Reg(OV5640_CHIPIDL);
 8009a7c:	f243 000b 	movw	r0, #12299	; 0x300b
 8009a80:	f7ff ffc8 	bl	8009a14 <OV5640_RD_Reg>
 8009a84:	4603      	mov	r3, r0
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	88bb      	ldrh	r3, [r7, #4]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	80bb      	strh	r3, [r7, #4]
	if(reg!=OV5640_ID)
 8009a8e:	88bb      	ldrh	r3, [r7, #4]
 8009a90:	f245 6240 	movw	r2, #22080	; 0x5640
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d006      	beq.n	8009aa6 <OV5640_Init+0x56>
	{
		printf("ID: %d \r\n",reg);
 8009a98:	88bb      	ldrh	r3, [r7, #4]
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	481c      	ldr	r0, [pc, #112]	; (8009b10 <OV5640_Init+0xc0>)
 8009a9e:	f000 fb2f 	bl	800a100 <iprintf>
		return 1;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e030      	b.n	8009b08 <OV5640_Init+0xb8>
	}  
	OV5640_WR_Reg(0x3103,0X11);	//system clock from pad, bit[1]
 8009aa6:	2111      	movs	r1, #17
 8009aa8:	f243 1003 	movw	r0, #12547	; 0x3103
 8009aac:	f7ff ff9a 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0X3008,0X82);	
 8009ab0:	2182      	movs	r1, #130	; 0x82
 8009ab2:	f243 0008 	movw	r0, #12296	; 0x3008
 8009ab6:	f7ff ff95 	bl	80099e4 <OV5640_WR_Reg>
	HAL_Delay(10);
 8009aba:	200a      	movs	r0, #10
 8009abc:	f7f7 fe4c 	bl	8001758 <HAL_Delay>
        
	for(i=0;i<sizeof(ov5640_init_reg_tbl)/4;i++)
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	80fb      	strh	r3, [r7, #6]
 8009ac4:	e010      	b.n	8009ae8 <OV5640_Init+0x98>
	{
		OV5640_WR_Reg(ov5640_init_reg_tbl[i][0],ov5640_init_reg_tbl[i][1]);
 8009ac6:	88fb      	ldrh	r3, [r7, #6]
 8009ac8:	4a12      	ldr	r2, [pc, #72]	; (8009b14 <OV5640_Init+0xc4>)
 8009aca:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8009ace:	88fb      	ldrh	r3, [r7, #6]
 8009ad0:	4910      	ldr	r1, [pc, #64]	; (8009b14 <OV5640_Init+0xc4>)
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	440b      	add	r3, r1
 8009ad6:	885b      	ldrh	r3, [r3, #2]
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	4619      	mov	r1, r3
 8009adc:	4610      	mov	r0, r2
 8009ade:	f7ff ff81 	bl	80099e4 <OV5640_WR_Reg>
	for(i=0;i<sizeof(ov5640_init_reg_tbl)/4;i++)
 8009ae2:	88fb      	ldrh	r3, [r7, #6]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	80fb      	strh	r3, [r7, #6]
 8009ae8:	88fb      	ldrh	r3, [r7, #6]
 8009aea:	2bce      	cmp	r3, #206	; 0xce
 8009aec:	d9eb      	bls.n	8009ac6 <OV5640_Init+0x76>
	} 

         HAL_Delay(50); 
 8009aee:	2032      	movs	r0, #50	; 0x32
 8009af0:	f7f7 fe32 	bl	8001758 <HAL_Delay>
        // Test for flash light
        OV5640_Flash_Lamp(1);
 8009af4:	2001      	movs	r0, #1
 8009af6:	f000 f992 	bl	8009e1e <OV5640_Flash_Lamp>
        HAL_Delay(50); 
 8009afa:	2032      	movs	r0, #50	; 0x32
 8009afc:	f7f7 fe2c 	bl	8001758 <HAL_Delay>
        OV5640_Flash_Lamp(0);        
 8009b00:	2000      	movs	r0, #0
 8009b02:	f000 f98c 	bl	8009e1e <OV5640_Flash_Lamp>
               
	return 0x00; 	//ok
 8009b06:	2300      	movs	r3, #0
} 
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	0800b218 	.word	0x0800b218
 8009b14:	0800b318 	.word	0x0800b318

08009b18 <OV5640_RGB565_Mode>:
		OV5640_WR_Reg(OV5640_jpeg_reg_tbl[i][0],OV5640_jpeg_reg_tbl[i][1]);  
	}  
}

void OV5640_RGB565_Mode(void) 
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
	uint16_t i=0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	80fb      	strh	r3, [r7, #6]

	for(i=0;i<(sizeof(ov5640_rgb565_reg_tbl)/4);i++)
 8009b22:	2300      	movs	r3, #0
 8009b24:	80fb      	strh	r3, [r7, #6]
 8009b26:	e010      	b.n	8009b4a <OV5640_RGB565_Mode+0x32>
	{
		OV5640_WR_Reg(ov5640_rgb565_reg_tbl[i][0],ov5640_rgb565_reg_tbl[i][1]); 
 8009b28:	88fb      	ldrh	r3, [r7, #6]
 8009b2a:	4a0c      	ldr	r2, [pc, #48]	; (8009b5c <OV5640_RGB565_Mode+0x44>)
 8009b2c:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8009b30:	88fb      	ldrh	r3, [r7, #6]
 8009b32:	490a      	ldr	r1, [pc, #40]	; (8009b5c <OV5640_RGB565_Mode+0x44>)
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	440b      	add	r3, r1
 8009b38:	885b      	ldrh	r3, [r3, #2]
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4610      	mov	r0, r2
 8009b40:	f7ff ff50 	bl	80099e4 <OV5640_WR_Reg>
	for(i=0;i<(sizeof(ov5640_rgb565_reg_tbl)/4);i++)
 8009b44:	88fb      	ldrh	r3, [r7, #6]
 8009b46:	3301      	adds	r3, #1
 8009b48:	80fb      	strh	r3, [r7, #6]
 8009b4a:	88fb      	ldrh	r3, [r7, #6]
 8009b4c:	2b2c      	cmp	r3, #44	; 0x2c
 8009b4e:	d9eb      	bls.n	8009b28 <OV5640_RGB565_Mode+0x10>
	} 
} 
 8009b50:	bf00      	nop
 8009b52:	bf00      	nop
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	0800b264 	.word	0x0800b264

08009b60 <OV5640_Light_Mode>:
//      1: sunny
//      2: office
//      3: cloudy
//      4: home
void OV5640_Light_Mode(uint8_t mode)
{
 8009b60:	b590      	push	{r4, r7, lr}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	4603      	mov	r3, r0
 8009b68:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	OV5640_WR_Reg(0x3212,0x03);	//start group 3
 8009b6a:	2103      	movs	r1, #3
 8009b6c:	f243 2012 	movw	r0, #12818	; 0x3212
 8009b70:	f7ff ff38 	bl	80099e4 <OV5640_WR_Reg>
	for(i=0;i<7;i++)OV5640_WR_Reg(0x3400+i,OV5640_LIGHTMODE_TBL[mode][i]); 
 8009b74:	2300      	movs	r3, #0
 8009b76:	73fb      	strb	r3, [r7, #15]
 8009b78:	e013      	b.n	8009ba2 <OV5640_Light_Mode+0x42>
 8009b7a:	7bfb      	ldrb	r3, [r7, #15]
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8009b82:	b298      	uxth	r0, r3
 8009b84:	79fa      	ldrb	r2, [r7, #7]
 8009b86:	7bf9      	ldrb	r1, [r7, #15]
 8009b88:	4c0e      	ldr	r4, [pc, #56]	; (8009bc4 <OV5640_Light_Mode+0x64>)
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	00db      	lsls	r3, r3, #3
 8009b8e:	1a9b      	subs	r3, r3, r2
 8009b90:	4423      	add	r3, r4
 8009b92:	440b      	add	r3, r1
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	4619      	mov	r1, r3
 8009b98:	f7ff ff24 	bl	80099e4 <OV5640_WR_Reg>
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	73fb      	strb	r3, [r7, #15]
 8009ba2:	7bfb      	ldrb	r3, [r7, #15]
 8009ba4:	2b06      	cmp	r3, #6
 8009ba6:	d9e8      	bls.n	8009b7a <OV5640_Light_Mode+0x1a>
	OV5640_WR_Reg(0x3212,0x13); //end group 3
 8009ba8:	2113      	movs	r1, #19
 8009baa:	f243 2012 	movw	r0, #12818	; 0x3212
 8009bae:	f7ff ff19 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0xa3); //launch group 3	
 8009bb2:	21a3      	movs	r1, #163	; 0xa3
 8009bb4:	f243 2012 	movw	r0, #12818	; 0x3212
 8009bb8:	f7ff ff14 	bl	80099e4 <OV5640_WR_Reg>
}
 8009bbc:	bf00      	nop
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd90      	pop	{r4, r7, pc}
 8009bc4:	0800c644 	.word	0x0800c644

08009bc8 <OV5640_Color_Saturation>:


// Color Saturation: 
//   sat:  0 - 6 
void OV5640_Color_Saturation(uint8_t sat)
{ 
 8009bc8:	b590      	push	{r4, r7, lr}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	4603      	mov	r3, r0
 8009bd0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	OV5640_WR_Reg(0x3212,0x03);	//start group 3
 8009bd2:	2103      	movs	r1, #3
 8009bd4:	f243 2012 	movw	r0, #12818	; 0x3212
 8009bd8:	f7ff ff04 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5381,0x1c);
 8009bdc:	211c      	movs	r1, #28
 8009bde:	f245 3081 	movw	r0, #21377	; 0x5381
 8009be2:	f7ff feff 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5382,0x5a);
 8009be6:	215a      	movs	r1, #90	; 0x5a
 8009be8:	f245 3082 	movw	r0, #21378	; 0x5382
 8009bec:	f7ff fefa 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5383,0x06);
 8009bf0:	2106      	movs	r1, #6
 8009bf2:	f245 3083 	movw	r0, #21379	; 0x5383
 8009bf6:	f7ff fef5 	bl	80099e4 <OV5640_WR_Reg>
	for(i=0;i<6;i++)  OV5640_WR_Reg(0x5384+i,OV5640_SATURATION_TBL[sat][i]);    
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	73fb      	strb	r3, [r7, #15]
 8009bfe:	e015      	b.n	8009c2c <OV5640_Color_Saturation+0x64>
 8009c00:	7bfb      	ldrb	r3, [r7, #15]
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	f245 3384 	movw	r3, #21380	; 0x5384
 8009c08:	4413      	add	r3, r2
 8009c0a:	b298      	uxth	r0, r3
 8009c0c:	79fa      	ldrb	r2, [r7, #7]
 8009c0e:	7bf9      	ldrb	r1, [r7, #15]
 8009c10:	4c14      	ldr	r4, [pc, #80]	; (8009c64 <OV5640_Color_Saturation+0x9c>)
 8009c12:	4613      	mov	r3, r2
 8009c14:	005b      	lsls	r3, r3, #1
 8009c16:	4413      	add	r3, r2
 8009c18:	005b      	lsls	r3, r3, #1
 8009c1a:	4423      	add	r3, r4
 8009c1c:	440b      	add	r3, r1
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	4619      	mov	r1, r3
 8009c22:	f7ff fedf 	bl	80099e4 <OV5640_WR_Reg>
 8009c26:	7bfb      	ldrb	r3, [r7, #15]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	73fb      	strb	r3, [r7, #15]
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
 8009c2e:	2b05      	cmp	r3, #5
 8009c30:	d9e6      	bls.n	8009c00 <OV5640_Color_Saturation+0x38>
	OV5640_WR_Reg(0x538b, 0x98);
 8009c32:	2198      	movs	r1, #152	; 0x98
 8009c34:	f245 308b 	movw	r0, #21387	; 0x538b
 8009c38:	f7ff fed4 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x538a, 0x01);
 8009c3c:	2101      	movs	r1, #1
 8009c3e:	f245 308a 	movw	r0, #21386	; 0x538a
 8009c42:	f7ff fecf 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212, 0x13); //end group 3
 8009c46:	2113      	movs	r1, #19
 8009c48:	f243 2012 	movw	r0, #12818	; 0x3212
 8009c4c:	f7ff feca 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212, 0xa3); //launch group 3	
 8009c50:	21a3      	movs	r1, #163	; 0xa3
 8009c52:	f243 2012 	movw	r0, #12818	; 0x3212
 8009c56:	f7ff fec5 	bl	80099e4 <OV5640_WR_Reg>
}
 8009c5a:	bf00      	nop
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd90      	pop	{r4, r7, pc}
 8009c62:	bf00      	nop
 8009c64:	0800c668 	.word	0x0800c668

08009c68 <OV5640_Brightness>:

//Brightness
//     bright:  0 - 8
void OV5640_Brightness(uint8_t bright)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	4603      	mov	r3, r0
 8009c70:	71fb      	strb	r3, [r7, #7]
	uint8_t brtval;
	if(bright<4)brtval=4-bright;
 8009c72:	79fb      	ldrb	r3, [r7, #7]
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	d804      	bhi.n	8009c82 <OV5640_Brightness+0x1a>
 8009c78:	79fb      	ldrb	r3, [r7, #7]
 8009c7a:	f1c3 0304 	rsb	r3, r3, #4
 8009c7e:	73fb      	strb	r3, [r7, #15]
 8009c80:	e002      	b.n	8009c88 <OV5640_Brightness+0x20>
	else brtval=bright-4;
 8009c82:	79fb      	ldrb	r3, [r7, #7]
 8009c84:	3b04      	subs	r3, #4
 8009c86:	73fb      	strb	r3, [r7, #15]
	OV5640_WR_Reg(0x3212,0x03);	//start group 3
 8009c88:	2103      	movs	r1, #3
 8009c8a:	f243 2012 	movw	r0, #12818	; 0x3212
 8009c8e:	f7ff fea9 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5587,brtval<<4);
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
 8009c94:	011b      	lsls	r3, r3, #4
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	4619      	mov	r1, r3
 8009c9a:	f245 5087 	movw	r0, #21895	; 0x5587
 8009c9e:	f7ff fea1 	bl	80099e4 <OV5640_WR_Reg>
	if(bright<4)OV5640_WR_Reg(0x5588,0x09);
 8009ca2:	79fb      	ldrb	r3, [r7, #7]
 8009ca4:	2b03      	cmp	r3, #3
 8009ca6:	d805      	bhi.n	8009cb4 <OV5640_Brightness+0x4c>
 8009ca8:	2109      	movs	r1, #9
 8009caa:	f245 5088 	movw	r0, #21896	; 0x5588
 8009cae:	f7ff fe99 	bl	80099e4 <OV5640_WR_Reg>
 8009cb2:	e004      	b.n	8009cbe <OV5640_Brightness+0x56>
	else OV5640_WR_Reg(0x5588,0x01);
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	f245 5088 	movw	r0, #21896	; 0x5588
 8009cba:	f7ff fe93 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0x13); //end group 3
 8009cbe:	2113      	movs	r1, #19
 8009cc0:	f243 2012 	movw	r0, #12818	; 0x3212
 8009cc4:	f7ff fe8e 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0xa3); //launch group 3
 8009cc8:	21a3      	movs	r1, #163	; 0xa3
 8009cca:	f243 2012 	movw	r0, #12818	; 0x3212
 8009cce:	f7ff fe89 	bl	80099e4 <OV5640_WR_Reg>
}
 8009cd2:	bf00      	nop
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
	...

08009cdc <OV5640_Contrast>:

//Contrast:
//     contrast:  0 - 6
void OV5640_Contrast(uint8_t contrast)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg0val=0X00;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	73fb      	strb	r3, [r7, #15]
	uint8_t reg1val=0X20;
 8009cea:	2320      	movs	r3, #32
 8009cec:	73bb      	strb	r3, [r7, #14]
	switch(contrast)
 8009cee:	79fb      	ldrb	r3, [r7, #7]
 8009cf0:	2b06      	cmp	r3, #6
 8009cf2:	d82f      	bhi.n	8009d54 <OV5640_Contrast+0x78>
 8009cf4:	a201      	add	r2, pc, #4	; (adr r2, 8009cfc <OV5640_Contrast+0x20>)
 8009cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfa:	bf00      	nop
 8009cfc:	08009d19 	.word	0x08009d19
 8009d00:	08009d23 	.word	0x08009d23
 8009d04:	08009d2d 	.word	0x08009d2d
 8009d08:	08009d55 	.word	0x08009d55
 8009d0c:	08009d37 	.word	0x08009d37
 8009d10:	08009d41 	.word	0x08009d41
 8009d14:	08009d4b 	.word	0x08009d4b
	{
		case 0://-3
			reg1val=reg0val=0X14;	 	 
 8009d18:	2314      	movs	r3, #20
 8009d1a:	73fb      	strb	r3, [r7, #15]
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
 8009d1e:	73bb      	strb	r3, [r7, #14]
			break;	
 8009d20:	e018      	b.n	8009d54 <OV5640_Contrast+0x78>
		case 1://-2
			reg1val=reg0val=0X18; 	 
 8009d22:	2318      	movs	r3, #24
 8009d24:	73fb      	strb	r3, [r7, #15]
 8009d26:	7bfb      	ldrb	r3, [r7, #15]
 8009d28:	73bb      	strb	r3, [r7, #14]
			break;	
 8009d2a:	e013      	b.n	8009d54 <OV5640_Contrast+0x78>
		case 2://-1
			reg1val=reg0val=0X1C;	 
 8009d2c:	231c      	movs	r3, #28
 8009d2e:	73fb      	strb	r3, [r7, #15]
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
 8009d32:	73bb      	strb	r3, [r7, #14]
			break;	
 8009d34:	e00e      	b.n	8009d54 <OV5640_Contrast+0x78>
		case 4://1
			reg0val=0X10;	 	 
 8009d36:	2310      	movs	r3, #16
 8009d38:	73fb      	strb	r3, [r7, #15]
			reg1val=0X24;	 	 
 8009d3a:	2324      	movs	r3, #36	; 0x24
 8009d3c:	73bb      	strb	r3, [r7, #14]
			break;	
 8009d3e:	e009      	b.n	8009d54 <OV5640_Contrast+0x78>
		case 5://2
			reg0val=0X18;	 	 
 8009d40:	2318      	movs	r3, #24
 8009d42:	73fb      	strb	r3, [r7, #15]
			reg1val=0X28;	 	 
 8009d44:	2328      	movs	r3, #40	; 0x28
 8009d46:	73bb      	strb	r3, [r7, #14]
			break;	
 8009d48:	e004      	b.n	8009d54 <OV5640_Contrast+0x78>
		case 6://3
			reg0val=0X1C;	 	 
 8009d4a:	231c      	movs	r3, #28
 8009d4c:	73fb      	strb	r3, [r7, #15]
			reg1val=0X2C;	 	 
 8009d4e:	232c      	movs	r3, #44	; 0x2c
 8009d50:	73bb      	strb	r3, [r7, #14]
			break;	
 8009d52:	bf00      	nop
	} 
	OV5640_WR_Reg(0x3212,0x03); //start group 3
 8009d54:	2103      	movs	r1, #3
 8009d56:	f243 2012 	movw	r0, #12818	; 0x3212
 8009d5a:	f7ff fe43 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5585,reg0val);
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
 8009d60:	4619      	mov	r1, r3
 8009d62:	f245 5085 	movw	r0, #21893	; 0x5585
 8009d66:	f7ff fe3d 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5586,reg1val); 
 8009d6a:	7bbb      	ldrb	r3, [r7, #14]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	f245 5086 	movw	r0, #21894	; 0x5586
 8009d72:	f7ff fe37 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0x13); //end group 3
 8009d76:	2113      	movs	r1, #19
 8009d78:	f243 2012 	movw	r0, #12818	; 0x3212
 8009d7c:	f7ff fe32 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0xa3); //launch group 3
 8009d80:	21a3      	movs	r1, #163	; 0xa3
 8009d82:	f243 2012 	movw	r0, #12818	; 0x3212
 8009d86:	f7ff fe2d 	bl	80099e4 <OV5640_WR_Reg>
}
 8009d8a:	bf00      	nop
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop

08009d94 <OV5640_Sharpness>:
// Sharpness:
//    sharp: 0 - 33   (0: close , 33: auto , other: Sharpness)

void OV5640_Sharpness(uint8_t sharp)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	71fb      	strb	r3, [r7, #7]
	if(sharp<33)
 8009d9e:	79fb      	ldrb	r3, [r7, #7]
 8009da0:	2b20      	cmp	r3, #32
 8009da2:	d80b      	bhi.n	8009dbc <OV5640_Sharpness+0x28>
	{
		OV5640_WR_Reg(0x5308,0x65);
 8009da4:	2165      	movs	r1, #101	; 0x65
 8009da6:	f245 3008 	movw	r0, #21256	; 0x5308
 8009daa:	f7ff fe1b 	bl	80099e4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5302,sharp);
 8009dae:	79fb      	ldrb	r3, [r7, #7]
 8009db0:	4619      	mov	r1, r3
 8009db2:	f245 3002 	movw	r0, #21250	; 0x5302
 8009db6:	f7ff fe15 	bl	80099e4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x530a,0x30);
		OV5640_WR_Reg(0x530b,0x04);
		OV5640_WR_Reg(0x530c,0x06);
	}
	
}
 8009dba:	e02c      	b.n	8009e16 <OV5640_Sharpness+0x82>
		OV5640_WR_Reg(0x5308,0x25);
 8009dbc:	2125      	movs	r1, #37	; 0x25
 8009dbe:	f245 3008 	movw	r0, #21256	; 0x5308
 8009dc2:	f7ff fe0f 	bl	80099e4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5300,0x08);
 8009dc6:	2108      	movs	r1, #8
 8009dc8:	f44f 40a6 	mov.w	r0, #21248	; 0x5300
 8009dcc:	f7ff fe0a 	bl	80099e4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5301,0x30);
 8009dd0:	2130      	movs	r1, #48	; 0x30
 8009dd2:	f245 3001 	movw	r0, #21249	; 0x5301
 8009dd6:	f7ff fe05 	bl	80099e4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5302,0x10);
 8009dda:	2110      	movs	r1, #16
 8009ddc:	f245 3002 	movw	r0, #21250	; 0x5302
 8009de0:	f7ff fe00 	bl	80099e4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5303,0x00);
 8009de4:	2100      	movs	r1, #0
 8009de6:	f245 3003 	movw	r0, #21251	; 0x5303
 8009dea:	f7ff fdfb 	bl	80099e4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5309,0x08);
 8009dee:	2108      	movs	r1, #8
 8009df0:	f245 3009 	movw	r0, #21257	; 0x5309
 8009df4:	f7ff fdf6 	bl	80099e4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x530a,0x30);
 8009df8:	2130      	movs	r1, #48	; 0x30
 8009dfa:	f245 300a 	movw	r0, #21258	; 0x530a
 8009dfe:	f7ff fdf1 	bl	80099e4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x530b,0x04);
 8009e02:	2104      	movs	r1, #4
 8009e04:	f245 300b 	movw	r0, #21259	; 0x530b
 8009e08:	f7ff fdec 	bl	80099e4 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x530c,0x06);
 8009e0c:	2106      	movs	r1, #6
 8009e0e:	f245 300c 	movw	r0, #21260	; 0x530c
 8009e12:	f7ff fde7 	bl	80099e4 <OV5640_WR_Reg>
}
 8009e16:	bf00      	nop
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <OV5640_Flash_Lamp>:

// Flash Lamp
//  sw:  0: off
//       1:  on
void OV5640_Flash_Lamp(uint8_t sw)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b082      	sub	sp, #8
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	4603      	mov	r3, r0
 8009e26:	71fb      	strb	r3, [r7, #7]
	OV5640_WR_Reg(0x3016,0X02);
 8009e28:	2102      	movs	r1, #2
 8009e2a:	f243 0016 	movw	r0, #12310	; 0x3016
 8009e2e:	f7ff fdd9 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x301C,0X02); 
 8009e32:	2102      	movs	r1, #2
 8009e34:	f243 001c 	movw	r0, #12316	; 0x301c
 8009e38:	f7ff fdd4 	bl	80099e4 <OV5640_WR_Reg>
	if(sw)OV5640_WR_Reg(0X3019,0X02); 
 8009e3c:	79fb      	ldrb	r3, [r7, #7]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d005      	beq.n	8009e4e <OV5640_Flash_Lamp+0x30>
 8009e42:	2102      	movs	r1, #2
 8009e44:	f243 0019 	movw	r0, #12313	; 0x3019
 8009e48:	f7ff fdcc 	bl	80099e4 <OV5640_WR_Reg>
	else OV5640_WR_Reg(0X3019,0X00);
} 
 8009e4c:	e004      	b.n	8009e58 <OV5640_Flash_Lamp+0x3a>
	else OV5640_WR_Reg(0X3019,0X00);
 8009e4e:	2100      	movs	r1, #0
 8009e50:	f243 0019 	movw	r0, #12313	; 0x3019
 8009e54:	f7ff fdc6 	bl	80099e4 <OV5640_WR_Reg>
} 
 8009e58:	bf00      	nop
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <OV5640_OutSize_Set>:

// set the output size
uint8_t OV5640_OutSize_Set(uint16_t offx,uint16_t offy,uint16_t width,uint16_t height)
{ 
 8009e60:	b590      	push	{r4, r7, lr}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	4604      	mov	r4, r0
 8009e68:	4608      	mov	r0, r1
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4623      	mov	r3, r4
 8009e70:	80fb      	strh	r3, [r7, #6]
 8009e72:	4603      	mov	r3, r0
 8009e74:	80bb      	strh	r3, [r7, #4]
 8009e76:	460b      	mov	r3, r1
 8009e78:	807b      	strh	r3, [r7, #2]
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	803b      	strh	r3, [r7, #0]
        OV5640_WR_Reg(0X3212,0X03);  	
 8009e7e:	2103      	movs	r1, #3
 8009e80:	f243 2012 	movw	r0, #12818	; 0x3212
 8009e84:	f7ff fdae 	bl	80099e4 <OV5640_WR_Reg>

        OV5640_WR_Reg(0x3808,width>>8);	
 8009e88:	887b      	ldrh	r3, [r7, #2]
 8009e8a:	0a1b      	lsrs	r3, r3, #8
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	4619      	mov	r1, r3
 8009e92:	f643 0008 	movw	r0, #14344	; 0x3808
 8009e96:	f7ff fda5 	bl	80099e4 <OV5640_WR_Reg>
        OV5640_WR_Reg(0x3809,width&0xff);
 8009e9a:	887b      	ldrh	r3, [r7, #2]
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	f643 0009 	movw	r0, #14345	; 0x3809
 8009ea4:	f7ff fd9e 	bl	80099e4 <OV5640_WR_Reg>
        OV5640_WR_Reg(0x380a,height>>8);
 8009ea8:	883b      	ldrh	r3, [r7, #0]
 8009eaa:	0a1b      	lsrs	r3, r3, #8
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	f643 000a 	movw	r0, #14346	; 0x380a
 8009eb6:	f7ff fd95 	bl	80099e4 <OV5640_WR_Reg>
        OV5640_WR_Reg(0x380b,height&0xff);
 8009eba:	883b      	ldrh	r3, [r7, #0]
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	f643 000b 	movw	r0, #14347	; 0x380b
 8009ec4:	f7ff fd8e 	bl	80099e4 <OV5640_WR_Reg>

        OV5640_WR_Reg(0x3810,offx>>8);	
 8009ec8:	88fb      	ldrh	r3, [r7, #6]
 8009eca:	0a1b      	lsrs	r3, r3, #8
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	f643 0010 	movw	r0, #14352	; 0x3810
 8009ed6:	f7ff fd85 	bl	80099e4 <OV5640_WR_Reg>
        OV5640_WR_Reg(0x3811,offx&0xff);
 8009eda:	88fb      	ldrh	r3, [r7, #6]
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	4619      	mov	r1, r3
 8009ee0:	f643 0011 	movw	r0, #14353	; 0x3811
 8009ee4:	f7ff fd7e 	bl	80099e4 <OV5640_WR_Reg>

        OV5640_WR_Reg(0x3812,offy>>8);	
 8009ee8:	88bb      	ldrh	r3, [r7, #4]
 8009eea:	0a1b      	lsrs	r3, r3, #8
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	f643 0012 	movw	r0, #14354	; 0x3812
 8009ef6:	f7ff fd75 	bl	80099e4 <OV5640_WR_Reg>
        OV5640_WR_Reg(0x3813,offy&0xff);
 8009efa:	88bb      	ldrh	r3, [r7, #4]
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	4619      	mov	r1, r3
 8009f00:	f643 0013 	movw	r0, #14355	; 0x3813
 8009f04:	f7ff fd6e 	bl	80099e4 <OV5640_WR_Reg>

        OV5640_WR_Reg(0X3212,0X13);		
 8009f08:	2113      	movs	r1, #19
 8009f0a:	f243 2012 	movw	r0, #12818	; 0x3212
 8009f0e:	f7ff fd69 	bl	80099e4 <OV5640_WR_Reg>
        OV5640_WR_Reg(0X3212,0Xa3);		
 8009f12:	21a3      	movs	r1, #163	; 0xa3
 8009f14:	f243 2012 	movw	r0, #12818	; 0x3212
 8009f18:	f7ff fd64 	bl	80099e4 <OV5640_WR_Reg>
        
        return 0; 
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	370c      	adds	r7, #12
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd90      	pop	{r4, r7, pc}
	...

08009f28 <OV5640_Focus_Init>:


uint8_t OV5640_Focus_Init(void)
{ 
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
	uint16_t i; 
	uint16_t addr=0x8000;
 8009f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f32:	80bb      	strh	r3, [r7, #4]
	uint8_t state=0x8F;
 8009f34:	238f      	movs	r3, #143	; 0x8f
 8009f36:	70fb      	strb	r3, [r7, #3]
	OV5640_WR_Reg(0x3000, 0x20);	//reset 	 
 8009f38:	2120      	movs	r1, #32
 8009f3a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8009f3e:	f7ff fd51 	bl	80099e4 <OV5640_WR_Reg>
	for(i=0;i<sizeof(OV5640_AF_Config);i++) 
 8009f42:	2300      	movs	r3, #0
 8009f44:	80fb      	strh	r3, [r7, #6]
 8009f46:	e00d      	b.n	8009f64 <OV5640_Focus_Init+0x3c>
	{
		OV5640_WR_Reg(addr,OV5640_AF_Config[i]);
 8009f48:	88fb      	ldrh	r3, [r7, #6]
 8009f4a:	4a2d      	ldr	r2, [pc, #180]	; (800a000 <OV5640_Focus_Init+0xd8>)
 8009f4c:	5cd2      	ldrb	r2, [r2, r3]
 8009f4e:	88bb      	ldrh	r3, [r7, #4]
 8009f50:	4611      	mov	r1, r2
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7ff fd46 	bl	80099e4 <OV5640_WR_Reg>
		addr++;
 8009f58:	88bb      	ldrh	r3, [r7, #4]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	80bb      	strh	r3, [r7, #4]
	for(i=0;i<sizeof(OV5640_AF_Config);i++) 
 8009f5e:	88fb      	ldrh	r3, [r7, #6]
 8009f60:	3301      	adds	r3, #1
 8009f62:	80fb      	strh	r3, [r7, #6]
 8009f64:	88fb      	ldrh	r3, [r7, #6]
 8009f66:	f640 72ec 	movw	r2, #4076	; 0xfec
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d9ec      	bls.n	8009f48 <OV5640_Focus_Init+0x20>
	}  
	OV5640_WR_Reg(0x3022,0x00);
 8009f6e:	2100      	movs	r1, #0
 8009f70:	f243 0022 	movw	r0, #12322	; 0x3022
 8009f74:	f7ff fd36 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3023,0x00);
 8009f78:	2100      	movs	r1, #0
 8009f7a:	f243 0023 	movw	r0, #12323	; 0x3023
 8009f7e:	f7ff fd31 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3024,0x00);
 8009f82:	2100      	movs	r1, #0
 8009f84:	f243 0024 	movw	r0, #12324	; 0x3024
 8009f88:	f7ff fd2c 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3025,0x00);
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	f243 0025 	movw	r0, #12325	; 0x3025
 8009f92:	f7ff fd27 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3026,0x00);
 8009f96:	2100      	movs	r1, #0
 8009f98:	f243 0026 	movw	r0, #12326	; 0x3026
 8009f9c:	f7ff fd22 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3027,0x00);
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	f243 0027 	movw	r0, #12327	; 0x3027
 8009fa6:	f7ff fd1d 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3028,0x00);
 8009faa:	2100      	movs	r1, #0
 8009fac:	f243 0028 	movw	r0, #12328	; 0x3028
 8009fb0:	f7ff fd18 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3029,0x7f);
 8009fb4:	217f      	movs	r1, #127	; 0x7f
 8009fb6:	f243 0029 	movw	r0, #12329	; 0x3029
 8009fba:	f7ff fd13 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3000,0x00); 
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8009fc4:	f7ff fd0e 	bl	80099e4 <OV5640_WR_Reg>
	i=0;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	80fb      	strh	r3, [r7, #6]
	do
	{
		state=OV5640_RD_Reg(0x3029);	
 8009fcc:	f243 0029 	movw	r0, #12329	; 0x3029
 8009fd0:	f7ff fd20 	bl	8009a14 <OV5640_RD_Reg>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	70fb      	strb	r3, [r7, #3]
		HAL_Delay(5);
 8009fd8:	2005      	movs	r0, #5
 8009fda:	f7f7 fbbd 	bl	8001758 <HAL_Delay>
		i++;
 8009fde:	88fb      	ldrh	r3, [r7, #6]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	80fb      	strh	r3, [r7, #6]
		if(i>1000)return 1;
 8009fe4:	88fb      	ldrh	r3, [r7, #6]
 8009fe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fea:	d901      	bls.n	8009ff0 <OV5640_Focus_Init+0xc8>
 8009fec:	2301      	movs	r3, #1
 8009fee:	e003      	b.n	8009ff8 <OV5640_Focus_Init+0xd0>
	}while(state!=0x70); 
 8009ff0:	78fb      	ldrb	r3, [r7, #3]
 8009ff2:	2b70      	cmp	r3, #112	; 0x70
 8009ff4:	d1ea      	bne.n	8009fcc <OV5640_Focus_Init+0xa4>
	return 0;    
 8009ff6:	2300      	movs	r3, #0
}  
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	0800b654 	.word	0x0800b654

0800a004 <OV5640_Auto_Focus>:

uint8_t OV5640_Auto_Focus(void)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
	uint8_t temp=0;   
 800a00a:	2300      	movs	r3, #0
 800a00c:	717b      	strb	r3, [r7, #5]
	uint16_t retry=0; 
 800a00e:	2300      	movs	r3, #0
 800a010:	80fb      	strh	r3, [r7, #6]
	OV5640_WR_Reg(0x3023,0x01);
 800a012:	2101      	movs	r1, #1
 800a014:	f243 0023 	movw	r0, #12323	; 0x3023
 800a018:	f7ff fce4 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3022,0x08);
 800a01c:	2108      	movs	r1, #8
 800a01e:	f243 0022 	movw	r0, #12322	; 0x3022
 800a022:	f7ff fcdf 	bl	80099e4 <OV5640_WR_Reg>
	do 
	{
		temp=OV5640_RD_Reg(0x3023); 
 800a026:	f243 0023 	movw	r0, #12323	; 0x3023
 800a02a:	f7ff fcf3 	bl	8009a14 <OV5640_RD_Reg>
 800a02e:	4603      	mov	r3, r0
 800a030:	717b      	strb	r3, [r7, #5]
		retry++;
 800a032:	88fb      	ldrh	r3, [r7, #6]
 800a034:	3301      	adds	r3, #1
 800a036:	80fb      	strh	r3, [r7, #6]
		if(retry>1000)return 2;
 800a038:	88fb      	ldrh	r3, [r7, #6]
 800a03a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a03e:	d901      	bls.n	800a044 <OV5640_Auto_Focus+0x40>
 800a040:	2302      	movs	r3, #2
 800a042:	e027      	b.n	800a094 <OV5640_Auto_Focus+0x90>
		HAL_Delay(5);
 800a044:	2005      	movs	r0, #5
 800a046:	f7f7 fb87 	bl	8001758 <HAL_Delay>
	} while(temp!=0x00);   
 800a04a:	797b      	ldrb	r3, [r7, #5]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1ea      	bne.n	800a026 <OV5640_Auto_Focus+0x22>
	OV5640_WR_Reg(0x3023,0x01);
 800a050:	2101      	movs	r1, #1
 800a052:	f243 0023 	movw	r0, #12323	; 0x3023
 800a056:	f7ff fcc5 	bl	80099e4 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3022,0x04);
 800a05a:	2104      	movs	r1, #4
 800a05c:	f243 0022 	movw	r0, #12322	; 0x3022
 800a060:	f7ff fcc0 	bl	80099e4 <OV5640_WR_Reg>
	retry=0;
 800a064:	2300      	movs	r3, #0
 800a066:	80fb      	strh	r3, [r7, #6]
	do 
	{
		temp=OV5640_RD_Reg(0x3023); 
 800a068:	f243 0023 	movw	r0, #12323	; 0x3023
 800a06c:	f7ff fcd2 	bl	8009a14 <OV5640_RD_Reg>
 800a070:	4603      	mov	r3, r0
 800a072:	717b      	strb	r3, [r7, #5]
		retry++;
 800a074:	88fb      	ldrh	r3, [r7, #6]
 800a076:	3301      	adds	r3, #1
 800a078:	80fb      	strh	r3, [r7, #6]
		if(retry>1000)return 2;
 800a07a:	88fb      	ldrh	r3, [r7, #6]
 800a07c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a080:	d901      	bls.n	800a086 <OV5640_Auto_Focus+0x82>
 800a082:	2302      	movs	r3, #2
 800a084:	e006      	b.n	800a094 <OV5640_Auto_Focus+0x90>
		HAL_Delay(5);
 800a086:	2005      	movs	r0, #5
 800a088:	f7f7 fb66 	bl	8001758 <HAL_Delay>
	}while(temp!=0x00);
 800a08c:	797b      	ldrb	r3, [r7, #5]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1ea      	bne.n	800a068 <OV5640_Auto_Focus+0x64>
	return 0;
 800a092:	2300      	movs	r3, #0
} 
 800a094:	4618      	mov	r0, r3
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <__errno>:
 800a09c:	4b01      	ldr	r3, [pc, #4]	; (800a0a4 <__errno+0x8>)
 800a09e:	6818      	ldr	r0, [r3, #0]
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	24000010 	.word	0x24000010

0800a0a8 <__libc_init_array>:
 800a0a8:	b570      	push	{r4, r5, r6, lr}
 800a0aa:	4d0d      	ldr	r5, [pc, #52]	; (800a0e0 <__libc_init_array+0x38>)
 800a0ac:	4c0d      	ldr	r4, [pc, #52]	; (800a0e4 <__libc_init_array+0x3c>)
 800a0ae:	1b64      	subs	r4, r4, r5
 800a0b0:	10a4      	asrs	r4, r4, #2
 800a0b2:	2600      	movs	r6, #0
 800a0b4:	42a6      	cmp	r6, r4
 800a0b6:	d109      	bne.n	800a0cc <__libc_init_array+0x24>
 800a0b8:	4d0b      	ldr	r5, [pc, #44]	; (800a0e8 <__libc_init_array+0x40>)
 800a0ba:	4c0c      	ldr	r4, [pc, #48]	; (800a0ec <__libc_init_array+0x44>)
 800a0bc:	f001 f824 	bl	800b108 <_init>
 800a0c0:	1b64      	subs	r4, r4, r5
 800a0c2:	10a4      	asrs	r4, r4, #2
 800a0c4:	2600      	movs	r6, #0
 800a0c6:	42a6      	cmp	r6, r4
 800a0c8:	d105      	bne.n	800a0d6 <__libc_init_array+0x2e>
 800a0ca:	bd70      	pop	{r4, r5, r6, pc}
 800a0cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0d0:	4798      	blx	r3
 800a0d2:	3601      	adds	r6, #1
 800a0d4:	e7ee      	b.n	800a0b4 <__libc_init_array+0xc>
 800a0d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0da:	4798      	blx	r3
 800a0dc:	3601      	adds	r6, #1
 800a0de:	e7f2      	b.n	800a0c6 <__libc_init_array+0x1e>
 800a0e0:	0800c734 	.word	0x0800c734
 800a0e4:	0800c734 	.word	0x0800c734
 800a0e8:	0800c734 	.word	0x0800c734
 800a0ec:	0800c738 	.word	0x0800c738

0800a0f0 <memset>:
 800a0f0:	4402      	add	r2, r0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d100      	bne.n	800a0fa <memset+0xa>
 800a0f8:	4770      	bx	lr
 800a0fa:	f803 1b01 	strb.w	r1, [r3], #1
 800a0fe:	e7f9      	b.n	800a0f4 <memset+0x4>

0800a100 <iprintf>:
 800a100:	b40f      	push	{r0, r1, r2, r3}
 800a102:	4b0a      	ldr	r3, [pc, #40]	; (800a12c <iprintf+0x2c>)
 800a104:	b513      	push	{r0, r1, r4, lr}
 800a106:	681c      	ldr	r4, [r3, #0]
 800a108:	b124      	cbz	r4, 800a114 <iprintf+0x14>
 800a10a:	69a3      	ldr	r3, [r4, #24]
 800a10c:	b913      	cbnz	r3, 800a114 <iprintf+0x14>
 800a10e:	4620      	mov	r0, r4
 800a110:	f000 f894 	bl	800a23c <__sinit>
 800a114:	ab05      	add	r3, sp, #20
 800a116:	9a04      	ldr	r2, [sp, #16]
 800a118:	68a1      	ldr	r1, [r4, #8]
 800a11a:	9301      	str	r3, [sp, #4]
 800a11c:	4620      	mov	r0, r4
 800a11e:	f000 f9eb 	bl	800a4f8 <_vfiprintf_r>
 800a122:	b002      	add	sp, #8
 800a124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a128:	b004      	add	sp, #16
 800a12a:	4770      	bx	lr
 800a12c:	24000010 	.word	0x24000010

0800a130 <putchar>:
 800a130:	4b09      	ldr	r3, [pc, #36]	; (800a158 <putchar+0x28>)
 800a132:	b513      	push	{r0, r1, r4, lr}
 800a134:	681c      	ldr	r4, [r3, #0]
 800a136:	4601      	mov	r1, r0
 800a138:	b134      	cbz	r4, 800a148 <putchar+0x18>
 800a13a:	69a3      	ldr	r3, [r4, #24]
 800a13c:	b923      	cbnz	r3, 800a148 <putchar+0x18>
 800a13e:	9001      	str	r0, [sp, #4]
 800a140:	4620      	mov	r0, r4
 800a142:	f000 f87b 	bl	800a23c <__sinit>
 800a146:	9901      	ldr	r1, [sp, #4]
 800a148:	68a2      	ldr	r2, [r4, #8]
 800a14a:	4620      	mov	r0, r4
 800a14c:	b002      	add	sp, #8
 800a14e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a152:	f000 bc95 	b.w	800aa80 <_putc_r>
 800a156:	bf00      	nop
 800a158:	24000010 	.word	0x24000010

0800a15c <viprintf>:
 800a15c:	b513      	push	{r0, r1, r4, lr}
 800a15e:	460b      	mov	r3, r1
 800a160:	4909      	ldr	r1, [pc, #36]	; (800a188 <viprintf+0x2c>)
 800a162:	680c      	ldr	r4, [r1, #0]
 800a164:	4602      	mov	r2, r0
 800a166:	b144      	cbz	r4, 800a17a <viprintf+0x1e>
 800a168:	69a1      	ldr	r1, [r4, #24]
 800a16a:	b931      	cbnz	r1, 800a17a <viprintf+0x1e>
 800a16c:	e9cd 0300 	strd	r0, r3, [sp]
 800a170:	4620      	mov	r0, r4
 800a172:	f000 f863 	bl	800a23c <__sinit>
 800a176:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a17a:	68a1      	ldr	r1, [r4, #8]
 800a17c:	4620      	mov	r0, r4
 800a17e:	b002      	add	sp, #8
 800a180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a184:	f000 b9b8 	b.w	800a4f8 <_vfiprintf_r>
 800a188:	24000010 	.word	0x24000010

0800a18c <std>:
 800a18c:	2300      	movs	r3, #0
 800a18e:	b510      	push	{r4, lr}
 800a190:	4604      	mov	r4, r0
 800a192:	e9c0 3300 	strd	r3, r3, [r0]
 800a196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a19a:	6083      	str	r3, [r0, #8]
 800a19c:	8181      	strh	r1, [r0, #12]
 800a19e:	6643      	str	r3, [r0, #100]	; 0x64
 800a1a0:	81c2      	strh	r2, [r0, #14]
 800a1a2:	6183      	str	r3, [r0, #24]
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	2208      	movs	r2, #8
 800a1a8:	305c      	adds	r0, #92	; 0x5c
 800a1aa:	f7ff ffa1 	bl	800a0f0 <memset>
 800a1ae:	4b05      	ldr	r3, [pc, #20]	; (800a1c4 <std+0x38>)
 800a1b0:	6263      	str	r3, [r4, #36]	; 0x24
 800a1b2:	4b05      	ldr	r3, [pc, #20]	; (800a1c8 <std+0x3c>)
 800a1b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1b6:	4b05      	ldr	r3, [pc, #20]	; (800a1cc <std+0x40>)
 800a1b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1ba:	4b05      	ldr	r3, [pc, #20]	; (800a1d0 <std+0x44>)
 800a1bc:	6224      	str	r4, [r4, #32]
 800a1be:	6323      	str	r3, [r4, #48]	; 0x30
 800a1c0:	bd10      	pop	{r4, pc}
 800a1c2:	bf00      	nop
 800a1c4:	0800ab31 	.word	0x0800ab31
 800a1c8:	0800ab53 	.word	0x0800ab53
 800a1cc:	0800ab8b 	.word	0x0800ab8b
 800a1d0:	0800abaf 	.word	0x0800abaf

0800a1d4 <_cleanup_r>:
 800a1d4:	4901      	ldr	r1, [pc, #4]	; (800a1dc <_cleanup_r+0x8>)
 800a1d6:	f000 b8af 	b.w	800a338 <_fwalk_reent>
 800a1da:	bf00      	nop
 800a1dc:	0800ae89 	.word	0x0800ae89

0800a1e0 <__sfmoreglue>:
 800a1e0:	b570      	push	{r4, r5, r6, lr}
 800a1e2:	2268      	movs	r2, #104	; 0x68
 800a1e4:	1e4d      	subs	r5, r1, #1
 800a1e6:	4355      	muls	r5, r2
 800a1e8:	460e      	mov	r6, r1
 800a1ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a1ee:	f000 f8e5 	bl	800a3bc <_malloc_r>
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	b140      	cbz	r0, 800a208 <__sfmoreglue+0x28>
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	e9c0 1600 	strd	r1, r6, [r0]
 800a1fc:	300c      	adds	r0, #12
 800a1fe:	60a0      	str	r0, [r4, #8]
 800a200:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a204:	f7ff ff74 	bl	800a0f0 <memset>
 800a208:	4620      	mov	r0, r4
 800a20a:	bd70      	pop	{r4, r5, r6, pc}

0800a20c <__sfp_lock_acquire>:
 800a20c:	4801      	ldr	r0, [pc, #4]	; (800a214 <__sfp_lock_acquire+0x8>)
 800a20e:	f000 b8b3 	b.w	800a378 <__retarget_lock_acquire_recursive>
 800a212:	bf00      	nop
 800a214:	2409626d 	.word	0x2409626d

0800a218 <__sfp_lock_release>:
 800a218:	4801      	ldr	r0, [pc, #4]	; (800a220 <__sfp_lock_release+0x8>)
 800a21a:	f000 b8ae 	b.w	800a37a <__retarget_lock_release_recursive>
 800a21e:	bf00      	nop
 800a220:	2409626d 	.word	0x2409626d

0800a224 <__sinit_lock_acquire>:
 800a224:	4801      	ldr	r0, [pc, #4]	; (800a22c <__sinit_lock_acquire+0x8>)
 800a226:	f000 b8a7 	b.w	800a378 <__retarget_lock_acquire_recursive>
 800a22a:	bf00      	nop
 800a22c:	2409626e 	.word	0x2409626e

0800a230 <__sinit_lock_release>:
 800a230:	4801      	ldr	r0, [pc, #4]	; (800a238 <__sinit_lock_release+0x8>)
 800a232:	f000 b8a2 	b.w	800a37a <__retarget_lock_release_recursive>
 800a236:	bf00      	nop
 800a238:	2409626e 	.word	0x2409626e

0800a23c <__sinit>:
 800a23c:	b510      	push	{r4, lr}
 800a23e:	4604      	mov	r4, r0
 800a240:	f7ff fff0 	bl	800a224 <__sinit_lock_acquire>
 800a244:	69a3      	ldr	r3, [r4, #24]
 800a246:	b11b      	cbz	r3, 800a250 <__sinit+0x14>
 800a248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a24c:	f7ff bff0 	b.w	800a230 <__sinit_lock_release>
 800a250:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a254:	6523      	str	r3, [r4, #80]	; 0x50
 800a256:	4b13      	ldr	r3, [pc, #76]	; (800a2a4 <__sinit+0x68>)
 800a258:	4a13      	ldr	r2, [pc, #76]	; (800a2a8 <__sinit+0x6c>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a25e:	42a3      	cmp	r3, r4
 800a260:	bf04      	itt	eq
 800a262:	2301      	moveq	r3, #1
 800a264:	61a3      	streq	r3, [r4, #24]
 800a266:	4620      	mov	r0, r4
 800a268:	f000 f820 	bl	800a2ac <__sfp>
 800a26c:	6060      	str	r0, [r4, #4]
 800a26e:	4620      	mov	r0, r4
 800a270:	f000 f81c 	bl	800a2ac <__sfp>
 800a274:	60a0      	str	r0, [r4, #8]
 800a276:	4620      	mov	r0, r4
 800a278:	f000 f818 	bl	800a2ac <__sfp>
 800a27c:	2200      	movs	r2, #0
 800a27e:	60e0      	str	r0, [r4, #12]
 800a280:	2104      	movs	r1, #4
 800a282:	6860      	ldr	r0, [r4, #4]
 800a284:	f7ff ff82 	bl	800a18c <std>
 800a288:	68a0      	ldr	r0, [r4, #8]
 800a28a:	2201      	movs	r2, #1
 800a28c:	2109      	movs	r1, #9
 800a28e:	f7ff ff7d 	bl	800a18c <std>
 800a292:	68e0      	ldr	r0, [r4, #12]
 800a294:	2202      	movs	r2, #2
 800a296:	2112      	movs	r1, #18
 800a298:	f7ff ff78 	bl	800a18c <std>
 800a29c:	2301      	movs	r3, #1
 800a29e:	61a3      	str	r3, [r4, #24]
 800a2a0:	e7d2      	b.n	800a248 <__sinit+0xc>
 800a2a2:	bf00      	nop
 800a2a4:	0800c694 	.word	0x0800c694
 800a2a8:	0800a1d5 	.word	0x0800a1d5

0800a2ac <__sfp>:
 800a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ae:	4607      	mov	r7, r0
 800a2b0:	f7ff ffac 	bl	800a20c <__sfp_lock_acquire>
 800a2b4:	4b1e      	ldr	r3, [pc, #120]	; (800a330 <__sfp+0x84>)
 800a2b6:	681e      	ldr	r6, [r3, #0]
 800a2b8:	69b3      	ldr	r3, [r6, #24]
 800a2ba:	b913      	cbnz	r3, 800a2c2 <__sfp+0x16>
 800a2bc:	4630      	mov	r0, r6
 800a2be:	f7ff ffbd 	bl	800a23c <__sinit>
 800a2c2:	3648      	adds	r6, #72	; 0x48
 800a2c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	d503      	bpl.n	800a2d4 <__sfp+0x28>
 800a2cc:	6833      	ldr	r3, [r6, #0]
 800a2ce:	b30b      	cbz	r3, 800a314 <__sfp+0x68>
 800a2d0:	6836      	ldr	r6, [r6, #0]
 800a2d2:	e7f7      	b.n	800a2c4 <__sfp+0x18>
 800a2d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a2d8:	b9d5      	cbnz	r5, 800a310 <__sfp+0x64>
 800a2da:	4b16      	ldr	r3, [pc, #88]	; (800a334 <__sfp+0x88>)
 800a2dc:	60e3      	str	r3, [r4, #12]
 800a2de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2e2:	6665      	str	r5, [r4, #100]	; 0x64
 800a2e4:	f000 f847 	bl	800a376 <__retarget_lock_init_recursive>
 800a2e8:	f7ff ff96 	bl	800a218 <__sfp_lock_release>
 800a2ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a2f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a2f4:	6025      	str	r5, [r4, #0]
 800a2f6:	61a5      	str	r5, [r4, #24]
 800a2f8:	2208      	movs	r2, #8
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a300:	f7ff fef6 	bl	800a0f0 <memset>
 800a304:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a308:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a30c:	4620      	mov	r0, r4
 800a30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a310:	3468      	adds	r4, #104	; 0x68
 800a312:	e7d9      	b.n	800a2c8 <__sfp+0x1c>
 800a314:	2104      	movs	r1, #4
 800a316:	4638      	mov	r0, r7
 800a318:	f7ff ff62 	bl	800a1e0 <__sfmoreglue>
 800a31c:	4604      	mov	r4, r0
 800a31e:	6030      	str	r0, [r6, #0]
 800a320:	2800      	cmp	r0, #0
 800a322:	d1d5      	bne.n	800a2d0 <__sfp+0x24>
 800a324:	f7ff ff78 	bl	800a218 <__sfp_lock_release>
 800a328:	230c      	movs	r3, #12
 800a32a:	603b      	str	r3, [r7, #0]
 800a32c:	e7ee      	b.n	800a30c <__sfp+0x60>
 800a32e:	bf00      	nop
 800a330:	0800c694 	.word	0x0800c694
 800a334:	ffff0001 	.word	0xffff0001

0800a338 <_fwalk_reent>:
 800a338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a33c:	4606      	mov	r6, r0
 800a33e:	4688      	mov	r8, r1
 800a340:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a344:	2700      	movs	r7, #0
 800a346:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a34a:	f1b9 0901 	subs.w	r9, r9, #1
 800a34e:	d505      	bpl.n	800a35c <_fwalk_reent+0x24>
 800a350:	6824      	ldr	r4, [r4, #0]
 800a352:	2c00      	cmp	r4, #0
 800a354:	d1f7      	bne.n	800a346 <_fwalk_reent+0xe>
 800a356:	4638      	mov	r0, r7
 800a358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a35c:	89ab      	ldrh	r3, [r5, #12]
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d907      	bls.n	800a372 <_fwalk_reent+0x3a>
 800a362:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a366:	3301      	adds	r3, #1
 800a368:	d003      	beq.n	800a372 <_fwalk_reent+0x3a>
 800a36a:	4629      	mov	r1, r5
 800a36c:	4630      	mov	r0, r6
 800a36e:	47c0      	blx	r8
 800a370:	4307      	orrs	r7, r0
 800a372:	3568      	adds	r5, #104	; 0x68
 800a374:	e7e9      	b.n	800a34a <_fwalk_reent+0x12>

0800a376 <__retarget_lock_init_recursive>:
 800a376:	4770      	bx	lr

0800a378 <__retarget_lock_acquire_recursive>:
 800a378:	4770      	bx	lr

0800a37a <__retarget_lock_release_recursive>:
 800a37a:	4770      	bx	lr

0800a37c <sbrk_aligned>:
 800a37c:	b570      	push	{r4, r5, r6, lr}
 800a37e:	4e0e      	ldr	r6, [pc, #56]	; (800a3b8 <sbrk_aligned+0x3c>)
 800a380:	460c      	mov	r4, r1
 800a382:	6831      	ldr	r1, [r6, #0]
 800a384:	4605      	mov	r5, r0
 800a386:	b911      	cbnz	r1, 800a38e <sbrk_aligned+0x12>
 800a388:	f000 fbc2 	bl	800ab10 <_sbrk_r>
 800a38c:	6030      	str	r0, [r6, #0]
 800a38e:	4621      	mov	r1, r4
 800a390:	4628      	mov	r0, r5
 800a392:	f000 fbbd 	bl	800ab10 <_sbrk_r>
 800a396:	1c43      	adds	r3, r0, #1
 800a398:	d00a      	beq.n	800a3b0 <sbrk_aligned+0x34>
 800a39a:	1cc4      	adds	r4, r0, #3
 800a39c:	f024 0403 	bic.w	r4, r4, #3
 800a3a0:	42a0      	cmp	r0, r4
 800a3a2:	d007      	beq.n	800a3b4 <sbrk_aligned+0x38>
 800a3a4:	1a21      	subs	r1, r4, r0
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	f000 fbb2 	bl	800ab10 <_sbrk_r>
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	d101      	bne.n	800a3b4 <sbrk_aligned+0x38>
 800a3b0:	f04f 34ff 	mov.w	r4, #4294967295
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	bd70      	pop	{r4, r5, r6, pc}
 800a3b8:	24096274 	.word	0x24096274

0800a3bc <_malloc_r>:
 800a3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c0:	1ccd      	adds	r5, r1, #3
 800a3c2:	f025 0503 	bic.w	r5, r5, #3
 800a3c6:	3508      	adds	r5, #8
 800a3c8:	2d0c      	cmp	r5, #12
 800a3ca:	bf38      	it	cc
 800a3cc:	250c      	movcc	r5, #12
 800a3ce:	2d00      	cmp	r5, #0
 800a3d0:	4607      	mov	r7, r0
 800a3d2:	db01      	blt.n	800a3d8 <_malloc_r+0x1c>
 800a3d4:	42a9      	cmp	r1, r5
 800a3d6:	d905      	bls.n	800a3e4 <_malloc_r+0x28>
 800a3d8:	230c      	movs	r3, #12
 800a3da:	603b      	str	r3, [r7, #0]
 800a3dc:	2600      	movs	r6, #0
 800a3de:	4630      	mov	r0, r6
 800a3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e4:	4e2e      	ldr	r6, [pc, #184]	; (800a4a0 <_malloc_r+0xe4>)
 800a3e6:	f000 fe03 	bl	800aff0 <__malloc_lock>
 800a3ea:	6833      	ldr	r3, [r6, #0]
 800a3ec:	461c      	mov	r4, r3
 800a3ee:	bb34      	cbnz	r4, 800a43e <_malloc_r+0x82>
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	f7ff ffc2 	bl	800a37c <sbrk_aligned>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	d14d      	bne.n	800a49a <_malloc_r+0xde>
 800a3fe:	6834      	ldr	r4, [r6, #0]
 800a400:	4626      	mov	r6, r4
 800a402:	2e00      	cmp	r6, #0
 800a404:	d140      	bne.n	800a488 <_malloc_r+0xcc>
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	4631      	mov	r1, r6
 800a40a:	4638      	mov	r0, r7
 800a40c:	eb04 0803 	add.w	r8, r4, r3
 800a410:	f000 fb7e 	bl	800ab10 <_sbrk_r>
 800a414:	4580      	cmp	r8, r0
 800a416:	d13a      	bne.n	800a48e <_malloc_r+0xd2>
 800a418:	6821      	ldr	r1, [r4, #0]
 800a41a:	3503      	adds	r5, #3
 800a41c:	1a6d      	subs	r5, r5, r1
 800a41e:	f025 0503 	bic.w	r5, r5, #3
 800a422:	3508      	adds	r5, #8
 800a424:	2d0c      	cmp	r5, #12
 800a426:	bf38      	it	cc
 800a428:	250c      	movcc	r5, #12
 800a42a:	4629      	mov	r1, r5
 800a42c:	4638      	mov	r0, r7
 800a42e:	f7ff ffa5 	bl	800a37c <sbrk_aligned>
 800a432:	3001      	adds	r0, #1
 800a434:	d02b      	beq.n	800a48e <_malloc_r+0xd2>
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	442b      	add	r3, r5
 800a43a:	6023      	str	r3, [r4, #0]
 800a43c:	e00e      	b.n	800a45c <_malloc_r+0xa0>
 800a43e:	6822      	ldr	r2, [r4, #0]
 800a440:	1b52      	subs	r2, r2, r5
 800a442:	d41e      	bmi.n	800a482 <_malloc_r+0xc6>
 800a444:	2a0b      	cmp	r2, #11
 800a446:	d916      	bls.n	800a476 <_malloc_r+0xba>
 800a448:	1961      	adds	r1, r4, r5
 800a44a:	42a3      	cmp	r3, r4
 800a44c:	6025      	str	r5, [r4, #0]
 800a44e:	bf18      	it	ne
 800a450:	6059      	strne	r1, [r3, #4]
 800a452:	6863      	ldr	r3, [r4, #4]
 800a454:	bf08      	it	eq
 800a456:	6031      	streq	r1, [r6, #0]
 800a458:	5162      	str	r2, [r4, r5]
 800a45a:	604b      	str	r3, [r1, #4]
 800a45c:	4638      	mov	r0, r7
 800a45e:	f104 060b 	add.w	r6, r4, #11
 800a462:	f000 fdcb 	bl	800affc <__malloc_unlock>
 800a466:	f026 0607 	bic.w	r6, r6, #7
 800a46a:	1d23      	adds	r3, r4, #4
 800a46c:	1af2      	subs	r2, r6, r3
 800a46e:	d0b6      	beq.n	800a3de <_malloc_r+0x22>
 800a470:	1b9b      	subs	r3, r3, r6
 800a472:	50a3      	str	r3, [r4, r2]
 800a474:	e7b3      	b.n	800a3de <_malloc_r+0x22>
 800a476:	6862      	ldr	r2, [r4, #4]
 800a478:	42a3      	cmp	r3, r4
 800a47a:	bf0c      	ite	eq
 800a47c:	6032      	streq	r2, [r6, #0]
 800a47e:	605a      	strne	r2, [r3, #4]
 800a480:	e7ec      	b.n	800a45c <_malloc_r+0xa0>
 800a482:	4623      	mov	r3, r4
 800a484:	6864      	ldr	r4, [r4, #4]
 800a486:	e7b2      	b.n	800a3ee <_malloc_r+0x32>
 800a488:	4634      	mov	r4, r6
 800a48a:	6876      	ldr	r6, [r6, #4]
 800a48c:	e7b9      	b.n	800a402 <_malloc_r+0x46>
 800a48e:	230c      	movs	r3, #12
 800a490:	603b      	str	r3, [r7, #0]
 800a492:	4638      	mov	r0, r7
 800a494:	f000 fdb2 	bl	800affc <__malloc_unlock>
 800a498:	e7a1      	b.n	800a3de <_malloc_r+0x22>
 800a49a:	6025      	str	r5, [r4, #0]
 800a49c:	e7de      	b.n	800a45c <_malloc_r+0xa0>
 800a49e:	bf00      	nop
 800a4a0:	24096270 	.word	0x24096270

0800a4a4 <__sfputc_r>:
 800a4a4:	6893      	ldr	r3, [r2, #8]
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	b410      	push	{r4}
 800a4ac:	6093      	str	r3, [r2, #8]
 800a4ae:	da08      	bge.n	800a4c2 <__sfputc_r+0x1e>
 800a4b0:	6994      	ldr	r4, [r2, #24]
 800a4b2:	42a3      	cmp	r3, r4
 800a4b4:	db01      	blt.n	800a4ba <__sfputc_r+0x16>
 800a4b6:	290a      	cmp	r1, #10
 800a4b8:	d103      	bne.n	800a4c2 <__sfputc_r+0x1e>
 800a4ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4be:	f000 bb7b 	b.w	800abb8 <__swbuf_r>
 800a4c2:	6813      	ldr	r3, [r2, #0]
 800a4c4:	1c58      	adds	r0, r3, #1
 800a4c6:	6010      	str	r0, [r2, #0]
 800a4c8:	7019      	strb	r1, [r3, #0]
 800a4ca:	4608      	mov	r0, r1
 800a4cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <__sfputs_r>:
 800a4d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d4:	4606      	mov	r6, r0
 800a4d6:	460f      	mov	r7, r1
 800a4d8:	4614      	mov	r4, r2
 800a4da:	18d5      	adds	r5, r2, r3
 800a4dc:	42ac      	cmp	r4, r5
 800a4de:	d101      	bne.n	800a4e4 <__sfputs_r+0x12>
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	e007      	b.n	800a4f4 <__sfputs_r+0x22>
 800a4e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e8:	463a      	mov	r2, r7
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	f7ff ffda 	bl	800a4a4 <__sfputc_r>
 800a4f0:	1c43      	adds	r3, r0, #1
 800a4f2:	d1f3      	bne.n	800a4dc <__sfputs_r+0xa>
 800a4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4f8 <_vfiprintf_r>:
 800a4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fc:	460d      	mov	r5, r1
 800a4fe:	b09d      	sub	sp, #116	; 0x74
 800a500:	4614      	mov	r4, r2
 800a502:	4698      	mov	r8, r3
 800a504:	4606      	mov	r6, r0
 800a506:	b118      	cbz	r0, 800a510 <_vfiprintf_r+0x18>
 800a508:	6983      	ldr	r3, [r0, #24]
 800a50a:	b90b      	cbnz	r3, 800a510 <_vfiprintf_r+0x18>
 800a50c:	f7ff fe96 	bl	800a23c <__sinit>
 800a510:	4b89      	ldr	r3, [pc, #548]	; (800a738 <_vfiprintf_r+0x240>)
 800a512:	429d      	cmp	r5, r3
 800a514:	d11b      	bne.n	800a54e <_vfiprintf_r+0x56>
 800a516:	6875      	ldr	r5, [r6, #4]
 800a518:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a51a:	07d9      	lsls	r1, r3, #31
 800a51c:	d405      	bmi.n	800a52a <_vfiprintf_r+0x32>
 800a51e:	89ab      	ldrh	r3, [r5, #12]
 800a520:	059a      	lsls	r2, r3, #22
 800a522:	d402      	bmi.n	800a52a <_vfiprintf_r+0x32>
 800a524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a526:	f7ff ff27 	bl	800a378 <__retarget_lock_acquire_recursive>
 800a52a:	89ab      	ldrh	r3, [r5, #12]
 800a52c:	071b      	lsls	r3, r3, #28
 800a52e:	d501      	bpl.n	800a534 <_vfiprintf_r+0x3c>
 800a530:	692b      	ldr	r3, [r5, #16]
 800a532:	b9eb      	cbnz	r3, 800a570 <_vfiprintf_r+0x78>
 800a534:	4629      	mov	r1, r5
 800a536:	4630      	mov	r0, r6
 800a538:	f000 fba2 	bl	800ac80 <__swsetup_r>
 800a53c:	b1c0      	cbz	r0, 800a570 <_vfiprintf_r+0x78>
 800a53e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a540:	07dc      	lsls	r4, r3, #31
 800a542:	d50e      	bpl.n	800a562 <_vfiprintf_r+0x6a>
 800a544:	f04f 30ff 	mov.w	r0, #4294967295
 800a548:	b01d      	add	sp, #116	; 0x74
 800a54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54e:	4b7b      	ldr	r3, [pc, #492]	; (800a73c <_vfiprintf_r+0x244>)
 800a550:	429d      	cmp	r5, r3
 800a552:	d101      	bne.n	800a558 <_vfiprintf_r+0x60>
 800a554:	68b5      	ldr	r5, [r6, #8]
 800a556:	e7df      	b.n	800a518 <_vfiprintf_r+0x20>
 800a558:	4b79      	ldr	r3, [pc, #484]	; (800a740 <_vfiprintf_r+0x248>)
 800a55a:	429d      	cmp	r5, r3
 800a55c:	bf08      	it	eq
 800a55e:	68f5      	ldreq	r5, [r6, #12]
 800a560:	e7da      	b.n	800a518 <_vfiprintf_r+0x20>
 800a562:	89ab      	ldrh	r3, [r5, #12]
 800a564:	0598      	lsls	r0, r3, #22
 800a566:	d4ed      	bmi.n	800a544 <_vfiprintf_r+0x4c>
 800a568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a56a:	f7ff ff06 	bl	800a37a <__retarget_lock_release_recursive>
 800a56e:	e7e9      	b.n	800a544 <_vfiprintf_r+0x4c>
 800a570:	2300      	movs	r3, #0
 800a572:	9309      	str	r3, [sp, #36]	; 0x24
 800a574:	2320      	movs	r3, #32
 800a576:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a57a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a57e:	2330      	movs	r3, #48	; 0x30
 800a580:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a744 <_vfiprintf_r+0x24c>
 800a584:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a588:	f04f 0901 	mov.w	r9, #1
 800a58c:	4623      	mov	r3, r4
 800a58e:	469a      	mov	sl, r3
 800a590:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a594:	b10a      	cbz	r2, 800a59a <_vfiprintf_r+0xa2>
 800a596:	2a25      	cmp	r2, #37	; 0x25
 800a598:	d1f9      	bne.n	800a58e <_vfiprintf_r+0x96>
 800a59a:	ebba 0b04 	subs.w	fp, sl, r4
 800a59e:	d00b      	beq.n	800a5b8 <_vfiprintf_r+0xc0>
 800a5a0:	465b      	mov	r3, fp
 800a5a2:	4622      	mov	r2, r4
 800a5a4:	4629      	mov	r1, r5
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	f7ff ff93 	bl	800a4d2 <__sfputs_r>
 800a5ac:	3001      	adds	r0, #1
 800a5ae:	f000 80aa 	beq.w	800a706 <_vfiprintf_r+0x20e>
 800a5b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5b4:	445a      	add	r2, fp
 800a5b6:	9209      	str	r2, [sp, #36]	; 0x24
 800a5b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f000 80a2 	beq.w	800a706 <_vfiprintf_r+0x20e>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5cc:	f10a 0a01 	add.w	sl, sl, #1
 800a5d0:	9304      	str	r3, [sp, #16]
 800a5d2:	9307      	str	r3, [sp, #28]
 800a5d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5d8:	931a      	str	r3, [sp, #104]	; 0x68
 800a5da:	4654      	mov	r4, sl
 800a5dc:	2205      	movs	r2, #5
 800a5de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5e2:	4858      	ldr	r0, [pc, #352]	; (800a744 <_vfiprintf_r+0x24c>)
 800a5e4:	f7f5 fe84 	bl	80002f0 <memchr>
 800a5e8:	9a04      	ldr	r2, [sp, #16]
 800a5ea:	b9d8      	cbnz	r0, 800a624 <_vfiprintf_r+0x12c>
 800a5ec:	06d1      	lsls	r1, r2, #27
 800a5ee:	bf44      	itt	mi
 800a5f0:	2320      	movmi	r3, #32
 800a5f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5f6:	0713      	lsls	r3, r2, #28
 800a5f8:	bf44      	itt	mi
 800a5fa:	232b      	movmi	r3, #43	; 0x2b
 800a5fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a600:	f89a 3000 	ldrb.w	r3, [sl]
 800a604:	2b2a      	cmp	r3, #42	; 0x2a
 800a606:	d015      	beq.n	800a634 <_vfiprintf_r+0x13c>
 800a608:	9a07      	ldr	r2, [sp, #28]
 800a60a:	4654      	mov	r4, sl
 800a60c:	2000      	movs	r0, #0
 800a60e:	f04f 0c0a 	mov.w	ip, #10
 800a612:	4621      	mov	r1, r4
 800a614:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a618:	3b30      	subs	r3, #48	; 0x30
 800a61a:	2b09      	cmp	r3, #9
 800a61c:	d94e      	bls.n	800a6bc <_vfiprintf_r+0x1c4>
 800a61e:	b1b0      	cbz	r0, 800a64e <_vfiprintf_r+0x156>
 800a620:	9207      	str	r2, [sp, #28]
 800a622:	e014      	b.n	800a64e <_vfiprintf_r+0x156>
 800a624:	eba0 0308 	sub.w	r3, r0, r8
 800a628:	fa09 f303 	lsl.w	r3, r9, r3
 800a62c:	4313      	orrs	r3, r2
 800a62e:	9304      	str	r3, [sp, #16]
 800a630:	46a2      	mov	sl, r4
 800a632:	e7d2      	b.n	800a5da <_vfiprintf_r+0xe2>
 800a634:	9b03      	ldr	r3, [sp, #12]
 800a636:	1d19      	adds	r1, r3, #4
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	9103      	str	r1, [sp, #12]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	bfbb      	ittet	lt
 800a640:	425b      	neglt	r3, r3
 800a642:	f042 0202 	orrlt.w	r2, r2, #2
 800a646:	9307      	strge	r3, [sp, #28]
 800a648:	9307      	strlt	r3, [sp, #28]
 800a64a:	bfb8      	it	lt
 800a64c:	9204      	strlt	r2, [sp, #16]
 800a64e:	7823      	ldrb	r3, [r4, #0]
 800a650:	2b2e      	cmp	r3, #46	; 0x2e
 800a652:	d10c      	bne.n	800a66e <_vfiprintf_r+0x176>
 800a654:	7863      	ldrb	r3, [r4, #1]
 800a656:	2b2a      	cmp	r3, #42	; 0x2a
 800a658:	d135      	bne.n	800a6c6 <_vfiprintf_r+0x1ce>
 800a65a:	9b03      	ldr	r3, [sp, #12]
 800a65c:	1d1a      	adds	r2, r3, #4
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	9203      	str	r2, [sp, #12]
 800a662:	2b00      	cmp	r3, #0
 800a664:	bfb8      	it	lt
 800a666:	f04f 33ff 	movlt.w	r3, #4294967295
 800a66a:	3402      	adds	r4, #2
 800a66c:	9305      	str	r3, [sp, #20]
 800a66e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a754 <_vfiprintf_r+0x25c>
 800a672:	7821      	ldrb	r1, [r4, #0]
 800a674:	2203      	movs	r2, #3
 800a676:	4650      	mov	r0, sl
 800a678:	f7f5 fe3a 	bl	80002f0 <memchr>
 800a67c:	b140      	cbz	r0, 800a690 <_vfiprintf_r+0x198>
 800a67e:	2340      	movs	r3, #64	; 0x40
 800a680:	eba0 000a 	sub.w	r0, r0, sl
 800a684:	fa03 f000 	lsl.w	r0, r3, r0
 800a688:	9b04      	ldr	r3, [sp, #16]
 800a68a:	4303      	orrs	r3, r0
 800a68c:	3401      	adds	r4, #1
 800a68e:	9304      	str	r3, [sp, #16]
 800a690:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a694:	482c      	ldr	r0, [pc, #176]	; (800a748 <_vfiprintf_r+0x250>)
 800a696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a69a:	2206      	movs	r2, #6
 800a69c:	f7f5 fe28 	bl	80002f0 <memchr>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d03f      	beq.n	800a724 <_vfiprintf_r+0x22c>
 800a6a4:	4b29      	ldr	r3, [pc, #164]	; (800a74c <_vfiprintf_r+0x254>)
 800a6a6:	bb1b      	cbnz	r3, 800a6f0 <_vfiprintf_r+0x1f8>
 800a6a8:	9b03      	ldr	r3, [sp, #12]
 800a6aa:	3307      	adds	r3, #7
 800a6ac:	f023 0307 	bic.w	r3, r3, #7
 800a6b0:	3308      	adds	r3, #8
 800a6b2:	9303      	str	r3, [sp, #12]
 800a6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6b6:	443b      	add	r3, r7
 800a6b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ba:	e767      	b.n	800a58c <_vfiprintf_r+0x94>
 800a6bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6c0:	460c      	mov	r4, r1
 800a6c2:	2001      	movs	r0, #1
 800a6c4:	e7a5      	b.n	800a612 <_vfiprintf_r+0x11a>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	3401      	adds	r4, #1
 800a6ca:	9305      	str	r3, [sp, #20]
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	f04f 0c0a 	mov.w	ip, #10
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6d8:	3a30      	subs	r2, #48	; 0x30
 800a6da:	2a09      	cmp	r2, #9
 800a6dc:	d903      	bls.n	800a6e6 <_vfiprintf_r+0x1ee>
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d0c5      	beq.n	800a66e <_vfiprintf_r+0x176>
 800a6e2:	9105      	str	r1, [sp, #20]
 800a6e4:	e7c3      	b.n	800a66e <_vfiprintf_r+0x176>
 800a6e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e7f0      	b.n	800a6d2 <_vfiprintf_r+0x1da>
 800a6f0:	ab03      	add	r3, sp, #12
 800a6f2:	9300      	str	r3, [sp, #0]
 800a6f4:	462a      	mov	r2, r5
 800a6f6:	4b16      	ldr	r3, [pc, #88]	; (800a750 <_vfiprintf_r+0x258>)
 800a6f8:	a904      	add	r1, sp, #16
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f3af 8000 	nop.w
 800a700:	4607      	mov	r7, r0
 800a702:	1c78      	adds	r0, r7, #1
 800a704:	d1d6      	bne.n	800a6b4 <_vfiprintf_r+0x1bc>
 800a706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a708:	07d9      	lsls	r1, r3, #31
 800a70a:	d405      	bmi.n	800a718 <_vfiprintf_r+0x220>
 800a70c:	89ab      	ldrh	r3, [r5, #12]
 800a70e:	059a      	lsls	r2, r3, #22
 800a710:	d402      	bmi.n	800a718 <_vfiprintf_r+0x220>
 800a712:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a714:	f7ff fe31 	bl	800a37a <__retarget_lock_release_recursive>
 800a718:	89ab      	ldrh	r3, [r5, #12]
 800a71a:	065b      	lsls	r3, r3, #25
 800a71c:	f53f af12 	bmi.w	800a544 <_vfiprintf_r+0x4c>
 800a720:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a722:	e711      	b.n	800a548 <_vfiprintf_r+0x50>
 800a724:	ab03      	add	r3, sp, #12
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	462a      	mov	r2, r5
 800a72a:	4b09      	ldr	r3, [pc, #36]	; (800a750 <_vfiprintf_r+0x258>)
 800a72c:	a904      	add	r1, sp, #16
 800a72e:	4630      	mov	r0, r6
 800a730:	f000 f880 	bl	800a834 <_printf_i>
 800a734:	e7e4      	b.n	800a700 <_vfiprintf_r+0x208>
 800a736:	bf00      	nop
 800a738:	0800c6b8 	.word	0x0800c6b8
 800a73c:	0800c6d8 	.word	0x0800c6d8
 800a740:	0800c698 	.word	0x0800c698
 800a744:	0800c6f8 	.word	0x0800c6f8
 800a748:	0800c702 	.word	0x0800c702
 800a74c:	00000000 	.word	0x00000000
 800a750:	0800a4d3 	.word	0x0800a4d3
 800a754:	0800c6fe 	.word	0x0800c6fe

0800a758 <_printf_common>:
 800a758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a75c:	4616      	mov	r6, r2
 800a75e:	4699      	mov	r9, r3
 800a760:	688a      	ldr	r2, [r1, #8]
 800a762:	690b      	ldr	r3, [r1, #16]
 800a764:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a768:	4293      	cmp	r3, r2
 800a76a:	bfb8      	it	lt
 800a76c:	4613      	movlt	r3, r2
 800a76e:	6033      	str	r3, [r6, #0]
 800a770:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a774:	4607      	mov	r7, r0
 800a776:	460c      	mov	r4, r1
 800a778:	b10a      	cbz	r2, 800a77e <_printf_common+0x26>
 800a77a:	3301      	adds	r3, #1
 800a77c:	6033      	str	r3, [r6, #0]
 800a77e:	6823      	ldr	r3, [r4, #0]
 800a780:	0699      	lsls	r1, r3, #26
 800a782:	bf42      	ittt	mi
 800a784:	6833      	ldrmi	r3, [r6, #0]
 800a786:	3302      	addmi	r3, #2
 800a788:	6033      	strmi	r3, [r6, #0]
 800a78a:	6825      	ldr	r5, [r4, #0]
 800a78c:	f015 0506 	ands.w	r5, r5, #6
 800a790:	d106      	bne.n	800a7a0 <_printf_common+0x48>
 800a792:	f104 0a19 	add.w	sl, r4, #25
 800a796:	68e3      	ldr	r3, [r4, #12]
 800a798:	6832      	ldr	r2, [r6, #0]
 800a79a:	1a9b      	subs	r3, r3, r2
 800a79c:	42ab      	cmp	r3, r5
 800a79e:	dc26      	bgt.n	800a7ee <_printf_common+0x96>
 800a7a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7a4:	1e13      	subs	r3, r2, #0
 800a7a6:	6822      	ldr	r2, [r4, #0]
 800a7a8:	bf18      	it	ne
 800a7aa:	2301      	movne	r3, #1
 800a7ac:	0692      	lsls	r2, r2, #26
 800a7ae:	d42b      	bmi.n	800a808 <_printf_common+0xb0>
 800a7b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7b4:	4649      	mov	r1, r9
 800a7b6:	4638      	mov	r0, r7
 800a7b8:	47c0      	blx	r8
 800a7ba:	3001      	adds	r0, #1
 800a7bc:	d01e      	beq.n	800a7fc <_printf_common+0xa4>
 800a7be:	6823      	ldr	r3, [r4, #0]
 800a7c0:	68e5      	ldr	r5, [r4, #12]
 800a7c2:	6832      	ldr	r2, [r6, #0]
 800a7c4:	f003 0306 	and.w	r3, r3, #6
 800a7c8:	2b04      	cmp	r3, #4
 800a7ca:	bf08      	it	eq
 800a7cc:	1aad      	subeq	r5, r5, r2
 800a7ce:	68a3      	ldr	r3, [r4, #8]
 800a7d0:	6922      	ldr	r2, [r4, #16]
 800a7d2:	bf0c      	ite	eq
 800a7d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7d8:	2500      	movne	r5, #0
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	bfc4      	itt	gt
 800a7de:	1a9b      	subgt	r3, r3, r2
 800a7e0:	18ed      	addgt	r5, r5, r3
 800a7e2:	2600      	movs	r6, #0
 800a7e4:	341a      	adds	r4, #26
 800a7e6:	42b5      	cmp	r5, r6
 800a7e8:	d11a      	bne.n	800a820 <_printf_common+0xc8>
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	e008      	b.n	800a800 <_printf_common+0xa8>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	4652      	mov	r2, sl
 800a7f2:	4649      	mov	r1, r9
 800a7f4:	4638      	mov	r0, r7
 800a7f6:	47c0      	blx	r8
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	d103      	bne.n	800a804 <_printf_common+0xac>
 800a7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a804:	3501      	adds	r5, #1
 800a806:	e7c6      	b.n	800a796 <_printf_common+0x3e>
 800a808:	18e1      	adds	r1, r4, r3
 800a80a:	1c5a      	adds	r2, r3, #1
 800a80c:	2030      	movs	r0, #48	; 0x30
 800a80e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a812:	4422      	add	r2, r4
 800a814:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a818:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a81c:	3302      	adds	r3, #2
 800a81e:	e7c7      	b.n	800a7b0 <_printf_common+0x58>
 800a820:	2301      	movs	r3, #1
 800a822:	4622      	mov	r2, r4
 800a824:	4649      	mov	r1, r9
 800a826:	4638      	mov	r0, r7
 800a828:	47c0      	blx	r8
 800a82a:	3001      	adds	r0, #1
 800a82c:	d0e6      	beq.n	800a7fc <_printf_common+0xa4>
 800a82e:	3601      	adds	r6, #1
 800a830:	e7d9      	b.n	800a7e6 <_printf_common+0x8e>
	...

0800a834 <_printf_i>:
 800a834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a838:	7e0f      	ldrb	r7, [r1, #24]
 800a83a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a83c:	2f78      	cmp	r7, #120	; 0x78
 800a83e:	4691      	mov	r9, r2
 800a840:	4680      	mov	r8, r0
 800a842:	460c      	mov	r4, r1
 800a844:	469a      	mov	sl, r3
 800a846:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a84a:	d807      	bhi.n	800a85c <_printf_i+0x28>
 800a84c:	2f62      	cmp	r7, #98	; 0x62
 800a84e:	d80a      	bhi.n	800a866 <_printf_i+0x32>
 800a850:	2f00      	cmp	r7, #0
 800a852:	f000 80d8 	beq.w	800aa06 <_printf_i+0x1d2>
 800a856:	2f58      	cmp	r7, #88	; 0x58
 800a858:	f000 80a3 	beq.w	800a9a2 <_printf_i+0x16e>
 800a85c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a860:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a864:	e03a      	b.n	800a8dc <_printf_i+0xa8>
 800a866:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a86a:	2b15      	cmp	r3, #21
 800a86c:	d8f6      	bhi.n	800a85c <_printf_i+0x28>
 800a86e:	a101      	add	r1, pc, #4	; (adr r1, 800a874 <_printf_i+0x40>)
 800a870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a874:	0800a8cd 	.word	0x0800a8cd
 800a878:	0800a8e1 	.word	0x0800a8e1
 800a87c:	0800a85d 	.word	0x0800a85d
 800a880:	0800a85d 	.word	0x0800a85d
 800a884:	0800a85d 	.word	0x0800a85d
 800a888:	0800a85d 	.word	0x0800a85d
 800a88c:	0800a8e1 	.word	0x0800a8e1
 800a890:	0800a85d 	.word	0x0800a85d
 800a894:	0800a85d 	.word	0x0800a85d
 800a898:	0800a85d 	.word	0x0800a85d
 800a89c:	0800a85d 	.word	0x0800a85d
 800a8a0:	0800a9ed 	.word	0x0800a9ed
 800a8a4:	0800a911 	.word	0x0800a911
 800a8a8:	0800a9cf 	.word	0x0800a9cf
 800a8ac:	0800a85d 	.word	0x0800a85d
 800a8b0:	0800a85d 	.word	0x0800a85d
 800a8b4:	0800aa0f 	.word	0x0800aa0f
 800a8b8:	0800a85d 	.word	0x0800a85d
 800a8bc:	0800a911 	.word	0x0800a911
 800a8c0:	0800a85d 	.word	0x0800a85d
 800a8c4:	0800a85d 	.word	0x0800a85d
 800a8c8:	0800a9d7 	.word	0x0800a9d7
 800a8cc:	682b      	ldr	r3, [r5, #0]
 800a8ce:	1d1a      	adds	r2, r3, #4
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	602a      	str	r2, [r5, #0]
 800a8d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e0a3      	b.n	800aa28 <_printf_i+0x1f4>
 800a8e0:	6820      	ldr	r0, [r4, #0]
 800a8e2:	6829      	ldr	r1, [r5, #0]
 800a8e4:	0606      	lsls	r6, r0, #24
 800a8e6:	f101 0304 	add.w	r3, r1, #4
 800a8ea:	d50a      	bpl.n	800a902 <_printf_i+0xce>
 800a8ec:	680e      	ldr	r6, [r1, #0]
 800a8ee:	602b      	str	r3, [r5, #0]
 800a8f0:	2e00      	cmp	r6, #0
 800a8f2:	da03      	bge.n	800a8fc <_printf_i+0xc8>
 800a8f4:	232d      	movs	r3, #45	; 0x2d
 800a8f6:	4276      	negs	r6, r6
 800a8f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8fc:	485e      	ldr	r0, [pc, #376]	; (800aa78 <_printf_i+0x244>)
 800a8fe:	230a      	movs	r3, #10
 800a900:	e019      	b.n	800a936 <_printf_i+0x102>
 800a902:	680e      	ldr	r6, [r1, #0]
 800a904:	602b      	str	r3, [r5, #0]
 800a906:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a90a:	bf18      	it	ne
 800a90c:	b236      	sxthne	r6, r6
 800a90e:	e7ef      	b.n	800a8f0 <_printf_i+0xbc>
 800a910:	682b      	ldr	r3, [r5, #0]
 800a912:	6820      	ldr	r0, [r4, #0]
 800a914:	1d19      	adds	r1, r3, #4
 800a916:	6029      	str	r1, [r5, #0]
 800a918:	0601      	lsls	r1, r0, #24
 800a91a:	d501      	bpl.n	800a920 <_printf_i+0xec>
 800a91c:	681e      	ldr	r6, [r3, #0]
 800a91e:	e002      	b.n	800a926 <_printf_i+0xf2>
 800a920:	0646      	lsls	r6, r0, #25
 800a922:	d5fb      	bpl.n	800a91c <_printf_i+0xe8>
 800a924:	881e      	ldrh	r6, [r3, #0]
 800a926:	4854      	ldr	r0, [pc, #336]	; (800aa78 <_printf_i+0x244>)
 800a928:	2f6f      	cmp	r7, #111	; 0x6f
 800a92a:	bf0c      	ite	eq
 800a92c:	2308      	moveq	r3, #8
 800a92e:	230a      	movne	r3, #10
 800a930:	2100      	movs	r1, #0
 800a932:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a936:	6865      	ldr	r5, [r4, #4]
 800a938:	60a5      	str	r5, [r4, #8]
 800a93a:	2d00      	cmp	r5, #0
 800a93c:	bfa2      	ittt	ge
 800a93e:	6821      	ldrge	r1, [r4, #0]
 800a940:	f021 0104 	bicge.w	r1, r1, #4
 800a944:	6021      	strge	r1, [r4, #0]
 800a946:	b90e      	cbnz	r6, 800a94c <_printf_i+0x118>
 800a948:	2d00      	cmp	r5, #0
 800a94a:	d04d      	beq.n	800a9e8 <_printf_i+0x1b4>
 800a94c:	4615      	mov	r5, r2
 800a94e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a952:	fb03 6711 	mls	r7, r3, r1, r6
 800a956:	5dc7      	ldrb	r7, [r0, r7]
 800a958:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a95c:	4637      	mov	r7, r6
 800a95e:	42bb      	cmp	r3, r7
 800a960:	460e      	mov	r6, r1
 800a962:	d9f4      	bls.n	800a94e <_printf_i+0x11a>
 800a964:	2b08      	cmp	r3, #8
 800a966:	d10b      	bne.n	800a980 <_printf_i+0x14c>
 800a968:	6823      	ldr	r3, [r4, #0]
 800a96a:	07de      	lsls	r6, r3, #31
 800a96c:	d508      	bpl.n	800a980 <_printf_i+0x14c>
 800a96e:	6923      	ldr	r3, [r4, #16]
 800a970:	6861      	ldr	r1, [r4, #4]
 800a972:	4299      	cmp	r1, r3
 800a974:	bfde      	ittt	le
 800a976:	2330      	movle	r3, #48	; 0x30
 800a978:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a97c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a980:	1b52      	subs	r2, r2, r5
 800a982:	6122      	str	r2, [r4, #16]
 800a984:	f8cd a000 	str.w	sl, [sp]
 800a988:	464b      	mov	r3, r9
 800a98a:	aa03      	add	r2, sp, #12
 800a98c:	4621      	mov	r1, r4
 800a98e:	4640      	mov	r0, r8
 800a990:	f7ff fee2 	bl	800a758 <_printf_common>
 800a994:	3001      	adds	r0, #1
 800a996:	d14c      	bne.n	800aa32 <_printf_i+0x1fe>
 800a998:	f04f 30ff 	mov.w	r0, #4294967295
 800a99c:	b004      	add	sp, #16
 800a99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9a2:	4835      	ldr	r0, [pc, #212]	; (800aa78 <_printf_i+0x244>)
 800a9a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9a8:	6829      	ldr	r1, [r5, #0]
 800a9aa:	6823      	ldr	r3, [r4, #0]
 800a9ac:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9b0:	6029      	str	r1, [r5, #0]
 800a9b2:	061d      	lsls	r5, r3, #24
 800a9b4:	d514      	bpl.n	800a9e0 <_printf_i+0x1ac>
 800a9b6:	07df      	lsls	r7, r3, #31
 800a9b8:	bf44      	itt	mi
 800a9ba:	f043 0320 	orrmi.w	r3, r3, #32
 800a9be:	6023      	strmi	r3, [r4, #0]
 800a9c0:	b91e      	cbnz	r6, 800a9ca <_printf_i+0x196>
 800a9c2:	6823      	ldr	r3, [r4, #0]
 800a9c4:	f023 0320 	bic.w	r3, r3, #32
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	2310      	movs	r3, #16
 800a9cc:	e7b0      	b.n	800a930 <_printf_i+0xfc>
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	f043 0320 	orr.w	r3, r3, #32
 800a9d4:	6023      	str	r3, [r4, #0]
 800a9d6:	2378      	movs	r3, #120	; 0x78
 800a9d8:	4828      	ldr	r0, [pc, #160]	; (800aa7c <_printf_i+0x248>)
 800a9da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9de:	e7e3      	b.n	800a9a8 <_printf_i+0x174>
 800a9e0:	0659      	lsls	r1, r3, #25
 800a9e2:	bf48      	it	mi
 800a9e4:	b2b6      	uxthmi	r6, r6
 800a9e6:	e7e6      	b.n	800a9b6 <_printf_i+0x182>
 800a9e8:	4615      	mov	r5, r2
 800a9ea:	e7bb      	b.n	800a964 <_printf_i+0x130>
 800a9ec:	682b      	ldr	r3, [r5, #0]
 800a9ee:	6826      	ldr	r6, [r4, #0]
 800a9f0:	6961      	ldr	r1, [r4, #20]
 800a9f2:	1d18      	adds	r0, r3, #4
 800a9f4:	6028      	str	r0, [r5, #0]
 800a9f6:	0635      	lsls	r5, r6, #24
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	d501      	bpl.n	800aa00 <_printf_i+0x1cc>
 800a9fc:	6019      	str	r1, [r3, #0]
 800a9fe:	e002      	b.n	800aa06 <_printf_i+0x1d2>
 800aa00:	0670      	lsls	r0, r6, #25
 800aa02:	d5fb      	bpl.n	800a9fc <_printf_i+0x1c8>
 800aa04:	8019      	strh	r1, [r3, #0]
 800aa06:	2300      	movs	r3, #0
 800aa08:	6123      	str	r3, [r4, #16]
 800aa0a:	4615      	mov	r5, r2
 800aa0c:	e7ba      	b.n	800a984 <_printf_i+0x150>
 800aa0e:	682b      	ldr	r3, [r5, #0]
 800aa10:	1d1a      	adds	r2, r3, #4
 800aa12:	602a      	str	r2, [r5, #0]
 800aa14:	681d      	ldr	r5, [r3, #0]
 800aa16:	6862      	ldr	r2, [r4, #4]
 800aa18:	2100      	movs	r1, #0
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	f7f5 fc68 	bl	80002f0 <memchr>
 800aa20:	b108      	cbz	r0, 800aa26 <_printf_i+0x1f2>
 800aa22:	1b40      	subs	r0, r0, r5
 800aa24:	6060      	str	r0, [r4, #4]
 800aa26:	6863      	ldr	r3, [r4, #4]
 800aa28:	6123      	str	r3, [r4, #16]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa30:	e7a8      	b.n	800a984 <_printf_i+0x150>
 800aa32:	6923      	ldr	r3, [r4, #16]
 800aa34:	462a      	mov	r2, r5
 800aa36:	4649      	mov	r1, r9
 800aa38:	4640      	mov	r0, r8
 800aa3a:	47d0      	blx	sl
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	d0ab      	beq.n	800a998 <_printf_i+0x164>
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	079b      	lsls	r3, r3, #30
 800aa44:	d413      	bmi.n	800aa6e <_printf_i+0x23a>
 800aa46:	68e0      	ldr	r0, [r4, #12]
 800aa48:	9b03      	ldr	r3, [sp, #12]
 800aa4a:	4298      	cmp	r0, r3
 800aa4c:	bfb8      	it	lt
 800aa4e:	4618      	movlt	r0, r3
 800aa50:	e7a4      	b.n	800a99c <_printf_i+0x168>
 800aa52:	2301      	movs	r3, #1
 800aa54:	4632      	mov	r2, r6
 800aa56:	4649      	mov	r1, r9
 800aa58:	4640      	mov	r0, r8
 800aa5a:	47d0      	blx	sl
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	d09b      	beq.n	800a998 <_printf_i+0x164>
 800aa60:	3501      	adds	r5, #1
 800aa62:	68e3      	ldr	r3, [r4, #12]
 800aa64:	9903      	ldr	r1, [sp, #12]
 800aa66:	1a5b      	subs	r3, r3, r1
 800aa68:	42ab      	cmp	r3, r5
 800aa6a:	dcf2      	bgt.n	800aa52 <_printf_i+0x21e>
 800aa6c:	e7eb      	b.n	800aa46 <_printf_i+0x212>
 800aa6e:	2500      	movs	r5, #0
 800aa70:	f104 0619 	add.w	r6, r4, #25
 800aa74:	e7f5      	b.n	800aa62 <_printf_i+0x22e>
 800aa76:	bf00      	nop
 800aa78:	0800c709 	.word	0x0800c709
 800aa7c:	0800c71a 	.word	0x0800c71a

0800aa80 <_putc_r>:
 800aa80:	b570      	push	{r4, r5, r6, lr}
 800aa82:	460d      	mov	r5, r1
 800aa84:	4614      	mov	r4, r2
 800aa86:	4606      	mov	r6, r0
 800aa88:	b118      	cbz	r0, 800aa92 <_putc_r+0x12>
 800aa8a:	6983      	ldr	r3, [r0, #24]
 800aa8c:	b90b      	cbnz	r3, 800aa92 <_putc_r+0x12>
 800aa8e:	f7ff fbd5 	bl	800a23c <__sinit>
 800aa92:	4b1c      	ldr	r3, [pc, #112]	; (800ab04 <_putc_r+0x84>)
 800aa94:	429c      	cmp	r4, r3
 800aa96:	d124      	bne.n	800aae2 <_putc_r+0x62>
 800aa98:	6874      	ldr	r4, [r6, #4]
 800aa9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa9c:	07d8      	lsls	r0, r3, #31
 800aa9e:	d405      	bmi.n	800aaac <_putc_r+0x2c>
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	0599      	lsls	r1, r3, #22
 800aaa4:	d402      	bmi.n	800aaac <_putc_r+0x2c>
 800aaa6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaa8:	f7ff fc66 	bl	800a378 <__retarget_lock_acquire_recursive>
 800aaac:	68a3      	ldr	r3, [r4, #8]
 800aaae:	3b01      	subs	r3, #1
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	60a3      	str	r3, [r4, #8]
 800aab4:	da05      	bge.n	800aac2 <_putc_r+0x42>
 800aab6:	69a2      	ldr	r2, [r4, #24]
 800aab8:	4293      	cmp	r3, r2
 800aaba:	db1c      	blt.n	800aaf6 <_putc_r+0x76>
 800aabc:	b2eb      	uxtb	r3, r5
 800aabe:	2b0a      	cmp	r3, #10
 800aac0:	d019      	beq.n	800aaf6 <_putc_r+0x76>
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	1c5a      	adds	r2, r3, #1
 800aac6:	6022      	str	r2, [r4, #0]
 800aac8:	701d      	strb	r5, [r3, #0]
 800aaca:	b2ed      	uxtb	r5, r5
 800aacc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aace:	07da      	lsls	r2, r3, #31
 800aad0:	d405      	bmi.n	800aade <_putc_r+0x5e>
 800aad2:	89a3      	ldrh	r3, [r4, #12]
 800aad4:	059b      	lsls	r3, r3, #22
 800aad6:	d402      	bmi.n	800aade <_putc_r+0x5e>
 800aad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aada:	f7ff fc4e 	bl	800a37a <__retarget_lock_release_recursive>
 800aade:	4628      	mov	r0, r5
 800aae0:	bd70      	pop	{r4, r5, r6, pc}
 800aae2:	4b09      	ldr	r3, [pc, #36]	; (800ab08 <_putc_r+0x88>)
 800aae4:	429c      	cmp	r4, r3
 800aae6:	d101      	bne.n	800aaec <_putc_r+0x6c>
 800aae8:	68b4      	ldr	r4, [r6, #8]
 800aaea:	e7d6      	b.n	800aa9a <_putc_r+0x1a>
 800aaec:	4b07      	ldr	r3, [pc, #28]	; (800ab0c <_putc_r+0x8c>)
 800aaee:	429c      	cmp	r4, r3
 800aaf0:	bf08      	it	eq
 800aaf2:	68f4      	ldreq	r4, [r6, #12]
 800aaf4:	e7d1      	b.n	800aa9a <_putc_r+0x1a>
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	4622      	mov	r2, r4
 800aafa:	4630      	mov	r0, r6
 800aafc:	f000 f85c 	bl	800abb8 <__swbuf_r>
 800ab00:	4605      	mov	r5, r0
 800ab02:	e7e3      	b.n	800aacc <_putc_r+0x4c>
 800ab04:	0800c6b8 	.word	0x0800c6b8
 800ab08:	0800c6d8 	.word	0x0800c6d8
 800ab0c:	0800c698 	.word	0x0800c698

0800ab10 <_sbrk_r>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	4d06      	ldr	r5, [pc, #24]	; (800ab2c <_sbrk_r+0x1c>)
 800ab14:	2300      	movs	r3, #0
 800ab16:	4604      	mov	r4, r0
 800ab18:	4608      	mov	r0, r1
 800ab1a:	602b      	str	r3, [r5, #0]
 800ab1c:	f7f6 fbf8 	bl	8001310 <_sbrk>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d102      	bne.n	800ab2a <_sbrk_r+0x1a>
 800ab24:	682b      	ldr	r3, [r5, #0]
 800ab26:	b103      	cbz	r3, 800ab2a <_sbrk_r+0x1a>
 800ab28:	6023      	str	r3, [r4, #0]
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	24096278 	.word	0x24096278

0800ab30 <__sread>:
 800ab30:	b510      	push	{r4, lr}
 800ab32:	460c      	mov	r4, r1
 800ab34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab38:	f000 fab2 	bl	800b0a0 <_read_r>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	bfab      	itete	ge
 800ab40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab42:	89a3      	ldrhlt	r3, [r4, #12]
 800ab44:	181b      	addge	r3, r3, r0
 800ab46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab4a:	bfac      	ite	ge
 800ab4c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab4e:	81a3      	strhlt	r3, [r4, #12]
 800ab50:	bd10      	pop	{r4, pc}

0800ab52 <__swrite>:
 800ab52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab56:	461f      	mov	r7, r3
 800ab58:	898b      	ldrh	r3, [r1, #12]
 800ab5a:	05db      	lsls	r3, r3, #23
 800ab5c:	4605      	mov	r5, r0
 800ab5e:	460c      	mov	r4, r1
 800ab60:	4616      	mov	r6, r2
 800ab62:	d505      	bpl.n	800ab70 <__swrite+0x1e>
 800ab64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab68:	2302      	movs	r3, #2
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f000 f9c8 	bl	800af00 <_lseek_r>
 800ab70:	89a3      	ldrh	r3, [r4, #12]
 800ab72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab7a:	81a3      	strh	r3, [r4, #12]
 800ab7c:	4632      	mov	r2, r6
 800ab7e:	463b      	mov	r3, r7
 800ab80:	4628      	mov	r0, r5
 800ab82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab86:	f000 b869 	b.w	800ac5c <_write_r>

0800ab8a <__sseek>:
 800ab8a:	b510      	push	{r4, lr}
 800ab8c:	460c      	mov	r4, r1
 800ab8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab92:	f000 f9b5 	bl	800af00 <_lseek_r>
 800ab96:	1c43      	adds	r3, r0, #1
 800ab98:	89a3      	ldrh	r3, [r4, #12]
 800ab9a:	bf15      	itete	ne
 800ab9c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aba2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aba6:	81a3      	strheq	r3, [r4, #12]
 800aba8:	bf18      	it	ne
 800abaa:	81a3      	strhne	r3, [r4, #12]
 800abac:	bd10      	pop	{r4, pc}

0800abae <__sclose>:
 800abae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb2:	f000 b8d3 	b.w	800ad5c <_close_r>
	...

0800abb8 <__swbuf_r>:
 800abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abba:	460e      	mov	r6, r1
 800abbc:	4614      	mov	r4, r2
 800abbe:	4605      	mov	r5, r0
 800abc0:	b118      	cbz	r0, 800abca <__swbuf_r+0x12>
 800abc2:	6983      	ldr	r3, [r0, #24]
 800abc4:	b90b      	cbnz	r3, 800abca <__swbuf_r+0x12>
 800abc6:	f7ff fb39 	bl	800a23c <__sinit>
 800abca:	4b21      	ldr	r3, [pc, #132]	; (800ac50 <__swbuf_r+0x98>)
 800abcc:	429c      	cmp	r4, r3
 800abce:	d12b      	bne.n	800ac28 <__swbuf_r+0x70>
 800abd0:	686c      	ldr	r4, [r5, #4]
 800abd2:	69a3      	ldr	r3, [r4, #24]
 800abd4:	60a3      	str	r3, [r4, #8]
 800abd6:	89a3      	ldrh	r3, [r4, #12]
 800abd8:	071a      	lsls	r2, r3, #28
 800abda:	d52f      	bpl.n	800ac3c <__swbuf_r+0x84>
 800abdc:	6923      	ldr	r3, [r4, #16]
 800abde:	b36b      	cbz	r3, 800ac3c <__swbuf_r+0x84>
 800abe0:	6923      	ldr	r3, [r4, #16]
 800abe2:	6820      	ldr	r0, [r4, #0]
 800abe4:	1ac0      	subs	r0, r0, r3
 800abe6:	6963      	ldr	r3, [r4, #20]
 800abe8:	b2f6      	uxtb	r6, r6
 800abea:	4283      	cmp	r3, r0
 800abec:	4637      	mov	r7, r6
 800abee:	dc04      	bgt.n	800abfa <__swbuf_r+0x42>
 800abf0:	4621      	mov	r1, r4
 800abf2:	4628      	mov	r0, r5
 800abf4:	f000 f948 	bl	800ae88 <_fflush_r>
 800abf8:	bb30      	cbnz	r0, 800ac48 <__swbuf_r+0x90>
 800abfa:	68a3      	ldr	r3, [r4, #8]
 800abfc:	3b01      	subs	r3, #1
 800abfe:	60a3      	str	r3, [r4, #8]
 800ac00:	6823      	ldr	r3, [r4, #0]
 800ac02:	1c5a      	adds	r2, r3, #1
 800ac04:	6022      	str	r2, [r4, #0]
 800ac06:	701e      	strb	r6, [r3, #0]
 800ac08:	6963      	ldr	r3, [r4, #20]
 800ac0a:	3001      	adds	r0, #1
 800ac0c:	4283      	cmp	r3, r0
 800ac0e:	d004      	beq.n	800ac1a <__swbuf_r+0x62>
 800ac10:	89a3      	ldrh	r3, [r4, #12]
 800ac12:	07db      	lsls	r3, r3, #31
 800ac14:	d506      	bpl.n	800ac24 <__swbuf_r+0x6c>
 800ac16:	2e0a      	cmp	r6, #10
 800ac18:	d104      	bne.n	800ac24 <__swbuf_r+0x6c>
 800ac1a:	4621      	mov	r1, r4
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	f000 f933 	bl	800ae88 <_fflush_r>
 800ac22:	b988      	cbnz	r0, 800ac48 <__swbuf_r+0x90>
 800ac24:	4638      	mov	r0, r7
 800ac26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac28:	4b0a      	ldr	r3, [pc, #40]	; (800ac54 <__swbuf_r+0x9c>)
 800ac2a:	429c      	cmp	r4, r3
 800ac2c:	d101      	bne.n	800ac32 <__swbuf_r+0x7a>
 800ac2e:	68ac      	ldr	r4, [r5, #8]
 800ac30:	e7cf      	b.n	800abd2 <__swbuf_r+0x1a>
 800ac32:	4b09      	ldr	r3, [pc, #36]	; (800ac58 <__swbuf_r+0xa0>)
 800ac34:	429c      	cmp	r4, r3
 800ac36:	bf08      	it	eq
 800ac38:	68ec      	ldreq	r4, [r5, #12]
 800ac3a:	e7ca      	b.n	800abd2 <__swbuf_r+0x1a>
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	4628      	mov	r0, r5
 800ac40:	f000 f81e 	bl	800ac80 <__swsetup_r>
 800ac44:	2800      	cmp	r0, #0
 800ac46:	d0cb      	beq.n	800abe0 <__swbuf_r+0x28>
 800ac48:	f04f 37ff 	mov.w	r7, #4294967295
 800ac4c:	e7ea      	b.n	800ac24 <__swbuf_r+0x6c>
 800ac4e:	bf00      	nop
 800ac50:	0800c6b8 	.word	0x0800c6b8
 800ac54:	0800c6d8 	.word	0x0800c6d8
 800ac58:	0800c698 	.word	0x0800c698

0800ac5c <_write_r>:
 800ac5c:	b538      	push	{r3, r4, r5, lr}
 800ac5e:	4d07      	ldr	r5, [pc, #28]	; (800ac7c <_write_r+0x20>)
 800ac60:	4604      	mov	r4, r0
 800ac62:	4608      	mov	r0, r1
 800ac64:	4611      	mov	r1, r2
 800ac66:	2200      	movs	r2, #0
 800ac68:	602a      	str	r2, [r5, #0]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	f7f6 faff 	bl	800126e <_write>
 800ac70:	1c43      	adds	r3, r0, #1
 800ac72:	d102      	bne.n	800ac7a <_write_r+0x1e>
 800ac74:	682b      	ldr	r3, [r5, #0]
 800ac76:	b103      	cbz	r3, 800ac7a <_write_r+0x1e>
 800ac78:	6023      	str	r3, [r4, #0]
 800ac7a:	bd38      	pop	{r3, r4, r5, pc}
 800ac7c:	24096278 	.word	0x24096278

0800ac80 <__swsetup_r>:
 800ac80:	4b32      	ldr	r3, [pc, #200]	; (800ad4c <__swsetup_r+0xcc>)
 800ac82:	b570      	push	{r4, r5, r6, lr}
 800ac84:	681d      	ldr	r5, [r3, #0]
 800ac86:	4606      	mov	r6, r0
 800ac88:	460c      	mov	r4, r1
 800ac8a:	b125      	cbz	r5, 800ac96 <__swsetup_r+0x16>
 800ac8c:	69ab      	ldr	r3, [r5, #24]
 800ac8e:	b913      	cbnz	r3, 800ac96 <__swsetup_r+0x16>
 800ac90:	4628      	mov	r0, r5
 800ac92:	f7ff fad3 	bl	800a23c <__sinit>
 800ac96:	4b2e      	ldr	r3, [pc, #184]	; (800ad50 <__swsetup_r+0xd0>)
 800ac98:	429c      	cmp	r4, r3
 800ac9a:	d10f      	bne.n	800acbc <__swsetup_r+0x3c>
 800ac9c:	686c      	ldr	r4, [r5, #4]
 800ac9e:	89a3      	ldrh	r3, [r4, #12]
 800aca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aca4:	0719      	lsls	r1, r3, #28
 800aca6:	d42c      	bmi.n	800ad02 <__swsetup_r+0x82>
 800aca8:	06dd      	lsls	r5, r3, #27
 800acaa:	d411      	bmi.n	800acd0 <__swsetup_r+0x50>
 800acac:	2309      	movs	r3, #9
 800acae:	6033      	str	r3, [r6, #0]
 800acb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800acb4:	81a3      	strh	r3, [r4, #12]
 800acb6:	f04f 30ff 	mov.w	r0, #4294967295
 800acba:	e03e      	b.n	800ad3a <__swsetup_r+0xba>
 800acbc:	4b25      	ldr	r3, [pc, #148]	; (800ad54 <__swsetup_r+0xd4>)
 800acbe:	429c      	cmp	r4, r3
 800acc0:	d101      	bne.n	800acc6 <__swsetup_r+0x46>
 800acc2:	68ac      	ldr	r4, [r5, #8]
 800acc4:	e7eb      	b.n	800ac9e <__swsetup_r+0x1e>
 800acc6:	4b24      	ldr	r3, [pc, #144]	; (800ad58 <__swsetup_r+0xd8>)
 800acc8:	429c      	cmp	r4, r3
 800acca:	bf08      	it	eq
 800accc:	68ec      	ldreq	r4, [r5, #12]
 800acce:	e7e6      	b.n	800ac9e <__swsetup_r+0x1e>
 800acd0:	0758      	lsls	r0, r3, #29
 800acd2:	d512      	bpl.n	800acfa <__swsetup_r+0x7a>
 800acd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acd6:	b141      	cbz	r1, 800acea <__swsetup_r+0x6a>
 800acd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acdc:	4299      	cmp	r1, r3
 800acde:	d002      	beq.n	800ace6 <__swsetup_r+0x66>
 800ace0:	4630      	mov	r0, r6
 800ace2:	f000 f991 	bl	800b008 <_free_r>
 800ace6:	2300      	movs	r3, #0
 800ace8:	6363      	str	r3, [r4, #52]	; 0x34
 800acea:	89a3      	ldrh	r3, [r4, #12]
 800acec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800acf0:	81a3      	strh	r3, [r4, #12]
 800acf2:	2300      	movs	r3, #0
 800acf4:	6063      	str	r3, [r4, #4]
 800acf6:	6923      	ldr	r3, [r4, #16]
 800acf8:	6023      	str	r3, [r4, #0]
 800acfa:	89a3      	ldrh	r3, [r4, #12]
 800acfc:	f043 0308 	orr.w	r3, r3, #8
 800ad00:	81a3      	strh	r3, [r4, #12]
 800ad02:	6923      	ldr	r3, [r4, #16]
 800ad04:	b94b      	cbnz	r3, 800ad1a <__swsetup_r+0x9a>
 800ad06:	89a3      	ldrh	r3, [r4, #12]
 800ad08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad10:	d003      	beq.n	800ad1a <__swsetup_r+0x9a>
 800ad12:	4621      	mov	r1, r4
 800ad14:	4630      	mov	r0, r6
 800ad16:	f000 f92b 	bl	800af70 <__smakebuf_r>
 800ad1a:	89a0      	ldrh	r0, [r4, #12]
 800ad1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad20:	f010 0301 	ands.w	r3, r0, #1
 800ad24:	d00a      	beq.n	800ad3c <__swsetup_r+0xbc>
 800ad26:	2300      	movs	r3, #0
 800ad28:	60a3      	str	r3, [r4, #8]
 800ad2a:	6963      	ldr	r3, [r4, #20]
 800ad2c:	425b      	negs	r3, r3
 800ad2e:	61a3      	str	r3, [r4, #24]
 800ad30:	6923      	ldr	r3, [r4, #16]
 800ad32:	b943      	cbnz	r3, 800ad46 <__swsetup_r+0xc6>
 800ad34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad38:	d1ba      	bne.n	800acb0 <__swsetup_r+0x30>
 800ad3a:	bd70      	pop	{r4, r5, r6, pc}
 800ad3c:	0781      	lsls	r1, r0, #30
 800ad3e:	bf58      	it	pl
 800ad40:	6963      	ldrpl	r3, [r4, #20]
 800ad42:	60a3      	str	r3, [r4, #8]
 800ad44:	e7f4      	b.n	800ad30 <__swsetup_r+0xb0>
 800ad46:	2000      	movs	r0, #0
 800ad48:	e7f7      	b.n	800ad3a <__swsetup_r+0xba>
 800ad4a:	bf00      	nop
 800ad4c:	24000010 	.word	0x24000010
 800ad50:	0800c6b8 	.word	0x0800c6b8
 800ad54:	0800c6d8 	.word	0x0800c6d8
 800ad58:	0800c698 	.word	0x0800c698

0800ad5c <_close_r>:
 800ad5c:	b538      	push	{r3, r4, r5, lr}
 800ad5e:	4d06      	ldr	r5, [pc, #24]	; (800ad78 <_close_r+0x1c>)
 800ad60:	2300      	movs	r3, #0
 800ad62:	4604      	mov	r4, r0
 800ad64:	4608      	mov	r0, r1
 800ad66:	602b      	str	r3, [r5, #0]
 800ad68:	f7f6 fa9d 	bl	80012a6 <_close>
 800ad6c:	1c43      	adds	r3, r0, #1
 800ad6e:	d102      	bne.n	800ad76 <_close_r+0x1a>
 800ad70:	682b      	ldr	r3, [r5, #0]
 800ad72:	b103      	cbz	r3, 800ad76 <_close_r+0x1a>
 800ad74:	6023      	str	r3, [r4, #0]
 800ad76:	bd38      	pop	{r3, r4, r5, pc}
 800ad78:	24096278 	.word	0x24096278

0800ad7c <__sflush_r>:
 800ad7c:	898a      	ldrh	r2, [r1, #12]
 800ad7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad82:	4605      	mov	r5, r0
 800ad84:	0710      	lsls	r0, r2, #28
 800ad86:	460c      	mov	r4, r1
 800ad88:	d458      	bmi.n	800ae3c <__sflush_r+0xc0>
 800ad8a:	684b      	ldr	r3, [r1, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	dc05      	bgt.n	800ad9c <__sflush_r+0x20>
 800ad90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	dc02      	bgt.n	800ad9c <__sflush_r+0x20>
 800ad96:	2000      	movs	r0, #0
 800ad98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad9e:	2e00      	cmp	r6, #0
 800ada0:	d0f9      	beq.n	800ad96 <__sflush_r+0x1a>
 800ada2:	2300      	movs	r3, #0
 800ada4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ada8:	682f      	ldr	r7, [r5, #0]
 800adaa:	602b      	str	r3, [r5, #0]
 800adac:	d032      	beq.n	800ae14 <__sflush_r+0x98>
 800adae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800adb0:	89a3      	ldrh	r3, [r4, #12]
 800adb2:	075a      	lsls	r2, r3, #29
 800adb4:	d505      	bpl.n	800adc2 <__sflush_r+0x46>
 800adb6:	6863      	ldr	r3, [r4, #4]
 800adb8:	1ac0      	subs	r0, r0, r3
 800adba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adbc:	b10b      	cbz	r3, 800adc2 <__sflush_r+0x46>
 800adbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adc0:	1ac0      	subs	r0, r0, r3
 800adc2:	2300      	movs	r3, #0
 800adc4:	4602      	mov	r2, r0
 800adc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adc8:	6a21      	ldr	r1, [r4, #32]
 800adca:	4628      	mov	r0, r5
 800adcc:	47b0      	blx	r6
 800adce:	1c43      	adds	r3, r0, #1
 800add0:	89a3      	ldrh	r3, [r4, #12]
 800add2:	d106      	bne.n	800ade2 <__sflush_r+0x66>
 800add4:	6829      	ldr	r1, [r5, #0]
 800add6:	291d      	cmp	r1, #29
 800add8:	d82c      	bhi.n	800ae34 <__sflush_r+0xb8>
 800adda:	4a2a      	ldr	r2, [pc, #168]	; (800ae84 <__sflush_r+0x108>)
 800addc:	40ca      	lsrs	r2, r1
 800adde:	07d6      	lsls	r6, r2, #31
 800ade0:	d528      	bpl.n	800ae34 <__sflush_r+0xb8>
 800ade2:	2200      	movs	r2, #0
 800ade4:	6062      	str	r2, [r4, #4]
 800ade6:	04d9      	lsls	r1, r3, #19
 800ade8:	6922      	ldr	r2, [r4, #16]
 800adea:	6022      	str	r2, [r4, #0]
 800adec:	d504      	bpl.n	800adf8 <__sflush_r+0x7c>
 800adee:	1c42      	adds	r2, r0, #1
 800adf0:	d101      	bne.n	800adf6 <__sflush_r+0x7a>
 800adf2:	682b      	ldr	r3, [r5, #0]
 800adf4:	b903      	cbnz	r3, 800adf8 <__sflush_r+0x7c>
 800adf6:	6560      	str	r0, [r4, #84]	; 0x54
 800adf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adfa:	602f      	str	r7, [r5, #0]
 800adfc:	2900      	cmp	r1, #0
 800adfe:	d0ca      	beq.n	800ad96 <__sflush_r+0x1a>
 800ae00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae04:	4299      	cmp	r1, r3
 800ae06:	d002      	beq.n	800ae0e <__sflush_r+0x92>
 800ae08:	4628      	mov	r0, r5
 800ae0a:	f000 f8fd 	bl	800b008 <_free_r>
 800ae0e:	2000      	movs	r0, #0
 800ae10:	6360      	str	r0, [r4, #52]	; 0x34
 800ae12:	e7c1      	b.n	800ad98 <__sflush_r+0x1c>
 800ae14:	6a21      	ldr	r1, [r4, #32]
 800ae16:	2301      	movs	r3, #1
 800ae18:	4628      	mov	r0, r5
 800ae1a:	47b0      	blx	r6
 800ae1c:	1c41      	adds	r1, r0, #1
 800ae1e:	d1c7      	bne.n	800adb0 <__sflush_r+0x34>
 800ae20:	682b      	ldr	r3, [r5, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d0c4      	beq.n	800adb0 <__sflush_r+0x34>
 800ae26:	2b1d      	cmp	r3, #29
 800ae28:	d001      	beq.n	800ae2e <__sflush_r+0xb2>
 800ae2a:	2b16      	cmp	r3, #22
 800ae2c:	d101      	bne.n	800ae32 <__sflush_r+0xb6>
 800ae2e:	602f      	str	r7, [r5, #0]
 800ae30:	e7b1      	b.n	800ad96 <__sflush_r+0x1a>
 800ae32:	89a3      	ldrh	r3, [r4, #12]
 800ae34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae38:	81a3      	strh	r3, [r4, #12]
 800ae3a:	e7ad      	b.n	800ad98 <__sflush_r+0x1c>
 800ae3c:	690f      	ldr	r7, [r1, #16]
 800ae3e:	2f00      	cmp	r7, #0
 800ae40:	d0a9      	beq.n	800ad96 <__sflush_r+0x1a>
 800ae42:	0793      	lsls	r3, r2, #30
 800ae44:	680e      	ldr	r6, [r1, #0]
 800ae46:	bf08      	it	eq
 800ae48:	694b      	ldreq	r3, [r1, #20]
 800ae4a:	600f      	str	r7, [r1, #0]
 800ae4c:	bf18      	it	ne
 800ae4e:	2300      	movne	r3, #0
 800ae50:	eba6 0807 	sub.w	r8, r6, r7
 800ae54:	608b      	str	r3, [r1, #8]
 800ae56:	f1b8 0f00 	cmp.w	r8, #0
 800ae5a:	dd9c      	ble.n	800ad96 <__sflush_r+0x1a>
 800ae5c:	6a21      	ldr	r1, [r4, #32]
 800ae5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae60:	4643      	mov	r3, r8
 800ae62:	463a      	mov	r2, r7
 800ae64:	4628      	mov	r0, r5
 800ae66:	47b0      	blx	r6
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	dc06      	bgt.n	800ae7a <__sflush_r+0xfe>
 800ae6c:	89a3      	ldrh	r3, [r4, #12]
 800ae6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae72:	81a3      	strh	r3, [r4, #12]
 800ae74:	f04f 30ff 	mov.w	r0, #4294967295
 800ae78:	e78e      	b.n	800ad98 <__sflush_r+0x1c>
 800ae7a:	4407      	add	r7, r0
 800ae7c:	eba8 0800 	sub.w	r8, r8, r0
 800ae80:	e7e9      	b.n	800ae56 <__sflush_r+0xda>
 800ae82:	bf00      	nop
 800ae84:	20400001 	.word	0x20400001

0800ae88 <_fflush_r>:
 800ae88:	b538      	push	{r3, r4, r5, lr}
 800ae8a:	690b      	ldr	r3, [r1, #16]
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	460c      	mov	r4, r1
 800ae90:	b913      	cbnz	r3, 800ae98 <_fflush_r+0x10>
 800ae92:	2500      	movs	r5, #0
 800ae94:	4628      	mov	r0, r5
 800ae96:	bd38      	pop	{r3, r4, r5, pc}
 800ae98:	b118      	cbz	r0, 800aea2 <_fflush_r+0x1a>
 800ae9a:	6983      	ldr	r3, [r0, #24]
 800ae9c:	b90b      	cbnz	r3, 800aea2 <_fflush_r+0x1a>
 800ae9e:	f7ff f9cd 	bl	800a23c <__sinit>
 800aea2:	4b14      	ldr	r3, [pc, #80]	; (800aef4 <_fflush_r+0x6c>)
 800aea4:	429c      	cmp	r4, r3
 800aea6:	d11b      	bne.n	800aee0 <_fflush_r+0x58>
 800aea8:	686c      	ldr	r4, [r5, #4]
 800aeaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d0ef      	beq.n	800ae92 <_fflush_r+0xa>
 800aeb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aeb4:	07d0      	lsls	r0, r2, #31
 800aeb6:	d404      	bmi.n	800aec2 <_fflush_r+0x3a>
 800aeb8:	0599      	lsls	r1, r3, #22
 800aeba:	d402      	bmi.n	800aec2 <_fflush_r+0x3a>
 800aebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aebe:	f7ff fa5b 	bl	800a378 <__retarget_lock_acquire_recursive>
 800aec2:	4628      	mov	r0, r5
 800aec4:	4621      	mov	r1, r4
 800aec6:	f7ff ff59 	bl	800ad7c <__sflush_r>
 800aeca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aecc:	07da      	lsls	r2, r3, #31
 800aece:	4605      	mov	r5, r0
 800aed0:	d4e0      	bmi.n	800ae94 <_fflush_r+0xc>
 800aed2:	89a3      	ldrh	r3, [r4, #12]
 800aed4:	059b      	lsls	r3, r3, #22
 800aed6:	d4dd      	bmi.n	800ae94 <_fflush_r+0xc>
 800aed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeda:	f7ff fa4e 	bl	800a37a <__retarget_lock_release_recursive>
 800aede:	e7d9      	b.n	800ae94 <_fflush_r+0xc>
 800aee0:	4b05      	ldr	r3, [pc, #20]	; (800aef8 <_fflush_r+0x70>)
 800aee2:	429c      	cmp	r4, r3
 800aee4:	d101      	bne.n	800aeea <_fflush_r+0x62>
 800aee6:	68ac      	ldr	r4, [r5, #8]
 800aee8:	e7df      	b.n	800aeaa <_fflush_r+0x22>
 800aeea:	4b04      	ldr	r3, [pc, #16]	; (800aefc <_fflush_r+0x74>)
 800aeec:	429c      	cmp	r4, r3
 800aeee:	bf08      	it	eq
 800aef0:	68ec      	ldreq	r4, [r5, #12]
 800aef2:	e7da      	b.n	800aeaa <_fflush_r+0x22>
 800aef4:	0800c6b8 	.word	0x0800c6b8
 800aef8:	0800c6d8 	.word	0x0800c6d8
 800aefc:	0800c698 	.word	0x0800c698

0800af00 <_lseek_r>:
 800af00:	b538      	push	{r3, r4, r5, lr}
 800af02:	4d07      	ldr	r5, [pc, #28]	; (800af20 <_lseek_r+0x20>)
 800af04:	4604      	mov	r4, r0
 800af06:	4608      	mov	r0, r1
 800af08:	4611      	mov	r1, r2
 800af0a:	2200      	movs	r2, #0
 800af0c:	602a      	str	r2, [r5, #0]
 800af0e:	461a      	mov	r2, r3
 800af10:	f7f6 f9f0 	bl	80012f4 <_lseek>
 800af14:	1c43      	adds	r3, r0, #1
 800af16:	d102      	bne.n	800af1e <_lseek_r+0x1e>
 800af18:	682b      	ldr	r3, [r5, #0]
 800af1a:	b103      	cbz	r3, 800af1e <_lseek_r+0x1e>
 800af1c:	6023      	str	r3, [r4, #0]
 800af1e:	bd38      	pop	{r3, r4, r5, pc}
 800af20:	24096278 	.word	0x24096278

0800af24 <__swhatbuf_r>:
 800af24:	b570      	push	{r4, r5, r6, lr}
 800af26:	460e      	mov	r6, r1
 800af28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af2c:	2900      	cmp	r1, #0
 800af2e:	b096      	sub	sp, #88	; 0x58
 800af30:	4614      	mov	r4, r2
 800af32:	461d      	mov	r5, r3
 800af34:	da08      	bge.n	800af48 <__swhatbuf_r+0x24>
 800af36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800af3a:	2200      	movs	r2, #0
 800af3c:	602a      	str	r2, [r5, #0]
 800af3e:	061a      	lsls	r2, r3, #24
 800af40:	d410      	bmi.n	800af64 <__swhatbuf_r+0x40>
 800af42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af46:	e00e      	b.n	800af66 <__swhatbuf_r+0x42>
 800af48:	466a      	mov	r2, sp
 800af4a:	f000 f8bb 	bl	800b0c4 <_fstat_r>
 800af4e:	2800      	cmp	r0, #0
 800af50:	dbf1      	blt.n	800af36 <__swhatbuf_r+0x12>
 800af52:	9a01      	ldr	r2, [sp, #4]
 800af54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af5c:	425a      	negs	r2, r3
 800af5e:	415a      	adcs	r2, r3
 800af60:	602a      	str	r2, [r5, #0]
 800af62:	e7ee      	b.n	800af42 <__swhatbuf_r+0x1e>
 800af64:	2340      	movs	r3, #64	; 0x40
 800af66:	2000      	movs	r0, #0
 800af68:	6023      	str	r3, [r4, #0]
 800af6a:	b016      	add	sp, #88	; 0x58
 800af6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af70 <__smakebuf_r>:
 800af70:	898b      	ldrh	r3, [r1, #12]
 800af72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af74:	079d      	lsls	r5, r3, #30
 800af76:	4606      	mov	r6, r0
 800af78:	460c      	mov	r4, r1
 800af7a:	d507      	bpl.n	800af8c <__smakebuf_r+0x1c>
 800af7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	6123      	str	r3, [r4, #16]
 800af84:	2301      	movs	r3, #1
 800af86:	6163      	str	r3, [r4, #20]
 800af88:	b002      	add	sp, #8
 800af8a:	bd70      	pop	{r4, r5, r6, pc}
 800af8c:	ab01      	add	r3, sp, #4
 800af8e:	466a      	mov	r2, sp
 800af90:	f7ff ffc8 	bl	800af24 <__swhatbuf_r>
 800af94:	9900      	ldr	r1, [sp, #0]
 800af96:	4605      	mov	r5, r0
 800af98:	4630      	mov	r0, r6
 800af9a:	f7ff fa0f 	bl	800a3bc <_malloc_r>
 800af9e:	b948      	cbnz	r0, 800afb4 <__smakebuf_r+0x44>
 800afa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afa4:	059a      	lsls	r2, r3, #22
 800afa6:	d4ef      	bmi.n	800af88 <__smakebuf_r+0x18>
 800afa8:	f023 0303 	bic.w	r3, r3, #3
 800afac:	f043 0302 	orr.w	r3, r3, #2
 800afb0:	81a3      	strh	r3, [r4, #12]
 800afb2:	e7e3      	b.n	800af7c <__smakebuf_r+0xc>
 800afb4:	4b0d      	ldr	r3, [pc, #52]	; (800afec <__smakebuf_r+0x7c>)
 800afb6:	62b3      	str	r3, [r6, #40]	; 0x28
 800afb8:	89a3      	ldrh	r3, [r4, #12]
 800afba:	6020      	str	r0, [r4, #0]
 800afbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc0:	81a3      	strh	r3, [r4, #12]
 800afc2:	9b00      	ldr	r3, [sp, #0]
 800afc4:	6163      	str	r3, [r4, #20]
 800afc6:	9b01      	ldr	r3, [sp, #4]
 800afc8:	6120      	str	r0, [r4, #16]
 800afca:	b15b      	cbz	r3, 800afe4 <__smakebuf_r+0x74>
 800afcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afd0:	4630      	mov	r0, r6
 800afd2:	f000 f889 	bl	800b0e8 <_isatty_r>
 800afd6:	b128      	cbz	r0, 800afe4 <__smakebuf_r+0x74>
 800afd8:	89a3      	ldrh	r3, [r4, #12]
 800afda:	f023 0303 	bic.w	r3, r3, #3
 800afde:	f043 0301 	orr.w	r3, r3, #1
 800afe2:	81a3      	strh	r3, [r4, #12]
 800afe4:	89a0      	ldrh	r0, [r4, #12]
 800afe6:	4305      	orrs	r5, r0
 800afe8:	81a5      	strh	r5, [r4, #12]
 800afea:	e7cd      	b.n	800af88 <__smakebuf_r+0x18>
 800afec:	0800a1d5 	.word	0x0800a1d5

0800aff0 <__malloc_lock>:
 800aff0:	4801      	ldr	r0, [pc, #4]	; (800aff8 <__malloc_lock+0x8>)
 800aff2:	f7ff b9c1 	b.w	800a378 <__retarget_lock_acquire_recursive>
 800aff6:	bf00      	nop
 800aff8:	2409626c 	.word	0x2409626c

0800affc <__malloc_unlock>:
 800affc:	4801      	ldr	r0, [pc, #4]	; (800b004 <__malloc_unlock+0x8>)
 800affe:	f7ff b9bc 	b.w	800a37a <__retarget_lock_release_recursive>
 800b002:	bf00      	nop
 800b004:	2409626c 	.word	0x2409626c

0800b008 <_free_r>:
 800b008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b00a:	2900      	cmp	r1, #0
 800b00c:	d044      	beq.n	800b098 <_free_r+0x90>
 800b00e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b012:	9001      	str	r0, [sp, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	f1a1 0404 	sub.w	r4, r1, #4
 800b01a:	bfb8      	it	lt
 800b01c:	18e4      	addlt	r4, r4, r3
 800b01e:	f7ff ffe7 	bl	800aff0 <__malloc_lock>
 800b022:	4a1e      	ldr	r2, [pc, #120]	; (800b09c <_free_r+0x94>)
 800b024:	9801      	ldr	r0, [sp, #4]
 800b026:	6813      	ldr	r3, [r2, #0]
 800b028:	b933      	cbnz	r3, 800b038 <_free_r+0x30>
 800b02a:	6063      	str	r3, [r4, #4]
 800b02c:	6014      	str	r4, [r2, #0]
 800b02e:	b003      	add	sp, #12
 800b030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b034:	f7ff bfe2 	b.w	800affc <__malloc_unlock>
 800b038:	42a3      	cmp	r3, r4
 800b03a:	d908      	bls.n	800b04e <_free_r+0x46>
 800b03c:	6825      	ldr	r5, [r4, #0]
 800b03e:	1961      	adds	r1, r4, r5
 800b040:	428b      	cmp	r3, r1
 800b042:	bf01      	itttt	eq
 800b044:	6819      	ldreq	r1, [r3, #0]
 800b046:	685b      	ldreq	r3, [r3, #4]
 800b048:	1949      	addeq	r1, r1, r5
 800b04a:	6021      	streq	r1, [r4, #0]
 800b04c:	e7ed      	b.n	800b02a <_free_r+0x22>
 800b04e:	461a      	mov	r2, r3
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	b10b      	cbz	r3, 800b058 <_free_r+0x50>
 800b054:	42a3      	cmp	r3, r4
 800b056:	d9fa      	bls.n	800b04e <_free_r+0x46>
 800b058:	6811      	ldr	r1, [r2, #0]
 800b05a:	1855      	adds	r5, r2, r1
 800b05c:	42a5      	cmp	r5, r4
 800b05e:	d10b      	bne.n	800b078 <_free_r+0x70>
 800b060:	6824      	ldr	r4, [r4, #0]
 800b062:	4421      	add	r1, r4
 800b064:	1854      	adds	r4, r2, r1
 800b066:	42a3      	cmp	r3, r4
 800b068:	6011      	str	r1, [r2, #0]
 800b06a:	d1e0      	bne.n	800b02e <_free_r+0x26>
 800b06c:	681c      	ldr	r4, [r3, #0]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	6053      	str	r3, [r2, #4]
 800b072:	4421      	add	r1, r4
 800b074:	6011      	str	r1, [r2, #0]
 800b076:	e7da      	b.n	800b02e <_free_r+0x26>
 800b078:	d902      	bls.n	800b080 <_free_r+0x78>
 800b07a:	230c      	movs	r3, #12
 800b07c:	6003      	str	r3, [r0, #0]
 800b07e:	e7d6      	b.n	800b02e <_free_r+0x26>
 800b080:	6825      	ldr	r5, [r4, #0]
 800b082:	1961      	adds	r1, r4, r5
 800b084:	428b      	cmp	r3, r1
 800b086:	bf04      	itt	eq
 800b088:	6819      	ldreq	r1, [r3, #0]
 800b08a:	685b      	ldreq	r3, [r3, #4]
 800b08c:	6063      	str	r3, [r4, #4]
 800b08e:	bf04      	itt	eq
 800b090:	1949      	addeq	r1, r1, r5
 800b092:	6021      	streq	r1, [r4, #0]
 800b094:	6054      	str	r4, [r2, #4]
 800b096:	e7ca      	b.n	800b02e <_free_r+0x26>
 800b098:	b003      	add	sp, #12
 800b09a:	bd30      	pop	{r4, r5, pc}
 800b09c:	24096270 	.word	0x24096270

0800b0a0 <_read_r>:
 800b0a0:	b538      	push	{r3, r4, r5, lr}
 800b0a2:	4d07      	ldr	r5, [pc, #28]	; (800b0c0 <_read_r+0x20>)
 800b0a4:	4604      	mov	r4, r0
 800b0a6:	4608      	mov	r0, r1
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	602a      	str	r2, [r5, #0]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	f7f6 f8c0 	bl	8001234 <_read>
 800b0b4:	1c43      	adds	r3, r0, #1
 800b0b6:	d102      	bne.n	800b0be <_read_r+0x1e>
 800b0b8:	682b      	ldr	r3, [r5, #0]
 800b0ba:	b103      	cbz	r3, 800b0be <_read_r+0x1e>
 800b0bc:	6023      	str	r3, [r4, #0]
 800b0be:	bd38      	pop	{r3, r4, r5, pc}
 800b0c0:	24096278 	.word	0x24096278

0800b0c4 <_fstat_r>:
 800b0c4:	b538      	push	{r3, r4, r5, lr}
 800b0c6:	4d07      	ldr	r5, [pc, #28]	; (800b0e4 <_fstat_r+0x20>)
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	4608      	mov	r0, r1
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	602b      	str	r3, [r5, #0]
 800b0d2:	f7f6 f8f4 	bl	80012be <_fstat>
 800b0d6:	1c43      	adds	r3, r0, #1
 800b0d8:	d102      	bne.n	800b0e0 <_fstat_r+0x1c>
 800b0da:	682b      	ldr	r3, [r5, #0]
 800b0dc:	b103      	cbz	r3, 800b0e0 <_fstat_r+0x1c>
 800b0de:	6023      	str	r3, [r4, #0]
 800b0e0:	bd38      	pop	{r3, r4, r5, pc}
 800b0e2:	bf00      	nop
 800b0e4:	24096278 	.word	0x24096278

0800b0e8 <_isatty_r>:
 800b0e8:	b538      	push	{r3, r4, r5, lr}
 800b0ea:	4d06      	ldr	r5, [pc, #24]	; (800b104 <_isatty_r+0x1c>)
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	4608      	mov	r0, r1
 800b0f2:	602b      	str	r3, [r5, #0]
 800b0f4:	f7f6 f8f3 	bl	80012de <_isatty>
 800b0f8:	1c43      	adds	r3, r0, #1
 800b0fa:	d102      	bne.n	800b102 <_isatty_r+0x1a>
 800b0fc:	682b      	ldr	r3, [r5, #0]
 800b0fe:	b103      	cbz	r3, 800b102 <_isatty_r+0x1a>
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	bd38      	pop	{r3, r4, r5, pc}
 800b104:	24096278 	.word	0x24096278

0800b108 <_init>:
 800b108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b10a:	bf00      	nop
 800b10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b10e:	bc08      	pop	{r3}
 800b110:	469e      	mov	lr, r3
 800b112:	4770      	bx	lr

0800b114 <_fini>:
 800b114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b116:	bf00      	nop
 800b118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b11a:	bc08      	pop	{r3}
 800b11c:	469e      	mov	lr, r3
 800b11e:	4770      	bx	lr
