
devBoardTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad80  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800b050  0800b050  0001b050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b5a4  0800b5a4  0001b5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b5ac  0800b5ac  0001b5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b5b0  0800b5b0  0001b5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800b5b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000260  240001e0  0800b794  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000440  0800b794  00020440  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ee84  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c4b  00000000  00000000  0003f092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012e0  00000000  00000000  00042ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001138  00000000  00000000  00043fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003584c  00000000  00000000  000450f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c6f0  00000000  00000000  0007a944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001496e9  00000000  00000000  00097034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e071d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c20  00000000  00000000  001e0770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b038 	.word	0x0800b038

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e4 	.word	0x240001e4
 800030c:	0800b038 	.word	0x0800b038

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b974 	b.w	80006c0 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468e      	mov	lr, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d14d      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fe:	428a      	cmp	r2, r1
 8000400:	4694      	mov	ip, r2
 8000402:	d969      	bls.n	80004d8 <__udivmoddi4+0xe8>
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	b152      	cbz	r2, 8000420 <__udivmoddi4+0x30>
 800040a:	fa01 f302 	lsl.w	r3, r1, r2
 800040e:	f1c2 0120 	rsb	r1, r2, #32
 8000412:	fa20 f101 	lsr.w	r1, r0, r1
 8000416:	fa0c fc02 	lsl.w	ip, ip, r2
 800041a:	ea41 0e03 	orr.w	lr, r1, r3
 800041e:	4094      	lsls	r4, r2
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	0c21      	lsrs	r1, r4, #16
 8000426:	fbbe f6f8 	udiv	r6, lr, r8
 800042a:	fa1f f78c 	uxth.w	r7, ip
 800042e:	fb08 e316 	mls	r3, r8, r6, lr
 8000432:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000436:	fb06 f107 	mul.w	r1, r6, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 30ff 	add.w	r0, r6, #4294967295
 8000446:	f080 811f 	bcs.w	8000688 <__udivmoddi4+0x298>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 811c 	bls.w	8000688 <__udivmoddi4+0x298>
 8000450:	3e02      	subs	r6, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb00 f707 	mul.w	r7, r0, r7
 8000468:	42a7      	cmp	r7, r4
 800046a:	d90a      	bls.n	8000482 <__udivmoddi4+0x92>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	f080 810a 	bcs.w	800068c <__udivmoddi4+0x29c>
 8000478:	42a7      	cmp	r7, r4
 800047a:	f240 8107 	bls.w	800068c <__udivmoddi4+0x29c>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000486:	1be4      	subs	r4, r4, r7
 8000488:	2600      	movs	r6, #0
 800048a:	b11d      	cbz	r5, 8000494 <__udivmoddi4+0xa4>
 800048c:	40d4      	lsrs	r4, r2
 800048e:	2300      	movs	r3, #0
 8000490:	e9c5 4300 	strd	r4, r3, [r5]
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d909      	bls.n	80004b2 <__udivmoddi4+0xc2>
 800049e:	2d00      	cmp	r5, #0
 80004a0:	f000 80ef 	beq.w	8000682 <__udivmoddi4+0x292>
 80004a4:	2600      	movs	r6, #0
 80004a6:	e9c5 0100 	strd	r0, r1, [r5]
 80004aa:	4630      	mov	r0, r6
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	fab3 f683 	clz	r6, r3
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	d14a      	bne.n	8000550 <__udivmoddi4+0x160>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d302      	bcc.n	80004c4 <__udivmoddi4+0xd4>
 80004be:	4282      	cmp	r2, r0
 80004c0:	f200 80f9 	bhi.w	80006b6 <__udivmoddi4+0x2c6>
 80004c4:	1a84      	subs	r4, r0, r2
 80004c6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ca:	2001      	movs	r0, #1
 80004cc:	469e      	mov	lr, r3
 80004ce:	2d00      	cmp	r5, #0
 80004d0:	d0e0      	beq.n	8000494 <__udivmoddi4+0xa4>
 80004d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004d6:	e7dd      	b.n	8000494 <__udivmoddi4+0xa4>
 80004d8:	b902      	cbnz	r2, 80004dc <__udivmoddi4+0xec>
 80004da:	deff      	udf	#255	; 0xff
 80004dc:	fab2 f282 	clz	r2, r2
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	f040 8092 	bne.w	800060a <__udivmoddi4+0x21a>
 80004e6:	eba1 010c 	sub.w	r1, r1, ip
 80004ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ee:	fa1f fe8c 	uxth.w	lr, ip
 80004f2:	2601      	movs	r6, #1
 80004f4:	0c20      	lsrs	r0, r4, #16
 80004f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004fa:	fb07 1113 	mls	r1, r7, r3, r1
 80004fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000502:	fb0e f003 	mul.w	r0, lr, r3
 8000506:	4288      	cmp	r0, r1
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x12c>
 800050a:	eb1c 0101 	adds.w	r1, ip, r1
 800050e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x12a>
 8000514:	4288      	cmp	r0, r1
 8000516:	f200 80cb 	bhi.w	80006b0 <__udivmoddi4+0x2c0>
 800051a:	4643      	mov	r3, r8
 800051c:	1a09      	subs	r1, r1, r0
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb1 f0f7 	udiv	r0, r1, r7
 8000524:	fb07 1110 	mls	r1, r7, r0, r1
 8000528:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800052c:	fb0e fe00 	mul.w	lr, lr, r0
 8000530:	45a6      	cmp	lr, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x156>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f100 31ff 	add.w	r1, r0, #4294967295
 800053c:	d202      	bcs.n	8000544 <__udivmoddi4+0x154>
 800053e:	45a6      	cmp	lr, r4
 8000540:	f200 80bb 	bhi.w	80006ba <__udivmoddi4+0x2ca>
 8000544:	4608      	mov	r0, r1
 8000546:	eba4 040e 	sub.w	r4, r4, lr
 800054a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x9a>
 8000550:	f1c6 0720 	rsb	r7, r6, #32
 8000554:	40b3      	lsls	r3, r6
 8000556:	fa22 fc07 	lsr.w	ip, r2, r7
 800055a:	ea4c 0c03 	orr.w	ip, ip, r3
 800055e:	fa20 f407 	lsr.w	r4, r0, r7
 8000562:	fa01 f306 	lsl.w	r3, r1, r6
 8000566:	431c      	orrs	r4, r3
 8000568:	40f9      	lsrs	r1, r7
 800056a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800056e:	fa00 f306 	lsl.w	r3, r0, r6
 8000572:	fbb1 f8f9 	udiv	r8, r1, r9
 8000576:	0c20      	lsrs	r0, r4, #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fb09 1118 	mls	r1, r9, r8, r1
 8000580:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000584:	fb08 f00e 	mul.w	r0, r8, lr
 8000588:	4288      	cmp	r0, r1
 800058a:	fa02 f206 	lsl.w	r2, r2, r6
 800058e:	d90b      	bls.n	80005a8 <__udivmoddi4+0x1b8>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f108 3aff 	add.w	sl, r8, #4294967295
 8000598:	f080 8088 	bcs.w	80006ac <__udivmoddi4+0x2bc>
 800059c:	4288      	cmp	r0, r1
 800059e:	f240 8085 	bls.w	80006ac <__udivmoddi4+0x2bc>
 80005a2:	f1a8 0802 	sub.w	r8, r8, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1a09      	subs	r1, r1, r0
 80005aa:	b2a4      	uxth	r4, r4
 80005ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80005b0:	fb09 1110 	mls	r1, r9, r0, r1
 80005b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005bc:	458e      	cmp	lr, r1
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x1e2>
 80005c0:	eb1c 0101 	adds.w	r1, ip, r1
 80005c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c8:	d26c      	bcs.n	80006a4 <__udivmoddi4+0x2b4>
 80005ca:	458e      	cmp	lr, r1
 80005cc:	d96a      	bls.n	80006a4 <__udivmoddi4+0x2b4>
 80005ce:	3802      	subs	r0, #2
 80005d0:	4461      	add	r1, ip
 80005d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005d6:	fba0 9402 	umull	r9, r4, r0, r2
 80005da:	eba1 010e 	sub.w	r1, r1, lr
 80005de:	42a1      	cmp	r1, r4
 80005e0:	46c8      	mov	r8, r9
 80005e2:	46a6      	mov	lr, r4
 80005e4:	d356      	bcc.n	8000694 <__udivmoddi4+0x2a4>
 80005e6:	d053      	beq.n	8000690 <__udivmoddi4+0x2a0>
 80005e8:	b15d      	cbz	r5, 8000602 <__udivmoddi4+0x212>
 80005ea:	ebb3 0208 	subs.w	r2, r3, r8
 80005ee:	eb61 010e 	sbc.w	r1, r1, lr
 80005f2:	fa01 f707 	lsl.w	r7, r1, r7
 80005f6:	fa22 f306 	lsr.w	r3, r2, r6
 80005fa:	40f1      	lsrs	r1, r6
 80005fc:	431f      	orrs	r7, r3
 80005fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000602:	2600      	movs	r6, #0
 8000604:	4631      	mov	r1, r6
 8000606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	40d8      	lsrs	r0, r3
 8000610:	fa0c fc02 	lsl.w	ip, ip, r2
 8000614:	fa21 f303 	lsr.w	r3, r1, r3
 8000618:	4091      	lsls	r1, r2
 800061a:	4301      	orrs	r1, r0
 800061c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000620:	fa1f fe8c 	uxth.w	lr, ip
 8000624:	fbb3 f0f7 	udiv	r0, r3, r7
 8000628:	fb07 3610 	mls	r6, r7, r0, r3
 800062c:	0c0b      	lsrs	r3, r1, #16
 800062e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000632:	fb00 f60e 	mul.w	r6, r0, lr
 8000636:	429e      	cmp	r6, r3
 8000638:	fa04 f402 	lsl.w	r4, r4, r2
 800063c:	d908      	bls.n	8000650 <__udivmoddi4+0x260>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f100 38ff 	add.w	r8, r0, #4294967295
 8000646:	d22f      	bcs.n	80006a8 <__udivmoddi4+0x2b8>
 8000648:	429e      	cmp	r6, r3
 800064a:	d92d      	bls.n	80006a8 <__udivmoddi4+0x2b8>
 800064c:	3802      	subs	r0, #2
 800064e:	4463      	add	r3, ip
 8000650:	1b9b      	subs	r3, r3, r6
 8000652:	b289      	uxth	r1, r1
 8000654:	fbb3 f6f7 	udiv	r6, r3, r7
 8000658:	fb07 3316 	mls	r3, r7, r6, r3
 800065c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000660:	fb06 f30e 	mul.w	r3, r6, lr
 8000664:	428b      	cmp	r3, r1
 8000666:	d908      	bls.n	800067a <__udivmoddi4+0x28a>
 8000668:	eb1c 0101 	adds.w	r1, ip, r1
 800066c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000670:	d216      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000672:	428b      	cmp	r3, r1
 8000674:	d914      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000676:	3e02      	subs	r6, #2
 8000678:	4461      	add	r1, ip
 800067a:	1ac9      	subs	r1, r1, r3
 800067c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000680:	e738      	b.n	80004f4 <__udivmoddi4+0x104>
 8000682:	462e      	mov	r6, r5
 8000684:	4628      	mov	r0, r5
 8000686:	e705      	b.n	8000494 <__udivmoddi4+0xa4>
 8000688:	4606      	mov	r6, r0
 800068a:	e6e3      	b.n	8000454 <__udivmoddi4+0x64>
 800068c:	4618      	mov	r0, r3
 800068e:	e6f8      	b.n	8000482 <__udivmoddi4+0x92>
 8000690:	454b      	cmp	r3, r9
 8000692:	d2a9      	bcs.n	80005e8 <__udivmoddi4+0x1f8>
 8000694:	ebb9 0802 	subs.w	r8, r9, r2
 8000698:	eb64 0e0c 	sbc.w	lr, r4, ip
 800069c:	3801      	subs	r0, #1
 800069e:	e7a3      	b.n	80005e8 <__udivmoddi4+0x1f8>
 80006a0:	4646      	mov	r6, r8
 80006a2:	e7ea      	b.n	800067a <__udivmoddi4+0x28a>
 80006a4:	4620      	mov	r0, r4
 80006a6:	e794      	b.n	80005d2 <__udivmoddi4+0x1e2>
 80006a8:	4640      	mov	r0, r8
 80006aa:	e7d1      	b.n	8000650 <__udivmoddi4+0x260>
 80006ac:	46d0      	mov	r8, sl
 80006ae:	e77b      	b.n	80005a8 <__udivmoddi4+0x1b8>
 80006b0:	3b02      	subs	r3, #2
 80006b2:	4461      	add	r1, ip
 80006b4:	e732      	b.n	800051c <__udivmoddi4+0x12c>
 80006b6:	4630      	mov	r0, r6
 80006b8:	e709      	b.n	80004ce <__udivmoddi4+0xde>
 80006ba:	4464      	add	r4, ip
 80006bc:	3802      	subs	r0, #2
 80006be:	e742      	b.n	8000546 <__udivmoddi4+0x156>

080006c0 <__aeabi_idiv0>:
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_DCMI_Init+0x64>)
 80006ca:	4a18      	ldr	r2, [pc, #96]	; (800072c <MX_DCMI_Init+0x68>)
 80006cc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_DCMI_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_DCMI_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_DCMI_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_DCMI_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_DCMI_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_10B;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_DCMI_Init+0x64>)
 80006ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006f2:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_DCMI_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_DCMI_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_DCMI_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_DCMI_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_DCMI_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_DCMI_Init+0x64>)
 8000714:	f001 fc68 	bl	8001fe8 <HAL_DCMI_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_DCMI_Init+0x5e>
  {
    Error_Handler();
 800071e:	f000 fd1f 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	240001fc 	.word	0x240001fc
 800072c:	48020000 	.word	0x48020000

08000730 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08e      	sub	sp, #56	; 0x38
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a69      	ldr	r2, [pc, #420]	; (80008f4 <HAL_DCMI_MspInit+0x1c4>)
 800074e:	4293      	cmp	r3, r2
 8000750:	f040 80cc 	bne.w	80008ec <HAL_DCMI_MspInit+0x1bc>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000754:	4b68      	ldr	r3, [pc, #416]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 8000756:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800075a:	4a67      	ldr	r2, [pc, #412]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000764:	4b64      	ldr	r3, [pc, #400]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 8000766:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	623b      	str	r3, [r7, #32]
 8000770:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000772:	4b61      	ldr	r3, [pc, #388]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	4a5f      	ldr	r2, [pc, #380]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 800077a:	f043 0310 	orr.w	r3, r3, #16
 800077e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000782:	4b5d      	ldr	r3, [pc, #372]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000788:	f003 0310 	and.w	r3, r3, #16
 800078c:	61fb      	str	r3, [r7, #28]
 800078e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4b59      	ldr	r3, [pc, #356]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000796:	4a58      	ldr	r2, [pc, #352]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a0:	4b55      	ldr	r3, [pc, #340]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	61bb      	str	r3, [r7, #24]
 80007ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b52      	ldr	r3, [pc, #328]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b4:	4a50      	ldr	r2, [pc, #320]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007b6:	f043 0302 	orr.w	r3, r3, #2
 80007ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007be:	4b4e      	ldr	r3, [pc, #312]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c4:	f003 0302 	and.w	r3, r3, #2
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007cc:	4b4a      	ldr	r3, [pc, #296]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d2:	4a49      	ldr	r2, [pc, #292]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007dc:	4b46      	ldr	r3, [pc, #280]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	4b43      	ldr	r3, [pc, #268]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f0:	4a41      	ldr	r2, [pc, #260]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007f2:	f043 0308 	orr.w	r3, r3, #8
 80007f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007fa:	4b3f      	ldr	r3, [pc, #252]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000800:	f003 0308 	and.w	r3, r3, #8
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000808:	4b3b      	ldr	r3, [pc, #236]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 800080a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080e:	4a3a      	ldr	r2, [pc, #232]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 8000810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000818:	4b37      	ldr	r3, [pc, #220]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 800081a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> DCMI_D8
    PC12     ------> DCMI_D9
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000826:	2370      	movs	r3, #112	; 0x70
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000836:	230d      	movs	r3, #13
 8000838:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	4619      	mov	r1, r3
 8000840:	482e      	ldr	r0, [pc, #184]	; (80008fc <HAL_DCMI_MspInit+0x1cc>)
 8000842:	f001 fc4b 	bl	80020dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000846:	2350      	movs	r3, #80	; 0x50
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000856:	230d      	movs	r3, #13
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085e:	4619      	mov	r1, r3
 8000860:	4827      	ldr	r0, [pc, #156]	; (8000900 <HAL_DCMI_MspInit+0x1d0>)
 8000862:	f001 fc3b 	bl	80020dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000878:	230d      	movs	r3, #13
 800087a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000880:	4619      	mov	r1, r3
 8000882:	4820      	ldr	r0, [pc, #128]	; (8000904 <HAL_DCMI_MspInit+0x1d4>)
 8000884:	f001 fc2a 	bl	80020dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10
 8000888:	f44f 53b6 	mov.w	r3, #5824	; 0x16c0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800089a:	230d      	movs	r3, #13
 800089c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	4619      	mov	r1, r3
 80008a4:	4818      	ldr	r0, [pc, #96]	; (8000908 <HAL_DCMI_MspInit+0x1d8>)
 80008a6:	f001 fc19 	bl	80020dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008aa:	2308      	movs	r3, #8
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008ba:	230d      	movs	r3, #13
 80008bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4619      	mov	r1, r3
 80008c4:	4811      	ldr	r0, [pc, #68]	; (800090c <HAL_DCMI_MspInit+0x1dc>)
 80008c6:	f001 fc09 	bl	80020dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008dc:	230d      	movs	r3, #13
 80008de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e4:	4619      	mov	r1, r3
 80008e6:	480a      	ldr	r0, [pc, #40]	; (8000910 <HAL_DCMI_MspInit+0x1e0>)
 80008e8:	f001 fbf8 	bl	80020dc <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80008ec:	bf00      	nop
 80008ee:	3738      	adds	r7, #56	; 0x38
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	48020000 	.word	0x48020000
 80008f8:	58024400 	.word	0x58024400
 80008fc:	58021000 	.word	0x58021000
 8000900:	58020000 	.word	0x58020000
 8000904:	58020400 	.word	0x58020400
 8000908:	58020800 	.word	0x58020800
 800090c:	58020c00 	.word	0x58020c00
 8000910:	58021800 	.word	0x58021800

08000914 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	; 0x30
 8000918:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800092a:	4b47      	ldr	r3, [pc, #284]	; (8000a48 <MX_GPIO_Init+0x134>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	4a45      	ldr	r2, [pc, #276]	; (8000a48 <MX_GPIO_Init+0x134>)
 8000932:	f043 0310 	orr.w	r3, r3, #16
 8000936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093a:	4b43      	ldr	r3, [pc, #268]	; (8000a48 <MX_GPIO_Init+0x134>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	f003 0310 	and.w	r3, r3, #16
 8000944:	61bb      	str	r3, [r7, #24]
 8000946:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000948:	4b3f      	ldr	r3, [pc, #252]	; (8000a48 <MX_GPIO_Init+0x134>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094e:	4a3e      	ldr	r2, [pc, #248]	; (8000a48 <MX_GPIO_Init+0x134>)
 8000950:	f043 0320 	orr.w	r3, r3, #32
 8000954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000958:	4b3b      	ldr	r3, [pc, #236]	; (8000a48 <MX_GPIO_Init+0x134>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095e:	f003 0320 	and.w	r3, r3, #32
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	4b38      	ldr	r3, [pc, #224]	; (8000a48 <MX_GPIO_Init+0x134>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096c:	4a36      	ldr	r2, [pc, #216]	; (8000a48 <MX_GPIO_Init+0x134>)
 800096e:	f043 0304 	orr.w	r3, r3, #4
 8000972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000976:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <MX_GPIO_Init+0x134>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	f003 0304 	and.w	r3, r3, #4
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	4b30      	ldr	r3, [pc, #192]	; (8000a48 <MX_GPIO_Init+0x134>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098a:	4a2f      	ldr	r2, [pc, #188]	; (8000a48 <MX_GPIO_Init+0x134>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000994:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <MX_GPIO_Init+0x134>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a8:	4a27      	ldr	r2, [pc, #156]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009aa:	f043 0302 	orr.w	r3, r3, #2
 80009ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b2:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b8:	f003 0302 	and.w	r3, r3, #2
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c0:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c6:	4a20      	ldr	r2, [pc, #128]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a02:	4812      	ldr	r0, [pc, #72]	; (8000a4c <MX_GPIO_Init+0x138>)
 8000a04:	f001 fd12 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480d      	ldr	r0, [pc, #52]	; (8000a50 <MX_GPIO_Init+0x13c>)
 8000a1c:	f001 fb5e 	bl	80020dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_GPIO_Init+0x138>)
 8000a3a:	f001 fb4f 	bl	80020dc <HAL_GPIO_Init>

}
 8000a3e:	bf00      	nop
 8000a40:	3730      	adds	r7, #48	; 0x30
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	58024400 	.word	0x58024400
 8000a4c:	58020c00 	.word	0x58020c00
 8000a50:	58020000 	.word	0x58020000

08000a54 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a5a:	4a20      	ldr	r2, [pc, #128]	; (8000adc <MX_I2C1_Init+0x88>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a60:	4a1f      	ldr	r2, [pc, #124]	; (8000ae0 <MX_I2C1_Init+0x8c>)
 8000a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a8e:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a90:	f001 fce6 	bl	8002460 <HAL_I2C_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a9a:	f000 fb61 	bl	8001160 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000aa2:	f002 fc3d 	bl	8003320 <HAL_I2CEx_ConfigAnalogFilter>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000aac:	f000 fb58 	bl	8001160 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000ab4:	f002 fc7f 	bl	80033b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000abe:	f000 fb4f 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  i2c_bus_1.I2C_Handle = &hi2c1;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_I2C1_Init+0x90>)
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000ac6:	601a      	str	r2, [r3, #0]
  i2c_bus_1.read = &I2C1_ReadReg;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_I2C1_Init+0x90>)
 8000aca:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <MX_I2C1_Init+0x94>)
 8000acc:	611a      	str	r2, [r3, #16]
  i2c_bus_1.write = &I2C1_WriteReg;
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <MX_I2C1_Init+0x90>)
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <MX_I2C1_Init+0x98>)
 8000ad2:	615a      	str	r2, [r3, #20]
  /* USER CODE END I2C1_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	24000284 	.word	0x24000284
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	10707dbc 	.word	0x10707dbc
 8000ae4:	2400024c 	.word	0x2400024c
 8000ae8:	08000d55 	.word	0x08000d55
 8000aec:	08000d0d 	.word	0x08000d0d

08000af0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000af4:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000af6:	4a20      	ldr	r2, [pc, #128]	; (8000b78 <MX_I2C2_Init+0x88>)
 8000af8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8000afa:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000afc:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <MX_I2C2_Init+0x8c>)
 8000afe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b06:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b2a:	4812      	ldr	r0, [pc, #72]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b2c:	f001 fc98 	bl	8002460 <HAL_I2C_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b36:	f000 fb13 	bl	8001160 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b3e:	f002 fbef 	bl	8003320 <HAL_I2CEx_ConfigAnalogFilter>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b48:	f000 fb0a 	bl	8001160 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4809      	ldr	r0, [pc, #36]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b50:	f002 fc31 	bl	80033b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b5a:	f000 fb01 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  i2c_bus_2.I2C_Handle = &hi2c2;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_I2C2_Init+0x90>)
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b62:	601a      	str	r2, [r3, #0]
  i2c_bus_2.read = &I2C2_ReadReg;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_I2C2_Init+0x90>)
 8000b66:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <MX_I2C2_Init+0x94>)
 8000b68:	611a      	str	r2, [r3, #16]
  i2c_bus_2.write = &I2C2_WriteReg;
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <MX_I2C2_Init+0x90>)
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <MX_I2C2_Init+0x98>)
 8000b6e:	615a      	str	r2, [r3, #20]
  /* USER CODE END I2C2_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	240002d0 	.word	0x240002d0
 8000b78:	40005800 	.word	0x40005800
 8000b7c:	10707dbc 	.word	0x10707dbc
 8000b80:	24000268 	.word	0x24000268
 8000b84:	08000de5 	.word	0x08000de5
 8000b88:	08000d9d 	.word	0x08000d9d

08000b8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0b8      	sub	sp, #224	; 0xe0
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba4:	f107 0318 	add.w	r3, r7, #24
 8000ba8:	22b4      	movs	r2, #180	; 0xb4
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f007 fd37 	bl	8008620 <memset>
  if(i2cHandle->Instance==I2C1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a4d      	ldr	r2, [pc, #308]	; (8000cec <HAL_I2C_MspInit+0x160>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d142      	bne.n	8000c42 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc6:	f107 0318 	add.w	r3, r7, #24
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 ff46 	bl	8005a5c <HAL_RCCEx_PeriphCLKConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000bd6:	f000 fac3 	bl	8001160 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	4b45      	ldr	r3, [pc, #276]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	4a43      	ldr	r2, [pc, #268]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000be2:	f043 0302 	orr.w	r3, r3, #2
 8000be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bea:	4b41      	ldr	r3, [pc, #260]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	f003 0302 	and.w	r3, r3, #2
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bf8:	23c0      	movs	r3, #192	; 0xc0
 8000bfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bfe:	2312      	movs	r3, #18
 8000c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c10:	2304      	movs	r3, #4
 8000c12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4835      	ldr	r0, [pc, #212]	; (8000cf4 <HAL_I2C_MspInit+0x168>)
 8000c1e:	f001 fa5d 	bl	80020dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c22:	4b33      	ldr	r3, [pc, #204]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c28:	4a31      	ldr	r2, [pc, #196]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000c2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c32:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	693b      	ldr	r3, [r7, #16]
    i2c_bus_2.I2C_Handle = &hi2c2;
    i2c_bus_2.read = &I2C2_ReadReg;
    i2c_bus_2.write = &I2C2_WriteReg;
  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c40:	e050      	b.n	8000ce4 <HAL_I2C_MspInit+0x158>
  else if(i2cHandle->Instance==I2C2)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a2c      	ldr	r2, [pc, #176]	; (8000cf8 <HAL_I2C_MspInit+0x16c>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d14b      	bne.n	8000ce4 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f004 fefe 	bl	8005a5c <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_I2C_MspInit+0xde>
      Error_Handler();
 8000c66:	f000 fa7b 	bl	8001160 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c90:	2312      	movs	r3, #18
 8000c92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cac:	4619      	mov	r1, r3
 8000cae:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <HAL_I2C_MspInit+0x168>)
 8000cb0:	f001 fa14 	bl	80020dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000cb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cba:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000cbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cc0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000cc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
    i2c_bus_2.I2C_Handle = &hi2c2;
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <HAL_I2C_MspInit+0x170>)
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_I2C_MspInit+0x174>)
 8000cd6:	601a      	str	r2, [r3, #0]
    i2c_bus_2.read = &I2C2_ReadReg;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_I2C_MspInit+0x170>)
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_I2C_MspInit+0x178>)
 8000cdc:	611a      	str	r2, [r3, #16]
    i2c_bus_2.write = &I2C2_WriteReg;
 8000cde:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <HAL_I2C_MspInit+0x170>)
 8000ce0:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <HAL_I2C_MspInit+0x17c>)
 8000ce2:	615a      	str	r2, [r3, #20]
}
 8000ce4:	bf00      	nop
 8000ce6:	37e0      	adds	r7, #224	; 0xe0
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	58024400 	.word	0x58024400
 8000cf4:	58020400 	.word	0x58020400
 8000cf8:	40005800 	.word	0x40005800
 8000cfc:	24000268 	.word	0x24000268
 8000d00:	240002d0 	.word	0x240002d0
 8000d04:	08000de5 	.word	0x08000de5
 8000d08:	08000d9d 	.word	0x08000d9d

08000d0c <I2C1_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af04      	add	r7, sp, #16
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	4603      	mov	r3, r0
 8000d16:	81fb      	strh	r3, [r7, #14]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	81bb      	strh	r3, [r7, #12]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8000d20:	8978      	ldrh	r0, [r7, #10]
 8000d22:	89ba      	ldrh	r2, [r7, #12]
 8000d24:	89f9      	ldrh	r1, [r7, #14]
 8000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2a:	9302      	str	r3, [sp, #8]
 8000d2c:	8b3b      	ldrh	r3, [r7, #24]
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	4603      	mov	r3, r0
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <I2C1_WriteReg+0x44>)
 8000d38:	f001 fd16 	bl	8002768 <HAL_I2C_Mem_Write>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <I2C1_WriteReg+0x3a>
  {
    return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <I2C1_WriteReg+0x3c>
  }

  return HAL_I2C_STATE_ERROR;
 8000d46:	23e0      	movs	r3, #224	; 0xe0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	24000284 	.word	0x24000284

08000d54 <I2C1_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af04      	add	r7, sp, #16
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	81fb      	strh	r3, [r7, #14]
 8000d60:	460b      	mov	r3, r1
 8000d62:	81bb      	strh	r3, [r7, #12]
 8000d64:	4613      	mov	r3, r2
 8000d66:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8000d68:	8978      	ldrh	r0, [r7, #10]
 8000d6a:	89ba      	ldrh	r2, [r7, #12]
 8000d6c:	89f9      	ldrh	r1, [r7, #14]
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	8b3b      	ldrh	r3, [r7, #24]
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4806      	ldr	r0, [pc, #24]	; (8000d98 <I2C1_ReadReg+0x44>)
 8000d80:	f001 fe06 	bl	8002990 <HAL_I2C_Mem_Read>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <I2C1_ReadReg+0x3a>
  {
    return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e000      	b.n	8000d90 <I2C1_ReadReg+0x3c>
  }

  return HAL_I2C_STATE_ERROR;
 8000d8e:	23e0      	movs	r3, #224	; 0xe0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	24000284 	.word	0x24000284

08000d9c <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af04      	add	r7, sp, #16
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	4603      	mov	r3, r0
 8000da6:	81fb      	strh	r3, [r7, #14]
 8000da8:	460b      	mov	r3, r1
 8000daa:	81bb      	strh	r3, [r7, #12]
 8000dac:	4613      	mov	r3, r2
 8000dae:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hi2c2, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8000db0:	8978      	ldrh	r0, [r7, #10]
 8000db2:	89ba      	ldrh	r2, [r7, #12]
 8000db4:	89f9      	ldrh	r1, [r7, #14]
 8000db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dba:	9302      	str	r3, [sp, #8]
 8000dbc:	8b3b      	ldrh	r3, [r7, #24]
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <I2C2_WriteReg+0x44>)
 8000dc8:	f001 fcce 	bl	8002768 <HAL_I2C_Mem_Write>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <I2C2_WriteReg+0x3a>
  {
    return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <I2C2_WriteReg+0x3c>
  }

  return HAL_I2C_STATE_ERROR;
 8000dd6:	23e0      	movs	r3, #224	; 0xe0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	240002d0 	.word	0x240002d0

08000de4 <I2C2_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af04      	add	r7, sp, #16
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	4603      	mov	r3, r0
 8000dee:	81fb      	strh	r3, [r7, #14]
 8000df0:	460b      	mov	r3, r1
 8000df2:	81bb      	strh	r3, [r7, #12]
 8000df4:	4613      	mov	r3, r2
 8000df6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8000df8:	8978      	ldrh	r0, [r7, #10]
 8000dfa:	89ba      	ldrh	r2, [r7, #12]
 8000dfc:	89f9      	ldrh	r1, [r7, #14]
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	9302      	str	r3, [sp, #8]
 8000e04:	8b3b      	ldrh	r3, [r7, #24]
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4806      	ldr	r0, [pc, #24]	; (8000e28 <I2C2_ReadReg+0x44>)
 8000e10:	f001 fdbe 	bl	8002990 <HAL_I2C_Mem_Read>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <I2C2_ReadReg+0x3a>
  {
    return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <I2C2_ReadReg+0x3c>
  }

  return HAL_I2C_STATE_ERROR;
 8000e1e:	23e0      	movs	r3, #224	; 0xe0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	240002d0 	.word	0x240002d0

08000e2c <__io_putchar>:
#include "log.h"

PUTCHAR_PROTOTYPE
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e34:	1d39      	adds	r1, r7, #4
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <__io_putchar+0x20>)
 8000e3e:	f006 f979 	bl	8007134 <HAL_UART_Transmit>
  return ch;
 8000e42:	687b      	ldr	r3, [r7, #4]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	2400039c 	.word	0x2400039c

08000e50 <log_format>:

void log_format(const char* tag, const char* message, va_list args)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
	uint32_t time = HAL_GetTick();
 8000e5c:	f000 ff84 	bl	8001d68 <HAL_GetTick>
 8000e60:	6178      	str	r0, [r7, #20]
	printf("%u [%s]", (unsigned int)time, tag);
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	6979      	ldr	r1, [r7, #20]
 8000e66:	4807      	ldr	r0, [pc, #28]	; (8000e84 <log_format+0x34>)
 8000e68:	f008 f824 	bl	8008eb4 <iprintf>
	vprintf(message, args);
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	68b8      	ldr	r0, [r7, #8]
 8000e70:	f008 f8ae 	bl	8008fd0 <viprintf>
	printf("\t\n\t\n");
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <log_format+0x38>)
 8000e76:	f008 f8a3 	bl	8008fc0 <puts>

}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	0800b050 	.word	0x0800b050
 8000e88:	0800b058 	.word	0x0800b058

08000e8c <log_error>:

void log_error(const char* message, ...)
{
 8000e8c:	b40f      	push	{r0, r1, r2, r3}
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	607b      	str	r3, [r7, #4]
	log_format("error", message, args);
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	6939      	ldr	r1, [r7, #16]
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <log_error+0x28>)
 8000ea0:	f7ff ffd6 	bl	8000e50 <log_format>
	va_end(args);
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eae:	b004      	add	sp, #16
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	0800b05c 	.word	0x0800b05c

08000eb8 <log_info>:

void log_info(const char* message, ...)
{
 8000eb8:	b40f      	push	{r0, r1, r2, r3}
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	607b      	str	r3, [r7, #4]
	log_format("info", message, args);
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	6939      	ldr	r1, [r7, #16]
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <log_info+0x28>)
 8000ecc:	f7ff ffc0 	bl	8000e50 <log_format>
	va_end(args);
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eda:	b004      	add	sp, #16
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	0800b064 	.word	0x0800b064

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f000 feb7 	bl	8001c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f8bf 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f7ff fd0f 	bl	8000914 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ef6:	f000 fc69 	bl	80017cc <MX_USART1_UART_Init>
  MX_DCMI_Init();
 8000efa:	f7ff fbe3 	bl	80006c4 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000efe:	f7ff fda9 	bl	8000a54 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f02:	f7ff fdf5 	bl	8000af0 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000f06:	f000 f931 	bl	800116c <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */
  log_info("Main Init Test Test");
 8000f0a:	4846      	ldr	r0, [pc, #280]	; (8001024 <main+0x140>)
 8000f0c:	f7ff ffd4 	bl	8000eb8 <log_info>
  //EnableMemMapped();
  uint32_t id = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
  APS6408_Reset(&hospi1);
 8000f14:	4844      	ldr	r0, [pc, #272]	; (8001028 <main+0x144>)
 8000f16:	f000 fe15 	bl	8001b44 <APS6408_Reset>
  if (APS6408_ReadID(&hospi1, &id, APS6408_READ_LATENCY_7) != HAL_OK)
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	2210      	movs	r2, #16
 8000f20:	4619      	mov	r1, r3
 8000f22:	4841      	ldr	r0, [pc, #260]	; (8001028 <main+0x144>)
 8000f24:	f000 fde7 	bl	8001af6 <APS6408_ReadID>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <main+0x52>
  {
	  log_error("Unable to read ID");
 8000f2e:	483f      	ldr	r0, [pc, #252]	; (800102c <main+0x148>)
 8000f30:	f7ff ffac 	bl	8000e8c <log_error>
 8000f34:	e004      	b.n	8000f40 <main+0x5c>
  }
  else
  {
	  log_info("APS6048 ID:%d", id);
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	483d      	ldr	r0, [pc, #244]	; (8001030 <main+0x14c>)
 8000f3c:	f7ff ffbc 	bl	8000eb8 <log_info>
  }

  if (APS6408_EnableMemoryMappedMode(&hospi1, APS6408_READ_LATENCY_7, APS6408_MR4_WLC_7, APS6408_MR8_BL_32_BYTES) != HAL_OK)
 8000f40:	2301      	movs	r3, #1
 8000f42:	2220      	movs	r2, #32
 8000f44:	2110      	movs	r1, #16
 8000f46:	4838      	ldr	r0, [pc, #224]	; (8001028 <main+0x144>)
 8000f48:	f000 fd1b 	bl	8001982 <APS6408_EnableMemoryMappedMode>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <main+0x74>
  {
	  log_error("Unable to start APS6408 memory mapped mode");
 8000f52:	4838      	ldr	r0, [pc, #224]	; (8001034 <main+0x150>)
 8000f54:	f7ff ff9a 	bl	8000e8c <log_error>
  //DelayBlock_Calibration();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  INA236_setup(&INA33Bus, &i2c_bus_2, INA236_ADDR_1);
 8000f58:	2240      	movs	r2, #64	; 0x40
 8000f5a:	4937      	ldr	r1, [pc, #220]	; (8001038 <main+0x154>)
 8000f5c:	4837      	ldr	r0, [pc, #220]	; (800103c <main+0x158>)
 8000f5e:	f000 fe34 	bl	8001bca <INA236_setup>
  INA236_setup(&INA18Bus, &i2c_bus_2, INA236_ADDR_1);
 8000f62:	2240      	movs	r2, #64	; 0x40
 8000f64:	4934      	ldr	r1, [pc, #208]	; (8001038 <main+0x154>)
 8000f66:	4836      	ldr	r0, [pc, #216]	; (8001040 <main+0x15c>)
 8000f68:	f000 fe2f 	bl	8001bca <INA236_setup>
  PCA9543_setup(&i2c_switch, &i2c_bus_2, PCA9543_ADDR_1);
 8000f6c:	2270      	movs	r2, #112	; 0x70
 8000f6e:	4932      	ldr	r1, [pc, #200]	; (8001038 <main+0x154>)
 8000f70:	4834      	ldr	r0, [pc, #208]	; (8001044 <main+0x160>)
 8000f72:	f000 fe3d 	bl	8001bf0 <PCA9543_setup>
  TMP117_setup(&temp_A, &i2c_bus_2, TMP117_ADDR_1);
 8000f76:	2248      	movs	r2, #72	; 0x48
 8000f78:	492f      	ldr	r1, [pc, #188]	; (8001038 <main+0x154>)
 8000f7a:	4833      	ldr	r0, [pc, #204]	; (8001048 <main+0x164>)
 8000f7c:	f007 fa94 	bl	80084a8 <TMP117_setup>

  if (PCA9543_set_channel(&i2c_switch, PCA9543_CHANNEL_1) != HAL_OK)
 8000f80:	2102      	movs	r1, #2
 8000f82:	4830      	ldr	r0, [pc, #192]	; (8001044 <main+0x160>)
 8000f84:	f000 fe47 	bl	8001c16 <PCA9543_set_channel>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <main+0xb0>
  {
	  log_error("Unable to set i2c switch channel");
 8000f8e:	482f      	ldr	r0, [pc, #188]	; (800104c <main+0x168>)
 8000f90:	f7ff ff7c 	bl	8000e8c <log_error>
  if (HAL_I2C_IsDeviceReady(&hi2c2, PCA9543_ADDR_1, 2, 1000) != HAL_OK)
  {
	  log_error("Unable to communicate with i2c switch");
  } */

  if (HAL_I2C_IsDeviceReady(&hi2c2, TMP117_ADDR_1 << 1, 2, 1000) != HAL_OK)
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	2202      	movs	r2, #2
 8000f9a:	2190      	movs	r1, #144	; 0x90
 8000f9c:	482c      	ldr	r0, [pc, #176]	; (8001050 <main+0x16c>)
 8000f9e:	f001 fe11 	bl	8002bc4 <HAL_I2C_IsDeviceReady>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <main+0xcc>
  {
	  log_error("Unable to communicate with TMP117_A");
 8000fa8:	482a      	ldr	r0, [pc, #168]	; (8001054 <main+0x170>)
 8000faa:	f7ff ff6f 	bl	8000e8c <log_error>
 8000fae:	e002      	b.n	8000fb6 <main+0xd2>
  }
  else {
	  log_info("TMP117_A Ready");
 8000fb0:	4829      	ldr	r0, [pc, #164]	; (8001058 <main+0x174>)
 8000fb2:	f7ff ff81 	bl	8000eb8 <log_info>
  }

  if (HAL_I2C_IsDeviceReady(&hi2c1, 0b11010000, 2, 1000) != HAL_OK)
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	2202      	movs	r2, #2
 8000fbc:	21d0      	movs	r1, #208	; 0xd0
 8000fbe:	4827      	ldr	r0, [pc, #156]	; (800105c <main+0x178>)
 8000fc0:	f001 fe00 	bl	8002bc4 <HAL_I2C_IsDeviceReady>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <main+0xee>
  {
	  log_error("Unable to communicate with ICM-20948");
 8000fca:	4825      	ldr	r0, [pc, #148]	; (8001060 <main+0x17c>)
 8000fcc:	f7ff ff5e 	bl	8000e8c <log_error>
 8000fd0:	e002      	b.n	8000fd8 <main+0xf4>
  }
  else {
	  log_info("ICM-20948 Ready");
 8000fd2:	4824      	ldr	r0, [pc, #144]	; (8001064 <main+0x180>)
 8000fd4:	f7ff ff70 	bl	8000eb8 <log_info>
  }

  __IO uint8_t *mem_addr;
  uint32_t address = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	float voltage = 0;
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
	float temperature_A = 0;
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
	float current = 0;
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]


	if (TMP117_read_temperature(&temp_A, &temperature_A) == HAL_OK) {
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4815      	ldr	r0, [pc, #84]	; (8001048 <main+0x164>)
 8000ff4:	f007 fa6c 	bl	80084d0 <TMP117_read_temperature>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d109      	bne.n	8001012 <main+0x12e>
		log_info("Temperature A:%f", temperature_A);
 8000ffe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001002:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001006:	ec53 2b17 	vmov	r2, r3, d7
 800100a:	4817      	ldr	r0, [pc, #92]	; (8001068 <main+0x184>)
 800100c:	f7ff ff54 	bl	8000eb8 <log_info>
 8001010:	e002      	b.n	8001018 <main+0x134>
	}
	else {
		log_error("Unable to get temp A");
 8001012:	4816      	ldr	r0, [pc, #88]	; (800106c <main+0x188>)
 8001014:	f7ff ff3a 	bl	8000e8c <log_error>
	}
	/*if data read is correct we can toggle a led here: example green led*/
/*
	log_info("PSRAM data transfer success");
*/
	HAL_Delay(1000);
 8001018:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800101c:	f000 feb0 	bl	8001d80 <HAL_Delay>
  {
 8001020:	e7dc      	b.n	8000fdc <main+0xf8>
 8001022:	bf00      	nop
 8001024:	0800b074 	.word	0x0800b074
 8001028:	2400033c 	.word	0x2400033c
 800102c:	0800b088 	.word	0x0800b088
 8001030:	0800b09c 	.word	0x0800b09c
 8001034:	0800b0ac 	.word	0x0800b0ac
 8001038:	24000268 	.word	0x24000268
 800103c:	2400031c 	.word	0x2400031c
 8001040:	24000324 	.word	0x24000324
 8001044:	24000334 	.word	0x24000334
 8001048:	2400032c 	.word	0x2400032c
 800104c:	0800b0d8 	.word	0x0800b0d8
 8001050:	240002d0 	.word	0x240002d0
 8001054:	0800b0fc 	.word	0x0800b0fc
 8001058:	0800b120 	.word	0x0800b120
 800105c:	24000284 	.word	0x24000284
 8001060:	0800b130 	.word	0x0800b130
 8001064:	0800b158 	.word	0x0800b158
 8001068:	0800b168 	.word	0x0800b168
 800106c:	0800b17c 	.word	0x0800b17c

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b09c      	sub	sp, #112	; 0x70
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107a:	224c      	movs	r2, #76	; 0x4c
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f007 face 	bl	8008620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2220      	movs	r2, #32
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f007 fac8 	bl	8008620 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001090:	2002      	movs	r0, #2
 8001092:	f003 fd6f 	bl	8004b74 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <SystemClock_Config+0xe8>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a2:	4a2d      	ldr	r2, [pc, #180]	; (8001158 <SystemClock_Config+0xe8>)
 80010a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010a8:	6193      	str	r3, [r2, #24]
 80010aa:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <SystemClock_Config+0xe8>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010b6:	bf00      	nop
 80010b8:	4b27      	ldr	r3, [pc, #156]	; (8001158 <SystemClock_Config+0xe8>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010c4:	d1f8      	bne.n	80010b8 <SystemClock_Config+0x48>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80010c6:	4b25      	ldr	r3, [pc, #148]	; (800115c <SystemClock_Config+0xec>)
 80010c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ca:	4a24      	ldr	r2, [pc, #144]	; (800115c <SystemClock_Config+0xec>)
 80010cc:	f023 0303 	bic.w	r3, r3, #3
 80010d0:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d2:	2302      	movs	r3, #2
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010da:	2340      	movs	r3, #64	; 0x40
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010de:	2302      	movs	r3, #2
 80010e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e2:	2300      	movs	r3, #0
 80010e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010e6:	2304      	movs	r3, #4
 80010e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 80010ea:	2310      	movs	r3, #16
 80010ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010f6:	2302      	movs	r3, #2
 80010f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010fa:	230c      	movs	r3, #12
 80010fc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010fe:	2300      	movs	r3, #0
 8001100:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110a:	4618      	mov	r0, r3
 800110c:	f003 fd6c 	bl	8004be8 <HAL_RCC_OscConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001116:	f000 f823 	bl	8001160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111a:	233f      	movs	r3, #63	; 0x3f
 800111c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111e:	2303      	movs	r3, #3
 8001120:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001126:	2308      	movs	r3, #8
 8001128:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800112a:	2340      	movs	r3, #64	; 0x40
 800112c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800112e:	2340      	movs	r3, #64	; 0x40
 8001130:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001136:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001138:	2340      	movs	r3, #64	; 0x40
 800113a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2102      	movs	r1, #2
 8001140:	4618      	mov	r0, r3
 8001142:	f004 f8ff 	bl	8005344 <HAL_RCC_ClockConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800114c:	f000 f808 	bl	8001160 <Error_Handler>
  }
}
 8001150:	bf00      	nop
 8001152:	3770      	adds	r7, #112	; 0x70
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	58024800 	.word	0x58024800
 800115c:	58024400 	.word	0x58024400

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001168:	e7fe      	b.n	8001168 <Error_Handler+0x8>
	...

0800116c <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */
  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <MX_OCTOSPI1_Init+0xc4>)
 8001184:	4a2b      	ldr	r2, [pc, #172]	; (8001234 <MX_OCTOSPI1_Init+0xc8>)
 8001186:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <MX_OCTOSPI1_Init+0xc4>)
 800118a:	2201      	movs	r2, #1
 800118c:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800118e:	4b28      	ldr	r3, [pc, #160]	; (8001230 <MX_OCTOSPI1_Init+0xc4>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8001194:	4b26      	ldr	r3, [pc, #152]	; (8001230 <MX_OCTOSPI1_Init+0xc4>)
 8001196:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800119a:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <MX_OCTOSPI1_Init+0xc4>)
 800119e:	2218      	movs	r2, #24
 80011a0:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <MX_OCTOSPI1_Init+0xc4>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <MX_OCTOSPI1_Init+0xc4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <MX_OCTOSPI1_Init+0xc4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <MX_OCTOSPI1_Init+0xc4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <MX_OCTOSPI1_Init+0xc4>)
 80011bc:	2201      	movs	r2, #1
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_OCTOSPI1_Init+0xc4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_OCTOSPI1_Init+0xc4>)
 80011c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 10;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_OCTOSPI1_Init+0xc4>)
 80011d0:	220a      	movs	r2, #10
 80011d2:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_OCTOSPI1_Init+0xc4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_OCTOSPI1_Init+0xc4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 400;
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <MX_OCTOSPI1_Init+0xc4>)
 80011e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80011e6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80011e8:	4811      	ldr	r0, [pc, #68]	; (8001230 <MX_OCTOSPI1_Init+0xc4>)
 80011ea:	f002 f957 	bl	800349c <HAL_OSPI_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_OCTOSPI1_Init+0x8c>
  {
    Error_Handler();
 80011f4:	f7ff ffb4 	bl	8001160 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 8001200:	2301      	movs	r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001204:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001208:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_OCTOSPI1_Init+0xcc>)
 800120c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800120e:	463b      	mov	r3, r7
 8001210:	f241 3288 	movw	r2, #5000	; 0x1388
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <MX_OCTOSPI1_Init+0xc4>)
 8001218:	f002 fd1c 	bl	8003c54 <HAL_OSPIM_Config>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_OCTOSPI1_Init+0xba>
  {
    Error_Handler();
 8001222:	f7ff ff9d 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2400033c 	.word	0x2400033c
 8001234:	52005000 	.word	0x52005000
 8001238:	01000001 	.word	0x01000001

0800123c <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b0bc      	sub	sp, #240	; 0xf0
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001254:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001258:	22b4      	movs	r2, #180	; 0xb4
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f007 f9df 	bl	8008620 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a8c      	ldr	r2, [pc, #560]	; (8001498 <HAL_OSPI_MspInit+0x25c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	f040 8111 	bne.w	8001490 <HAL_OSPI_MspInit+0x254>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800126e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001274:	2304      	movs	r3, #4
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001278:	230c      	movs	r3, #12
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800127c:	2302      	movs	r3, #2
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001284:	2302      	movs	r3, #2
 8001286:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001288:	23c0      	movs	r3, #192	; 0xc0
 800128a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800128c:	2300      	movs	r3, #0
 800128e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8001294:	2320      	movs	r3, #32
 8001296:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001298:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800129c:	4618      	mov	r0, r3
 800129e:	f004 fbdd 	bl	8005a5c <HAL_RCCEx_PeriphCLKConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_OSPI_MspInit+0x70>
    {
      Error_Handler();
 80012a8:	f7ff ff5a 	bl	8001160 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80012ac:	4b7b      	ldr	r3, [pc, #492]	; (800149c <HAL_OSPI_MspInit+0x260>)
 80012ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012b2:	4a7a      	ldr	r2, [pc, #488]	; (800149c <HAL_OSPI_MspInit+0x260>)
 80012b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80012bc:	4b77      	ldr	r3, [pc, #476]	; (800149c <HAL_OSPI_MspInit+0x260>)
 80012be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80012ca:	4b74      	ldr	r3, [pc, #464]	; (800149c <HAL_OSPI_MspInit+0x260>)
 80012cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012d0:	4a72      	ldr	r2, [pc, #456]	; (800149c <HAL_OSPI_MspInit+0x260>)
 80012d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80012da:	4b70      	ldr	r3, [pc, #448]	; (800149c <HAL_OSPI_MspInit+0x260>)
 80012dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e4:	623b      	str	r3, [r7, #32]
 80012e6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012e8:	4b6c      	ldr	r3, [pc, #432]	; (800149c <HAL_OSPI_MspInit+0x260>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ee:	4a6b      	ldr	r2, [pc, #428]	; (800149c <HAL_OSPI_MspInit+0x260>)
 80012f0:	f043 0320 	orr.w	r3, r3, #32
 80012f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f8:	4b68      	ldr	r3, [pc, #416]	; (800149c <HAL_OSPI_MspInit+0x260>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fe:	f003 0320 	and.w	r3, r3, #32
 8001302:	61fb      	str	r3, [r7, #28]
 8001304:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	4b65      	ldr	r3, [pc, #404]	; (800149c <HAL_OSPI_MspInit+0x260>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130c:	4a63      	ldr	r2, [pc, #396]	; (800149c <HAL_OSPI_MspInit+0x260>)
 800130e:	f043 0304 	orr.w	r3, r3, #4
 8001312:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001316:	4b61      	ldr	r3, [pc, #388]	; (800149c <HAL_OSPI_MspInit+0x260>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	61bb      	str	r3, [r7, #24]
 8001322:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b5d      	ldr	r3, [pc, #372]	; (800149c <HAL_OSPI_MspInit+0x260>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132a:	4a5c      	ldr	r2, [pc, #368]	; (800149c <HAL_OSPI_MspInit+0x260>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001334:	4b59      	ldr	r3, [pc, #356]	; (800149c <HAL_OSPI_MspInit+0x260>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001342:	4b56      	ldr	r3, [pc, #344]	; (800149c <HAL_OSPI_MspInit+0x260>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001348:	4a54      	ldr	r2, [pc, #336]	; (800149c <HAL_OSPI_MspInit+0x260>)
 800134a:	f043 0310 	orr.w	r3, r3, #16
 800134e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001352:	4b52      	ldr	r3, [pc, #328]	; (800149c <HAL_OSPI_MspInit+0x260>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001360:	4b4e      	ldr	r3, [pc, #312]	; (800149c <HAL_OSPI_MspInit+0x260>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001366:	4a4d      	ldr	r2, [pc, #308]	; (800149c <HAL_OSPI_MspInit+0x260>)
 8001368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001370:	4b4a      	ldr	r3, [pc, #296]	; (800149c <HAL_OSPI_MspInit+0x260>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    PE7     ------> OCTOSPIM_P1_IO4
    PE8     ------> OCTOSPIM_P1_IO5
    PE10     ------> OCTOSPIM_P1_IO7
    PG6     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800137e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001398:	230a      	movs	r3, #10
 800139a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800139e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013a2:	4619      	mov	r1, r3
 80013a4:	483e      	ldr	r0, [pc, #248]	; (80014a0 <HAL_OSPI_MspInit+0x264>)
 80013a6:	f000 fe99 	bl	80020dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013be:	2303      	movs	r3, #3
 80013c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80013c4:	2309      	movs	r3, #9
 80013c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013ce:	4619      	mov	r1, r3
 80013d0:	4833      	ldr	r0, [pc, #204]	; (80014a0 <HAL_OSPI_MspInit+0x264>)
 80013d2:	f000 fe83 	bl	80020dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013d6:	2308      	movs	r3, #8
 80013d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 80013ee:	2304      	movs	r3, #4
 80013f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013f8:	4619      	mov	r1, r3
 80013fa:	482a      	ldr	r0, [pc, #168]	; (80014a4 <HAL_OSPI_MspInit+0x268>)
 80013fc:	f000 fe6e 	bl	80020dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001400:	2302      	movs	r3, #2
 8001402:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_OCTOSPIM_P1;
 8001418:	230c      	movs	r3, #12
 800141a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001422:	4619      	mov	r1, r3
 8001424:	4820      	ldr	r0, [pc, #128]	; (80014a8 <HAL_OSPI_MspInit+0x26c>)
 8001426:	f000 fe59 	bl	80020dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800142a:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 800142e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001444:	230a      	movs	r3, #10
 8001446:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800144a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800144e:	4619      	mov	r1, r3
 8001450:	4816      	ldr	r0, [pc, #88]	; (80014ac <HAL_OSPI_MspInit+0x270>)
 8001452:	f000 fe43 	bl	80020dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001456:	2340      	movs	r3, #64	; 0x40
 8001458:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800146e:	230a      	movs	r3, #10
 8001470:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001474:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001478:	4619      	mov	r1, r3
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <HAL_OSPI_MspInit+0x274>)
 800147c:	f000 fe2e 	bl	80020dc <HAL_GPIO_Init>

    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	205c      	movs	r0, #92	; 0x5c
 8001486:	f000 fd7a 	bl	8001f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 800148a:	205c      	movs	r0, #92	; 0x5c
 800148c:	f000 fd91 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8001490:	bf00      	nop
 8001492:	37f0      	adds	r7, #240	; 0xf0
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	52005000 	.word	0x52005000
 800149c:	58024400 	.word	0x58024400
 80014a0:	58021400 	.word	0x58021400
 80014a4:	58020800 	.word	0x58020800
 80014a8:	58020000 	.word	0x58020000
 80014ac:	58021000 	.word	0x58021000
 80014b0:	58021800 	.word	0x58021800

080014b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_MspInit+0x30>)
 80014bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014c0:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <HAL_MspInit+0x30>)
 80014c2:	f043 0302 	orr.w	r3, r3, #2
 80014c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_MspInit+0x30>)
 80014cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	58024400 	.word	0x58024400

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <NMI_Handler+0x4>

080014ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <MemManage_Handler+0x4>

080014fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <BusFault_Handler+0x4>

08001500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <UsageFault_Handler+0x4>

08001506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001534:	f000 fc04 	bl	8001d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}

0800153c <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <OCTOSPI1_IRQHandler+0x10>)
 8001542:	f002 f867 	bl	8003614 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2400033c 	.word	0x2400033c

08001550 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
	return 1;
 8001554:	2301      	movs	r3, #1
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_kill>:

int _kill(int pid, int sig)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800156a:	f007 f821 	bl	80085b0 <__errno>
 800156e:	4603      	mov	r3, r0
 8001570:	2216      	movs	r2, #22
 8001572:	601a      	str	r2, [r3, #0]
	return -1;
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <_exit>:

void _exit (int status)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ffe7 	bl	8001560 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001592:	e7fe      	b.n	8001592 <_exit+0x12>

08001594 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	e00a      	b.n	80015bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015a6:	f3af 8000 	nop.w
 80015aa:	4601      	mov	r1, r0
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	60ba      	str	r2, [r7, #8]
 80015b2:	b2ca      	uxtb	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dbf0      	blt.n	80015a6 <_read+0x12>
	}

return len;
 80015c4:	687b      	ldr	r3, [r7, #4]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e009      	b.n	80015f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	60ba      	str	r2, [r7, #8]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fc1f 	bl	8000e2c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	dbf1      	blt.n	80015e0 <_write+0x12>
	}
	return len;
 80015fc:	687b      	ldr	r3, [r7, #4]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <_close>:

int _close(int file)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
	return -1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162e:	605a      	str	r2, [r3, #4]
	return 0;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <_isatty>:

int _isatty(int file)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
	return 1;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	return 0;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <_sbrk+0x5c>)
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <_sbrk+0x60>)
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <_sbrk+0x64>)
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <_sbrk+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d207      	bcs.n	80016b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a0:	f006 ff86 	bl	80085b0 <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	220c      	movs	r2, #12
 80016a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	e009      	b.n	80016c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <_sbrk+0x64>)
 80016c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	24050000 	.word	0x24050000
 80016d0:	00000400 	.word	0x00000400
 80016d4:	24000398 	.word	0x24000398
 80016d8:	24000440 	.word	0x24000440

080016dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016e0:	4b32      	ldr	r3, [pc, #200]	; (80017ac <SystemInit+0xd0>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e6:	4a31      	ldr	r2, [pc, #196]	; (80017ac <SystemInit+0xd0>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016f0:	4b2f      	ldr	r3, [pc, #188]	; (80017b0 <SystemInit+0xd4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	2b06      	cmp	r3, #6
 80016fa:	d807      	bhi.n	800170c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016fc:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <SystemInit+0xd4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f023 030f 	bic.w	r3, r3, #15
 8001704:	4a2a      	ldr	r2, [pc, #168]	; (80017b0 <SystemInit+0xd4>)
 8001706:	f043 0307 	orr.w	r3, r3, #7
 800170a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800170c:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <SystemInit+0xd8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a28      	ldr	r2, [pc, #160]	; (80017b4 <SystemInit+0xd8>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001718:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <SystemInit+0xd8>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800171e:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <SystemInit+0xd8>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4924      	ldr	r1, [pc, #144]	; (80017b4 <SystemInit+0xd8>)
 8001724:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <SystemInit+0xdc>)
 8001726:	4013      	ands	r3, r2
 8001728:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <SystemInit+0xd4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001736:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <SystemInit+0xd4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 030f 	bic.w	r3, r3, #15
 800173e:	4a1c      	ldr	r2, [pc, #112]	; (80017b0 <SystemInit+0xd4>)
 8001740:	f043 0307 	orr.w	r3, r3, #7
 8001744:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001746:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <SystemInit+0xd8>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <SystemInit+0xd8>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <SystemInit+0xd8>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <SystemInit+0xd8>)
 800175a:	4a18      	ldr	r2, [pc, #96]	; (80017bc <SystemInit+0xe0>)
 800175c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <SystemInit+0xd8>)
 8001760:	4a17      	ldr	r2, [pc, #92]	; (80017c0 <SystemInit+0xe4>)
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <SystemInit+0xd8>)
 8001766:	4a17      	ldr	r2, [pc, #92]	; (80017c4 <SystemInit+0xe8>)
 8001768:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <SystemInit+0xd8>)
 800176c:	2200      	movs	r2, #0
 800176e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001770:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <SystemInit+0xd8>)
 8001772:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <SystemInit+0xe8>)
 8001774:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <SystemInit+0xd8>)
 8001778:	2200      	movs	r2, #0
 800177a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <SystemInit+0xd8>)
 800177e:	4a11      	ldr	r2, [pc, #68]	; (80017c4 <SystemInit+0xe8>)
 8001780:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <SystemInit+0xd8>)
 8001784:	2200      	movs	r2, #0
 8001786:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <SystemInit+0xd8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <SystemInit+0xd8>)
 800178e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001792:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <SystemInit+0xd8>)
 8001796:	2200      	movs	r2, #0
 8001798:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <SystemInit+0xec>)
 800179c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80017a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00
 80017b0:	52002000 	.word	0x52002000
 80017b4:	58024400 	.word	0x58024400
 80017b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80017bc:	02020200 	.word	0x02020200
 80017c0:	01ff0000 	.word	0x01ff0000
 80017c4:	01010280 	.word	0x01010280
 80017c8:	52004000 	.word	0x52004000

080017cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017d0:	4b22      	ldr	r3, [pc, #136]	; (800185c <MX_USART1_UART_Init+0x90>)
 80017d2:	4a23      	ldr	r2, [pc, #140]	; (8001860 <MX_USART1_UART_Init+0x94>)
 80017d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <MX_USART1_UART_Init+0x90>)
 80017d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017de:	4b1f      	ldr	r3, [pc, #124]	; (800185c <MX_USART1_UART_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <MX_USART1_UART_Init+0x90>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <MX_USART1_UART_Init+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <MX_USART1_UART_Init+0x90>)
 80017f2:	220c      	movs	r2, #12
 80017f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f6:	4b19      	ldr	r3, [pc, #100]	; (800185c <MX_USART1_UART_Init+0x90>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <MX_USART1_UART_Init+0x90>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <MX_USART1_UART_Init+0x90>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <MX_USART1_UART_Init+0x90>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <MX_USART1_UART_Init+0x90>)
 8001810:	2200      	movs	r2, #0
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001814:	4811      	ldr	r0, [pc, #68]	; (800185c <MX_USART1_UART_Init+0x90>)
 8001816:	f005 fc3d 	bl	8007094 <HAL_UART_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001820:	f7ff fc9e 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001824:	2100      	movs	r1, #0
 8001826:	480d      	ldr	r0, [pc, #52]	; (800185c <MX_USART1_UART_Init+0x90>)
 8001828:	f006 fd74 	bl	8008314 <HAL_UARTEx_SetTxFifoThreshold>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001832:	f7ff fc95 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001836:	2100      	movs	r1, #0
 8001838:	4808      	ldr	r0, [pc, #32]	; (800185c <MX_USART1_UART_Init+0x90>)
 800183a:	f006 fda9 	bl	8008390 <HAL_UARTEx_SetRxFifoThreshold>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001844:	f7ff fc8c 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <MX_USART1_UART_Init+0x90>)
 800184a:	f006 fd2a 	bl	80082a2 <HAL_UARTEx_DisableFifoMode>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001854:	f7ff fc84 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2400039c 	.word	0x2400039c
 8001860:	40011000 	.word	0x40011000

08001864 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b0b6      	sub	sp, #216	; 0xd8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	22b4      	movs	r2, #180	; 0xb4
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f006 fecb 	bl	8008620 <memset>
  if(uartHandle->Instance==USART1)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a25      	ldr	r2, [pc, #148]	; (8001924 <HAL_UART_MspInit+0xc0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d142      	bne.n	800191a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001894:	2301      	movs	r3, #1
 8001896:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001898:	2300      	movs	r3, #0
 800189a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800189e:	f107 0310 	add.w	r3, r7, #16
 80018a2:	4618      	mov	r0, r3
 80018a4:	f004 f8da 	bl	8005a5c <HAL_RCCEx_PeriphCLKConfig>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018ae:	f7ff fc57 	bl	8001160 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018b2:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <HAL_UART_MspInit+0xc4>)
 80018b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018b8:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <HAL_UART_MspInit+0xc4>)
 80018ba:	f043 0310 	orr.w	r3, r3, #16
 80018be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_UART_MspInit+0xc4>)
 80018c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018c8:	f003 0310 	and.w	r3, r3, #16
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d0:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_UART_MspInit+0xc4>)
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d6:	4a14      	ldr	r2, [pc, #80]	; (8001928 <HAL_UART_MspInit+0xc4>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_UART_MspInit+0xc4>)
 80018e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001908:	2304      	movs	r3, #4
 800190a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001912:	4619      	mov	r1, r3
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <HAL_UART_MspInit+0xc8>)
 8001916:	f000 fbe1 	bl	80020dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800191a:	bf00      	nop
 800191c:	37d8      	adds	r7, #216	; 0xd8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40011000 	.word	0x40011000
 8001928:	58024400 	.word	0x58024400
 800192c:	58020400 	.word	0x58020400

08001930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001968 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001934:	f7ff fed2 	bl	80016dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001938:	480c      	ldr	r0, [pc, #48]	; (800196c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800193a:	490d      	ldr	r1, [pc, #52]	; (8001970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001950:	4c0a      	ldr	r4, [pc, #40]	; (800197c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800195e:	f006 fe2d 	bl	80085bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001962:	f7ff fabf 	bl	8000ee4 <main>
  bx  lr
 8001966:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001968:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800196c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001970:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001974:	0800b5b4 	.word	0x0800b5b4
  ldr r2, =_sbss
 8001978:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 800197c:	24000440 	.word	0x24000440

08001980 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC3_IRQHandler>

08001982 <APS6408_EnableMemoryMappedMode>:
  * @param  Ctx Component object pointer
  * @retval OSPI memory status
  */
int32_t APS6408_EnableMemoryMappedMode(OSPI_HandleTypeDef *Ctx, uint32_t ReadLatencyCode, uint32_t WriteLatencyCode,
                                       uint32_t BurstType)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b09a      	sub	sp, #104	; 0x68
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	603b      	str	r3, [r7, #0]
  OSPI_RegularCmdTypeDef   sCommand;
  OSPI_MemoryMappedTypeDef sMemMappedCfg;

  /* Initialize the write command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8001990:	2302      	movs	r3, #2
 8001992:	61bb      	str	r3, [r7, #24]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8001998:	2304      	movs	r3, #4
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800199c:	2300      	movs	r3, #0
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction        = (BurstType == 0U) ? APS6408_WRITE_LINEAR_BURST_CMD : APS6408_WRITE_CMD;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <APS6408_EnableMemoryMappedMode+0x2c>
 80019aa:	23a0      	movs	r3, #160	; 0xa0
 80019ac:	e000      	b.n	80019b0 <APS6408_EnableMemoryMappedMode+0x2e>
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 80019b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80019b8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80019bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 80019be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode           = HAL_OSPI_DATA_8_LINES;
 80019c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019cc:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 80019ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80019d2:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = WriteLatencyCode;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DQSMode            = HAL_OSPI_DQS_ENABLE;
 80019d8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80019dc:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80019de:	2300      	movs	r3, #0
 80019e0:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_OSPI_Command(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80019e2:	f107 0318 	add.w	r3, r7, #24
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4619      	mov	r1, r3
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f001 ff53 	bl	8003898 <HAL_OSPI_Command>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <APS6408_EnableMemoryMappedMode+0x7c>
  {
    return APS6408_ERROR;
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295
 80019fc:	e024      	b.n	8001a48 <APS6408_EnableMemoryMappedMode+0xc6>
  }

  /* Initialize the read command */
  sCommand.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
 80019fe:	2301      	movs	r3, #1
 8001a00:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction   = APS6408_READ_CMD;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  sCommand.DummyCycles   = ReadLatencyCode;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a0a:	f107 0318 	add.w	r3, r7, #24
 8001a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a12:	4619      	mov	r1, r3
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f001 ff3f 	bl	8003898 <HAL_OSPI_Command>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <APS6408_EnableMemoryMappedMode+0xa4>
  {
    return APS6408_ERROR;
 8001a20:	f04f 33ff 	mov.w	r3, #4294967295
 8001a24:	e010      	b.n	8001a48 <APS6408_EnableMemoryMappedMode+0xc6>
  }

  /* OctoSPI activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_ENABLE;
 8001a26:	2308      	movs	r3, #8
 8001a28:	613b      	str	r3, [r7, #16]
  sMemMappedCfg.TimeOutPeriod     = 0x34U;
 8001a2a:	2334      	movs	r3, #52	; 0x34
 8001a2c:	617b      	str	r3, [r7, #20]

  if (HAL_OSPI_MemoryMapped(Ctx, &sMemMappedCfg) != HAL_OK)
 8001a2e:	f107 0310 	add.w	r3, r7, #16
 8001a32:	4619      	mov	r1, r3
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f002 f85f 	bl	8003af8 <HAL_OSPI_MemoryMapped>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <APS6408_EnableMemoryMappedMode+0xc4>
  {
    return APS6408_ERROR;
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295
 8001a44:	e000      	b.n	8001a48 <APS6408_EnableMemoryMappedMode+0xc6>
  }

  return APS6408_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3768      	adds	r7, #104	; 0x68
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <APS6408_ReadReg>:
  * @param  Value Register value pointer
  * @param  LatencyCode Latency used for the access
  * @retval error status
  */
int32_t APS6408_ReadReg(OSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t *Value, uint32_t LatencyCode)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b098      	sub	sp, #96	; 0x60
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand = {0};
 8001a5e:	f107 0310 	add.w	r3, r7, #16
 8001a62:	2250      	movs	r2, #80	; 0x50
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f006 fdda 	bl	8008620 <memset>

  /* Initialize the read register command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8001a70:	2304      	movs	r3, #4
 8001a72:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = APS6408_READ_REG_CMD;
 8001a7c:	2340      	movs	r3, #64	; 0x40
 8001a7e:	61bb      	str	r3, [r7, #24]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8001a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8001a86:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8001a8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.Address            = Address;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_8_LINES;
 8001a9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8001aa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001aa4:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.NbData             = 2;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DummyCycles        = LatencyCode;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8001aae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001ab2:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_OSPI_Command(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f001 fee8 	bl	8003898 <HAL_OSPI_Command>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <APS6408_ReadReg+0x84>
  {
    return APS6408_ERROR;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	e00c      	b.n	8001aee <APS6408_ReadReg+0x9e>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, (uint8_t *)Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f001 ff69 	bl	80039b2 <HAL_OSPI_Receive>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <APS6408_ReadReg+0x9c>
  {
    return APS6408_ERROR;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aea:	e000      	b.n	8001aee <APS6408_ReadReg+0x9e>
  }

  return APS6408_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3760      	adds	r7, #96	; 0x60
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <APS6408_ReadID>:
  * @param  ID IDs pointer (2 * 8-bits value)
  * @param  LatencyCode Latency used for the access
  * @retval error status
  */
int32_t APS6408_ReadID(OSPI_HandleTypeDef *Ctx, uint8_t *ID, uint32_t LatencyCode)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
  /* Read the Mode Register 1 and 2 */
  if (APS6408_ReadReg(Ctx, APS6408_MR1_ADDRESS, ID, LatencyCode) != APS6408_OK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	2101      	movs	r1, #1
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f7ff ffa1 	bl	8001a50 <APS6408_ReadReg>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <APS6408_ReadID+0x24>
  {
    return APS6408_ERROR;
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
 8001b18:	e010      	b.n	8001b3c <APS6408_ReadID+0x46>
  }

  /* Keep only Vendor ID from Mode Register 1 */
  *ID &= (APS6408_MR1_VENDOR_ID);
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	701a      	strb	r2, [r3, #0]

  /* Keep only Device ID and Device Density from Mode Register 2 */
  *(ID + 1) &= (APS6408_MR2_DEVICE_ID | APS6408_MR2_DENSITY);
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	3301      	adds	r3, #1
 8001b32:	f002 021f 	and.w	r2, r2, #31
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]

  return APS6408_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <APS6408_Reset>:
  * @brief  Reset the memory
  * @param  Ctx Component object pointer
  * @retval error status
  */
int32_t APS6408_Reset(OSPI_HandleTypeDef *Ctx)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b096      	sub	sp, #88	; 0x58
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand = {0};
 8001b4c:	f107 0308 	add.w	r3, r7, #8
 8001b50:	2250      	movs	r2, #80	; 0x50
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f006 fd63 	bl	8008620 <memset>

  /* Initialize the command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8001b62:	2304      	movs	r3, #4
 8001b64:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
  sCommand.Instruction        = APS6408_RESET_CMD;
 8001b6e:	23ff      	movs	r3, #255	; 0xff
 8001b70:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8001b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8001b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Address            = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.NbData             = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles        = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	657b      	str	r3, [r7, #84]	; 0x54

  /* Configure the command */
  if (HAL_OSPI_Command(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b9e:	f107 0308 	add.w	r3, r7, #8
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f001 fe75 	bl	8003898 <HAL_OSPI_Command>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <APS6408_Reset+0x76>
  {
    return APS6408_ERROR;
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb8:	e003      	b.n	8001bc2 <APS6408_Reset+0x7e>
  }

  /* Need to wait tRST */
  HAL_Delay(1);
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f000 f8e0 	bl	8001d80 <HAL_Delay>

  return APS6408_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3758      	adds	r7, #88	; 0x58
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <INA236_setup>:
 *      Author: Kieran Shanley
 */
#include "INA236.h"

void INA236_setup(INA236_dev * dev, I2C_Bus * bus, uint8_t addr)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b085      	sub	sp, #20
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	71fb      	strb	r3, [r7, #7]
	dev->addr = addr;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	79fa      	ldrb	r2, [r7, #7]
 8001bdc:	711a      	strb	r2, [r3, #4]
	dev->bus = bus;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	601a      	str	r2, [r3, #0]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <PCA9543_setup>:
 *      Author: Kieran Shanley
 */
#include "PCA9543.h"

void PCA9543_setup(PCA9543_dev * dev, I2C_Bus * bus, uint8_t addr)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	71fb      	strb	r3, [r7, #7]
	dev->addr = addr;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	79fa      	ldrb	r2, [r7, #7]
 8001c02:	711a      	strb	r2, [r3, #4]
	dev->bus = bus;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	601a      	str	r2, [r3, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <PCA9543_set_channel>:

int32_t PCA9543_set_channel(PCA9543_dev * dev, uint8_t channel)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af02      	add	r7, sp, #8
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	70fb      	strb	r3, [r7, #3]
	uint8_t data = channel;
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	73bb      	strb	r3, [r7, #14]
	uint8_t addr = dev->addr << 1;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	791b      	ldrb	r3, [r3, #4]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Master_Transmit(dev->bus->I2C_Handle, addr, &data, 1, 1000) == HAL_OK) {
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	b299      	uxth	r1, r3
 8001c38:	f107 020e 	add.w	r2, r7, #14
 8001c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2301      	movs	r3, #1
 8001c44:	f000 fc9c 	bl	8002580 <HAL_I2C_Master_Transmit>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <PCA9543_set_channel+0x3c>
		return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e000      	b.n	8001c54 <PCA9543_set_channel+0x3e>
	}

	return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c62:	2003      	movs	r0, #3
 8001c64:	f000 f980 	bl	8001f68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c68:	f003 fd22 	bl	80056b0 <HAL_RCC_GetSysClockFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_Init+0x68>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	0a1b      	lsrs	r3, r3, #8
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	4913      	ldr	r1, [pc, #76]	; (8001cc8 <HAL_Init+0x6c>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
 8001c84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c86:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_Init+0x68>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <HAL_Init+0x6c>)
 8001c90:	5cd3      	ldrb	r3, [r2, r3]
 8001c92:	f003 031f 	and.w	r3, r3, #31
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <HAL_Init+0x70>)
 8001c9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ca0:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <HAL_Init+0x74>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ca6:	200f      	movs	r0, #15
 8001ca8:	f000 f814 	bl	8001cd4 <HAL_InitTick>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e002      	b.n	8001cbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb6:	f7ff fbfd 	bl	80014b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	58024400 	.word	0x58024400
 8001cc8:	0800b194 	.word	0x0800b194
 8001ccc:	24000004 	.word	0x24000004
 8001cd0:	24000000 	.word	0x24000000

08001cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cdc:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_InitTick+0x60>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e021      	b.n	8001d2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <HAL_InitTick+0x64>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_InitTick+0x60>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f965 	bl	8001fce <HAL_SYSTICK_Config>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00e      	b.n	8001d2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b0f      	cmp	r3, #15
 8001d12:	d80a      	bhi.n	8001d2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d14:	2200      	movs	r2, #0
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f000 f92f 	bl	8001f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d20:	4a06      	ldr	r2, [pc, #24]	; (8001d3c <HAL_InitTick+0x68>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	2400000c 	.word	0x2400000c
 8001d38:	24000000 	.word	0x24000000
 8001d3c:	24000008 	.word	0x24000008

08001d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_IncTick+0x20>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_IncTick+0x24>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_IncTick+0x24>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	2400000c 	.word	0x2400000c
 8001d64:	2400042c 	.word	0x2400042c

08001d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <HAL_GetTick+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	2400042c 	.word	0x2400042c

08001d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff ffee 	bl	8001d68 <HAL_GetTick>
 8001d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d005      	beq.n	8001da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_Delay+0x44>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001da6:	bf00      	nop
 8001da8:	f7ff ffde 	bl	8001d68 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8f7      	bhi.n	8001da8 <HAL_Delay+0x28>
  {
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2400000c 	.word	0x2400000c

08001dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <__NVIC_SetPriorityGrouping+0x40>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de4:	4013      	ands	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df6:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <__NVIC_SetPriorityGrouping+0x40>)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	60d3      	str	r3, [r2, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00
 8001e0c:	05fa0000 	.word	0x05fa0000

08001e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <__NVIC_GetPriorityGrouping+0x18>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	f003 0307 	and.w	r3, r3, #7
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	db0b      	blt.n	8001e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	f003 021f 	and.w	r2, r3, #31
 8001e44:	4907      	ldr	r1, [pc, #28]	; (8001e64 <__NVIC_EnableIRQ+0x38>)
 8001e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000e100 	.word	0xe000e100

08001e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	db0a      	blt.n	8001e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	490c      	ldr	r1, [pc, #48]	; (8001eb4 <__NVIC_SetPriority+0x4c>)
 8001e82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e90:	e00a      	b.n	8001ea8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4908      	ldr	r1, [pc, #32]	; (8001eb8 <__NVIC_SetPriority+0x50>)
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	3b04      	subs	r3, #4
 8001ea0:	0112      	lsls	r2, r2, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	761a      	strb	r2, [r3, #24]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000e100 	.word	0xe000e100
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f1c3 0307 	rsb	r3, r3, #7
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	bf28      	it	cs
 8001eda:	2304      	movcs	r3, #4
 8001edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d902      	bls.n	8001eec <NVIC_EncodePriority+0x30>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3b03      	subs	r3, #3
 8001eea:	e000      	b.n	8001eee <NVIC_EncodePriority+0x32>
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	401a      	ands	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	43d9      	mvns	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	4313      	orrs	r3, r2
         );
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3724      	adds	r7, #36	; 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f34:	d301      	bcc.n	8001f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00f      	b.n	8001f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <SysTick_Config+0x40>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f42:	210f      	movs	r1, #15
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295
 8001f48:	f7ff ff8e 	bl	8001e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <SysTick_Config+0x40>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <SysTick_Config+0x40>)
 8001f54:	2207      	movs	r2, #7
 8001f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	e000e010 	.word	0xe000e010

08001f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ff29 	bl	8001dc8 <__NVIC_SetPriorityGrouping>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f8c:	f7ff ff40 	bl	8001e10 <__NVIC_GetPriorityGrouping>
 8001f90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f7ff ff90 	bl	8001ebc <NVIC_EncodePriority>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff5f 	bl	8001e68 <__NVIC_SetPriority>
}
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff33 	bl	8001e2c <__NVIC_EnableIRQ>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffa4 	bl	8001f24 <SysTick_Config>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e069      	b.n	80020ce <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe fb92 	bl	8000730 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6819      	ldr	r1, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <HAL_DCMI_Init+0xf0>)
 800202e:	400b      	ands	r3, r1
 8002030:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6819      	ldr	r1, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002046:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002052:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800205e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800206a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002076:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b10      	cmp	r3, #16
 8002086:	d112      	bne.n	80020ae <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	7f1b      	ldrb	r3, [r3, #28]
 800208c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	7f5b      	ldrb	r3, [r3, #29]
 8002092:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002094:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7f9b      	ldrb	r3, [r3, #30]
 800209a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800209c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	7fdb      	ldrb	r3, [r3, #31]
 80020a4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80020aa:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80020ac:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 021e 	orr.w	r2, r2, #30
 80020bc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	ffe0f007 	.word	0xffe0f007

080020dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	; 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020ea:	4b86      	ldr	r3, [pc, #536]	; (8002304 <HAL_GPIO_Init+0x228>)
 80020ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020ee:	e18c      	b.n	800240a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2101      	movs	r1, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa01 f303 	lsl.w	r3, r1, r3
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 817e 	beq.w	8002404 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d005      	beq.n	8002120 <HAL_GPIO_Init+0x44>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d130      	bne.n	8002182 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002156:	2201      	movs	r2, #1
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	f003 0201 	and.w	r2, r3, #1
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b03      	cmp	r3, #3
 800218c:	d017      	beq.n	80021be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	2203      	movs	r2, #3
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d123      	bne.n	8002212 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	08da      	lsrs	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3208      	adds	r2, #8
 80021d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	220f      	movs	r2, #15
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	08da      	lsrs	r2, r3, #3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3208      	adds	r2, #8
 800220c:	69b9      	ldr	r1, [r7, #24]
 800220e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	2203      	movs	r2, #3
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 0203 	and.w	r2, r3, #3
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80d8 	beq.w	8002404 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002254:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <HAL_GPIO_Init+0x22c>)
 8002256:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800225a:	4a2b      	ldr	r2, [pc, #172]	; (8002308 <HAL_GPIO_Init+0x22c>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002264:	4b28      	ldr	r3, [pc, #160]	; (8002308 <HAL_GPIO_Init+0x22c>)
 8002266:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002272:	4a26      	ldr	r2, [pc, #152]	; (800230c <HAL_GPIO_Init+0x230>)
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	3302      	adds	r3, #2
 800227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	220f      	movs	r2, #15
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a1d      	ldr	r2, [pc, #116]	; (8002310 <HAL_GPIO_Init+0x234>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d04a      	beq.n	8002334 <HAL_GPIO_Init+0x258>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a1c      	ldr	r2, [pc, #112]	; (8002314 <HAL_GPIO_Init+0x238>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d02b      	beq.n	80022fe <HAL_GPIO_Init+0x222>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a1b      	ldr	r2, [pc, #108]	; (8002318 <HAL_GPIO_Init+0x23c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d025      	beq.n	80022fa <HAL_GPIO_Init+0x21e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a1a      	ldr	r2, [pc, #104]	; (800231c <HAL_GPIO_Init+0x240>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d01f      	beq.n	80022f6 <HAL_GPIO_Init+0x21a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a19      	ldr	r2, [pc, #100]	; (8002320 <HAL_GPIO_Init+0x244>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d019      	beq.n	80022f2 <HAL_GPIO_Init+0x216>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a18      	ldr	r2, [pc, #96]	; (8002324 <HAL_GPIO_Init+0x248>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d013      	beq.n	80022ee <HAL_GPIO_Init+0x212>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a17      	ldr	r2, [pc, #92]	; (8002328 <HAL_GPIO_Init+0x24c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00d      	beq.n	80022ea <HAL_GPIO_Init+0x20e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a16      	ldr	r2, [pc, #88]	; (800232c <HAL_GPIO_Init+0x250>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d007      	beq.n	80022e6 <HAL_GPIO_Init+0x20a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a15      	ldr	r2, [pc, #84]	; (8002330 <HAL_GPIO_Init+0x254>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d101      	bne.n	80022e2 <HAL_GPIO_Init+0x206>
 80022de:	2309      	movs	r3, #9
 80022e0:	e029      	b.n	8002336 <HAL_GPIO_Init+0x25a>
 80022e2:	230a      	movs	r3, #10
 80022e4:	e027      	b.n	8002336 <HAL_GPIO_Init+0x25a>
 80022e6:	2307      	movs	r3, #7
 80022e8:	e025      	b.n	8002336 <HAL_GPIO_Init+0x25a>
 80022ea:	2306      	movs	r3, #6
 80022ec:	e023      	b.n	8002336 <HAL_GPIO_Init+0x25a>
 80022ee:	2305      	movs	r3, #5
 80022f0:	e021      	b.n	8002336 <HAL_GPIO_Init+0x25a>
 80022f2:	2304      	movs	r3, #4
 80022f4:	e01f      	b.n	8002336 <HAL_GPIO_Init+0x25a>
 80022f6:	2303      	movs	r3, #3
 80022f8:	e01d      	b.n	8002336 <HAL_GPIO_Init+0x25a>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e01b      	b.n	8002336 <HAL_GPIO_Init+0x25a>
 80022fe:	2301      	movs	r3, #1
 8002300:	e019      	b.n	8002336 <HAL_GPIO_Init+0x25a>
 8002302:	bf00      	nop
 8002304:	58000080 	.word	0x58000080
 8002308:	58024400 	.word	0x58024400
 800230c:	58000400 	.word	0x58000400
 8002310:	58020000 	.word	0x58020000
 8002314:	58020400 	.word	0x58020400
 8002318:	58020800 	.word	0x58020800
 800231c:	58020c00 	.word	0x58020c00
 8002320:	58021000 	.word	0x58021000
 8002324:	58021400 	.word	0x58021400
 8002328:	58021800 	.word	0x58021800
 800232c:	58021c00 	.word	0x58021c00
 8002330:	58022400 	.word	0x58022400
 8002334:	2300      	movs	r3, #0
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	f002 0203 	and.w	r2, r2, #3
 800233c:	0092      	lsls	r2, r2, #2
 800233e:	4093      	lsls	r3, r2
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002346:	4938      	ldr	r1, [pc, #224]	; (8002428 <HAL_GPIO_Init+0x34c>)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	089b      	lsrs	r3, r3, #2
 800234c:	3302      	adds	r3, #2
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800237a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	3301      	adds	r3, #1
 8002408:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	f47f ae6b 	bne.w	80020f0 <HAL_GPIO_Init+0x14>
  }
}
 800241a:	bf00      	nop
 800241c:	bf00      	nop
 800241e:	3724      	adds	r7, #36	; 0x24
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	58000400 	.word	0x58000400

0800242c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
 8002438:	4613      	mov	r3, r2
 800243a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800243c:	787b      	ldrb	r3, [r7, #1]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002448:	e003      	b.n	8002452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	041a      	lsls	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	619a      	str	r2, [r3, #24]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e07f      	b.n	8002572 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7fe fb80 	bl	8000b8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2224      	movs	r2, #36	; 0x24
 8002490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0201 	bic.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	e006      	b.n	80024e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d104      	bne.n	80024fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6859      	ldr	r1, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_I2C_Init+0x11c>)
 8002506:	430b      	orrs	r3, r1
 8002508:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002518:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69d9      	ldr	r1, [r3, #28]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1a      	ldr	r2, [r3, #32]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	02008000 	.word	0x02008000

08002580 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	461a      	mov	r2, r3
 800258c:	460b      	mov	r3, r1
 800258e:	817b      	strh	r3, [r7, #10]
 8002590:	4613      	mov	r3, r2
 8002592:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b20      	cmp	r3, #32
 800259e:	f040 80da 	bne.w	8002756 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_I2C_Master_Transmit+0x30>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e0d3      	b.n	8002758 <HAL_I2C_Master_Transmit+0x1d8>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025b8:	f7ff fbd6 	bl	8001d68 <HAL_GetTick>
 80025bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	2319      	movs	r3, #25
 80025c4:	2201      	movs	r2, #1
 80025c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fcce 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e0be      	b.n	8002758 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2221      	movs	r2, #33	; 0x21
 80025de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2210      	movs	r2, #16
 80025e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	893a      	ldrh	r2, [r7, #8]
 80025fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	2bff      	cmp	r3, #255	; 0xff
 800260a:	d90e      	bls.n	800262a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	22ff      	movs	r2, #255	; 0xff
 8002610:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002616:	b2da      	uxtb	r2, r3
 8002618:	8979      	ldrh	r1, [r7, #10]
 800261a:	4b51      	ldr	r3, [pc, #324]	; (8002760 <HAL_I2C_Master_Transmit+0x1e0>)
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fe4a 	bl	80032bc <I2C_TransferConfig>
 8002628:	e06c      	b.n	8002704 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	b2da      	uxtb	r2, r3
 800263a:	8979      	ldrh	r1, [r7, #10]
 800263c:	4b48      	ldr	r3, [pc, #288]	; (8002760 <HAL_I2C_Master_Transmit+0x1e0>)
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fe39 	bl	80032bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800264a:	e05b      	b.n	8002704 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	6a39      	ldr	r1, [r7, #32]
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 fccb 	bl	8002fec <I2C_WaitOnTXISFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e07b      	b.n	8002758 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d034      	beq.n	8002704 <HAL_I2C_Master_Transmit+0x184>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d130      	bne.n	8002704 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	2200      	movs	r2, #0
 80026aa:	2180      	movs	r1, #128	; 0x80
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fc5d 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e04d      	b.n	8002758 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2bff      	cmp	r3, #255	; 0xff
 80026c4:	d90e      	bls.n	80026e4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	22ff      	movs	r2, #255	; 0xff
 80026ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	8979      	ldrh	r1, [r7, #10]
 80026d4:	2300      	movs	r3, #0
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 fded 	bl	80032bc <I2C_TransferConfig>
 80026e2:	e00f      	b.n	8002704 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	8979      	ldrh	r1, [r7, #10]
 80026f6:	2300      	movs	r3, #0
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 fddc 	bl	80032bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d19e      	bne.n	800264c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	6a39      	ldr	r1, [r7, #32]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 fcaa 	bl	800306c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e01a      	b.n	8002758 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2220      	movs	r2, #32
 8002728:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_I2C_Master_Transmit+0x1e4>)
 8002736:	400b      	ands	r3, r1
 8002738:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e000      	b.n	8002758 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002756:	2302      	movs	r3, #2
  }
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	80002000 	.word	0x80002000
 8002764:	fe00e800 	.word	0xfe00e800

08002768 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af02      	add	r7, sp, #8
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	4608      	mov	r0, r1
 8002772:	4611      	mov	r1, r2
 8002774:	461a      	mov	r2, r3
 8002776:	4603      	mov	r3, r0
 8002778:	817b      	strh	r3, [r7, #10]
 800277a:	460b      	mov	r3, r1
 800277c:	813b      	strh	r3, [r7, #8]
 800277e:	4613      	mov	r3, r2
 8002780:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b20      	cmp	r3, #32
 800278c:	f040 80f9 	bne.w	8002982 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <HAL_I2C_Mem_Write+0x34>
 8002796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002798:	2b00      	cmp	r3, #0
 800279a:	d105      	bne.n	80027a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0ed      	b.n	8002984 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_I2C_Mem_Write+0x4e>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e0e6      	b.n	8002984 <HAL_I2C_Mem_Write+0x21c>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027be:	f7ff fad3 	bl	8001d68 <HAL_GetTick>
 80027c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2319      	movs	r3, #25
 80027ca:	2201      	movs	r2, #1
 80027cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 fbcb 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0d1      	b.n	8002984 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2221      	movs	r2, #33	; 0x21
 80027e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2240      	movs	r2, #64	; 0x40
 80027ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a3a      	ldr	r2, [r7, #32]
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002800:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002808:	88f8      	ldrh	r0, [r7, #6]
 800280a:	893a      	ldrh	r2, [r7, #8]
 800280c:	8979      	ldrh	r1, [r7, #10]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	4603      	mov	r3, r0
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fadb 	bl	8002dd4 <I2C_RequestMemoryWrite>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0a9      	b.n	8002984 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	2bff      	cmp	r3, #255	; 0xff
 8002838:	d90e      	bls.n	8002858 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	22ff      	movs	r2, #255	; 0xff
 800283e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	b2da      	uxtb	r2, r3
 8002846:	8979      	ldrh	r1, [r7, #10]
 8002848:	2300      	movs	r3, #0
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fd33 	bl	80032bc <I2C_TransferConfig>
 8002856:	e00f      	b.n	8002878 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	b2da      	uxtb	r2, r3
 8002868:	8979      	ldrh	r1, [r7, #10]
 800286a:	2300      	movs	r3, #0
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 fd22 	bl	80032bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fbb5 	bl	8002fec <I2C_WaitOnTXISFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e07b      	b.n	8002984 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d034      	beq.n	8002930 <HAL_I2C_Mem_Write+0x1c8>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d130      	bne.n	8002930 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	2200      	movs	r2, #0
 80028d6:	2180      	movs	r1, #128	; 0x80
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fb47 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e04d      	b.n	8002984 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2bff      	cmp	r3, #255	; 0xff
 80028f0:	d90e      	bls.n	8002910 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	22ff      	movs	r2, #255	; 0xff
 80028f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	8979      	ldrh	r1, [r7, #10]
 8002900:	2300      	movs	r3, #0
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 fcd7 	bl	80032bc <I2C_TransferConfig>
 800290e:	e00f      	b.n	8002930 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291e:	b2da      	uxtb	r2, r3
 8002920:	8979      	ldrh	r1, [r7, #10]
 8002922:	2300      	movs	r3, #0
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 fcc6 	bl	80032bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d19e      	bne.n	8002878 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fb94 	bl	800306c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e01a      	b.n	8002984 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2220      	movs	r2, #32
 8002954:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4b0a      	ldr	r3, [pc, #40]	; (800298c <HAL_I2C_Mem_Write+0x224>)
 8002962:	400b      	ands	r3, r1
 8002964:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e000      	b.n	8002984 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002982:	2302      	movs	r3, #2
  }
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	fe00e800 	.word	0xfe00e800

08002990 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	4608      	mov	r0, r1
 800299a:	4611      	mov	r1, r2
 800299c:	461a      	mov	r2, r3
 800299e:	4603      	mov	r3, r0
 80029a0:	817b      	strh	r3, [r7, #10]
 80029a2:	460b      	mov	r3, r1
 80029a4:	813b      	strh	r3, [r7, #8]
 80029a6:	4613      	mov	r3, r2
 80029a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	f040 80fd 	bne.w	8002bb2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <HAL_I2C_Mem_Read+0x34>
 80029be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0f1      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_I2C_Mem_Read+0x4e>
 80029da:	2302      	movs	r3, #2
 80029dc:	e0ea      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x224>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029e6:	f7ff f9bf 	bl	8001d68 <HAL_GetTick>
 80029ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	2319      	movs	r3, #25
 80029f2:	2201      	movs	r2, #1
 80029f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 fab7 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0d5      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2222      	movs	r2, #34	; 0x22
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2240      	movs	r2, #64	; 0x40
 8002a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a3a      	ldr	r2, [r7, #32]
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a30:	88f8      	ldrh	r0, [r7, #6]
 8002a32:	893a      	ldrh	r2, [r7, #8]
 8002a34:	8979      	ldrh	r1, [r7, #10]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	4603      	mov	r3, r0
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 fa1b 	bl	8002e7c <I2C_RequestMemoryRead>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0ad      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2bff      	cmp	r3, #255	; 0xff
 8002a60:	d90e      	bls.n	8002a80 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	22ff      	movs	r2, #255	; 0xff
 8002a66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	8979      	ldrh	r1, [r7, #10]
 8002a70:	4b52      	ldr	r3, [pc, #328]	; (8002bbc <HAL_I2C_Mem_Read+0x22c>)
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fc1f 	bl	80032bc <I2C_TransferConfig>
 8002a7e:	e00f      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	8979      	ldrh	r1, [r7, #10]
 8002a92:	4b4a      	ldr	r3, [pc, #296]	; (8002bbc <HAL_I2C_Mem_Read+0x22c>)
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 fc0e 	bl	80032bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2104      	movs	r1, #4
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fa5e 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e07c      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d034      	beq.n	8002b60 <HAL_I2C_Mem_Read+0x1d0>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d130      	bne.n	8002b60 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b04:	2200      	movs	r2, #0
 8002b06:	2180      	movs	r1, #128	; 0x80
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 fa2f 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e04d      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2bff      	cmp	r3, #255	; 0xff
 8002b20:	d90e      	bls.n	8002b40 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	22ff      	movs	r2, #255	; 0xff
 8002b26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	8979      	ldrh	r1, [r7, #10]
 8002b30:	2300      	movs	r3, #0
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 fbbf 	bl	80032bc <I2C_TransferConfig>
 8002b3e:	e00f      	b.n	8002b60 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	8979      	ldrh	r1, [r7, #10]
 8002b52:	2300      	movs	r3, #0
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fbae 	bl	80032bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d19a      	bne.n	8002aa0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fa7c 	bl	800306c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e01a      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2220      	movs	r2, #32
 8002b84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_I2C_Mem_Read+0x230>)
 8002b92:	400b      	ands	r3, r1
 8002b94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e000      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002bb2:	2302      	movs	r3, #2
  }
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	80002400 	.word	0x80002400
 8002bc0:	fe00e800 	.word	0xfe00e800

08002bc4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	; 0x28
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	f040 80ef 	bne.w	8002dc4 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf4:	d101      	bne.n	8002bfa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e0e5      	b.n	8002dc6 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_I2C_IsDeviceReady+0x44>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e0de      	b.n	8002dc6 <HAL_I2C_IsDeviceReady+0x202>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2224      	movs	r2, #36	; 0x24
 8002c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d105      	bne.n	8002c32 <HAL_I2C_IsDeviceReady+0x6e>
 8002c26:	897b      	ldrh	r3, [r7, #10]
 8002c28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c2c:	4b68      	ldr	r3, [pc, #416]	; (8002dd0 <HAL_I2C_IsDeviceReady+0x20c>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	e004      	b.n	8002c3c <HAL_I2C_IsDeviceReady+0x78>
 8002c32:	897b      	ldrh	r3, [r7, #10]
 8002c34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c38:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002c42:	f7ff f891 	bl	8001d68 <HAL_GetTick>
 8002c46:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	bf0c      	ite	eq
 8002c56:	2301      	moveq	r3, #1
 8002c58:	2300      	movne	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002c74:	e034      	b.n	8002ce0 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d01a      	beq.n	8002cb4 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c7e:	f7ff f873 	bl	8001d68 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d302      	bcc.n	8002c94 <HAL_I2C_IsDeviceReady+0xd0>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10f      	bne.n	8002cb4 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	f043 0220 	orr.w	r2, r3, #32
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e088      	b.n	8002dc6 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	bf0c      	ite	eq
 8002cc2:	2301      	moveq	r3, #1
 8002cc4:	2300      	movne	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002ce0:	7ffb      	ldrb	r3, [r7, #31]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <HAL_I2C_IsDeviceReady+0x128>
 8002ce6:	7fbb      	ldrb	r3, [r7, #30]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0c4      	beq.n	8002c76 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b10      	cmp	r3, #16
 8002cf8:	d01a      	beq.n	8002d30 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2200      	movs	r2, #0
 8002d02:	2120      	movs	r1, #32
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f931 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e058      	b.n	8002dc6 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e04a      	b.n	8002dc6 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2200      	movs	r2, #0
 8002d38:	2120      	movs	r1, #32
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f916 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e03d      	b.n	8002dc6 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2210      	movs	r2, #16
 8002d50:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2220      	movs	r2, #32
 8002d58:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d118      	bne.n	8002d94 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d70:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2120      	movs	r1, #32
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f8f5 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e01c      	b.n	8002dc6 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2220      	movs	r2, #32
 8002d92:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	3301      	adds	r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	f63f af3d 	bhi.w	8002c1e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db0:	f043 0220 	orr.w	r2, r3, #32
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002dc4:	2302      	movs	r3, #2
  }
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3720      	adds	r7, #32
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	02002000 	.word	0x02002000

08002dd4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	4608      	mov	r0, r1
 8002dde:	4611      	mov	r1, r2
 8002de0:	461a      	mov	r2, r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	817b      	strh	r3, [r7, #10]
 8002de6:	460b      	mov	r3, r1
 8002de8:	813b      	strh	r3, [r7, #8]
 8002dea:	4613      	mov	r3, r2
 8002dec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	8979      	ldrh	r1, [r7, #10]
 8002df4:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <I2C_RequestMemoryWrite+0xa4>)
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fa5d 	bl	80032bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	69b9      	ldr	r1, [r7, #24]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f8f0 	bl	8002fec <I2C_WaitOnTXISFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e02c      	b.n	8002e70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d105      	bne.n	8002e28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e1c:	893b      	ldrh	r3, [r7, #8]
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	629a      	str	r2, [r3, #40]	; 0x28
 8002e26:	e015      	b.n	8002e54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e28:	893b      	ldrh	r3, [r7, #8]
 8002e2a:	0a1b      	lsrs	r3, r3, #8
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	69b9      	ldr	r1, [r7, #24]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f8d6 	bl	8002fec <I2C_WaitOnTXISFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e012      	b.n	8002e70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e4a:	893b      	ldrh	r3, [r7, #8]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2180      	movs	r1, #128	; 0x80
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f884 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	80002000 	.word	0x80002000

08002e7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	4608      	mov	r0, r1
 8002e86:	4611      	mov	r1, r2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	817b      	strh	r3, [r7, #10]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	813b      	strh	r3, [r7, #8]
 8002e92:	4613      	mov	r3, r2
 8002e94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	8979      	ldrh	r1, [r7, #10]
 8002e9c:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <I2C_RequestMemoryRead+0xa4>)
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fa0a 	bl	80032bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	69b9      	ldr	r1, [r7, #24]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f89d 	bl	8002fec <I2C_WaitOnTXISFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e02c      	b.n	8002f16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d105      	bne.n	8002ece <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec2:	893b      	ldrh	r3, [r7, #8]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
 8002ecc:	e015      	b.n	8002efa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ece:	893b      	ldrh	r3, [r7, #8]
 8002ed0:	0a1b      	lsrs	r3, r3, #8
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002edc:	69fa      	ldr	r2, [r7, #28]
 8002ede:	69b9      	ldr	r1, [r7, #24]
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f883 	bl	8002fec <I2C_WaitOnTXISFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e012      	b.n	8002f16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ef0:	893b      	ldrh	r3, [r7, #8]
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2200      	movs	r2, #0
 8002f02:	2140      	movs	r1, #64	; 0x40
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f831 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	80002000 	.word	0x80002000

08002f24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d103      	bne.n	8002f42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d007      	beq.n	8002f60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699a      	ldr	r2, [r3, #24]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	619a      	str	r2, [r3, #24]
  }
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f7c:	e022      	b.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d01e      	beq.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f86:	f7fe feef 	bl	8001d68 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d302      	bcc.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d113      	bne.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa0:	f043 0220 	orr.w	r2, r3, #32
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e00f      	b.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d0cd      	beq.n	8002f7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ff8:	e02c      	b.n	8003054 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 f870 	bl	80030e4 <I2C_IsErrorOccurred>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e02a      	b.n	8003064 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003014:	d01e      	beq.n	8003054 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003016:	f7fe fea7 	bl	8001d68 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	429a      	cmp	r2, r3
 8003024:	d302      	bcc.n	800302c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d113      	bne.n	8003054 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e007      	b.n	8003064 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b02      	cmp	r3, #2
 8003060:	d1cb      	bne.n	8002ffa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003078:	e028      	b.n	80030cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f830 	bl	80030e4 <I2C_IsErrorOccurred>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e026      	b.n	80030dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308e:	f7fe fe6b 	bl	8001d68 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	429a      	cmp	r2, r3
 800309c:	d302      	bcc.n	80030a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d113      	bne.n	80030cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e007      	b.n	80030dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	d1cf      	bne.n	800307a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08a      	sub	sp, #40	; 0x28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	d075      	beq.n	80031fc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2210      	movs	r2, #16
 8003116:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003118:	e056      	b.n	80031c8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d052      	beq.n	80031c8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003122:	f7fe fe21 	bl	8001d68 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	429a      	cmp	r2, r3
 8003130:	d302      	bcc.n	8003138 <I2C_IsErrorOccurred+0x54>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d147      	bne.n	80031c8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003142:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800314a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800315a:	d12e      	bne.n	80031ba <I2C_IsErrorOccurred+0xd6>
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003162:	d02a      	beq.n	80031ba <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003164:	7cfb      	ldrb	r3, [r7, #19]
 8003166:	2b20      	cmp	r3, #32
 8003168:	d027      	beq.n	80031ba <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003178:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800317a:	f7fe fdf5 	bl	8001d68 <HAL_GetTick>
 800317e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003180:	e01b      	b.n	80031ba <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003182:	f7fe fdf1 	bl	8001d68 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b19      	cmp	r3, #25
 800318e:	d914      	bls.n	80031ba <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003194:	f043 0220 	orr.w	r2, r3, #32
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d1dc      	bne.n	8003182 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d003      	beq.n	80031de <I2C_IsErrorOccurred+0xfa>
 80031d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d09d      	beq.n	800311a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d103      	bne.n	80031ee <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2220      	movs	r2, #32
 80031ec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	f043 0304 	orr.w	r3, r3, #4
 80031f4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800321e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00b      	beq.n	8003248 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	f043 0308 	orr.w	r3, r3, #8
 8003236:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003240:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	f043 0302 	orr.w	r3, r3, #2
 8003258:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003262:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800326a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800326e:	2b00      	cmp	r3, #0
 8003270:	d01c      	beq.n	80032ac <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f7ff fe56 	bl	8002f24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6859      	ldr	r1, [r3, #4]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <I2C_IsErrorOccurred+0x1d4>)
 8003284:	400b      	ands	r3, r1
 8003286:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	431a      	orrs	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80032ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3728      	adds	r7, #40	; 0x28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	fe00e800 	.word	0xfe00e800

080032bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	607b      	str	r3, [r7, #4]
 80032c6:	460b      	mov	r3, r1
 80032c8:	817b      	strh	r3, [r7, #10]
 80032ca:	4613      	mov	r3, r2
 80032cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ce:	897b      	ldrh	r3, [r7, #10]
 80032d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032d4:	7a7b      	ldrb	r3, [r7, #9]
 80032d6:	041b      	lsls	r3, r3, #16
 80032d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032dc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032ea:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	0d5b      	lsrs	r3, r3, #21
 80032f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80032fa:	4b08      	ldr	r3, [pc, #32]	; (800331c <I2C_TransferConfig+0x60>)
 80032fc:	430b      	orrs	r3, r1
 80032fe:	43db      	mvns	r3, r3
 8003300:	ea02 0103 	and.w	r1, r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800330e:	bf00      	nop
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	03ff63ff 	.word	0x03ff63ff

08003320 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b20      	cmp	r3, #32
 8003334:	d138      	bne.n	80033a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003340:	2302      	movs	r3, #2
 8003342:	e032      	b.n	80033aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2224      	movs	r2, #36	; 0x24
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0201 	bic.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003372:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6819      	ldr	r1, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	e000      	b.n	80033aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033a8:	2302      	movs	r3, #2
  }
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b085      	sub	sp, #20
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	d139      	bne.n	8003440 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e033      	b.n	8003442 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2224      	movs	r2, #36	; 0x24
 80033e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0201 	bic.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003408:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	021b      	lsls	r3, r3, #8
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	e000      	b.n	8003442 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003440:	2302      	movs	r3, #2
  }
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e017      	b.n	8003490 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d004      	beq.n	8003476 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2280      	movs	r2, #128	; 0x80
 8003470:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e00c      	b.n	8003490 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2204      	movs	r2, #4
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0201 	bic.w	r2, r2, #1
 800348c:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80034a8:	f7fe fc5e 	bl	8001d68 <HAL_GetTick>
 80034ac:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
 80034b8:	e0a5      	b.n	8003606 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f040 809e 	bne.w	8003606 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd feb6 	bl	800123c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80034d0:	f241 3188 	movw	r1, #5000	; 0x1388
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fbad 	bl	8003c34 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	4b4b      	ldr	r3, [pc, #300]	; (8003610 <HAL_OSPI_Init+0x174>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	68d1      	ldr	r1, [r2, #12]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6912      	ldr	r2, [r2, #16]
 80034ec:	3a01      	subs	r2, #1
 80034ee:	0412      	lsls	r2, r2, #16
 80034f0:	4311      	orrs	r1, r2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6952      	ldr	r2, [r2, #20]
 80034f6:	3a01      	subs	r2, #1
 80034f8:	0212      	lsls	r2, r2, #8
 80034fa:	4311      	orrs	r1, r2
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003500:	4311      	orrs	r1, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	69d2      	ldr	r2, [r2, #28]
 8003506:	4311      	orrs	r1, r2
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	430b      	orrs	r3, r1
 800350e:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1a      	ldr	r2, [r3, #32]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003540:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	3b01      	subs	r3, #1
 8003552:	021a      	lsls	r2, r3, #8
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2200      	movs	r2, #0
 8003566:	2120      	movs	r1, #32
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f001 f897 	bl	800469c <OSPI_WaitFlagStateUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d146      	bne.n	8003606 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	1e5a      	subs	r2, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80035ae:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0201 	orr.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d107      	bne.n	80035ee <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0202 	orr.w	r2, r2, #2
 80035ec:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035f6:	d103      	bne.n	8003600 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	651a      	str	r2, [r3, #80]	; 0x50
 80035fe:	e002      	b.n	8003606 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8003606:	7bfb      	ldrb	r3, [r7, #15]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	f8e0f8f4 	.word	0xf8e0f8f4

08003614 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3350      	adds	r3, #80	; 0x50
 8003622:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003638:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d03a      	beq.n	80036ba <HAL_OSPI_IRQHandler+0xa6>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d035      	beq.n	80036ba <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b18      	cmp	r3, #24
 8003652:	d10f      	bne.n	8003674 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	781a      	ldrb	r2, [r3, #0]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366c:	1e5a      	subs	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	649a      	str	r2, [r3, #72]	; 0x48
 8003672:	e012      	b.n	800369a <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b28      	cmp	r3, #40	; 0x28
 8003678:	d10f      	bne.n	800369a <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	7812      	ldrb	r2, [r2, #0]
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003694:	1e5a      	subs	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d107      	bne.n	80036b2 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036b0:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fa82 	bl	8003bbc <HAL_OSPI_FifoThresholdCallback>
 80036b8:	e0e7      	b.n	800388a <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d067      	beq.n	8003794 <HAL_OSPI_IRQHandler+0x180>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d062      	beq.n	8003794 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b28      	cmp	r3, #40	; 0x28
 80036d2:	d131      	bne.n	8003738 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d015      	beq.n	8003708 <HAL_OSPI_IRQHandler+0xf4>
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d010      	beq.n	8003708 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	7812      	ldrb	r2, [r2, #0]
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003700:	1e5a      	subs	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003706:	e0bd      	b.n	8003884 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370c:	2b00      	cmp	r3, #0
 800370e:	f040 80b9 	bne.w	8003884 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2202      	movs	r2, #2
 8003718:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8003728:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2202      	movs	r2, #2
 800372e:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fa57 	bl	8003be4 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003736:	e0a5      	b.n	8003884 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2202      	movs	r2, #2
 800373e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800374e:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b18      	cmp	r3, #24
 800375a:	d103      	bne.n	8003764 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fa4b 	bl	8003bf8 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003762:	e08f      	b.n	8003884 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b08      	cmp	r3, #8
 8003768:	d103      	bne.n	8003772 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fa30 	bl	8003bd0 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003770:	e088      	b.n	8003884 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003778:	f040 8084 	bne.w	8003884 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003780:	2b00      	cmp	r3, #0
 8003782:	d103      	bne.n	800378c <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fa0f 	bl	8003ba8 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800378a:	e07b      	b.n	8003884 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fa01 	bl	8003b94 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003792:	e077      	b.n	8003884 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d01e      	beq.n	80037dc <HAL_OSPI_IRQHandler+0x1c8>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d019      	beq.n	80037dc <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2208      	movs	r2, #8
 80037ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80037cc:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2202      	movs	r2, #2
 80037d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fa19 	bl	8003c0c <HAL_OSPI_StatusMatchCallback>
 80037da:	e056      	b.n	800388a <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d03c      	beq.n	8003860 <HAL_OSPI_IRQHandler+0x24c>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d037      	beq.n	8003860 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2201      	movs	r2, #1
 80037f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003806:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d01a      	beq.n	8003852 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0204 	bic.w	r2, r2, #4
 800382a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003830:	4a18      	ldr	r2, [pc, #96]	; (8003894 <HAL_OSPI_IRQHandler+0x280>)
 8003832:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fe08 	bl	800344e <HAL_MDMA_Abort_IT>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d021      	beq.n	8003888 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f9a2 	bl	8003b94 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003850:	e01a      	b.n	8003888 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2202      	movs	r2, #2
 8003856:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f99b 	bl	8003b94 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800385e:	e013      	b.n	8003888 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00f      	beq.n	800388a <HAL_OSPI_IRQHandler+0x276>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2210      	movs	r2, #16
 800387a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f9cf 	bl	8003c20 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003882:	e002      	b.n	800388a <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003884:	bf00      	nop
 8003886:	e000      	b.n	800388a <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003888:	bf00      	nop
}
 800388a:	bf00      	nop
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	08004625 	.word	0x08004625

08003898 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	; 0x28
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80038a4:	f7fe fa60 	bl	8001d68 <HAL_GetTick>
 80038a8:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b4:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d104      	bne.n	80038c6 <HAL_OSPI_Command+0x2e>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038c4:	d115      	bne.n	80038f2 <HAL_OSPI_Command+0x5a>
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b14      	cmp	r3, #20
 80038ca:	d107      	bne.n	80038dc <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d00e      	beq.n	80038f2 <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d00a      	beq.n	80038f2 <HAL_OSPI_Command+0x5a>
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2b24      	cmp	r3, #36	; 0x24
 80038e0:	d15b      	bne.n	800399a <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d003      	beq.n	80038f2 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d153      	bne.n	800399a <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2200      	movs	r2, #0
 80038fa:	2120      	movs	r1, #32
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fecd 	bl	800469c <OSPI_WaitFlagStateUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8003906:	7ffb      	ldrb	r3, [r7, #31]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d14c      	bne.n	80039a6 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fef9 	bl	800470c <OSPI_ConfigCmd>
 800391a:	4603      	mov	r3, r0
 800391c:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800391e:	7ffb      	ldrb	r3, [r7, #31]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d140      	bne.n	80039a6 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10e      	bne.n	800394a <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2201      	movs	r2, #1
 8003934:	2102      	movs	r1, #2
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 feb0 	bl	800469c <OSPI_WaitFlagStateUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2202      	movs	r2, #2
 8003946:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8003948:	e02d      	b.n	80039a6 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d103      	bne.n	800395a <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2204      	movs	r2, #4
 8003956:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8003958:	e025      	b.n	80039a6 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d10b      	bne.n	800397a <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003966:	2b24      	cmp	r3, #36	; 0x24
 8003968:	d103      	bne.n	8003972 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2204      	movs	r2, #4
 800396e:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8003970:	e019      	b.n	80039a6 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2214      	movs	r2, #20
 8003976:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8003978:	e015      	b.n	80039a6 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d111      	bne.n	80039a6 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003986:	2b14      	cmp	r3, #20
 8003988:	d103      	bne.n	8003992 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2204      	movs	r2, #4
 800398e:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8003990:	e009      	b.n	80039a6 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2224      	movs	r2, #36	; 0x24
 8003996:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8003998:	e005      	b.n	80039a6 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2210      	movs	r2, #16
 80039a2:	655a      	str	r2, [r3, #84]	; 0x54
 80039a4:	e000      	b.n	80039a8 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 80039a6:	bf00      	nop
  }

  /* Return function status */
  return status;
 80039a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b08c      	sub	sp, #48	; 0x30
 80039b6:	af02      	add	r7, sp, #8
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80039be:	f7fe f9d3 	bl	8001d68 <HAL_GetTick>
 80039c2:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3350      	adds	r3, #80	; 0x50
 80039ca:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d2:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80039dc:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d106      	bne.n	80039f2 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2208      	movs	r2, #8
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54
 80039f0:	e07c      	b.n	8003aec <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d172      	bne.n	8003ae0 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a26:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a30:	d104      	bne.n	8003a3c <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	649a      	str	r2, [r3, #72]	; 0x48
 8003a3a:	e011      	b.n	8003a60 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003a44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	649a      	str	r2, [r3, #72]	; 0x48
 8003a54:	e004      	b.n	8003a60 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	2201      	movs	r2, #1
 8003a68:	2106      	movs	r1, #6
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fe16 	bl	800469c <OSPI_WaitFlagStateUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8003a76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d114      	bne.n	8003aa8 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	7812      	ldrb	r2, [r2, #0]
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a98:	1e5a      	subs	r2, r3, #1
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1dc      	bne.n	8003a60 <HAL_OSPI_Receive+0xae>
 8003aa6:	e000      	b.n	8003aaa <HAL_OSPI_Receive+0xf8>
          break;
 8003aa8:	bf00      	nop

      if (status == HAL_OK)
 8003aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d11c      	bne.n	8003aec <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	2102      	movs	r1, #2
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fded 	bl	800469c <OSPI_WaitFlagStateUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8003ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10d      	bne.n	8003aec <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2202      	movs	r2, #2
 8003adc:	651a      	str	r2, [r3, #80]	; 0x50
 8003ade:	e005      	b.n	8003aec <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2210      	movs	r2, #16
 8003aea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8003aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3728      	adds	r7, #40	; 0x28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003b02:	f7fe f931 	bl	8001d68 <HAL_GetTick>
 8003b06:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d134      	bne.n	8003b7a <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2120      	movs	r1, #32
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fdbd 	bl	800469c <OSPI_WaitFlagStateUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d12b      	bne.n	8003b84 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2288      	movs	r2, #136	; 0x88
 8003b30:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d111      	bne.n	8003b5e <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	6852      	ldr	r2, [r2, #4]
 8003b42:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2210      	movs	r2, #16
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b5c:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <HAL_OSPI_MemoryMapped+0x98>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	6812      	ldr	r2, [r2, #0]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	e004      	b.n	8003b84 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2210      	movs	r2, #16
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	cffffff7 	.word	0xcffffff7

08003b94 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b094      	sub	sp, #80	; 0x50
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a9d      	ldr	r2, [pc, #628]	; (8003ee8 <HAL_OSPIM_Config+0x294>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d105      	bne.n	8003c82 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8003c80:	e004      	b.n	8003c8c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003c82:	2301      	movs	r3, #1
 8003c84:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003c92:	e01d      	b.n	8003cd0 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8003c94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c98:	3301      	adds	r3, #1
 8003c9a:	b2d8      	uxtb	r0, r3
 8003c9c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003ca0:	f107 0114 	add.w	r1, r7, #20
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	4413      	add	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	440b      	add	r3, r1
 8003cae:	4619      	mov	r1, r3
 8003cb0:	f000 fea6 	bl	8004a00 <OSPIM_GetConfig>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2208      	movs	r2, #8
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003cc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cca:	3301      	adds	r3, #1
 8003ccc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003cd0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d9dd      	bls.n	8003c94 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8003cd8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f040 8495 	bne.w	800460c <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003ce2:	4b81      	ldr	r3, [pc, #516]	; (8003ee8 <HAL_OSPIM_Config+0x294>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00b      	beq.n	8003d06 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003cee:	4b7e      	ldr	r3, [pc, #504]	; (8003ee8 <HAL_OSPIM_Config+0x294>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a7d      	ldr	r2, [pc, #500]	; (8003ee8 <HAL_OSPIM_Config+0x294>)
 8003cf4:	f023 0301 	bic.w	r3, r3, #1
 8003cf8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003cfa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003d06:	4b79      	ldr	r3, [pc, #484]	; (8003eec <HAL_OSPIM_Config+0x298>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003d12:	4b76      	ldr	r3, [pc, #472]	; (8003eec <HAL_OSPIM_Config+0x298>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a75      	ldr	r2, [pc, #468]	; (8003eec <HAL_OSPIM_Config+0x298>)
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003d1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d22:	f043 0302 	orr.w	r3, r3, #2
 8003d26:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003d2a:	4971      	ldr	r1, [pc, #452]	; (8003ef0 <HAL_OSPIM_Config+0x29c>)
 8003d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d2e:	4613      	mov	r3, r2
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	4413      	add	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	3350      	adds	r3, #80	; 0x50
 8003d38:	443b      	add	r3, r7
 8003d3a:	3b34      	subs	r3, #52	; 0x34
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	6859      	ldr	r1, [r3, #4]
 8003d46:	486a      	ldr	r0, [pc, #424]	; (8003ef0 <HAL_OSPIM_Config+0x29c>)
 8003d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	4413      	add	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	3350      	adds	r3, #80	; 0x50
 8003d54:	443b      	add	r3, r7
 8003d56:	3b34      	subs	r3, #52	; 0x34
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4403      	add	r3, r0
 8003d64:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8003d66:	4b62      	ldr	r3, [pc, #392]	; (8003ef0 <HAL_OSPIM_Config+0x29c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80c0 	beq.w	8003ef4 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8003d74:	4b5e      	ldr	r3, [pc, #376]	; (8003ef0 <HAL_OSPIM_Config+0x29c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a5d      	ldr	r2, [pc, #372]	; (8003ef0 <HAL_OSPIM_Config+0x29c>)
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8003d80:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	f040 8162 	bne.w	800404e <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8003d8a:	4959      	ldr	r1, [pc, #356]	; (8003ef0 <HAL_OSPIM_Config+0x29c>)
 8003d8c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003d90:	4613      	mov	r3, r2
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	4413      	add	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	3350      	adds	r3, #80	; 0x50
 8003d9a:	443b      	add	r3, r7
 8003d9c:	3b3c      	subs	r3, #60	; 0x3c
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	6859      	ldr	r1, [r3, #4]
 8003da8:	4851      	ldr	r0, [pc, #324]	; (8003ef0 <HAL_OSPIM_Config+0x29c>)
 8003daa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003dae:	4613      	mov	r3, r2
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4413      	add	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	3350      	adds	r3, #80	; 0x50
 8003db8:	443b      	add	r3, r7
 8003dba:	3b3c      	subs	r3, #60	; 0x3c
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	f041 0202 	orr.w	r2, r1, #2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4403      	add	r3, r0
 8003dc8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003dca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003dce:	4613      	mov	r3, r2
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	4413      	add	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	3350      	adds	r3, #80	; 0x50
 8003dd8:	443b      	add	r3, r7
 8003dda:	3b38      	subs	r3, #56	; 0x38
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d01f      	beq.n	8003e22 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8003de2:	4943      	ldr	r1, [pc, #268]	; (8003ef0 <HAL_OSPIM_Config+0x29c>)
 8003de4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003de8:	4613      	mov	r3, r2
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	4413      	add	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	3350      	adds	r3, #80	; 0x50
 8003df2:	443b      	add	r3, r7
 8003df4:	3b38      	subs	r3, #56	; 0x38
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	6859      	ldr	r1, [r3, #4]
 8003e00:	483b      	ldr	r0, [pc, #236]	; (8003ef0 <HAL_OSPIM_Config+0x29c>)
 8003e02:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e06:	4613      	mov	r3, r2
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	4413      	add	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	3350      	adds	r3, #80	; 0x50
 8003e10:	443b      	add	r3, r7
 8003e12:	3b38      	subs	r3, #56	; 0x38
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	f041 0220 	orr.w	r2, r1, #32
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4403      	add	r3, r0
 8003e20:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003e22:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	3350      	adds	r3, #80	; 0x50
 8003e30:	443b      	add	r3, r7
 8003e32:	3b30      	subs	r3, #48	; 0x30
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d023      	beq.n	8003e82 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8003e3a:	492d      	ldr	r1, [pc, #180]	; (8003ef0 <HAL_OSPIM_Config+0x29c>)
 8003e3c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e40:	4613      	mov	r3, r2
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	4413      	add	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	3350      	adds	r3, #80	; 0x50
 8003e4a:	443b      	add	r3, r7
 8003e4c:	3b30      	subs	r3, #48	; 0x30
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	6859      	ldr	r1, [r3, #4]
 8003e5c:	4824      	ldr	r0, [pc, #144]	; (8003ef0 <HAL_OSPIM_Config+0x29c>)
 8003e5e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e62:	4613      	mov	r3, r2
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	4413      	add	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	3350      	adds	r3, #80	; 0x50
 8003e6c:	443b      	add	r3, r7
 8003e6e:	3b30      	subs	r3, #48	; 0x30
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4403      	add	r3, r0
 8003e80:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003e82:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e86:	4613      	mov	r3, r2
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	4413      	add	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	3350      	adds	r3, #80	; 0x50
 8003e90:	443b      	add	r3, r7
 8003e92:	3b2c      	subs	r3, #44	; 0x2c
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 80d9 	beq.w	800404e <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8003e9c:	4914      	ldr	r1, [pc, #80]	; (8003ef0 <HAL_OSPIM_Config+0x29c>)
 8003e9e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	4413      	add	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	3350      	adds	r3, #80	; 0x50
 8003eac:	443b      	add	r3, r7
 8003eae:	3b2c      	subs	r3, #44	; 0x2c
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	6859      	ldr	r1, [r3, #4]
 8003ebe:	480c      	ldr	r0, [pc, #48]	; (8003ef0 <HAL_OSPIM_Config+0x29c>)
 8003ec0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	4413      	add	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	3350      	adds	r3, #80	; 0x50
 8003ece:	443b      	add	r3, r7
 8003ed0:	3b2c      	subs	r3, #44	; 0x2c
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4403      	add	r3, r0
 8003ee2:	605a      	str	r2, [r3, #4]
 8003ee4:	e0b3      	b.n	800404e <HAL_OSPIM_Config+0x3fa>
 8003ee6:	bf00      	nop
 8003ee8:	52005000 	.word	0x52005000
 8003eec:	5200a000 	.word	0x5200a000
 8003ef0:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8003ef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	4413      	add	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	3350      	adds	r3, #80	; 0x50
 8003f00:	443b      	add	r3, r7
 8003f02:	3b3c      	subs	r3, #60	; 0x3c
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 80a1 	beq.w	800404e <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003f0c:	4993      	ldr	r1, [pc, #588]	; (800415c <HAL_OSPIM_Config+0x508>)
 8003f0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f10:	4613      	mov	r3, r2
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	4413      	add	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	3350      	adds	r3, #80	; 0x50
 8003f1a:	443b      	add	r3, r7
 8003f1c:	3b3c      	subs	r3, #60	; 0x3c
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	6859      	ldr	r1, [r3, #4]
 8003f28:	488c      	ldr	r0, [pc, #560]	; (800415c <HAL_OSPIM_Config+0x508>)
 8003f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	4413      	add	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	3350      	adds	r3, #80	; 0x50
 8003f36:	443b      	add	r3, r7
 8003f38:	3b3c      	subs	r3, #60	; 0x3c
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	f021 0201 	bic.w	r2, r1, #1
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4403      	add	r3, r0
 8003f46:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003f48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	4413      	add	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	3350      	adds	r3, #80	; 0x50
 8003f54:	443b      	add	r3, r7
 8003f56:	3b38      	subs	r3, #56	; 0x38
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d01d      	beq.n	8003f9a <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003f5e:	497f      	ldr	r1, [pc, #508]	; (800415c <HAL_OSPIM_Config+0x508>)
 8003f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f62:	4613      	mov	r3, r2
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	4413      	add	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	3350      	adds	r3, #80	; 0x50
 8003f6c:	443b      	add	r3, r7
 8003f6e:	3b38      	subs	r3, #56	; 0x38
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	6859      	ldr	r1, [r3, #4]
 8003f7a:	4878      	ldr	r0, [pc, #480]	; (800415c <HAL_OSPIM_Config+0x508>)
 8003f7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	3350      	adds	r3, #80	; 0x50
 8003f88:	443b      	add	r3, r7
 8003f8a:	3b38      	subs	r3, #56	; 0x38
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	f021 0210 	bic.w	r2, r1, #16
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4403      	add	r3, r0
 8003f98:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	4413      	add	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	3350      	adds	r3, #80	; 0x50
 8003fa6:	443b      	add	r3, r7
 8003fa8:	3b30      	subs	r3, #48	; 0x30
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d021      	beq.n	8003ff4 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003fb0:	496a      	ldr	r1, [pc, #424]	; (800415c <HAL_OSPIM_Config+0x508>)
 8003fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	4413      	add	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	3350      	adds	r3, #80	; 0x50
 8003fbe:	443b      	add	r3, r7
 8003fc0:	3b30      	subs	r3, #48	; 0x30
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	6859      	ldr	r1, [r3, #4]
 8003fd0:	4862      	ldr	r0, [pc, #392]	; (800415c <HAL_OSPIM_Config+0x508>)
 8003fd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	4413      	add	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	3350      	adds	r3, #80	; 0x50
 8003fde:	443b      	add	r3, r7
 8003fe0:	3b30      	subs	r3, #48	; 0x30
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4403      	add	r3, r0
 8003ff2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003ff4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	4413      	add	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	3350      	adds	r3, #80	; 0x50
 8004000:	443b      	add	r3, r7
 8004002:	3b2c      	subs	r3, #44	; 0x2c
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d021      	beq.n	800404e <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800400a:	4954      	ldr	r1, [pc, #336]	; (800415c <HAL_OSPIM_Config+0x508>)
 800400c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800400e:	4613      	mov	r3, r2
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	4413      	add	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	3350      	adds	r3, #80	; 0x50
 8004018:	443b      	add	r3, r7
 800401a:	3b2c      	subs	r3, #44	; 0x2c
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3b01      	subs	r3, #1
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	6859      	ldr	r1, [r3, #4]
 800402a:	484c      	ldr	r0, [pc, #304]	; (800415c <HAL_OSPIM_Config+0x508>)
 800402c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800402e:	4613      	mov	r3, r2
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	4413      	add	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	3350      	adds	r3, #80	; 0x50
 8004038:	443b      	add	r3, r7
 800403a:	3b2c      	subs	r3, #44	; 0x2c
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3b01      	subs	r3, #1
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4403      	add	r3, r0
 800404c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	6819      	ldr	r1, [r3, #0]
 8004052:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004056:	4613      	mov	r3, r2
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	4413      	add	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	3350      	adds	r3, #80	; 0x50
 8004060:	443b      	add	r3, r7
 8004062:	3b3c      	subs	r3, #60	; 0x3c
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4299      	cmp	r1, r3
 8004068:	d038      	beq.n	80040dc <HAL_OSPIM_Config+0x488>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6859      	ldr	r1, [r3, #4]
 800406e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004072:	4613      	mov	r3, r2
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	4413      	add	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	3350      	adds	r3, #80	; 0x50
 800407c:	443b      	add	r3, r7
 800407e:	3b38      	subs	r3, #56	; 0x38
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4299      	cmp	r1, r3
 8004084:	d02a      	beq.n	80040dc <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	6899      	ldr	r1, [r3, #8]
 800408a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800408e:	4613      	mov	r3, r2
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	4413      	add	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	3350      	adds	r3, #80	; 0x50
 8004098:	443b      	add	r3, r7
 800409a:	3b34      	subs	r3, #52	; 0x34
 800409c:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800409e:	4299      	cmp	r1, r3
 80040a0:	d01c      	beq.n	80040dc <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	68d9      	ldr	r1, [r3, #12]
 80040a6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80040aa:	4613      	mov	r3, r2
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	4413      	add	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	3350      	adds	r3, #80	; 0x50
 80040b4:	443b      	add	r3, r7
 80040b6:	3b30      	subs	r3, #48	; 0x30
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4299      	cmp	r1, r3
 80040bc:	d00e      	beq.n	80040dc <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	6919      	ldr	r1, [r3, #16]
 80040c2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80040c6:	4613      	mov	r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	4413      	add	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	3350      	adds	r3, #80	; 0x50
 80040d0:	443b      	add	r3, r7
 80040d2:	3b2c      	subs	r3, #44	; 0x2c
 80040d4:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80040d6:	4299      	cmp	r1, r3
 80040d8:	f040 810e 	bne.w	80042f8 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	6819      	ldr	r1, [r3, #0]
 80040e0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80040e4:	4613      	mov	r3, r2
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	4413      	add	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	3350      	adds	r3, #80	; 0x50
 80040ee:	443b      	add	r3, r7
 80040f0:	3b3c      	subs	r3, #60	; 0x3c
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4299      	cmp	r1, r3
 80040f6:	d133      	bne.n	8004160 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004100:	4613      	mov	r3, r2
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	4413      	add	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	3350      	adds	r3, #80	; 0x50
 800410a:	443b      	add	r3, r7
 800410c:	3b38      	subs	r3, #56	; 0x38
 800410e:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004110:	4299      	cmp	r1, r3
 8004112:	d125      	bne.n	8004160 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	68d9      	ldr	r1, [r3, #12]
 8004118:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800411c:	4613      	mov	r3, r2
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	4413      	add	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	3350      	adds	r3, #80	; 0x50
 8004126:	443b      	add	r3, r7
 8004128:	3b30      	subs	r3, #48	; 0x30
 800412a:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800412c:	4299      	cmp	r1, r3
 800412e:	d117      	bne.n	8004160 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	6919      	ldr	r1, [r3, #16]
 8004134:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004138:	4613      	mov	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4413      	add	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	3350      	adds	r3, #80	; 0x50
 8004142:	443b      	add	r3, r7
 8004144:	3b2c      	subs	r3, #44	; 0x2c
 8004146:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004148:	4299      	cmp	r1, r3
 800414a:	d109      	bne.n	8004160 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800414c:	4b03      	ldr	r3, [pc, #12]	; (800415c <HAL_OSPIM_Config+0x508>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a02      	ldr	r2, [pc, #8]	; (800415c <HAL_OSPIM_Config+0x508>)
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	e0ce      	b.n	80042f8 <HAL_OSPIM_Config+0x6a4>
 800415a:	bf00      	nop
 800415c:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8004160:	49bb      	ldr	r1, [pc, #748]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 8004162:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004166:	4613      	mov	r3, r2
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	4413      	add	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	3350      	adds	r3, #80	; 0x50
 8004170:	443b      	add	r3, r7
 8004172:	3b3c      	subs	r3, #60	; 0x3c
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3b01      	subs	r3, #1
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	6859      	ldr	r1, [r3, #4]
 800417e:	48b4      	ldr	r0, [pc, #720]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 8004180:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004184:	4613      	mov	r3, r2
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	4413      	add	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	3350      	adds	r3, #80	; 0x50
 800418e:	443b      	add	r3, r7
 8004190:	3b3c      	subs	r3, #60	; 0x3c
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3b01      	subs	r3, #1
 8004196:	f021 0201 	bic.w	r2, r1, #1
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4403      	add	r3, r0
 800419e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80041a0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80041a4:	4613      	mov	r3, r2
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	4413      	add	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	3350      	adds	r3, #80	; 0x50
 80041ae:	443b      	add	r3, r7
 80041b0:	3b38      	subs	r3, #56	; 0x38
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d01f      	beq.n	80041f8 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80041b8:	49a5      	ldr	r1, [pc, #660]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 80041ba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80041be:	4613      	mov	r3, r2
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	4413      	add	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	3350      	adds	r3, #80	; 0x50
 80041c8:	443b      	add	r3, r7
 80041ca:	3b38      	subs	r3, #56	; 0x38
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	6859      	ldr	r1, [r3, #4]
 80041d6:	489e      	ldr	r0, [pc, #632]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 80041d8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80041dc:	4613      	mov	r3, r2
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	4413      	add	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	3350      	adds	r3, #80	; 0x50
 80041e6:	443b      	add	r3, r7
 80041e8:	3b38      	subs	r3, #56	; 0x38
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	f021 0210 	bic.w	r2, r1, #16
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4403      	add	r3, r0
 80041f6:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80041f8:	4995      	ldr	r1, [pc, #596]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 80041fa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80041fe:	4613      	mov	r3, r2
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	4413      	add	r3, r2
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	3350      	adds	r3, #80	; 0x50
 8004208:	443b      	add	r3, r7
 800420a:	3b34      	subs	r3, #52	; 0x34
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3b01      	subs	r3, #1
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	440b      	add	r3, r1
 8004214:	6859      	ldr	r1, [r3, #4]
 8004216:	488e      	ldr	r0, [pc, #568]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 8004218:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800421c:	4613      	mov	r3, r2
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	4413      	add	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	3350      	adds	r3, #80	; 0x50
 8004226:	443b      	add	r3, r7
 8004228:	3b34      	subs	r3, #52	; 0x34
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3b01      	subs	r3, #1
 800422e:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4403      	add	r3, r0
 8004236:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004238:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800423c:	4613      	mov	r3, r2
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	4413      	add	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	3350      	adds	r3, #80	; 0x50
 8004246:	443b      	add	r3, r7
 8004248:	3b30      	subs	r3, #48	; 0x30
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d023      	beq.n	8004298 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004250:	497f      	ldr	r1, [pc, #508]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 8004252:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004256:	4613      	mov	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	4413      	add	r3, r2
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	3350      	adds	r3, #80	; 0x50
 8004260:	443b      	add	r3, r7
 8004262:	3b30      	subs	r3, #48	; 0x30
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3b01      	subs	r3, #1
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	6859      	ldr	r1, [r3, #4]
 8004272:	4877      	ldr	r0, [pc, #476]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 8004274:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004278:	4613      	mov	r3, r2
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	4413      	add	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	3350      	adds	r3, #80	; 0x50
 8004282:	443b      	add	r3, r7
 8004284:	3b30      	subs	r3, #48	; 0x30
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3b01      	subs	r3, #1
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4403      	add	r3, r0
 8004296:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004298:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800429c:	4613      	mov	r3, r2
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	4413      	add	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	3350      	adds	r3, #80	; 0x50
 80042a6:	443b      	add	r3, r7
 80042a8:	3b2c      	subs	r3, #44	; 0x2c
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d023      	beq.n	80042f8 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80042b0:	4967      	ldr	r1, [pc, #412]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 80042b2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80042b6:	4613      	mov	r3, r2
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	4413      	add	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	3350      	adds	r3, #80	; 0x50
 80042c0:	443b      	add	r3, r7
 80042c2:	3b2c      	subs	r3, #44	; 0x2c
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	6859      	ldr	r1, [r3, #4]
 80042d2:	485f      	ldr	r0, [pc, #380]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 80042d4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80042d8:	4613      	mov	r3, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	4413      	add	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	3350      	adds	r3, #80	; 0x50
 80042e2:	443b      	add	r3, r7
 80042e4:	3b2c      	subs	r3, #44	; 0x2c
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4403      	add	r3, r0
 80042f6:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80042f8:	4a55      	ldr	r2, [pc, #340]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	3b01      	subs	r3, #1
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800430a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800430c:	025b      	lsls	r3, r3, #9
 800430e:	431a      	orrs	r2, r3
 8004310:	494f      	ldr	r1, [pc, #316]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	3b01      	subs	r3, #1
 8004318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	1e5a      	subs	r2, r3, #1
 8004328:	4b49      	ldr	r3, [pc, #292]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	b2db      	uxtb	r3, r3
 8004330:	429a      	cmp	r2, r3
 8004332:	d90a      	bls.n	800434a <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8004334:	4b46      	ldr	r3, [pc, #280]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	3b01      	subs	r3, #1
 8004342:	041b      	lsls	r3, r3, #16
 8004344:	4942      	ldr	r1, [pc, #264]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800434a:	4b41      	ldr	r3, [pc, #260]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 809a 	beq.w	800448c <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8004358:	4a3d      	ldr	r2, [pc, #244]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3b01      	subs	r3, #1
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f023 0203 	bic.w	r2, r3, #3
 800436a:	4939      	ldr	r1, [pc, #228]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3b01      	subs	r3, #1
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d011      	beq.n	80043a8 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8004384:	4a32      	ldr	r2, [pc, #200]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	3b01      	subs	r3, #1
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004396:	492e      	ldr	r1, [pc, #184]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	3b01      	subs	r3, #1
 800439e:	f042 0210 	orr.w	r2, r2, #16
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d016      	beq.n	80043e2 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80043b4:	4a26      	ldr	r2, [pc, #152]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80043ca:	4921      	ldr	r1, [pc, #132]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	605a      	str	r2, [r3, #4]
 80043e0:	e019      	b.n	8004416 <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d015      	beq.n	8004416 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80043ea:	4a19      	ldr	r2, [pc, #100]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004400:	4913      	ldr	r1, [pc, #76]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	3b01      	subs	r3, #1
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d018      	beq.n	8004454 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8004422:	4a0b      	ldr	r2, [pc, #44]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	3b01      	subs	r3, #1
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004438:	4905      	ldr	r1, [pc, #20]	; (8004450 <HAL_OSPIM_Config+0x7fc>)
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	3b01      	subs	r3, #1
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	605a      	str	r2, [r3, #4]
 800444e:	e0c5      	b.n	80045dc <HAL_OSPIM_Config+0x988>
 8004450:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80bf 	beq.w	80045dc <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800445e:	4a6e      	ldr	r2, [pc, #440]	; (8004618 <HAL_OSPIM_Config+0x9c4>)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	3b01      	subs	r3, #1
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004474:	4968      	ldr	r1, [pc, #416]	; (8004618 <HAL_OSPIM_Config+0x9c4>)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	3b01      	subs	r3, #1
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	e0a7      	b.n	80045dc <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800448c:	4a62      	ldr	r2, [pc, #392]	; (8004618 <HAL_OSPIM_Config+0x9c4>)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3b01      	subs	r3, #1
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f023 0203 	bic.w	r2, r3, #3
 800449e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	431a      	orrs	r2, r3
 80044a4:	495c      	ldr	r1, [pc, #368]	; (8004618 <HAL_OSPIM_Config+0x9c4>)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	f042 0201 	orr.w	r2, r2, #1
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d014      	beq.n	80044e8 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80044be:	4a56      	ldr	r2, [pc, #344]	; (8004618 <HAL_OSPIM_Config+0x9c4>)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044d2:	015b      	lsls	r3, r3, #5
 80044d4:	431a      	orrs	r2, r3
 80044d6:	4950      	ldr	r1, [pc, #320]	; (8004618 <HAL_OSPIM_Config+0x9c4>)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	3b01      	subs	r3, #1
 80044de:	f042 0210 	orr.w	r2, r2, #16
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d019      	beq.n	8004528 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80044f4:	4a48      	ldr	r2, [pc, #288]	; (8004618 <HAL_OSPIM_Config+0x9c4>)
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800450a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800450c:	049b      	lsls	r3, r3, #18
 800450e:	431a      	orrs	r2, r3
 8004510:	4941      	ldr	r1, [pc, #260]	; (8004618 <HAL_OSPIM_Config+0x9c4>)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	3b01      	subs	r3, #1
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	605a      	str	r2, [r3, #4]
 8004526:	e01c      	b.n	8004562 <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d018      	beq.n	8004562 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004530:	4a39      	ldr	r2, [pc, #228]	; (8004618 <HAL_OSPIM_Config+0x9c4>)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	3b01      	subs	r3, #1
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004548:	069b      	lsls	r3, r3, #26
 800454a:	431a      	orrs	r2, r3
 800454c:	4932      	ldr	r1, [pc, #200]	; (8004618 <HAL_OSPIM_Config+0x9c4>)
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	3b01      	subs	r3, #1
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d019      	beq.n	80045a2 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800456e:	4a2a      	ldr	r2, [pc, #168]	; (8004618 <HAL_OSPIM_Config+0x9c4>)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	3b01      	subs	r3, #1
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004586:	049b      	lsls	r3, r3, #18
 8004588:	431a      	orrs	r2, r3
 800458a:	4923      	ldr	r1, [pc, #140]	; (8004618 <HAL_OSPIM_Config+0x9c4>)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	3b01      	subs	r3, #1
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	605a      	str	r2, [r3, #4]
 80045a0:	e01c      	b.n	80045dc <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d018      	beq.n	80045dc <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80045aa:	4a1b      	ldr	r2, [pc, #108]	; (8004618 <HAL_OSPIM_Config+0x9c4>)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80045c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c2:	069b      	lsls	r3, r3, #26
 80045c4:	431a      	orrs	r2, r3
 80045c6:	4914      	ldr	r1, [pc, #80]	; (8004618 <HAL_OSPIM_Config+0x9c4>)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80045dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80045e8:	4b0c      	ldr	r3, [pc, #48]	; (800461c <HAL_OSPIM_Config+0x9c8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a0b      	ldr	r2, [pc, #44]	; (800461c <HAL_OSPIM_Config+0x9c8>)
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80045f4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004600:	4b07      	ldr	r3, [pc, #28]	; (8004620 <HAL_OSPIM_Config+0x9cc>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a06      	ldr	r2, [pc, #24]	; (8004620 <HAL_OSPIM_Config+0x9cc>)
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800460c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004610:	4618      	mov	r0, r3
 8004612:	3750      	adds	r7, #80	; 0x50
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	5200b400 	.word	0x5200b400
 800461c:	52005000 	.word	0x52005000
 8004620:	5200a000 	.word	0x5200a000

08004624 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004640:	d122      	bne.n	8004688 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b00      	cmp	r3, #0
 800464e:	d014      	beq.n	800467a <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2202      	movs	r2, #2
 8004656:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004666:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0202 	orr.w	r2, r2, #2
 8004676:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 8004678:	e00c      	b.n	8004694 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2202      	movs	r2, #2
 800467e:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f7ff fa91 	bl	8003ba8 <HAL_OSPI_AbortCpltCallback>
}
 8004686:	e005      	b.n	8004694 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2202      	movs	r2, #2
 800468c:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f7ff fa80 	bl	8003b94 <HAL_OSPI_ErrorCallback>
}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80046ac:	e01a      	b.n	80046e4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d016      	beq.n	80046e4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b6:	f7fd fb57 	bl	8001d68 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d302      	bcc.n	80046cc <OSPI_WaitFlagStateUntilTimeout+0x30>
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10b      	bne.n	80046e4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046d2:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d8:	f043 0201 	orr.w	r2, r3, #1
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e00e      	b.n	8004702 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6a1a      	ldr	r2, [r3, #32]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bf14      	ite	ne
 80046f2:	2301      	movne	r3, #1
 80046f4:	2300      	moveq	r3, #0
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d1d6      	bne.n	80046ae <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800470c:	b480      	push	{r7}
 800470e:	b089      	sub	sp, #36	; 0x24
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004728:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10a      	bne.n	8004748 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b02      	cmp	r3, #2
 800474e:	d114      	bne.n	800477a <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004758:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004762:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800476c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	e02c      	b.n	80047d4 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b03      	cmp	r3, #3
 8004780:	d114      	bne.n	80047ac <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800478a:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004794:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800479e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	e013      	b.n	80047d4 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80047b4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80047be:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80047c8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80047d2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047dc:	431a      	orrs	r2, r3
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d012      	beq.n	8004810 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004802:	4319      	orrs	r1, r3
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004808:	430b      	orrs	r3, r1
 800480a:	431a      	orrs	r2, r3
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f023 021f 	bic.w	r2, r3, #31
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481c:	431a      	orrs	r2, r3
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d105      	bne.n	800483e <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3a01      	subs	r2, #1
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8095 	beq.w	8004972 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d053      	beq.n	80048f8 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01e      	beq.n	8004896 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4b64      	ldr	r3, [pc, #400]	; (80049f0 <OSPI_ConfigCmd+0x2e4>)
 800485e:	4013      	ands	r3, r2
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	68d1      	ldr	r1, [r2, #12]
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	6952      	ldr	r2, [r2, #20]
 8004868:	4311      	orrs	r1, r2
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	6912      	ldr	r2, [r2, #16]
 800486e:	4311      	orrs	r1, r2
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	69d2      	ldr	r2, [r2, #28]
 8004874:	4311      	orrs	r1, r2
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800487a:	4311      	orrs	r1, r2
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	6a12      	ldr	r2, [r2, #32]
 8004880:	4311      	orrs	r1, r2
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004886:	4311      	orrs	r1, r2
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800488c:	430a      	orrs	r2, r1
 800488e:	431a      	orrs	r2, r3
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	e026      	b.n	80048e4 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4b56      	ldr	r3, [pc, #344]	; (80049f4 <OSPI_ConfigCmd+0x2e8>)
 800489c:	4013      	ands	r3, r2
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	68d1      	ldr	r1, [r2, #12]
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	6952      	ldr	r2, [r2, #20]
 80048a6:	4311      	orrs	r1, r2
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	6912      	ldr	r2, [r2, #16]
 80048ac:	4311      	orrs	r1, r2
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	69d2      	ldr	r2, [r2, #28]
 80048b2:	4311      	orrs	r1, r2
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048b8:	4311      	orrs	r1, r2
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	6a12      	ldr	r2, [r2, #32]
 80048be:	430a      	orrs	r2, r1
 80048c0:	431a      	orrs	r2, r3
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ce:	d109      	bne.n	80048e4 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d105      	bne.n	80048e4 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	6992      	ldr	r2, [r2, #24]
 80048f4:	649a      	str	r2, [r3, #72]	; 0x48
 80048f6:	e074      	b.n	80049e2 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d015      	beq.n	800492c <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	4b3c      	ldr	r3, [pc, #240]	; (80049f8 <OSPI_ConfigCmd+0x2ec>)
 8004906:	4013      	ands	r3, r2
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	68d1      	ldr	r1, [r2, #12]
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	6952      	ldr	r2, [r2, #20]
 8004910:	4311      	orrs	r1, r2
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	6912      	ldr	r2, [r2, #16]
 8004916:	4311      	orrs	r1, r2
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800491c:	4311      	orrs	r1, r2
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004922:	430a      	orrs	r2, r1
 8004924:	431a      	orrs	r2, r3
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	e01d      	b.n	8004968 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68d9      	ldr	r1, [r3, #12]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	4319      	orrs	r1, r3
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	430b      	orrs	r3, r1
 8004944:	431a      	orrs	r2, r3
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004952:	d109      	bne.n	8004968 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004958:	2b08      	cmp	r3, #8
 800495a:	d105      	bne.n	8004968 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	e037      	b.n	80049e2 <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d02e      	beq.n	80049d8 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	2b00      	cmp	r3, #0
 8004980:	d015      	beq.n	80049ae <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <OSPI_ConfigCmd+0x2f0>)
 8004988:	4013      	ands	r3, r2
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	69d1      	ldr	r1, [r2, #28]
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004992:	4311      	orrs	r1, r2
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	6a12      	ldr	r2, [r2, #32]
 8004998:	4311      	orrs	r1, r2
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800499e:	4311      	orrs	r1, r2
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049a4:	430a      	orrs	r2, r1
 80049a6:	431a      	orrs	r2, r3
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	e00e      	b.n	80049cc <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	69d9      	ldr	r1, [r3, #28]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	4319      	orrs	r1, r3
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	430b      	orrs	r3, r1
 80049c6:	431a      	orrs	r2, r3
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	6992      	ldr	r2, [r2, #24]
 80049d4:	649a      	str	r2, [r3, #72]	; 0x48
 80049d6:	e004      	b.n	80049e2 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2208      	movs	r2, #8
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 80049e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3724      	adds	r7, #36	; 0x24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	f0ffc0c0 	.word	0xf0ffc0c0
 80049f4:	ffffc0c0 	.word	0xffffc0c0
 80049f8:	f0ffffc0 	.word	0xf0ffffc0
 80049fc:	f0ffc0ff 	.word	0xf0ffc0ff

08004a00 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	6039      	str	r1, [r7, #0]
 8004a0a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <OSPIM_GetConfig+0x26>
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d802      	bhi.n	8004a26 <OSPIM_GetConfig+0x26>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d102      	bne.n	8004a2c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75fb      	strb	r3, [r7, #23]
 8004a2a:	e098      	b.n	8004b5e <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2200      	movs	r2, #0
 8004a36:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2200      	movs	r2, #0
 8004a42:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2200      	movs	r2, #0
 8004a48:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d10b      	bne.n	8004a68 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8004a50:	4b46      	ldr	r3, [pc, #280]	; (8004b6c <OSPIM_GetConfig+0x16c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d102      	bne.n	8004a62 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004a5c:	4b44      	ldr	r3, [pc, #272]	; (8004b70 <OSPIM_GetConfig+0x170>)
 8004a5e:	613b      	str	r3, [r7, #16]
 8004a60:	e002      	b.n	8004a68 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8004a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a66:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	e074      	b.n	8004b58 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8004a6e:	4a3f      	ldr	r2, [pc, #252]	; (8004b6c <OSPIM_GetConfig+0x16c>)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4053      	eors	r3, r2
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d103      	bne.n	8004a9a <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	4053      	eors	r3, r2
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d103      	bne.n	8004aba <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4053      	eors	r3, r2
 8004aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d018      	beq.n	8004b16 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	4053      	eors	r3, r2
 8004aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d111      	bne.n	8004b16 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d106      	bne.n	8004b0a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3301      	adds	r3, #1
 8004b00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	60da      	str	r2, [r3, #12]
 8004b08:	e005      	b.n	8004b16 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d018      	beq.n	8004b52 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	4053      	eors	r3, r2
 8004b26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d111      	bne.n	8004b52 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	611a      	str	r2, [r3, #16]
 8004b44:	e005      	b.n	8004b52 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3301      	adds	r3, #1
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d987      	bls.n	8004a6e <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8004b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	5200b400 	.word	0x5200b400
 8004b70:	04040222 	.word	0x04040222

08004b74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b7c:	4b19      	ldr	r3, [pc, #100]	; (8004be4 <HAL_PWREx_ConfigSupply+0x70>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	d00a      	beq.n	8004b9e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b88:	4b16      	ldr	r3, [pc, #88]	; (8004be4 <HAL_PWREx_ConfigSupply+0x70>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d001      	beq.n	8004b9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e01f      	b.n	8004bda <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e01d      	b.n	8004bda <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b9e:	4b11      	ldr	r3, [pc, #68]	; (8004be4 <HAL_PWREx_ConfigSupply+0x70>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f023 0207 	bic.w	r2, r3, #7
 8004ba6:	490f      	ldr	r1, [pc, #60]	; (8004be4 <HAL_PWREx_ConfigSupply+0x70>)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004bae:	f7fd f8db 	bl	8001d68 <HAL_GetTick>
 8004bb2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bb4:	e009      	b.n	8004bca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004bb6:	f7fd f8d7 	bl	8001d68 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bc4:	d901      	bls.n	8004bca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e007      	b.n	8004bda <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_PWREx_ConfigSupply+0x70>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd6:	d1ee      	bne.n	8004bb6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	58024800 	.word	0x58024800

08004be8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08c      	sub	sp, #48	; 0x30
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e39d      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 8087 	beq.w	8004d16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c08:	4b88      	ldr	r3, [pc, #544]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c12:	4b86      	ldr	r3, [pc, #536]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	2b10      	cmp	r3, #16
 8004c1c:	d007      	beq.n	8004c2e <HAL_RCC_OscConfig+0x46>
 8004c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c20:	2b18      	cmp	r3, #24
 8004c22:	d110      	bne.n	8004c46 <HAL_RCC_OscConfig+0x5e>
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d10b      	bne.n	8004c46 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2e:	4b7f      	ldr	r3, [pc, #508]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d06c      	beq.n	8004d14 <HAL_RCC_OscConfig+0x12c>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d168      	bne.n	8004d14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e377      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c4e:	d106      	bne.n	8004c5e <HAL_RCC_OscConfig+0x76>
 8004c50:	4b76      	ldr	r3, [pc, #472]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a75      	ldr	r2, [pc, #468]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	e02e      	b.n	8004cbc <HAL_RCC_OscConfig+0xd4>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x98>
 8004c66:	4b71      	ldr	r3, [pc, #452]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a70      	ldr	r2, [pc, #448]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	4b6e      	ldr	r3, [pc, #440]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a6d      	ldr	r2, [pc, #436]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e01d      	b.n	8004cbc <HAL_RCC_OscConfig+0xd4>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c88:	d10c      	bne.n	8004ca4 <HAL_RCC_OscConfig+0xbc>
 8004c8a:	4b68      	ldr	r3, [pc, #416]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a67      	ldr	r2, [pc, #412]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	4b65      	ldr	r3, [pc, #404]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a64      	ldr	r2, [pc, #400]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	e00b      	b.n	8004cbc <HAL_RCC_OscConfig+0xd4>
 8004ca4:	4b61      	ldr	r3, [pc, #388]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a60      	ldr	r2, [pc, #384]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	4b5e      	ldr	r3, [pc, #376]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a5d      	ldr	r2, [pc, #372]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d013      	beq.n	8004cec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fd f850 	bl	8001d68 <HAL_GetTick>
 8004cc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ccc:	f7fd f84c 	bl	8001d68 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b64      	cmp	r3, #100	; 0x64
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e32b      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cde:	4b53      	ldr	r3, [pc, #332]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0xe4>
 8004cea:	e014      	b.n	8004d16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cec:	f7fd f83c 	bl	8001d68 <HAL_GetTick>
 8004cf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cf4:	f7fd f838 	bl	8001d68 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	; 0x64
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e317      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d06:	4b49      	ldr	r3, [pc, #292]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x10c>
 8004d12:	e000      	b.n	8004d16 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 808c 	beq.w	8004e3c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d24:	4b41      	ldr	r3, [pc, #260]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d2e:	4b3f      	ldr	r3, [pc, #252]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d32:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d007      	beq.n	8004d4a <HAL_RCC_OscConfig+0x162>
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	2b18      	cmp	r3, #24
 8004d3e:	d137      	bne.n	8004db0 <HAL_RCC_OscConfig+0x1c8>
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d132      	bne.n	8004db0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d4a:	4b38      	ldr	r3, [pc, #224]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d005      	beq.n	8004d62 <HAL_RCC_OscConfig+0x17a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e2e9      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d62:	4b32      	ldr	r3, [pc, #200]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f023 0219 	bic.w	r2, r3, #25
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	492f      	ldr	r1, [pc, #188]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d74:	f7fc fff8 	bl	8001d68 <HAL_GetTick>
 8004d78:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d7c:	f7fc fff4 	bl	8001d68 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e2d3      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d8e:	4b27      	ldr	r3, [pc, #156]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f0      	beq.n	8004d7c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d9a:	4b24      	ldr	r3, [pc, #144]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	061b      	lsls	r3, r3, #24
 8004da8:	4920      	ldr	r1, [pc, #128]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dae:	e045      	b.n	8004e3c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d026      	beq.n	8004e06 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004db8:	4b1c      	ldr	r3, [pc, #112]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f023 0219 	bic.w	r2, r3, #25
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	4919      	ldr	r1, [pc, #100]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dca:	f7fc ffcd 	bl	8001d68 <HAL_GetTick>
 8004dce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dd2:	f7fc ffc9 	bl	8001d68 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e2a8      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004de4:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df0:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	061b      	lsls	r3, r3, #24
 8004dfe:	490b      	ldr	r1, [pc, #44]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	604b      	str	r3, [r1, #4]
 8004e04:	e01a      	b.n	8004e3c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e06:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a08      	ldr	r2, [pc, #32]	; (8004e2c <HAL_RCC_OscConfig+0x244>)
 8004e0c:	f023 0301 	bic.w	r3, r3, #1
 8004e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e12:	f7fc ffa9 	bl	8001d68 <HAL_GetTick>
 8004e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e18:	e00a      	b.n	8004e30 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e1a:	f7fc ffa5 	bl	8001d68 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d903      	bls.n	8004e30 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e284      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
 8004e2c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e30:	4b96      	ldr	r3, [pc, #600]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1ee      	bne.n	8004e1a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0310 	and.w	r3, r3, #16
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d06a      	beq.n	8004f1e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e48:	4b90      	ldr	r3, [pc, #576]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e50:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e52:	4b8e      	ldr	r3, [pc, #568]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d007      	beq.n	8004e6e <HAL_RCC_OscConfig+0x286>
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b18      	cmp	r3, #24
 8004e62:	d11b      	bne.n	8004e9c <HAL_RCC_OscConfig+0x2b4>
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d116      	bne.n	8004e9c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e6e:	4b87      	ldr	r3, [pc, #540]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_RCC_OscConfig+0x29e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	2b80      	cmp	r3, #128	; 0x80
 8004e80:	d001      	beq.n	8004e86 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e257      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e86:	4b81      	ldr	r3, [pc, #516]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	061b      	lsls	r3, r3, #24
 8004e94:	497d      	ldr	r1, [pc, #500]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e9a:	e040      	b.n	8004f1e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d023      	beq.n	8004eec <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004ea4:	4b79      	ldr	r3, [pc, #484]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a78      	ldr	r2, [pc, #480]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fc ff5a 	bl	8001d68 <HAL_GetTick>
 8004eb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004eb8:	f7fc ff56 	bl	8001d68 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e235      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004eca:	4b70      	ldr	r3, [pc, #448]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0f0      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ed6:	4b6d      	ldr	r3, [pc, #436]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	061b      	lsls	r3, r3, #24
 8004ee4:	4969      	ldr	r1, [pc, #420]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60cb      	str	r3, [r1, #12]
 8004eea:	e018      	b.n	8004f1e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004eec:	4b67      	ldr	r3, [pc, #412]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a66      	ldr	r2, [pc, #408]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef8:	f7fc ff36 	bl	8001d68 <HAL_GetTick>
 8004efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f00:	f7fc ff32 	bl	8001d68 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e211      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f12:	4b5e      	ldr	r3, [pc, #376]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f0      	bne.n	8004f00 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d036      	beq.n	8004f98 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d019      	beq.n	8004f66 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f32:	4b56      	ldr	r3, [pc, #344]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f36:	4a55      	ldr	r2, [pc, #340]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3e:	f7fc ff13 	bl	8001d68 <HAL_GetTick>
 8004f42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f46:	f7fc ff0f 	bl	8001d68 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e1ee      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f58:	4b4c      	ldr	r3, [pc, #304]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <HAL_RCC_OscConfig+0x35e>
 8004f64:	e018      	b.n	8004f98 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f66:	4b49      	ldr	r3, [pc, #292]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f6a:	4a48      	ldr	r2, [pc, #288]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004f6c:	f023 0301 	bic.w	r3, r3, #1
 8004f70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f72:	f7fc fef9 	bl	8001d68 <HAL_GetTick>
 8004f76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f7a:	f7fc fef5 	bl	8001d68 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e1d4      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f8c:	4b3f      	ldr	r3, [pc, #252]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f0      	bne.n	8004f7a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d036      	beq.n	8005012 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d019      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fac:	4b37      	ldr	r3, [pc, #220]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a36      	ldr	r2, [pc, #216]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004fb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004fb6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fb8:	f7fc fed6 	bl	8001d68 <HAL_GetTick>
 8004fbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004fc0:	f7fc fed2 	bl	8001d68 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e1b1      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fd2:	4b2e      	ldr	r3, [pc, #184]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0f0      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x3d8>
 8004fde:	e018      	b.n	8005012 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fe0:	4b2a      	ldr	r3, [pc, #168]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a29      	ldr	r2, [pc, #164]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8004fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fec:	f7fc febc 	bl	8001d68 <HAL_GetTick>
 8004ff0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004ff4:	f7fc feb8 	bl	8001d68 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e197      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005006:	4b21      	ldr	r3, [pc, #132]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f0      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 8086 	beq.w	800512c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005020:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <HAL_RCC_OscConfig+0x4a8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1a      	ldr	r2, [pc, #104]	; (8005090 <HAL_RCC_OscConfig+0x4a8>)
 8005026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800502c:	f7fc fe9c 	bl	8001d68 <HAL_GetTick>
 8005030:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005034:	f7fc fe98 	bl	8001d68 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b64      	cmp	r3, #100	; 0x64
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e177      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005046:	4b12      	ldr	r3, [pc, #72]	; (8005090 <HAL_RCC_OscConfig+0x4a8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0f0      	beq.n	8005034 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d106      	bne.n	8005068 <HAL_RCC_OscConfig+0x480>
 800505a:	4b0c      	ldr	r3, [pc, #48]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505e:	4a0b      	ldr	r2, [pc, #44]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	6713      	str	r3, [r2, #112]	; 0x70
 8005066:	e032      	b.n	80050ce <HAL_RCC_OscConfig+0x4e6>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d111      	bne.n	8005094 <HAL_RCC_OscConfig+0x4ac>
 8005070:	4b06      	ldr	r3, [pc, #24]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8005072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005074:	4a05      	ldr	r2, [pc, #20]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	6713      	str	r3, [r2, #112]	; 0x70
 800507c:	4b03      	ldr	r3, [pc, #12]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 800507e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005080:	4a02      	ldr	r2, [pc, #8]	; (800508c <HAL_RCC_OscConfig+0x4a4>)
 8005082:	f023 0304 	bic.w	r3, r3, #4
 8005086:	6713      	str	r3, [r2, #112]	; 0x70
 8005088:	e021      	b.n	80050ce <HAL_RCC_OscConfig+0x4e6>
 800508a:	bf00      	nop
 800508c:	58024400 	.word	0x58024400
 8005090:	58024800 	.word	0x58024800
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	2b05      	cmp	r3, #5
 800509a:	d10c      	bne.n	80050b6 <HAL_RCC_OscConfig+0x4ce>
 800509c:	4b83      	ldr	r3, [pc, #524]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a0:	4a82      	ldr	r2, [pc, #520]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 80050a2:	f043 0304 	orr.w	r3, r3, #4
 80050a6:	6713      	str	r3, [r2, #112]	; 0x70
 80050a8:	4b80      	ldr	r3, [pc, #512]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	4a7f      	ldr	r2, [pc, #508]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	6713      	str	r3, [r2, #112]	; 0x70
 80050b4:	e00b      	b.n	80050ce <HAL_RCC_OscConfig+0x4e6>
 80050b6:	4b7d      	ldr	r3, [pc, #500]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	4a7c      	ldr	r2, [pc, #496]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 80050bc:	f023 0301 	bic.w	r3, r3, #1
 80050c0:	6713      	str	r3, [r2, #112]	; 0x70
 80050c2:	4b7a      	ldr	r3, [pc, #488]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	4a79      	ldr	r2, [pc, #484]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 80050c8:	f023 0304 	bic.w	r3, r3, #4
 80050cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d015      	beq.n	8005102 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d6:	f7fc fe47 	bl	8001d68 <HAL_GetTick>
 80050da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050dc:	e00a      	b.n	80050f4 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050de:	f7fc fe43 	bl	8001d68 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e120      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050f4:	4b6d      	ldr	r3, [pc, #436]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 80050f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0ee      	beq.n	80050de <HAL_RCC_OscConfig+0x4f6>
 8005100:	e014      	b.n	800512c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005102:	f7fc fe31 	bl	8001d68 <HAL_GetTick>
 8005106:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005108:	e00a      	b.n	8005120 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800510a:	f7fc fe2d 	bl	8001d68 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	f241 3288 	movw	r2, #5000	; 0x1388
 8005118:	4293      	cmp	r3, r2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e10a      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005120:	4b62      	ldr	r3, [pc, #392]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 8005122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1ee      	bne.n	800510a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80ff 	beq.w	8005334 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005136:	4b5d      	ldr	r3, [pc, #372]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800513e:	2b18      	cmp	r3, #24
 8005140:	f000 80ba 	beq.w	80052b8 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	2b02      	cmp	r3, #2
 800514a:	f040 8095 	bne.w	8005278 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514e:	4b57      	ldr	r3, [pc, #348]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a56      	ldr	r2, [pc, #344]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 8005154:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515a:	f7fc fe05 	bl	8001d68 <HAL_GetTick>
 800515e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005160:	e008      	b.n	8005174 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005162:	f7fc fe01 	bl	8001d68 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e0e0      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005174:	4b4d      	ldr	r3, [pc, #308]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1f0      	bne.n	8005162 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005180:	4b4a      	ldr	r3, [pc, #296]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 8005182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005184:	4b4a      	ldr	r3, [pc, #296]	; (80052b0 <HAL_RCC_OscConfig+0x6c8>)
 8005186:	4013      	ands	r3, r2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005190:	0112      	lsls	r2, r2, #4
 8005192:	430a      	orrs	r2, r1
 8005194:	4945      	ldr	r1, [pc, #276]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 8005196:	4313      	orrs	r3, r2
 8005198:	628b      	str	r3, [r1, #40]	; 0x28
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	3b01      	subs	r3, #1
 80051a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a8:	3b01      	subs	r3, #1
 80051aa:	025b      	lsls	r3, r3, #9
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b4:	3b01      	subs	r3, #1
 80051b6:	041b      	lsls	r3, r3, #16
 80051b8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c2:	3b01      	subs	r3, #1
 80051c4:	061b      	lsls	r3, r3, #24
 80051c6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051ca:	4938      	ldr	r1, [pc, #224]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80051d0:	4b36      	ldr	r3, [pc, #216]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	4a35      	ldr	r2, [pc, #212]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 80051d6:	f023 0301 	bic.w	r3, r3, #1
 80051da:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051dc:	4b33      	ldr	r3, [pc, #204]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 80051de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e0:	4b34      	ldr	r3, [pc, #208]	; (80052b4 <HAL_RCC_OscConfig+0x6cc>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80051e8:	00d2      	lsls	r2, r2, #3
 80051ea:	4930      	ldr	r1, [pc, #192]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80051f0:	4b2e      	ldr	r3, [pc, #184]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	f023 020c 	bic.w	r2, r3, #12
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	492b      	ldr	r1, [pc, #172]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005202:	4b2a      	ldr	r3, [pc, #168]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	f023 0202 	bic.w	r2, r3, #2
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520e:	4927      	ldr	r1, [pc, #156]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 8005210:	4313      	orrs	r3, r2
 8005212:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005214:	4b25      	ldr	r3, [pc, #148]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	4a24      	ldr	r2, [pc, #144]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 800521a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800521e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005220:	4b22      	ldr	r3, [pc, #136]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	4a21      	ldr	r2, [pc, #132]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 8005226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800522a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800522c:	4b1f      	ldr	r3, [pc, #124]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	4a1e      	ldr	r2, [pc, #120]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 8005232:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005236:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005238:	4b1c      	ldr	r3, [pc, #112]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	4a1b      	ldr	r2, [pc, #108]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005244:	4b19      	ldr	r3, [pc, #100]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a18      	ldr	r2, [pc, #96]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 800524a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800524e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005250:	f7fc fd8a 	bl	8001d68 <HAL_GetTick>
 8005254:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005258:	f7fc fd86 	bl	8001d68 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e065      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800526a:	4b10      	ldr	r3, [pc, #64]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0f0      	beq.n	8005258 <HAL_RCC_OscConfig+0x670>
 8005276:	e05d      	b.n	8005334 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005278:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a0b      	ldr	r2, [pc, #44]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 800527e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fc fd70 	bl	8001d68 <HAL_GetTick>
 8005288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800528c:	f7fc fd6c 	bl	8001d68 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e04b      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800529e:	4b03      	ldr	r3, [pc, #12]	; (80052ac <HAL_RCC_OscConfig+0x6c4>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0x6a4>
 80052aa:	e043      	b.n	8005334 <HAL_RCC_OscConfig+0x74c>
 80052ac:	58024400 	.word	0x58024400
 80052b0:	fffffc0c 	.word	0xfffffc0c
 80052b4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80052b8:	4b21      	ldr	r3, [pc, #132]	; (8005340 <HAL_RCC_OscConfig+0x758>)
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80052be:	4b20      	ldr	r3, [pc, #128]	; (8005340 <HAL_RCC_OscConfig+0x758>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d031      	beq.n	8005330 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f003 0203 	and.w	r2, r3, #3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d12a      	bne.n	8005330 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	091b      	lsrs	r3, r3, #4
 80052de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d122      	bne.n	8005330 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d11a      	bne.n	8005330 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	0a5b      	lsrs	r3, r3, #9
 80052fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005306:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005308:	429a      	cmp	r2, r3
 800530a:	d111      	bne.n	8005330 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	0c1b      	lsrs	r3, r3, #16
 8005310:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005318:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800531a:	429a      	cmp	r2, r3
 800531c:	d108      	bne.n	8005330 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	0e1b      	lsrs	r3, r3, #24
 8005322:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800532c:	429a      	cmp	r2, r3
 800532e:	d001      	beq.n	8005334 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e000      	b.n	8005336 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3730      	adds	r7, #48	; 0x30
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	58024400 	.word	0x58024400

08005344 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e19c      	b.n	8005692 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005358:	4b8a      	ldr	r3, [pc, #552]	; (8005584 <HAL_RCC_ClockConfig+0x240>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 030f 	and.w	r3, r3, #15
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d910      	bls.n	8005388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005366:	4b87      	ldr	r3, [pc, #540]	; (8005584 <HAL_RCC_ClockConfig+0x240>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f023 020f 	bic.w	r2, r3, #15
 800536e:	4985      	ldr	r1, [pc, #532]	; (8005584 <HAL_RCC_ClockConfig+0x240>)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	4313      	orrs	r3, r2
 8005374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005376:	4b83      	ldr	r3, [pc, #524]	; (8005584 <HAL_RCC_ClockConfig+0x240>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 030f 	and.w	r3, r3, #15
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d001      	beq.n	8005388 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e184      	b.n	8005692 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d010      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	4b7b      	ldr	r3, [pc, #492]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d908      	bls.n	80053b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053a4:	4b78      	ldr	r3, [pc, #480]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	4975      	ldr	r1, [pc, #468]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d010      	beq.n	80053e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695a      	ldr	r2, [r3, #20]
 80053c6:	4b70      	ldr	r3, [pc, #448]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d908      	bls.n	80053e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053d2:	4b6d      	ldr	r3, [pc, #436]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	496a      	ldr	r1, [pc, #424]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d010      	beq.n	8005412 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699a      	ldr	r2, [r3, #24]
 80053f4:	4b64      	ldr	r3, [pc, #400]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d908      	bls.n	8005412 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005400:	4b61      	ldr	r3, [pc, #388]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	495e      	ldr	r1, [pc, #376]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 800540e:	4313      	orrs	r3, r2
 8005410:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	d010      	beq.n	8005440 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69da      	ldr	r2, [r3, #28]
 8005422:	4b59      	ldr	r3, [pc, #356]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800542a:	429a      	cmp	r2, r3
 800542c:	d908      	bls.n	8005440 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800542e:	4b56      	ldr	r3, [pc, #344]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	4953      	ldr	r1, [pc, #332]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 800543c:	4313      	orrs	r3, r2
 800543e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d010      	beq.n	800546e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	4b4d      	ldr	r3, [pc, #308]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f003 030f 	and.w	r3, r3, #15
 8005458:	429a      	cmp	r2, r3
 800545a:	d908      	bls.n	800546e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800545c:	4b4a      	ldr	r3, [pc, #296]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f023 020f 	bic.w	r2, r3, #15
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	4947      	ldr	r1, [pc, #284]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 800546a:	4313      	orrs	r3, r2
 800546c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d055      	beq.n	8005526 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800547a:	4b43      	ldr	r3, [pc, #268]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	4940      	ldr	r1, [pc, #256]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 8005488:	4313      	orrs	r3, r2
 800548a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b02      	cmp	r3, #2
 8005492:	d107      	bne.n	80054a4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005494:	4b3c      	ldr	r3, [pc, #240]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d121      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e0f6      	b.n	8005692 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d107      	bne.n	80054bc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054ac:	4b36      	ldr	r3, [pc, #216]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d115      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e0ea      	b.n	8005692 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d107      	bne.n	80054d4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054c4:	4b30      	ldr	r3, [pc, #192]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d109      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e0de      	b.n	8005692 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054d4:	4b2c      	ldr	r3, [pc, #176]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e0d6      	b.n	8005692 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054e4:	4b28      	ldr	r3, [pc, #160]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	f023 0207 	bic.w	r2, r3, #7
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	4925      	ldr	r1, [pc, #148]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f6:	f7fc fc37 	bl	8001d68 <HAL_GetTick>
 80054fa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fc:	e00a      	b.n	8005514 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054fe:	f7fc fc33 	bl	8001d68 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	f241 3288 	movw	r2, #5000	; 0x1388
 800550c:	4293      	cmp	r3, r2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e0be      	b.n	8005692 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005514:	4b1c      	ldr	r3, [pc, #112]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	429a      	cmp	r2, r3
 8005524:	d1eb      	bne.n	80054fe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d010      	beq.n	8005554 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	4b14      	ldr	r3, [pc, #80]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	429a      	cmp	r2, r3
 8005540:	d208      	bcs.n	8005554 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005542:	4b11      	ldr	r3, [pc, #68]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f023 020f 	bic.w	r2, r3, #15
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	490e      	ldr	r1, [pc, #56]	; (8005588 <HAL_RCC_ClockConfig+0x244>)
 8005550:	4313      	orrs	r3, r2
 8005552:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005554:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <HAL_RCC_ClockConfig+0x240>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 030f 	and.w	r3, r3, #15
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d214      	bcs.n	800558c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005562:	4b08      	ldr	r3, [pc, #32]	; (8005584 <HAL_RCC_ClockConfig+0x240>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f023 020f 	bic.w	r2, r3, #15
 800556a:	4906      	ldr	r1, [pc, #24]	; (8005584 <HAL_RCC_ClockConfig+0x240>)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	4313      	orrs	r3, r2
 8005570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005572:	4b04      	ldr	r3, [pc, #16]	; (8005584 <HAL_RCC_ClockConfig+0x240>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d005      	beq.n	800558c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e086      	b.n	8005692 <HAL_RCC_ClockConfig+0x34e>
 8005584:	52002000 	.word	0x52002000
 8005588:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d010      	beq.n	80055ba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	4b3f      	ldr	r3, [pc, #252]	; (800569c <HAL_RCC_ClockConfig+0x358>)
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d208      	bcs.n	80055ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055a8:	4b3c      	ldr	r3, [pc, #240]	; (800569c <HAL_RCC_ClockConfig+0x358>)
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	4939      	ldr	r1, [pc, #228]	; (800569c <HAL_RCC_ClockConfig+0x358>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d010      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695a      	ldr	r2, [r3, #20]
 80055ca:	4b34      	ldr	r3, [pc, #208]	; (800569c <HAL_RCC_ClockConfig+0x358>)
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d208      	bcs.n	80055e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055d6:	4b31      	ldr	r3, [pc, #196]	; (800569c <HAL_RCC_ClockConfig+0x358>)
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	492e      	ldr	r1, [pc, #184]	; (800569c <HAL_RCC_ClockConfig+0x358>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d010      	beq.n	8005616 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699a      	ldr	r2, [r3, #24]
 80055f8:	4b28      	ldr	r3, [pc, #160]	; (800569c <HAL_RCC_ClockConfig+0x358>)
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005600:	429a      	cmp	r2, r3
 8005602:	d208      	bcs.n	8005616 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005604:	4b25      	ldr	r3, [pc, #148]	; (800569c <HAL_RCC_ClockConfig+0x358>)
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	4922      	ldr	r1, [pc, #136]	; (800569c <HAL_RCC_ClockConfig+0x358>)
 8005612:	4313      	orrs	r3, r2
 8005614:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	d010      	beq.n	8005644 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69da      	ldr	r2, [r3, #28]
 8005626:	4b1d      	ldr	r3, [pc, #116]	; (800569c <HAL_RCC_ClockConfig+0x358>)
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800562e:	429a      	cmp	r2, r3
 8005630:	d208      	bcs.n	8005644 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005632:	4b1a      	ldr	r3, [pc, #104]	; (800569c <HAL_RCC_ClockConfig+0x358>)
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	4917      	ldr	r1, [pc, #92]	; (800569c <HAL_RCC_ClockConfig+0x358>)
 8005640:	4313      	orrs	r3, r2
 8005642:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005644:	f000 f834 	bl	80056b0 <HAL_RCC_GetSysClockFreq>
 8005648:	4602      	mov	r2, r0
 800564a:	4b14      	ldr	r3, [pc, #80]	; (800569c <HAL_RCC_ClockConfig+0x358>)
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	0a1b      	lsrs	r3, r3, #8
 8005650:	f003 030f 	and.w	r3, r3, #15
 8005654:	4912      	ldr	r1, [pc, #72]	; (80056a0 <HAL_RCC_ClockConfig+0x35c>)
 8005656:	5ccb      	ldrb	r3, [r1, r3]
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	fa22 f303 	lsr.w	r3, r2, r3
 8005660:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005662:	4b0e      	ldr	r3, [pc, #56]	; (800569c <HAL_RCC_ClockConfig+0x358>)
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	4a0d      	ldr	r2, [pc, #52]	; (80056a0 <HAL_RCC_ClockConfig+0x35c>)
 800566c:	5cd3      	ldrb	r3, [r2, r3]
 800566e:	f003 031f 	and.w	r3, r3, #31
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	fa22 f303 	lsr.w	r3, r2, r3
 8005678:	4a0a      	ldr	r2, [pc, #40]	; (80056a4 <HAL_RCC_ClockConfig+0x360>)
 800567a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800567c:	4a0a      	ldr	r2, [pc, #40]	; (80056a8 <HAL_RCC_ClockConfig+0x364>)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005682:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <HAL_RCC_ClockConfig+0x368>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f7fc fb24 	bl	8001cd4 <HAL_InitTick>
 800568c:	4603      	mov	r3, r0
 800568e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005690:	7bfb      	ldrb	r3, [r7, #15]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	58024400 	.word	0x58024400
 80056a0:	0800b194 	.word	0x0800b194
 80056a4:	24000004 	.word	0x24000004
 80056a8:	24000000 	.word	0x24000000
 80056ac:	24000008 	.word	0x24000008

080056b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b089      	sub	sp, #36	; 0x24
 80056b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056b6:	4bb3      	ldr	r3, [pc, #716]	; (8005984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056be:	2b18      	cmp	r3, #24
 80056c0:	f200 8155 	bhi.w	800596e <HAL_RCC_GetSysClockFreq+0x2be>
 80056c4:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80056c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ca:	bf00      	nop
 80056cc:	08005731 	.word	0x08005731
 80056d0:	0800596f 	.word	0x0800596f
 80056d4:	0800596f 	.word	0x0800596f
 80056d8:	0800596f 	.word	0x0800596f
 80056dc:	0800596f 	.word	0x0800596f
 80056e0:	0800596f 	.word	0x0800596f
 80056e4:	0800596f 	.word	0x0800596f
 80056e8:	0800596f 	.word	0x0800596f
 80056ec:	08005757 	.word	0x08005757
 80056f0:	0800596f 	.word	0x0800596f
 80056f4:	0800596f 	.word	0x0800596f
 80056f8:	0800596f 	.word	0x0800596f
 80056fc:	0800596f 	.word	0x0800596f
 8005700:	0800596f 	.word	0x0800596f
 8005704:	0800596f 	.word	0x0800596f
 8005708:	0800596f 	.word	0x0800596f
 800570c:	0800575d 	.word	0x0800575d
 8005710:	0800596f 	.word	0x0800596f
 8005714:	0800596f 	.word	0x0800596f
 8005718:	0800596f 	.word	0x0800596f
 800571c:	0800596f 	.word	0x0800596f
 8005720:	0800596f 	.word	0x0800596f
 8005724:	0800596f 	.word	0x0800596f
 8005728:	0800596f 	.word	0x0800596f
 800572c:	08005763 	.word	0x08005763
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005730:	4b94      	ldr	r3, [pc, #592]	; (8005984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0320 	and.w	r3, r3, #32
 8005738:	2b00      	cmp	r3, #0
 800573a:	d009      	beq.n	8005750 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800573c:	4b91      	ldr	r3, [pc, #580]	; (8005984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	08db      	lsrs	r3, r3, #3
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	4a90      	ldr	r2, [pc, #576]	; (8005988 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005748:	fa22 f303 	lsr.w	r3, r2, r3
 800574c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800574e:	e111      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005750:	4b8d      	ldr	r3, [pc, #564]	; (8005988 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005752:	61bb      	str	r3, [r7, #24]
    break;
 8005754:	e10e      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005756:	4b8d      	ldr	r3, [pc, #564]	; (800598c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005758:	61bb      	str	r3, [r7, #24]
    break;
 800575a:	e10b      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800575c:	4b8c      	ldr	r3, [pc, #560]	; (8005990 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800575e:	61bb      	str	r3, [r7, #24]
    break;
 8005760:	e108      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005762:	4b88      	ldr	r3, [pc, #544]	; (8005984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800576c:	4b85      	ldr	r3, [pc, #532]	; (8005984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800576e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005770:	091b      	lsrs	r3, r3, #4
 8005772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005776:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005778:	4b82      	ldr	r3, [pc, #520]	; (8005984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005782:	4b80      	ldr	r3, [pc, #512]	; (8005984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005786:	08db      	lsrs	r3, r3, #3
 8005788:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	fb02 f303 	mul.w	r3, r2, r3
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 80e1 	beq.w	8005968 <HAL_RCC_GetSysClockFreq+0x2b8>
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	f000 8083 	beq.w	80058b4 <HAL_RCC_GetSysClockFreq+0x204>
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	f200 80a1 	bhi.w	80058f8 <HAL_RCC_GetSysClockFreq+0x248>
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <HAL_RCC_GetSysClockFreq+0x114>
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d056      	beq.n	8005870 <HAL_RCC_GetSysClockFreq+0x1c0>
 80057c2:	e099      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057c4:	4b6f      	ldr	r3, [pc, #444]	; (8005984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d02d      	beq.n	800582c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057d0:	4b6c      	ldr	r3, [pc, #432]	; (8005984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	08db      	lsrs	r3, r3, #3
 80057d6:	f003 0303 	and.w	r3, r3, #3
 80057da:	4a6b      	ldr	r2, [pc, #428]	; (8005988 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057dc:	fa22 f303 	lsr.w	r3, r2, r3
 80057e0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	ee07 3a90 	vmov	s15, r3
 80057e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057fa:	4b62      	ldr	r3, [pc, #392]	; (8005984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800580a:	ed97 6a02 	vldr	s12, [r7, #8]
 800580e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005994 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800581a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800581e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005826:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800582a:	e087      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005836:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005998 <HAL_RCC_GetSysClockFreq+0x2e8>
 800583a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800583e:	4b51      	ldr	r3, [pc, #324]	; (8005984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800584e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005852:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005994 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800585a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800585e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800586e:	e065      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800599c <HAL_RCC_GetSysClockFreq+0x2ec>
 800587e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005882:	4b40      	ldr	r3, [pc, #256]	; (8005984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005892:	ed97 6a02 	vldr	s12, [r7, #8]
 8005896:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005994 <HAL_RCC_GetSysClockFreq+0x2e4>
 800589a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800589e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058b2:	e043      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80059a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80058c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058c6:	4b2f      	ldr	r3, [pc, #188]	; (8005984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005994 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058f6:	e021      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	ee07 3a90 	vmov	s15, r3
 80058fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005902:	eddf 6a26 	vldr	s13, [pc, #152]	; 800599c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800590a:	4b1e      	ldr	r3, [pc, #120]	; (8005984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800591a:	ed97 6a02 	vldr	s12, [r7, #8]
 800591e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005994 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800592a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800592e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800593a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800593c:	4b11      	ldr	r3, [pc, #68]	; (8005984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	0a5b      	lsrs	r3, r3, #9
 8005942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005946:	3301      	adds	r3, #1
 8005948:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	ee07 3a90 	vmov	s15, r3
 8005950:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005954:	edd7 6a07 	vldr	s13, [r7, #28]
 8005958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800595c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005960:	ee17 3a90 	vmov	r3, s15
 8005964:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005966:	e005      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	61bb      	str	r3, [r7, #24]
    break;
 800596c:	e002      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800596e:	4b07      	ldr	r3, [pc, #28]	; (800598c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005970:	61bb      	str	r3, [r7, #24]
    break;
 8005972:	bf00      	nop
  }

  return sysclockfreq;
 8005974:	69bb      	ldr	r3, [r7, #24]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3724      	adds	r7, #36	; 0x24
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	58024400 	.word	0x58024400
 8005988:	03d09000 	.word	0x03d09000
 800598c:	003d0900 	.word	0x003d0900
 8005990:	017d7840 	.word	0x017d7840
 8005994:	46000000 	.word	0x46000000
 8005998:	4c742400 	.word	0x4c742400
 800599c:	4a742400 	.word	0x4a742400
 80059a0:	4bbebc20 	.word	0x4bbebc20

080059a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80059aa:	f7ff fe81 	bl	80056b0 <HAL_RCC_GetSysClockFreq>
 80059ae:	4602      	mov	r2, r0
 80059b0:	4b10      	ldr	r3, [pc, #64]	; (80059f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	0a1b      	lsrs	r3, r3, #8
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	490f      	ldr	r1, [pc, #60]	; (80059f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80059bc:	5ccb      	ldrb	r3, [r1, r3]
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	fa22 f303 	lsr.w	r3, r2, r3
 80059c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059c8:	4b0a      	ldr	r3, [pc, #40]	; (80059f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	4a09      	ldr	r2, [pc, #36]	; (80059f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80059d2:	5cd3      	ldrb	r3, [r2, r3]
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	fa22 f303 	lsr.w	r3, r2, r3
 80059de:	4a07      	ldr	r2, [pc, #28]	; (80059fc <HAL_RCC_GetHCLKFreq+0x58>)
 80059e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059e2:	4a07      	ldr	r2, [pc, #28]	; (8005a00 <HAL_RCC_GetHCLKFreq+0x5c>)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059e8:	4b04      	ldr	r3, [pc, #16]	; (80059fc <HAL_RCC_GetHCLKFreq+0x58>)
 80059ea:	681b      	ldr	r3, [r3, #0]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	58024400 	.word	0x58024400
 80059f8:	0800b194 	.word	0x0800b194
 80059fc:	24000004 	.word	0x24000004
 8005a00:	24000000 	.word	0x24000000

08005a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a08:	f7ff ffcc 	bl	80059a4 <HAL_RCC_GetHCLKFreq>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	091b      	lsrs	r3, r3, #4
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	4904      	ldr	r1, [pc, #16]	; (8005a2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a1a:	5ccb      	ldrb	r3, [r1, r3]
 8005a1c:	f003 031f 	and.w	r3, r3, #31
 8005a20:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	58024400 	.word	0x58024400
 8005a2c:	0800b194 	.word	0x0800b194

08005a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a34:	f7ff ffb6 	bl	80059a4 <HAL_RCC_GetHCLKFreq>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	0a1b      	lsrs	r3, r3, #8
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	4904      	ldr	r1, [pc, #16]	; (8005a58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a46:	5ccb      	ldrb	r3, [r1, r3]
 8005a48:	f003 031f 	and.w	r3, r3, #31
 8005a4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	58024400 	.word	0x58024400
 8005a58:	0800b194 	.word	0x0800b194

08005a5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a64:	2300      	movs	r3, #0
 8005a66:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a68:	2300      	movs	r3, #0
 8005a6a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d03f      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a80:	d02a      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005a82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a86:	d824      	bhi.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a8c:	d018      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a92:	d81e      	bhi.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a9c:	d007      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005a9e:	e018      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aa0:	4ba4      	ldr	r3, [pc, #656]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	4aa3      	ldr	r2, [pc, #652]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005aac:	e015      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	2102      	movs	r1, #2
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f001 f989 	bl	8006dcc <RCCEx_PLL2_Config>
 8005aba:	4603      	mov	r3, r0
 8005abc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005abe:	e00c      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3324      	adds	r3, #36	; 0x24
 8005ac4:	2102      	movs	r1, #2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f001 fa32 	bl	8006f30 <RCCEx_PLL3_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005ad0:	e003      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ad6:	e000      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ada:	7dfb      	ldrb	r3, [r7, #23]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d109      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ae0:	4b94      	ldr	r3, [pc, #592]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aec:	4991      	ldr	r1, [pc, #580]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	650b      	str	r3, [r1, #80]	; 0x50
 8005af2:	e001      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
 8005af6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d03d      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d826      	bhi.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005b0c:	a201      	add	r2, pc, #4	; (adr r2, 8005b14 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b12:	bf00      	nop
 8005b14:	08005b29 	.word	0x08005b29
 8005b18:	08005b37 	.word	0x08005b37
 8005b1c:	08005b49 	.word	0x08005b49
 8005b20:	08005b61 	.word	0x08005b61
 8005b24:	08005b61 	.word	0x08005b61
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b28:	4b82      	ldr	r3, [pc, #520]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	4a81      	ldr	r2, [pc, #516]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b34:	e015      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f001 f945 	bl	8006dcc <RCCEx_PLL2_Config>
 8005b42:	4603      	mov	r3, r0
 8005b44:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b46:	e00c      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3324      	adds	r3, #36	; 0x24
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f001 f9ee 	bl	8006f30 <RCCEx_PLL3_Config>
 8005b54:	4603      	mov	r3, r0
 8005b56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b58:	e003      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b5e:	e000      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b62:	7dfb      	ldrb	r3, [r7, #23]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d109      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b68:	4b72      	ldr	r3, [pc, #456]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6c:	f023 0207 	bic.w	r2, r3, #7
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b74:	496f      	ldr	r1, [pc, #444]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	650b      	str	r3, [r1, #80]	; 0x50
 8005b7a:	e001      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
 8005b7e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d051      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b92:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005b96:	d036      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005b98:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005b9c:	d830      	bhi.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005b9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ba2:	d032      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005ba4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ba8:	d82a      	bhi.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005baa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005bae:	d02e      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005bb0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005bb4:	d824      	bhi.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005bb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bba:	d018      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bc0:	d81e      	bhi.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005bc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bca:	d007      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005bcc:	e018      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bce:	4b59      	ldr	r3, [pc, #356]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	4a58      	ldr	r2, [pc, #352]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bda:	e019      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3304      	adds	r3, #4
 8005be0:	2100      	movs	r1, #0
 8005be2:	4618      	mov	r0, r3
 8005be4:	f001 f8f2 	bl	8006dcc <RCCEx_PLL2_Config>
 8005be8:	4603      	mov	r3, r0
 8005bea:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005bec:	e010      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	3324      	adds	r3, #36	; 0x24
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f001 f99b 	bl	8006f30 <RCCEx_PLL3_Config>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bfe:	e007      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	75fb      	strb	r3, [r7, #23]
      break;
 8005c04:	e004      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005c06:	bf00      	nop
 8005c08:	e002      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005c0a:	bf00      	nop
 8005c0c:	e000      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10a      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c16:	4b47      	ldr	r3, [pc, #284]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c24:	4943      	ldr	r1, [pc, #268]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	658b      	str	r3, [r1, #88]	; 0x58
 8005c2a:	e001      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
 8005c2e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d051      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c42:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005c46:	d036      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005c48:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005c4c:	d830      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005c4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c52:	d032      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005c54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c58:	d82a      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005c5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c5e:	d02e      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005c60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c64:	d824      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005c66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c6a:	d018      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005c6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c70:	d81e      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005c76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c7a:	d007      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005c7c:	e018      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c7e:	4b2d      	ldr	r3, [pc, #180]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	4a2c      	ldr	r2, [pc, #176]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c8a:	e019      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	2100      	movs	r1, #0
 8005c92:	4618      	mov	r0, r3
 8005c94:	f001 f89a 	bl	8006dcc <RCCEx_PLL2_Config>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005c9c:	e010      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	3324      	adds	r3, #36	; 0x24
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 f943 	bl	8006f30 <RCCEx_PLL3_Config>
 8005caa:	4603      	mov	r3, r0
 8005cac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cae:	e007      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb4:	e004      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005cb6:	bf00      	nop
 8005cb8:	e002      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005cba:	bf00      	nop
 8005cbc:	e000      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cc0:	7dfb      	ldrb	r3, [r7, #23]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10a      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005cc6:	4b1b      	ldr	r3, [pc, #108]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cca:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cd4:	4917      	ldr	r1, [pc, #92]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	658b      	str	r3, [r1, #88]	; 0x58
 8005cda:	e001      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
 8005cde:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d035      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cf0:	2b30      	cmp	r3, #48	; 0x30
 8005cf2:	d01c      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005cf4:	2b30      	cmp	r3, #48	; 0x30
 8005cf6:	d817      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d00c      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d813      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d019      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8005d04:	2b10      	cmp	r3, #16
 8005d06:	d10f      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d08:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	4a09      	ldr	r2, [pc, #36]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005d14:	e011      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	2102      	movs	r1, #2
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f001 f855 	bl	8006dcc <RCCEx_PLL2_Config>
 8005d22:	4603      	mov	r3, r0
 8005d24:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005d26:	e008      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d2c:	e005      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8005d2e:	bf00      	nop
 8005d30:	e003      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005d32:	bf00      	nop
 8005d34:	58024400 	.word	0x58024400
      break;
 8005d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d109      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005d40:	4ba3      	ldr	r3, [pc, #652]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d4c:	49a0      	ldr	r1, [pc, #640]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d52:	e001      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
 8005d56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d047      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d6c:	d030      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005d6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d72:	d82a      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005d74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d78:	d02c      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005d7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d7e:	d824      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d84:	d018      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d8a:	d81e      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d94:	d007      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d96:	e018      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d98:	4b8d      	ldr	r3, [pc, #564]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	4a8c      	ldr	r2, [pc, #560]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005da2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005da4:	e017      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3304      	adds	r3, #4
 8005daa:	2100      	movs	r1, #0
 8005dac:	4618      	mov	r0, r3
 8005dae:	f001 f80d 	bl	8006dcc <RCCEx_PLL2_Config>
 8005db2:	4603      	mov	r3, r0
 8005db4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005db6:	e00e      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3324      	adds	r3, #36	; 0x24
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 f8b6 	bl	8006f30 <RCCEx_PLL3_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005dc8:	e005      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8005dce:	e002      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005dd0:	bf00      	nop
 8005dd2:	e000      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005dd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d109      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ddc:	4b7c      	ldr	r3, [pc, #496]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de8:	4979      	ldr	r1, [pc, #484]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	650b      	str	r3, [r1, #80]	; 0x50
 8005dee:	e001      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df0:	7dfb      	ldrb	r3, [r7, #23]
 8005df2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d049      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e08:	d02e      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005e0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e0e:	d828      	bhi.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005e10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e14:	d02a      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005e16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e1a:	d822      	bhi.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005e1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e20:	d026      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005e22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e26:	d81c      	bhi.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005e28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e2c:	d010      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005e2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e32:	d816      	bhi.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01d      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e3c:	d111      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	3304      	adds	r3, #4
 8005e42:	2101      	movs	r1, #1
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 ffc1 	bl	8006dcc <RCCEx_PLL2_Config>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005e4e:	e012      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3324      	adds	r3, #36	; 0x24
 8005e54:	2101      	movs	r1, #1
 8005e56:	4618      	mov	r0, r3
 8005e58:	f001 f86a 	bl	8006f30 <RCCEx_PLL3_Config>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005e60:	e009      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	75fb      	strb	r3, [r7, #23]
      break;
 8005e66:	e006      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005e68:	bf00      	nop
 8005e6a:	e004      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005e6c:	bf00      	nop
 8005e6e:	e002      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005e70:	bf00      	nop
 8005e72:	e000      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d109      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e7c:	4b54      	ldr	r3, [pc, #336]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e80:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e88:	4951      	ldr	r1, [pc, #324]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	650b      	str	r3, [r1, #80]	; 0x50
 8005e8e:	e001      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
 8005e92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d04b      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005eaa:	d02e      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005eb0:	d828      	bhi.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb6:	d02a      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ebc:	d822      	bhi.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005ebe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ec2:	d026      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005ec4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ec8:	d81c      	bhi.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005eca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ece:	d010      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8005ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ed4:	d816      	bhi.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d01d      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ede:	d111      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 ff70 	bl	8006dcc <RCCEx_PLL2_Config>
 8005eec:	4603      	mov	r3, r0
 8005eee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005ef0:	e012      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3324      	adds	r3, #36	; 0x24
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f001 f819 	bl	8006f30 <RCCEx_PLL3_Config>
 8005efe:	4603      	mov	r3, r0
 8005f00:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005f02:	e009      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	75fb      	strb	r3, [r7, #23]
      break;
 8005f08:	e006      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005f0a:	bf00      	nop
 8005f0c:	e004      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005f0e:	bf00      	nop
 8005f10:	e002      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005f12:	bf00      	nop
 8005f14:	e000      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005f16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10a      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005f1e:	4b2c      	ldr	r3, [pc, #176]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f22:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f2c:	4928      	ldr	r1, [pc, #160]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	658b      	str	r3, [r1, #88]	; 0x58
 8005f32:	e001      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f34:	7dfb      	ldrb	r3, [r7, #23]
 8005f36:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d02f      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f4c:	d00e      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f52:	d814      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d015      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005f58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f5c:	d10f      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f5e:	4b1c      	ldr	r3, [pc, #112]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	4a1b      	ldr	r2, [pc, #108]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005f6a:	e00c      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	2101      	movs	r1, #1
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 ff2a 	bl	8006dcc <RCCEx_PLL2_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005f7c:	e003      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	75fb      	strb	r3, [r7, #23]
      break;
 8005f82:	e000      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f86:	7dfb      	ldrb	r3, [r7, #23]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d109      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f8c:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f98:	490d      	ldr	r1, [pc, #52]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	650b      	str	r3, [r1, #80]	; 0x50
 8005f9e:	e001      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa0:	7dfb      	ldrb	r3, [r7, #23]
 8005fa2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d034      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d81d      	bhi.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005fb8:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbe:	bf00      	nop
 8005fc0:	08005ffb 	.word	0x08005ffb
 8005fc4:	08005fd5 	.word	0x08005fd5
 8005fc8:	08005fe3 	.word	0x08005fe3
 8005fcc:	08005ffb 	.word	0x08005ffb
 8005fd0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fd4:	4bb1      	ldr	r3, [pc, #708]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	4ab0      	ldr	r2, [pc, #704]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005fe0:	e00c      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	2102      	movs	r1, #2
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 feef 	bl	8006dcc <RCCEx_PLL2_Config>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005ff2:	e003      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff8:	e000      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8005ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d109      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006002:	4ba6      	ldr	r3, [pc, #664]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006006:	f023 0203 	bic.w	r2, r3, #3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600e:	49a3      	ldr	r1, [pc, #652]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006010:	4313      	orrs	r3, r2
 8006012:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006014:	e001      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006016:	7dfb      	ldrb	r3, [r7, #23]
 8006018:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 8086 	beq.w	8006134 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006028:	4b9d      	ldr	r3, [pc, #628]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a9c      	ldr	r2, [pc, #624]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800602e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006032:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006034:	f7fb fe98 	bl	8001d68 <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800603a:	e009      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800603c:	f7fb fe94 	bl	8001d68 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b64      	cmp	r3, #100	; 0x64
 8006048:	d902      	bls.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	75fb      	strb	r3, [r7, #23]
        break;
 800604e:	e005      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006050:	4b93      	ldr	r3, [pc, #588]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006058:	2b00      	cmp	r3, #0
 800605a:	d0ef      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800605c:	7dfb      	ldrb	r3, [r7, #23]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d166      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006062:	4b8e      	ldr	r3, [pc, #568]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006064:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800606c:	4053      	eors	r3, r2
 800606e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006072:	2b00      	cmp	r3, #0
 8006074:	d013      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006076:	4b89      	ldr	r3, [pc, #548]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800607e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006080:	4b86      	ldr	r3, [pc, #536]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006084:	4a85      	ldr	r2, [pc, #532]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800608c:	4b83      	ldr	r3, [pc, #524]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800608e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006090:	4a82      	ldr	r2, [pc, #520]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006096:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006098:	4a80      	ldr	r2, [pc, #512]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80060a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a8:	d115      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060aa:	f7fb fe5d 	bl	8001d68 <HAL_GetTick>
 80060ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060b0:	e00b      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060b2:	f7fb fe59 	bl	8001d68 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d902      	bls.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	75fb      	strb	r3, [r7, #23]
            break;
 80060c8:	e005      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060ca:	4b74      	ldr	r3, [pc, #464]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80060cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0ed      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80060d6:	7dfb      	ldrb	r3, [r7, #23]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d126      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80060e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ea:	d10d      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80060ec:	4b6b      	ldr	r3, [pc, #428]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80060fa:	0919      	lsrs	r1, r3, #4
 80060fc:	4b69      	ldr	r3, [pc, #420]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80060fe:	400b      	ands	r3, r1
 8006100:	4966      	ldr	r1, [pc, #408]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006102:	4313      	orrs	r3, r2
 8006104:	610b      	str	r3, [r1, #16]
 8006106:	e005      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8006108:	4b64      	ldr	r3, [pc, #400]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	4a63      	ldr	r2, [pc, #396]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800610e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006112:	6113      	str	r3, [r2, #16]
 8006114:	4b61      	ldr	r3, [pc, #388]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006116:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800611e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006122:	495e      	ldr	r1, [pc, #376]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006124:	4313      	orrs	r3, r2
 8006126:	670b      	str	r3, [r1, #112]	; 0x70
 8006128:	e004      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800612a:	7dfb      	ldrb	r3, [r7, #23]
 800612c:	75bb      	strb	r3, [r7, #22]
 800612e:	e001      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006130:	7dfb      	ldrb	r3, [r7, #23]
 8006132:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d07e      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006144:	2b28      	cmp	r3, #40	; 0x28
 8006146:	d867      	bhi.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8006148:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800614a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614e:	bf00      	nop
 8006150:	0800621f 	.word	0x0800621f
 8006154:	08006219 	.word	0x08006219
 8006158:	08006219 	.word	0x08006219
 800615c:	08006219 	.word	0x08006219
 8006160:	08006219 	.word	0x08006219
 8006164:	08006219 	.word	0x08006219
 8006168:	08006219 	.word	0x08006219
 800616c:	08006219 	.word	0x08006219
 8006170:	080061f5 	.word	0x080061f5
 8006174:	08006219 	.word	0x08006219
 8006178:	08006219 	.word	0x08006219
 800617c:	08006219 	.word	0x08006219
 8006180:	08006219 	.word	0x08006219
 8006184:	08006219 	.word	0x08006219
 8006188:	08006219 	.word	0x08006219
 800618c:	08006219 	.word	0x08006219
 8006190:	08006207 	.word	0x08006207
 8006194:	08006219 	.word	0x08006219
 8006198:	08006219 	.word	0x08006219
 800619c:	08006219 	.word	0x08006219
 80061a0:	08006219 	.word	0x08006219
 80061a4:	08006219 	.word	0x08006219
 80061a8:	08006219 	.word	0x08006219
 80061ac:	08006219 	.word	0x08006219
 80061b0:	0800621f 	.word	0x0800621f
 80061b4:	08006219 	.word	0x08006219
 80061b8:	08006219 	.word	0x08006219
 80061bc:	08006219 	.word	0x08006219
 80061c0:	08006219 	.word	0x08006219
 80061c4:	08006219 	.word	0x08006219
 80061c8:	08006219 	.word	0x08006219
 80061cc:	08006219 	.word	0x08006219
 80061d0:	0800621f 	.word	0x0800621f
 80061d4:	08006219 	.word	0x08006219
 80061d8:	08006219 	.word	0x08006219
 80061dc:	08006219 	.word	0x08006219
 80061e0:	08006219 	.word	0x08006219
 80061e4:	08006219 	.word	0x08006219
 80061e8:	08006219 	.word	0x08006219
 80061ec:	08006219 	.word	0x08006219
 80061f0:	0800621f 	.word	0x0800621f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3304      	adds	r3, #4
 80061f8:	2101      	movs	r1, #1
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fde6 	bl	8006dcc <RCCEx_PLL2_Config>
 8006200:	4603      	mov	r3, r0
 8006202:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006204:	e00c      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	3324      	adds	r3, #36	; 0x24
 800620a:	2101      	movs	r1, #1
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fe8f 	bl	8006f30 <RCCEx_PLL3_Config>
 8006212:	4603      	mov	r3, r0
 8006214:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006216:	e003      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	75fb      	strb	r3, [r7, #23]
      break;
 800621c:	e000      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800621e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006220:	7dfb      	ldrb	r3, [r7, #23]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d109      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006226:	4b1d      	ldr	r3, [pc, #116]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006232:	491a      	ldr	r1, [pc, #104]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006234:	4313      	orrs	r3, r2
 8006236:	654b      	str	r3, [r1, #84]	; 0x54
 8006238:	e001      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800623a:	7dfb      	ldrb	r3, [r7, #23]
 800623c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d03e      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624e:	2b05      	cmp	r3, #5
 8006250:	d820      	bhi.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8006252:	a201      	add	r2, pc, #4	; (adr r2, 8006258 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8006254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006258:	080062a9 	.word	0x080062a9
 800625c:	08006271 	.word	0x08006271
 8006260:	08006283 	.word	0x08006283
 8006264:	080062a9 	.word	0x080062a9
 8006268:	080062a9 	.word	0x080062a9
 800626c:	080062a9 	.word	0x080062a9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	3304      	adds	r3, #4
 8006274:	2101      	movs	r1, #1
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fda8 	bl	8006dcc <RCCEx_PLL2_Config>
 800627c:	4603      	mov	r3, r0
 800627e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006280:	e013      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3324      	adds	r3, #36	; 0x24
 8006286:	2101      	movs	r1, #1
 8006288:	4618      	mov	r0, r3
 800628a:	f000 fe51 	bl	8006f30 <RCCEx_PLL3_Config>
 800628e:	4603      	mov	r3, r0
 8006290:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006292:	e00a      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	75fb      	strb	r3, [r7, #23]
      break;
 8006298:	e007      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800629a:	bf00      	nop
 800629c:	58024400 	.word	0x58024400
 80062a0:	58024800 	.word	0x58024800
 80062a4:	00ffffcf 	.word	0x00ffffcf
      break;
 80062a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d109      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80062b0:	4b9f      	ldr	r3, [pc, #636]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80062b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b4:	f023 0207 	bic.w	r2, r3, #7
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062bc:	499c      	ldr	r1, [pc, #624]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	654b      	str	r3, [r1, #84]	; 0x54
 80062c2:	e001      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c4:	7dfb      	ldrb	r3, [r7, #23]
 80062c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d039      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062da:	2b05      	cmp	r3, #5
 80062dc:	d820      	bhi.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80062de:	a201      	add	r2, pc, #4	; (adr r2, 80062e4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80062e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e4:	08006327 	.word	0x08006327
 80062e8:	080062fd 	.word	0x080062fd
 80062ec:	0800630f 	.word	0x0800630f
 80062f0:	08006327 	.word	0x08006327
 80062f4:	08006327 	.word	0x08006327
 80062f8:	08006327 	.word	0x08006327
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3304      	adds	r3, #4
 8006300:	2101      	movs	r1, #1
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fd62 	bl	8006dcc <RCCEx_PLL2_Config>
 8006308:	4603      	mov	r3, r0
 800630a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800630c:	e00c      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3324      	adds	r3, #36	; 0x24
 8006312:	2101      	movs	r1, #1
 8006314:	4618      	mov	r0, r3
 8006316:	f000 fe0b 	bl	8006f30 <RCCEx_PLL3_Config>
 800631a:	4603      	mov	r3, r0
 800631c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800631e:	e003      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	75fb      	strb	r3, [r7, #23]
      break;
 8006324:	e000      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8006326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006328:	7dfb      	ldrb	r3, [r7, #23]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10a      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800632e:	4b80      	ldr	r3, [pc, #512]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006332:	f023 0207 	bic.w	r2, r3, #7
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800633c:	497c      	ldr	r1, [pc, #496]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800633e:	4313      	orrs	r3, r2
 8006340:	658b      	str	r3, [r1, #88]	; 0x58
 8006342:	e001      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006344:	7dfb      	ldrb	r3, [r7, #23]
 8006346:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0320 	and.w	r3, r3, #32
 8006350:	2b00      	cmp	r3, #0
 8006352:	d04b      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800635e:	d02e      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x962>
 8006360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006364:	d828      	bhi.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636a:	d02a      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800636c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006370:	d822      	bhi.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006372:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006376:	d026      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006378:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800637c:	d81c      	bhi.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800637e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006382:	d010      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8006384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006388:	d816      	bhi.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800638a:	2b00      	cmp	r3, #0
 800638c:	d01d      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800638e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006392:	d111      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3304      	adds	r3, #4
 8006398:	2100      	movs	r1, #0
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fd16 	bl	8006dcc <RCCEx_PLL2_Config>
 80063a0:	4603      	mov	r3, r0
 80063a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80063a4:	e012      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3324      	adds	r3, #36	; 0x24
 80063aa:	2102      	movs	r1, #2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 fdbf 	bl	8006f30 <RCCEx_PLL3_Config>
 80063b2:	4603      	mov	r3, r0
 80063b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80063b6:	e009      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	75fb      	strb	r3, [r7, #23]
      break;
 80063bc:	e006      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80063be:	bf00      	nop
 80063c0:	e004      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80063c2:	bf00      	nop
 80063c4:	e002      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80063c6:	bf00      	nop
 80063c8:	e000      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80063ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063cc:	7dfb      	ldrb	r3, [r7, #23]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10a      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063d2:	4b57      	ldr	r3, [pc, #348]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80063d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e0:	4953      	ldr	r1, [pc, #332]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	654b      	str	r3, [r1, #84]	; 0x54
 80063e6:	e001      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
 80063ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d04b      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006402:	d02e      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8006404:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006408:	d828      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800640a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640e:	d02a      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006414:	d822      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006416:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800641a:	d026      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800641c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006420:	d81c      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006426:	d010      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8006428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800642c:	d816      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800642e:	2b00      	cmp	r3, #0
 8006430:	d01d      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006436:	d111      	bne.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3304      	adds	r3, #4
 800643c:	2100      	movs	r1, #0
 800643e:	4618      	mov	r0, r3
 8006440:	f000 fcc4 	bl	8006dcc <RCCEx_PLL2_Config>
 8006444:	4603      	mov	r3, r0
 8006446:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006448:	e012      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	3324      	adds	r3, #36	; 0x24
 800644e:	2102      	movs	r1, #2
 8006450:	4618      	mov	r0, r3
 8006452:	f000 fd6d 	bl	8006f30 <RCCEx_PLL3_Config>
 8006456:	4603      	mov	r3, r0
 8006458:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800645a:	e009      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	75fb      	strb	r3, [r7, #23]
      break;
 8006460:	e006      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006462:	bf00      	nop
 8006464:	e004      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006466:	bf00      	nop
 8006468:	e002      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800646a:	bf00      	nop
 800646c:	e000      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800646e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006470:	7dfb      	ldrb	r3, [r7, #23]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10a      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006476:	4b2e      	ldr	r3, [pc, #184]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006484:	492a      	ldr	r1, [pc, #168]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006486:	4313      	orrs	r3, r2
 8006488:	658b      	str	r3, [r1, #88]	; 0x58
 800648a:	e001      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648c:	7dfb      	ldrb	r3, [r7, #23]
 800648e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006498:	2b00      	cmp	r3, #0
 800649a:	d04d      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80064a6:	d02e      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80064a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80064ac:	d828      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80064ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b2:	d02a      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80064b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b8:	d822      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80064ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80064be:	d026      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80064c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80064c4:	d81c      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80064c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064ca:	d010      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80064cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064d0:	d816      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d01d      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80064d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064da:	d111      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3304      	adds	r3, #4
 80064e0:	2100      	movs	r1, #0
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fc72 	bl	8006dcc <RCCEx_PLL2_Config>
 80064e8:	4603      	mov	r3, r0
 80064ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80064ec:	e012      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3324      	adds	r3, #36	; 0x24
 80064f2:	2102      	movs	r1, #2
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fd1b 	bl	8006f30 <RCCEx_PLL3_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80064fe:	e009      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	75fb      	strb	r3, [r7, #23]
      break;
 8006504:	e006      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006506:	bf00      	nop
 8006508:	e004      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800650a:	bf00      	nop
 800650c:	e002      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800650e:	bf00      	nop
 8006510:	e000      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006514:	7dfb      	ldrb	r3, [r7, #23]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10c      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800651a:	4b05      	ldr	r3, [pc, #20]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800651c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006528:	4901      	ldr	r1, [pc, #4]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800652a:	4313      	orrs	r3, r2
 800652c:	658b      	str	r3, [r1, #88]	; 0x58
 800652e:	e003      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006530:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006534:	7dfb      	ldrb	r3, [r7, #23]
 8006536:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d018      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800654c:	d10a      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3324      	adds	r3, #36	; 0x24
 8006552:	2102      	movs	r1, #2
 8006554:	4618      	mov	r0, r3
 8006556:	f000 fceb 	bl	8006f30 <RCCEx_PLL3_Config>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006564:	4b8a      	ldr	r3, [pc, #552]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006568:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006570:	4987      	ldr	r1, [pc, #540]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006572:	4313      	orrs	r3, r2
 8006574:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0310 	and.w	r3, r3, #16
 800657e:	2b00      	cmp	r3, #0
 8006580:	d01a      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800658c:	d10a      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3324      	adds	r3, #36	; 0x24
 8006592:	2102      	movs	r1, #2
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fccb 	bl	8006f30 <RCCEx_PLL3_Config>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065a4:	4b7a      	ldr	r3, [pc, #488]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80065a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b2:	4977      	ldr	r1, [pc, #476]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d034      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065ce:	d01d      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80065d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065d4:	d817      	bhi.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80065da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065de:	d009      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065e0:	e011      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3304      	adds	r3, #4
 80065e6:	2100      	movs	r1, #0
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fbef 	bl	8006dcc <RCCEx_PLL2_Config>
 80065ee:	4603      	mov	r3, r0
 80065f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80065f2:	e00c      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3324      	adds	r3, #36	; 0x24
 80065f8:	2102      	movs	r1, #2
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fc98 	bl	8006f30 <RCCEx_PLL3_Config>
 8006600:	4603      	mov	r3, r0
 8006602:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006604:	e003      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	75fb      	strb	r3, [r7, #23]
      break;
 800660a:	e000      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800660c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10a      	bne.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006614:	4b5e      	ldr	r3, [pc, #376]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006618:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006622:	495b      	ldr	r1, [pc, #364]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006624:	4313      	orrs	r3, r2
 8006626:	658b      	str	r3, [r1, #88]	; 0x58
 8006628:	e001      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662a:	7dfb      	ldrb	r3, [r7, #23]
 800662c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d033      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006640:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006644:	d01c      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006646:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800664a:	d816      	bhi.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800664c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006650:	d003      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006652:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006656:	d007      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8006658:	e00f      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800665a:	4b4d      	ldr	r3, [pc, #308]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	4a4c      	ldr	r2, [pc, #304]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006664:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006666:	e00c      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3324      	adds	r3, #36	; 0x24
 800666c:	2101      	movs	r1, #1
 800666e:	4618      	mov	r0, r3
 8006670:	f000 fc5e 	bl	8006f30 <RCCEx_PLL3_Config>
 8006674:	4603      	mov	r3, r0
 8006676:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006678:	e003      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	75fb      	strb	r3, [r7, #23]
      break;
 800667e:	e000      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006682:	7dfb      	ldrb	r3, [r7, #23]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10a      	bne.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006688:	4b41      	ldr	r3, [pc, #260]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800668a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006696:	493e      	ldr	r1, [pc, #248]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006698:	4313      	orrs	r3, r2
 800669a:	654b      	str	r3, [r1, #84]	; 0x54
 800669c:	e001      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800669e:	7dfb      	ldrb	r3, [r7, #23]
 80066a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d029      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80066b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ba:	d007      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80066bc:	e00f      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066be:	4b34      	ldr	r3, [pc, #208]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80066c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c2:	4a33      	ldr	r2, [pc, #204]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80066c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80066ca:	e00b      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3304      	adds	r3, #4
 80066d0:	2102      	movs	r1, #2
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fb7a 	bl	8006dcc <RCCEx_PLL2_Config>
 80066d8:	4603      	mov	r3, r0
 80066da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80066dc:	e002      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	75fb      	strb	r3, [r7, #23]
      break;
 80066e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066e4:	7dfb      	ldrb	r3, [r7, #23]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d109      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80066ea:	4b29      	ldr	r3, [pc, #164]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80066ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f6:	4926      	ldr	r1, [pc, #152]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80066fc:	e001      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fe:	7dfb      	ldrb	r3, [r7, #23]
 8006700:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	3324      	adds	r3, #36	; 0x24
 8006712:	2102      	movs	r1, #2
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fc0b 	bl	8006f30 <RCCEx_PLL3_Config>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d033      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006734:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006738:	d017      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800673a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800673e:	d811      	bhi.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006744:	d013      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8006746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800674a:	d80b      	bhi.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800674c:	2b00      	cmp	r3, #0
 800674e:	d010      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8006750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006754:	d106      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006756:	4b0e      	ldr	r3, [pc, #56]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	4a0d      	ldr	r2, [pc, #52]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800675c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006760:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006762:	e007      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	75fb      	strb	r3, [r7, #23]
      break;
 8006768:	e004      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800676a:	bf00      	nop
 800676c:	e002      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800676e:	bf00      	nop
 8006770:	e000      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8006772:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10c      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800677a:	4b05      	ldr	r3, [pc, #20]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800677c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006786:	4902      	ldr	r1, [pc, #8]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006788:	4313      	orrs	r3, r2
 800678a:	654b      	str	r3, [r1, #84]	; 0x54
 800678c:	e004      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800678e:	bf00      	nop
 8006790:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006794:	7dfb      	ldrb	r3, [r7, #23]
 8006796:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d008      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80067a4:	4b29      	ldr	r3, [pc, #164]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80067a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067b0:	4926      	ldr	r1, [pc, #152]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d008      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067c2:	4b22      	ldr	r3, [pc, #136]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80067c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ce:	491f      	ldr	r1, [pc, #124]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00d      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067e0:	4b1a      	ldr	r3, [pc, #104]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	4a19      	ldr	r2, [pc, #100]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80067e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067ea:	6113      	str	r3, [r2, #16]
 80067ec:	4b17      	ldr	r3, [pc, #92]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80067ee:	691a      	ldr	r2, [r3, #16]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067f6:	4915      	ldr	r1, [pc, #84]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	da08      	bge.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006804:	4b11      	ldr	r3, [pc, #68]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006808:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006810:	490e      	ldr	r1, [pc, #56]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006812:	4313      	orrs	r3, r2
 8006814:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006822:	4b0a      	ldr	r3, [pc, #40]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006826:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006830:	4906      	ldr	r1, [pc, #24]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006832:	4313      	orrs	r3, r2
 8006834:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006836:	7dbb      	ldrb	r3, [r7, #22]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	e000      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
}
 8006842:	4618      	mov	r0, r3
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	58024400 	.word	0x58024400

08006850 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006854:	f7ff f8a6 	bl	80059a4 <HAL_RCC_GetHCLKFreq>
 8006858:	4602      	mov	r2, r0
 800685a:	4b06      	ldr	r3, [pc, #24]	; (8006874 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	091b      	lsrs	r3, r3, #4
 8006860:	f003 0307 	and.w	r3, r3, #7
 8006864:	4904      	ldr	r1, [pc, #16]	; (8006878 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006866:	5ccb      	ldrb	r3, [r1, r3]
 8006868:	f003 031f 	and.w	r3, r3, #31
 800686c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006870:	4618      	mov	r0, r3
 8006872:	bd80      	pop	{r7, pc}
 8006874:	58024400 	.word	0x58024400
 8006878:	0800b194 	.word	0x0800b194

0800687c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800687c:	b480      	push	{r7}
 800687e:	b089      	sub	sp, #36	; 0x24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006884:	4ba1      	ldr	r3, [pc, #644]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006888:	f003 0303 	and.w	r3, r3, #3
 800688c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800688e:	4b9f      	ldr	r3, [pc, #636]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006892:	0b1b      	lsrs	r3, r3, #12
 8006894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006898:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800689a:	4b9c      	ldr	r3, [pc, #624]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800689c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689e:	091b      	lsrs	r3, r3, #4
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80068a6:	4b99      	ldr	r3, [pc, #612]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068aa:	08db      	lsrs	r3, r3, #3
 80068ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	fb02 f303 	mul.w	r3, r2, r3
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8111 	beq.w	8006aec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	f000 8083 	beq.w	80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	f200 80a1 	bhi.w	8006a1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d056      	beq.n	8006994 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80068e6:	e099      	b.n	8006a1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068e8:	4b88      	ldr	r3, [pc, #544]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d02d      	beq.n	8006950 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068f4:	4b85      	ldr	r3, [pc, #532]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	08db      	lsrs	r3, r3, #3
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	4a84      	ldr	r2, [pc, #528]	; (8006b10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006900:	fa22 f303 	lsr.w	r3, r2, r3
 8006904:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	ee07 3a90 	vmov	s15, r3
 800690c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	ee07 3a90 	vmov	s15, r3
 8006916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800691e:	4b7b      	ldr	r3, [pc, #492]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006932:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800693a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800693e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800694a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800694e:	e087      	b.n	8006a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	ee07 3a90 	vmov	s15, r3
 8006956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006b18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800695e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006962:	4b6a      	ldr	r3, [pc, #424]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006972:	ed97 6a03 	vldr	s12, [r7, #12]
 8006976:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800697a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800697e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800698a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006992:	e065      	b.n	8006a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	ee07 3a90 	vmov	s15, r3
 800699a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006b1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80069a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a6:	4b59      	ldr	r3, [pc, #356]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ae:	ee07 3a90 	vmov	s15, r3
 80069b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069d6:	e043      	b.n	8006a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	ee07 3a90 	vmov	s15, r3
 80069de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80069e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ea:	4b48      	ldr	r3, [pc, #288]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80069fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a1a:	e021      	b.n	8006a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	ee07 3a90 	vmov	s15, r3
 8006a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006b1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a2e:	4b37      	ldr	r3, [pc, #220]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a36:	ee07 3a90 	vmov	s15, r3
 8006a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006a60:	4b2a      	ldr	r3, [pc, #168]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	0a5b      	lsrs	r3, r3, #9
 8006a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a86:	ee17 2a90 	vmov	r2, s15
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006a8e:	4b1f      	ldr	r3, [pc, #124]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a92:	0c1b      	lsrs	r3, r3, #16
 8006a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a98:	ee07 3a90 	vmov	s15, r3
 8006a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006aa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006aa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ab4:	ee17 2a90 	vmov	r2, s15
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006abc:	4b13      	ldr	r3, [pc, #76]	; (8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	0e1b      	lsrs	r3, r3, #24
 8006ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ad6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ae2:	ee17 2a90 	vmov	r2, s15
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006aea:	e008      	b.n	8006afe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	609a      	str	r2, [r3, #8]
}
 8006afe:	bf00      	nop
 8006b00:	3724      	adds	r7, #36	; 0x24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	58024400 	.word	0x58024400
 8006b10:	03d09000 	.word	0x03d09000
 8006b14:	46000000 	.word	0x46000000
 8006b18:	4c742400 	.word	0x4c742400
 8006b1c:	4a742400 	.word	0x4a742400
 8006b20:	4bbebc20 	.word	0x4bbebc20

08006b24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b089      	sub	sp, #36	; 0x24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b2c:	4ba1      	ldr	r3, [pc, #644]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b30:	f003 0303 	and.w	r3, r3, #3
 8006b34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006b36:	4b9f      	ldr	r3, [pc, #636]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3a:	0d1b      	lsrs	r3, r3, #20
 8006b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006b42:	4b9c      	ldr	r3, [pc, #624]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	0a1b      	lsrs	r3, r3, #8
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006b4e:	4b99      	ldr	r3, [pc, #612]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b52:	08db      	lsrs	r3, r3, #3
 8006b54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	fb02 f303 	mul.w	r3, r2, r3
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 8111 	beq.w	8006d94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	f000 8083 	beq.w	8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	f200 80a1 	bhi.w	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d056      	beq.n	8006c3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006b8e:	e099      	b.n	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b90:	4b88      	ldr	r3, [pc, #544]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d02d      	beq.n	8006bf8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b9c:	4b85      	ldr	r3, [pc, #532]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	08db      	lsrs	r3, r3, #3
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	4a84      	ldr	r2, [pc, #528]	; (8006db8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	ee07 3a90 	vmov	s15, r3
 8006bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc6:	4b7b      	ldr	r3, [pc, #492]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bda:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bf2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006bf6:	e087      	b.n	8006d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c0a:	4b6a      	ldr	r3, [pc, #424]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c3a:	e065      	b.n	8006d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c4e:	4b59      	ldr	r3, [pc, #356]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c62:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c7e:	e043      	b.n	8006d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c92:	4b48      	ldr	r3, [pc, #288]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ca6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cc2:	e021      	b.n	8006d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	ee07 3a90 	vmov	s15, r3
 8006cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd6:	4b37      	ldr	r3, [pc, #220]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cea:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006d08:	4b2a      	ldr	r3, [pc, #168]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	0a5b      	lsrs	r3, r3, #9
 8006d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d2e:	ee17 2a90 	vmov	r2, s15
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006d36:	4b1f      	ldr	r3, [pc, #124]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	0c1b      	lsrs	r3, r3, #16
 8006d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d40:	ee07 3a90 	vmov	s15, r3
 8006d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d50:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d5c:	ee17 2a90 	vmov	r2, s15
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006d64:	4b13      	ldr	r3, [pc, #76]	; (8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	0e1b      	lsrs	r3, r3, #24
 8006d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d6e:	ee07 3a90 	vmov	s15, r3
 8006d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d8a:	ee17 2a90 	vmov	r2, s15
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006d92:	e008      	b.n	8006da6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	609a      	str	r2, [r3, #8]
}
 8006da6:	bf00      	nop
 8006da8:	3724      	adds	r7, #36	; 0x24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	58024400 	.word	0x58024400
 8006db8:	03d09000 	.word	0x03d09000
 8006dbc:	46000000 	.word	0x46000000
 8006dc0:	4c742400 	.word	0x4c742400
 8006dc4:	4a742400 	.word	0x4a742400
 8006dc8:	4bbebc20 	.word	0x4bbebc20

08006dcc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006dda:	4b53      	ldr	r3, [pc, #332]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dde:	f003 0303 	and.w	r3, r3, #3
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d101      	bne.n	8006dea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e099      	b.n	8006f1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006dea:	4b4f      	ldr	r3, [pc, #316]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a4e      	ldr	r2, [pc, #312]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006df0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006df4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006df6:	f7fa ffb7 	bl	8001d68 <HAL_GetTick>
 8006dfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dfc:	e008      	b.n	8006e10 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006dfe:	f7fa ffb3 	bl	8001d68 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d901      	bls.n	8006e10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e086      	b.n	8006f1e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e10:	4b45      	ldr	r3, [pc, #276]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1f0      	bne.n	8006dfe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006e1c:	4b42      	ldr	r3, [pc, #264]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	031b      	lsls	r3, r3, #12
 8006e2a:	493f      	ldr	r1, [pc, #252]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	628b      	str	r3, [r1, #40]	; 0x28
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	025b      	lsls	r3, r3, #9
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	041b      	lsls	r3, r3, #16
 8006e4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	061b      	lsls	r3, r3, #24
 8006e5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e60:	4931      	ldr	r1, [pc, #196]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e66:	4b30      	ldr	r3, [pc, #192]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	492d      	ldr	r1, [pc, #180]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e78:	4b2b      	ldr	r3, [pc, #172]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7c:	f023 0220 	bic.w	r2, r3, #32
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	4928      	ldr	r1, [pc, #160]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e8a:	4b27      	ldr	r3, [pc, #156]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8e:	4a26      	ldr	r2, [pc, #152]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e90:	f023 0310 	bic.w	r3, r3, #16
 8006e94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e96:	4b24      	ldr	r3, [pc, #144]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006e98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e9a:	4b24      	ldr	r3, [pc, #144]	; (8006f2c <RCCEx_PLL2_Config+0x160>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	69d2      	ldr	r2, [r2, #28]
 8006ea2:	00d2      	lsls	r2, r2, #3
 8006ea4:	4920      	ldr	r1, [pc, #128]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006eaa:	4b1f      	ldr	r3, [pc, #124]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	4a1e      	ldr	r2, [pc, #120]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006eb0:	f043 0310 	orr.w	r3, r3, #16
 8006eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d106      	bne.n	8006eca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006ebc:	4b1a      	ldr	r3, [pc, #104]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	4a19      	ldr	r2, [pc, #100]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006ec2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ec6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ec8:	e00f      	b.n	8006eea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d106      	bne.n	8006ede <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006ed0:	4b15      	ldr	r3, [pc, #84]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	4a14      	ldr	r2, [pc, #80]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006eda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006edc:	e005      	b.n	8006eea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006ede:	4b12      	ldr	r3, [pc, #72]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	4a11      	ldr	r2, [pc, #68]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006ee4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ee8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006eea:	4b0f      	ldr	r3, [pc, #60]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a0e      	ldr	r2, [pc, #56]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006ef0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ef6:	f7fa ff37 	bl	8001d68 <HAL_GetTick>
 8006efa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006efc:	e008      	b.n	8006f10 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006efe:	f7fa ff33 	bl	8001d68 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d901      	bls.n	8006f10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e006      	b.n	8006f1e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f10:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <RCCEx_PLL2_Config+0x15c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d0f0      	beq.n	8006efe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	58024400 	.word	0x58024400
 8006f2c:	ffff0007 	.word	0xffff0007

08006f30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f3e:	4b53      	ldr	r3, [pc, #332]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f42:	f003 0303 	and.w	r3, r3, #3
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d101      	bne.n	8006f4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e099      	b.n	8007082 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006f4e:	4b4f      	ldr	r3, [pc, #316]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a4e      	ldr	r2, [pc, #312]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f5a:	f7fa ff05 	bl	8001d68 <HAL_GetTick>
 8006f5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f60:	e008      	b.n	8006f74 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006f62:	f7fa ff01 	bl	8001d68 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d901      	bls.n	8006f74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e086      	b.n	8007082 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f74:	4b45      	ldr	r3, [pc, #276]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1f0      	bne.n	8006f62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f80:	4b42      	ldr	r3, [pc, #264]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f84:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	051b      	lsls	r3, r3, #20
 8006f8e:	493f      	ldr	r1, [pc, #252]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	628b      	str	r3, [r1, #40]	; 0x28
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	025b      	lsls	r3, r3, #9
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	041b      	lsls	r3, r3, #16
 8006fb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	061b      	lsls	r3, r3, #24
 8006fc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006fc4:	4931      	ldr	r1, [pc, #196]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006fca:	4b30      	ldr	r3, [pc, #192]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	492d      	ldr	r1, [pc, #180]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006fdc:	4b2b      	ldr	r3, [pc, #172]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	4928      	ldr	r1, [pc, #160]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006fee:	4b27      	ldr	r3, [pc, #156]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff2:	4a26      	ldr	r2, [pc, #152]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ffa:	4b24      	ldr	r3, [pc, #144]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8006ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ffe:	4b24      	ldr	r3, [pc, #144]	; (8007090 <RCCEx_PLL3_Config+0x160>)
 8007000:	4013      	ands	r3, r2
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	69d2      	ldr	r2, [r2, #28]
 8007006:	00d2      	lsls	r2, r2, #3
 8007008:	4920      	ldr	r1, [pc, #128]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 800700a:	4313      	orrs	r3, r2
 800700c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800700e:	4b1f      	ldr	r3, [pc, #124]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	4a1e      	ldr	r2, [pc, #120]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007018:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d106      	bne.n	800702e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007020:	4b1a      	ldr	r3, [pc, #104]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007024:	4a19      	ldr	r2, [pc, #100]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007026:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800702a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800702c:	e00f      	b.n	800704e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d106      	bne.n	8007042 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007034:	4b15      	ldr	r3, [pc, #84]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	4a14      	ldr	r2, [pc, #80]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 800703a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800703e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007040:	e005      	b.n	800704e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007042:	4b12      	ldr	r3, [pc, #72]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007046:	4a11      	ldr	r2, [pc, #68]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007048:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800704c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800704e:	4b0f      	ldr	r3, [pc, #60]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a0e      	ldr	r2, [pc, #56]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800705a:	f7fa fe85 	bl	8001d68 <HAL_GetTick>
 800705e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007060:	e008      	b.n	8007074 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007062:	f7fa fe81 	bl	8001d68 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	2b02      	cmp	r3, #2
 800706e:	d901      	bls.n	8007074 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e006      	b.n	8007082 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007074:	4b05      	ldr	r3, [pc, #20]	; (800708c <RCCEx_PLL3_Config+0x15c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d0f0      	beq.n	8007062 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007080:	7bfb      	ldrb	r3, [r7, #15]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	58024400 	.word	0x58024400
 8007090:	ffff0007 	.word	0xffff0007

08007094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e042      	b.n	800712c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d106      	bne.n	80070be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7fa fbd3 	bl	8001864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2224      	movs	r2, #36	; 0x24
 80070c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f022 0201 	bic.w	r2, r2, #1
 80070d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f8c2 	bl	8007260 <UART_SetConfig>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d101      	bne.n	80070e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e022      	b.n	800712c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d002      	beq.n	80070f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 ff22 	bl	8007f38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689a      	ldr	r2, [r3, #8]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f042 0201 	orr.w	r2, r2, #1
 8007122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 ffa9 	bl	800807c <UART_CheckIdleState>
 800712a:	4603      	mov	r3, r0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b08a      	sub	sp, #40	; 0x28
 8007138:	af02      	add	r7, sp, #8
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	603b      	str	r3, [r7, #0]
 8007140:	4613      	mov	r3, r2
 8007142:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800714a:	2b20      	cmp	r3, #32
 800714c:	f040 8083 	bne.w	8007256 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d002      	beq.n	800715c <HAL_UART_Transmit+0x28>
 8007156:	88fb      	ldrh	r3, [r7, #6]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e07b      	b.n	8007258 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007166:	2b01      	cmp	r3, #1
 8007168:	d101      	bne.n	800716e <HAL_UART_Transmit+0x3a>
 800716a:	2302      	movs	r3, #2
 800716c:	e074      	b.n	8007258 <HAL_UART_Transmit+0x124>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2221      	movs	r2, #33	; 0x21
 8007182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007186:	f7fa fdef 	bl	8001d68 <HAL_GetTick>
 800718a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	88fa      	ldrh	r2, [r7, #6]
 8007190:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	88fa      	ldrh	r2, [r7, #6]
 8007198:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a4:	d108      	bne.n	80071b8 <HAL_UART_Transmit+0x84>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d104      	bne.n	80071b8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	61bb      	str	r3, [r7, #24]
 80071b6:	e003      	b.n	80071c0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071bc:	2300      	movs	r3, #0
 80071be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80071c8:	e02c      	b.n	8007224 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2200      	movs	r2, #0
 80071d2:	2180      	movs	r1, #128	; 0x80
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 ff9c 	bl	8008112 <UART_WaitOnFlagUntilTimeout>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e039      	b.n	8007258 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10b      	bne.n	8007202 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	3302      	adds	r3, #2
 80071fe:	61bb      	str	r3, [r7, #24]
 8007200:	e007      	b.n	8007212 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	781a      	ldrb	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	3301      	adds	r3, #1
 8007210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007218:	b29b      	uxth	r3, r3
 800721a:	3b01      	subs	r3, #1
 800721c:	b29a      	uxth	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800722a:	b29b      	uxth	r3, r3
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1cc      	bne.n	80071ca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	2200      	movs	r2, #0
 8007238:	2140      	movs	r1, #64	; 0x40
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 ff69 	bl	8008112 <UART_WaitOnFlagUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e006      	b.n	8007258 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2220      	movs	r2, #32
 800724e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	e000      	b.n	8007258 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007256:	2302      	movs	r3, #2
  }
}
 8007258:	4618      	mov	r0, r3
 800725a:	3720      	adds	r7, #32
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007264:	b092      	sub	sp, #72	; 0x48
 8007266:	af00      	add	r7, sp, #0
 8007268:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	431a      	orrs	r2, r3
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	431a      	orrs	r2, r3
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	69db      	ldr	r3, [r3, #28]
 8007284:	4313      	orrs	r3, r2
 8007286:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	4bbe      	ldr	r3, [pc, #760]	; (8007588 <UART_SetConfig+0x328>)
 8007290:	4013      	ands	r3, r2
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	6812      	ldr	r2, [r2, #0]
 8007296:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007298:	430b      	orrs	r3, r1
 800729a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	68da      	ldr	r2, [r3, #12]
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4ab3      	ldr	r2, [pc, #716]	; (800758c <UART_SetConfig+0x32c>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d004      	beq.n	80072cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072c8:	4313      	orrs	r3, r2
 80072ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	689a      	ldr	r2, [r3, #8]
 80072d2:	4baf      	ldr	r3, [pc, #700]	; (8007590 <UART_SetConfig+0x330>)
 80072d4:	4013      	ands	r3, r2
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	6812      	ldr	r2, [r2, #0]
 80072da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072dc:	430b      	orrs	r3, r1
 80072de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e6:	f023 010f 	bic.w	r1, r3, #15
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4aa6      	ldr	r2, [pc, #664]	; (8007594 <UART_SetConfig+0x334>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d177      	bne.n	80073f0 <UART_SetConfig+0x190>
 8007300:	4ba5      	ldr	r3, [pc, #660]	; (8007598 <UART_SetConfig+0x338>)
 8007302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007304:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007308:	2b28      	cmp	r3, #40	; 0x28
 800730a:	d86d      	bhi.n	80073e8 <UART_SetConfig+0x188>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <UART_SetConfig+0xb4>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	080073b9 	.word	0x080073b9
 8007318:	080073e9 	.word	0x080073e9
 800731c:	080073e9 	.word	0x080073e9
 8007320:	080073e9 	.word	0x080073e9
 8007324:	080073e9 	.word	0x080073e9
 8007328:	080073e9 	.word	0x080073e9
 800732c:	080073e9 	.word	0x080073e9
 8007330:	080073e9 	.word	0x080073e9
 8007334:	080073c1 	.word	0x080073c1
 8007338:	080073e9 	.word	0x080073e9
 800733c:	080073e9 	.word	0x080073e9
 8007340:	080073e9 	.word	0x080073e9
 8007344:	080073e9 	.word	0x080073e9
 8007348:	080073e9 	.word	0x080073e9
 800734c:	080073e9 	.word	0x080073e9
 8007350:	080073e9 	.word	0x080073e9
 8007354:	080073c9 	.word	0x080073c9
 8007358:	080073e9 	.word	0x080073e9
 800735c:	080073e9 	.word	0x080073e9
 8007360:	080073e9 	.word	0x080073e9
 8007364:	080073e9 	.word	0x080073e9
 8007368:	080073e9 	.word	0x080073e9
 800736c:	080073e9 	.word	0x080073e9
 8007370:	080073e9 	.word	0x080073e9
 8007374:	080073d1 	.word	0x080073d1
 8007378:	080073e9 	.word	0x080073e9
 800737c:	080073e9 	.word	0x080073e9
 8007380:	080073e9 	.word	0x080073e9
 8007384:	080073e9 	.word	0x080073e9
 8007388:	080073e9 	.word	0x080073e9
 800738c:	080073e9 	.word	0x080073e9
 8007390:	080073e9 	.word	0x080073e9
 8007394:	080073d9 	.word	0x080073d9
 8007398:	080073e9 	.word	0x080073e9
 800739c:	080073e9 	.word	0x080073e9
 80073a0:	080073e9 	.word	0x080073e9
 80073a4:	080073e9 	.word	0x080073e9
 80073a8:	080073e9 	.word	0x080073e9
 80073ac:	080073e9 	.word	0x080073e9
 80073b0:	080073e9 	.word	0x080073e9
 80073b4:	080073e1 	.word	0x080073e1
 80073b8:	2301      	movs	r3, #1
 80073ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073be:	e326      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80073c0:	2304      	movs	r3, #4
 80073c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073c6:	e322      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80073c8:	2308      	movs	r3, #8
 80073ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ce:	e31e      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80073d0:	2310      	movs	r3, #16
 80073d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073d6:	e31a      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80073d8:	2320      	movs	r3, #32
 80073da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073de:	e316      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80073e0:	2340      	movs	r3, #64	; 0x40
 80073e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073e6:	e312      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80073e8:	2380      	movs	r3, #128	; 0x80
 80073ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ee:	e30e      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a69      	ldr	r2, [pc, #420]	; (800759c <UART_SetConfig+0x33c>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d130      	bne.n	800745c <UART_SetConfig+0x1fc>
 80073fa:	4b67      	ldr	r3, [pc, #412]	; (8007598 <UART_SetConfig+0x338>)
 80073fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fe:	f003 0307 	and.w	r3, r3, #7
 8007402:	2b05      	cmp	r3, #5
 8007404:	d826      	bhi.n	8007454 <UART_SetConfig+0x1f4>
 8007406:	a201      	add	r2, pc, #4	; (adr r2, 800740c <UART_SetConfig+0x1ac>)
 8007408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740c:	08007425 	.word	0x08007425
 8007410:	0800742d 	.word	0x0800742d
 8007414:	08007435 	.word	0x08007435
 8007418:	0800743d 	.word	0x0800743d
 800741c:	08007445 	.word	0x08007445
 8007420:	0800744d 	.word	0x0800744d
 8007424:	2300      	movs	r3, #0
 8007426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800742a:	e2f0      	b.n	8007a0e <UART_SetConfig+0x7ae>
 800742c:	2304      	movs	r3, #4
 800742e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007432:	e2ec      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007434:	2308      	movs	r3, #8
 8007436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800743a:	e2e8      	b.n	8007a0e <UART_SetConfig+0x7ae>
 800743c:	2310      	movs	r3, #16
 800743e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007442:	e2e4      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007444:	2320      	movs	r3, #32
 8007446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800744a:	e2e0      	b.n	8007a0e <UART_SetConfig+0x7ae>
 800744c:	2340      	movs	r3, #64	; 0x40
 800744e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007452:	e2dc      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007454:	2380      	movs	r3, #128	; 0x80
 8007456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800745a:	e2d8      	b.n	8007a0e <UART_SetConfig+0x7ae>
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a4f      	ldr	r2, [pc, #316]	; (80075a0 <UART_SetConfig+0x340>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d130      	bne.n	80074c8 <UART_SetConfig+0x268>
 8007466:	4b4c      	ldr	r3, [pc, #304]	; (8007598 <UART_SetConfig+0x338>)
 8007468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	2b05      	cmp	r3, #5
 8007470:	d826      	bhi.n	80074c0 <UART_SetConfig+0x260>
 8007472:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <UART_SetConfig+0x218>)
 8007474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007478:	08007491 	.word	0x08007491
 800747c:	08007499 	.word	0x08007499
 8007480:	080074a1 	.word	0x080074a1
 8007484:	080074a9 	.word	0x080074a9
 8007488:	080074b1 	.word	0x080074b1
 800748c:	080074b9 	.word	0x080074b9
 8007490:	2300      	movs	r3, #0
 8007492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007496:	e2ba      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007498:	2304      	movs	r3, #4
 800749a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800749e:	e2b6      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80074a0:	2308      	movs	r3, #8
 80074a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074a6:	e2b2      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80074a8:	2310      	movs	r3, #16
 80074aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ae:	e2ae      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80074b0:	2320      	movs	r3, #32
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074b6:	e2aa      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80074b8:	2340      	movs	r3, #64	; 0x40
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074be:	e2a6      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80074c0:	2380      	movs	r3, #128	; 0x80
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074c6:	e2a2      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a35      	ldr	r2, [pc, #212]	; (80075a4 <UART_SetConfig+0x344>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d130      	bne.n	8007534 <UART_SetConfig+0x2d4>
 80074d2:	4b31      	ldr	r3, [pc, #196]	; (8007598 <UART_SetConfig+0x338>)
 80074d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	2b05      	cmp	r3, #5
 80074dc:	d826      	bhi.n	800752c <UART_SetConfig+0x2cc>
 80074de:	a201      	add	r2, pc, #4	; (adr r2, 80074e4 <UART_SetConfig+0x284>)
 80074e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e4:	080074fd 	.word	0x080074fd
 80074e8:	08007505 	.word	0x08007505
 80074ec:	0800750d 	.word	0x0800750d
 80074f0:	08007515 	.word	0x08007515
 80074f4:	0800751d 	.word	0x0800751d
 80074f8:	08007525 	.word	0x08007525
 80074fc:	2300      	movs	r3, #0
 80074fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007502:	e284      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007504:	2304      	movs	r3, #4
 8007506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750a:	e280      	b.n	8007a0e <UART_SetConfig+0x7ae>
 800750c:	2308      	movs	r3, #8
 800750e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007512:	e27c      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007514:	2310      	movs	r3, #16
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751a:	e278      	b.n	8007a0e <UART_SetConfig+0x7ae>
 800751c:	2320      	movs	r3, #32
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007522:	e274      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007524:	2340      	movs	r3, #64	; 0x40
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800752a:	e270      	b.n	8007a0e <UART_SetConfig+0x7ae>
 800752c:	2380      	movs	r3, #128	; 0x80
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007532:	e26c      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a1b      	ldr	r2, [pc, #108]	; (80075a8 <UART_SetConfig+0x348>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d142      	bne.n	80075c4 <UART_SetConfig+0x364>
 800753e:	4b16      	ldr	r3, [pc, #88]	; (8007598 <UART_SetConfig+0x338>)
 8007540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007542:	f003 0307 	and.w	r3, r3, #7
 8007546:	2b05      	cmp	r3, #5
 8007548:	d838      	bhi.n	80075bc <UART_SetConfig+0x35c>
 800754a:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <UART_SetConfig+0x2f0>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	08007569 	.word	0x08007569
 8007554:	08007571 	.word	0x08007571
 8007558:	08007579 	.word	0x08007579
 800755c:	08007581 	.word	0x08007581
 8007560:	080075ad 	.word	0x080075ad
 8007564:	080075b5 	.word	0x080075b5
 8007568:	2300      	movs	r3, #0
 800756a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800756e:	e24e      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007570:	2304      	movs	r3, #4
 8007572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007576:	e24a      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007578:	2308      	movs	r3, #8
 800757a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757e:	e246      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007580:	2310      	movs	r3, #16
 8007582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007586:	e242      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007588:	cfff69f3 	.word	0xcfff69f3
 800758c:	58000c00 	.word	0x58000c00
 8007590:	11fff4ff 	.word	0x11fff4ff
 8007594:	40011000 	.word	0x40011000
 8007598:	58024400 	.word	0x58024400
 800759c:	40004400 	.word	0x40004400
 80075a0:	40004800 	.word	0x40004800
 80075a4:	40004c00 	.word	0x40004c00
 80075a8:	40005000 	.word	0x40005000
 80075ac:	2320      	movs	r3, #32
 80075ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075b2:	e22c      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80075b4:	2340      	movs	r3, #64	; 0x40
 80075b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ba:	e228      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80075bc:	2380      	movs	r3, #128	; 0x80
 80075be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075c2:	e224      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4ab1      	ldr	r2, [pc, #708]	; (8007890 <UART_SetConfig+0x630>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d176      	bne.n	80076bc <UART_SetConfig+0x45c>
 80075ce:	4bb1      	ldr	r3, [pc, #708]	; (8007894 <UART_SetConfig+0x634>)
 80075d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075d6:	2b28      	cmp	r3, #40	; 0x28
 80075d8:	d86c      	bhi.n	80076b4 <UART_SetConfig+0x454>
 80075da:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <UART_SetConfig+0x380>)
 80075dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e0:	08007685 	.word	0x08007685
 80075e4:	080076b5 	.word	0x080076b5
 80075e8:	080076b5 	.word	0x080076b5
 80075ec:	080076b5 	.word	0x080076b5
 80075f0:	080076b5 	.word	0x080076b5
 80075f4:	080076b5 	.word	0x080076b5
 80075f8:	080076b5 	.word	0x080076b5
 80075fc:	080076b5 	.word	0x080076b5
 8007600:	0800768d 	.word	0x0800768d
 8007604:	080076b5 	.word	0x080076b5
 8007608:	080076b5 	.word	0x080076b5
 800760c:	080076b5 	.word	0x080076b5
 8007610:	080076b5 	.word	0x080076b5
 8007614:	080076b5 	.word	0x080076b5
 8007618:	080076b5 	.word	0x080076b5
 800761c:	080076b5 	.word	0x080076b5
 8007620:	08007695 	.word	0x08007695
 8007624:	080076b5 	.word	0x080076b5
 8007628:	080076b5 	.word	0x080076b5
 800762c:	080076b5 	.word	0x080076b5
 8007630:	080076b5 	.word	0x080076b5
 8007634:	080076b5 	.word	0x080076b5
 8007638:	080076b5 	.word	0x080076b5
 800763c:	080076b5 	.word	0x080076b5
 8007640:	0800769d 	.word	0x0800769d
 8007644:	080076b5 	.word	0x080076b5
 8007648:	080076b5 	.word	0x080076b5
 800764c:	080076b5 	.word	0x080076b5
 8007650:	080076b5 	.word	0x080076b5
 8007654:	080076b5 	.word	0x080076b5
 8007658:	080076b5 	.word	0x080076b5
 800765c:	080076b5 	.word	0x080076b5
 8007660:	080076a5 	.word	0x080076a5
 8007664:	080076b5 	.word	0x080076b5
 8007668:	080076b5 	.word	0x080076b5
 800766c:	080076b5 	.word	0x080076b5
 8007670:	080076b5 	.word	0x080076b5
 8007674:	080076b5 	.word	0x080076b5
 8007678:	080076b5 	.word	0x080076b5
 800767c:	080076b5 	.word	0x080076b5
 8007680:	080076ad 	.word	0x080076ad
 8007684:	2301      	movs	r3, #1
 8007686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800768a:	e1c0      	b.n	8007a0e <UART_SetConfig+0x7ae>
 800768c:	2304      	movs	r3, #4
 800768e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007692:	e1bc      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007694:	2308      	movs	r3, #8
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800769a:	e1b8      	b.n	8007a0e <UART_SetConfig+0x7ae>
 800769c:	2310      	movs	r3, #16
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076a2:	e1b4      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80076a4:	2320      	movs	r3, #32
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076aa:	e1b0      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80076ac:	2340      	movs	r3, #64	; 0x40
 80076ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076b2:	e1ac      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80076b4:	2380      	movs	r3, #128	; 0x80
 80076b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ba:	e1a8      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a75      	ldr	r2, [pc, #468]	; (8007898 <UART_SetConfig+0x638>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d130      	bne.n	8007728 <UART_SetConfig+0x4c8>
 80076c6:	4b73      	ldr	r3, [pc, #460]	; (8007894 <UART_SetConfig+0x634>)
 80076c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ca:	f003 0307 	and.w	r3, r3, #7
 80076ce:	2b05      	cmp	r3, #5
 80076d0:	d826      	bhi.n	8007720 <UART_SetConfig+0x4c0>
 80076d2:	a201      	add	r2, pc, #4	; (adr r2, 80076d8 <UART_SetConfig+0x478>)
 80076d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d8:	080076f1 	.word	0x080076f1
 80076dc:	080076f9 	.word	0x080076f9
 80076e0:	08007701 	.word	0x08007701
 80076e4:	08007709 	.word	0x08007709
 80076e8:	08007711 	.word	0x08007711
 80076ec:	08007719 	.word	0x08007719
 80076f0:	2300      	movs	r3, #0
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076f6:	e18a      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80076f8:	2304      	movs	r3, #4
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076fe:	e186      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007700:	2308      	movs	r3, #8
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007706:	e182      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007708:	2310      	movs	r3, #16
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800770e:	e17e      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007710:	2320      	movs	r3, #32
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007716:	e17a      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007718:	2340      	movs	r3, #64	; 0x40
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800771e:	e176      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007720:	2380      	movs	r3, #128	; 0x80
 8007722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007726:	e172      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a5b      	ldr	r2, [pc, #364]	; (800789c <UART_SetConfig+0x63c>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d130      	bne.n	8007794 <UART_SetConfig+0x534>
 8007732:	4b58      	ldr	r3, [pc, #352]	; (8007894 <UART_SetConfig+0x634>)
 8007734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007736:	f003 0307 	and.w	r3, r3, #7
 800773a:	2b05      	cmp	r3, #5
 800773c:	d826      	bhi.n	800778c <UART_SetConfig+0x52c>
 800773e:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <UART_SetConfig+0x4e4>)
 8007740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007744:	0800775d 	.word	0x0800775d
 8007748:	08007765 	.word	0x08007765
 800774c:	0800776d 	.word	0x0800776d
 8007750:	08007775 	.word	0x08007775
 8007754:	0800777d 	.word	0x0800777d
 8007758:	08007785 	.word	0x08007785
 800775c:	2300      	movs	r3, #0
 800775e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007762:	e154      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007764:	2304      	movs	r3, #4
 8007766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800776a:	e150      	b.n	8007a0e <UART_SetConfig+0x7ae>
 800776c:	2308      	movs	r3, #8
 800776e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007772:	e14c      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007774:	2310      	movs	r3, #16
 8007776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800777a:	e148      	b.n	8007a0e <UART_SetConfig+0x7ae>
 800777c:	2320      	movs	r3, #32
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007782:	e144      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007784:	2340      	movs	r3, #64	; 0x40
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800778a:	e140      	b.n	8007a0e <UART_SetConfig+0x7ae>
 800778c:	2380      	movs	r3, #128	; 0x80
 800778e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007792:	e13c      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a41      	ldr	r2, [pc, #260]	; (80078a0 <UART_SetConfig+0x640>)
 800779a:	4293      	cmp	r3, r2
 800779c:	f040 8082 	bne.w	80078a4 <UART_SetConfig+0x644>
 80077a0:	4b3c      	ldr	r3, [pc, #240]	; (8007894 <UART_SetConfig+0x634>)
 80077a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077a8:	2b28      	cmp	r3, #40	; 0x28
 80077aa:	d86d      	bhi.n	8007888 <UART_SetConfig+0x628>
 80077ac:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <UART_SetConfig+0x554>)
 80077ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b2:	bf00      	nop
 80077b4:	08007859 	.word	0x08007859
 80077b8:	08007889 	.word	0x08007889
 80077bc:	08007889 	.word	0x08007889
 80077c0:	08007889 	.word	0x08007889
 80077c4:	08007889 	.word	0x08007889
 80077c8:	08007889 	.word	0x08007889
 80077cc:	08007889 	.word	0x08007889
 80077d0:	08007889 	.word	0x08007889
 80077d4:	08007861 	.word	0x08007861
 80077d8:	08007889 	.word	0x08007889
 80077dc:	08007889 	.word	0x08007889
 80077e0:	08007889 	.word	0x08007889
 80077e4:	08007889 	.word	0x08007889
 80077e8:	08007889 	.word	0x08007889
 80077ec:	08007889 	.word	0x08007889
 80077f0:	08007889 	.word	0x08007889
 80077f4:	08007869 	.word	0x08007869
 80077f8:	08007889 	.word	0x08007889
 80077fc:	08007889 	.word	0x08007889
 8007800:	08007889 	.word	0x08007889
 8007804:	08007889 	.word	0x08007889
 8007808:	08007889 	.word	0x08007889
 800780c:	08007889 	.word	0x08007889
 8007810:	08007889 	.word	0x08007889
 8007814:	08007871 	.word	0x08007871
 8007818:	08007889 	.word	0x08007889
 800781c:	08007889 	.word	0x08007889
 8007820:	08007889 	.word	0x08007889
 8007824:	08007889 	.word	0x08007889
 8007828:	08007889 	.word	0x08007889
 800782c:	08007889 	.word	0x08007889
 8007830:	08007889 	.word	0x08007889
 8007834:	08007879 	.word	0x08007879
 8007838:	08007889 	.word	0x08007889
 800783c:	08007889 	.word	0x08007889
 8007840:	08007889 	.word	0x08007889
 8007844:	08007889 	.word	0x08007889
 8007848:	08007889 	.word	0x08007889
 800784c:	08007889 	.word	0x08007889
 8007850:	08007889 	.word	0x08007889
 8007854:	08007881 	.word	0x08007881
 8007858:	2301      	movs	r3, #1
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800785e:	e0d6      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007860:	2304      	movs	r3, #4
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007866:	e0d2      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007868:	2308      	movs	r3, #8
 800786a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800786e:	e0ce      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007870:	2310      	movs	r3, #16
 8007872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007876:	e0ca      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007878:	2320      	movs	r3, #32
 800787a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800787e:	e0c6      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007880:	2340      	movs	r3, #64	; 0x40
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007886:	e0c2      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007888:	2380      	movs	r3, #128	; 0x80
 800788a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800788e:	e0be      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007890:	40011400 	.word	0x40011400
 8007894:	58024400 	.word	0x58024400
 8007898:	40007800 	.word	0x40007800
 800789c:	40007c00 	.word	0x40007c00
 80078a0:	40011800 	.word	0x40011800
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4aad      	ldr	r2, [pc, #692]	; (8007b60 <UART_SetConfig+0x900>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d176      	bne.n	800799c <UART_SetConfig+0x73c>
 80078ae:	4bad      	ldr	r3, [pc, #692]	; (8007b64 <UART_SetConfig+0x904>)
 80078b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078b6:	2b28      	cmp	r3, #40	; 0x28
 80078b8:	d86c      	bhi.n	8007994 <UART_SetConfig+0x734>
 80078ba:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <UART_SetConfig+0x660>)
 80078bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c0:	08007965 	.word	0x08007965
 80078c4:	08007995 	.word	0x08007995
 80078c8:	08007995 	.word	0x08007995
 80078cc:	08007995 	.word	0x08007995
 80078d0:	08007995 	.word	0x08007995
 80078d4:	08007995 	.word	0x08007995
 80078d8:	08007995 	.word	0x08007995
 80078dc:	08007995 	.word	0x08007995
 80078e0:	0800796d 	.word	0x0800796d
 80078e4:	08007995 	.word	0x08007995
 80078e8:	08007995 	.word	0x08007995
 80078ec:	08007995 	.word	0x08007995
 80078f0:	08007995 	.word	0x08007995
 80078f4:	08007995 	.word	0x08007995
 80078f8:	08007995 	.word	0x08007995
 80078fc:	08007995 	.word	0x08007995
 8007900:	08007975 	.word	0x08007975
 8007904:	08007995 	.word	0x08007995
 8007908:	08007995 	.word	0x08007995
 800790c:	08007995 	.word	0x08007995
 8007910:	08007995 	.word	0x08007995
 8007914:	08007995 	.word	0x08007995
 8007918:	08007995 	.word	0x08007995
 800791c:	08007995 	.word	0x08007995
 8007920:	0800797d 	.word	0x0800797d
 8007924:	08007995 	.word	0x08007995
 8007928:	08007995 	.word	0x08007995
 800792c:	08007995 	.word	0x08007995
 8007930:	08007995 	.word	0x08007995
 8007934:	08007995 	.word	0x08007995
 8007938:	08007995 	.word	0x08007995
 800793c:	08007995 	.word	0x08007995
 8007940:	08007985 	.word	0x08007985
 8007944:	08007995 	.word	0x08007995
 8007948:	08007995 	.word	0x08007995
 800794c:	08007995 	.word	0x08007995
 8007950:	08007995 	.word	0x08007995
 8007954:	08007995 	.word	0x08007995
 8007958:	08007995 	.word	0x08007995
 800795c:	08007995 	.word	0x08007995
 8007960:	0800798d 	.word	0x0800798d
 8007964:	2301      	movs	r3, #1
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800796a:	e050      	b.n	8007a0e <UART_SetConfig+0x7ae>
 800796c:	2304      	movs	r3, #4
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007972:	e04c      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007974:	2308      	movs	r3, #8
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800797a:	e048      	b.n	8007a0e <UART_SetConfig+0x7ae>
 800797c:	2310      	movs	r3, #16
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007982:	e044      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007984:	2320      	movs	r3, #32
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800798a:	e040      	b.n	8007a0e <UART_SetConfig+0x7ae>
 800798c:	2340      	movs	r3, #64	; 0x40
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007992:	e03c      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007994:	2380      	movs	r3, #128	; 0x80
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800799a:	e038      	b.n	8007a0e <UART_SetConfig+0x7ae>
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a71      	ldr	r2, [pc, #452]	; (8007b68 <UART_SetConfig+0x908>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d130      	bne.n	8007a08 <UART_SetConfig+0x7a8>
 80079a6:	4b6f      	ldr	r3, [pc, #444]	; (8007b64 <UART_SetConfig+0x904>)
 80079a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	2b05      	cmp	r3, #5
 80079b0:	d826      	bhi.n	8007a00 <UART_SetConfig+0x7a0>
 80079b2:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <UART_SetConfig+0x758>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	080079d1 	.word	0x080079d1
 80079bc:	080079d9 	.word	0x080079d9
 80079c0:	080079e1 	.word	0x080079e1
 80079c4:	080079e9 	.word	0x080079e9
 80079c8:	080079f1 	.word	0x080079f1
 80079cc:	080079f9 	.word	0x080079f9
 80079d0:	2302      	movs	r3, #2
 80079d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079d6:	e01a      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80079d8:	2304      	movs	r3, #4
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079de:	e016      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80079e0:	2308      	movs	r3, #8
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079e6:	e012      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80079e8:	2310      	movs	r3, #16
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ee:	e00e      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80079f0:	2320      	movs	r3, #32
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079f6:	e00a      	b.n	8007a0e <UART_SetConfig+0x7ae>
 80079f8:	2340      	movs	r3, #64	; 0x40
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079fe:	e006      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007a00:	2380      	movs	r3, #128	; 0x80
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a06:	e002      	b.n	8007a0e <UART_SetConfig+0x7ae>
 8007a08:	2380      	movs	r3, #128	; 0x80
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a55      	ldr	r2, [pc, #340]	; (8007b68 <UART_SetConfig+0x908>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	f040 80f8 	bne.w	8007c0a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a1e:	2b20      	cmp	r3, #32
 8007a20:	dc46      	bgt.n	8007ab0 <UART_SetConfig+0x850>
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	db75      	blt.n	8007b12 <UART_SetConfig+0x8b2>
 8007a26:	3b02      	subs	r3, #2
 8007a28:	2b1e      	cmp	r3, #30
 8007a2a:	d872      	bhi.n	8007b12 <UART_SetConfig+0x8b2>
 8007a2c:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <UART_SetConfig+0x7d4>)
 8007a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a32:	bf00      	nop
 8007a34:	08007ab7 	.word	0x08007ab7
 8007a38:	08007b13 	.word	0x08007b13
 8007a3c:	08007abf 	.word	0x08007abf
 8007a40:	08007b13 	.word	0x08007b13
 8007a44:	08007b13 	.word	0x08007b13
 8007a48:	08007b13 	.word	0x08007b13
 8007a4c:	08007acf 	.word	0x08007acf
 8007a50:	08007b13 	.word	0x08007b13
 8007a54:	08007b13 	.word	0x08007b13
 8007a58:	08007b13 	.word	0x08007b13
 8007a5c:	08007b13 	.word	0x08007b13
 8007a60:	08007b13 	.word	0x08007b13
 8007a64:	08007b13 	.word	0x08007b13
 8007a68:	08007b13 	.word	0x08007b13
 8007a6c:	08007adf 	.word	0x08007adf
 8007a70:	08007b13 	.word	0x08007b13
 8007a74:	08007b13 	.word	0x08007b13
 8007a78:	08007b13 	.word	0x08007b13
 8007a7c:	08007b13 	.word	0x08007b13
 8007a80:	08007b13 	.word	0x08007b13
 8007a84:	08007b13 	.word	0x08007b13
 8007a88:	08007b13 	.word	0x08007b13
 8007a8c:	08007b13 	.word	0x08007b13
 8007a90:	08007b13 	.word	0x08007b13
 8007a94:	08007b13 	.word	0x08007b13
 8007a98:	08007b13 	.word	0x08007b13
 8007a9c:	08007b13 	.word	0x08007b13
 8007aa0:	08007b13 	.word	0x08007b13
 8007aa4:	08007b13 	.word	0x08007b13
 8007aa8:	08007b13 	.word	0x08007b13
 8007aac:	08007b05 	.word	0x08007b05
 8007ab0:	2b40      	cmp	r3, #64	; 0x40
 8007ab2:	d02a      	beq.n	8007b0a <UART_SetConfig+0x8aa>
 8007ab4:	e02d      	b.n	8007b12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007ab6:	f7fe fecb 	bl	8006850 <HAL_RCCEx_GetD3PCLK1Freq>
 8007aba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007abc:	e02f      	b.n	8007b1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fe feda 	bl	800687c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007acc:	e027      	b.n	8007b1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ace:	f107 0318 	add.w	r3, r7, #24
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7ff f826 	bl	8006b24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007adc:	e01f      	b.n	8007b1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ade:	4b21      	ldr	r3, [pc, #132]	; (8007b64 <UART_SetConfig+0x904>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0320 	and.w	r3, r3, #32
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d009      	beq.n	8007afe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007aea:	4b1e      	ldr	r3, [pc, #120]	; (8007b64 <UART_SetConfig+0x904>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	08db      	lsrs	r3, r3, #3
 8007af0:	f003 0303 	and.w	r3, r3, #3
 8007af4:	4a1d      	ldr	r2, [pc, #116]	; (8007b6c <UART_SetConfig+0x90c>)
 8007af6:	fa22 f303 	lsr.w	r3, r2, r3
 8007afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007afc:	e00f      	b.n	8007b1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007afe:	4b1b      	ldr	r3, [pc, #108]	; (8007b6c <UART_SetConfig+0x90c>)
 8007b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b02:	e00c      	b.n	8007b1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b04:	4b1a      	ldr	r3, [pc, #104]	; (8007b70 <UART_SetConfig+0x910>)
 8007b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b08:	e009      	b.n	8007b1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b10:	e005      	b.n	8007b1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007b1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 81ee 	beq.w	8007f02 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	4a12      	ldr	r2, [pc, #72]	; (8007b74 <UART_SetConfig+0x914>)
 8007b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b30:	461a      	mov	r2, r3
 8007b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b34:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b38:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	005b      	lsls	r3, r3, #1
 8007b42:	4413      	add	r3, r2
 8007b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d305      	bcc.n	8007b56 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d910      	bls.n	8007b78 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007b5c:	e1d1      	b.n	8007f02 <UART_SetConfig+0xca2>
 8007b5e:	bf00      	nop
 8007b60:	40011c00 	.word	0x40011c00
 8007b64:	58024400 	.word	0x58024400
 8007b68:	58000c00 	.word	0x58000c00
 8007b6c:	03d09000 	.word	0x03d09000
 8007b70:	003d0900 	.word	0x003d0900
 8007b74:	0800b1a4 	.word	0x0800b1a4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	60bb      	str	r3, [r7, #8]
 8007b7e:	60fa      	str	r2, [r7, #12]
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	4ac0      	ldr	r2, [pc, #768]	; (8007e88 <UART_SetConfig+0xc28>)
 8007b86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	603b      	str	r3, [r7, #0]
 8007b90:	607a      	str	r2, [r7, #4]
 8007b92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b9a:	f7f8 fc11 	bl	80003c0 <__aeabi_uldivmod>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	f04f 0200 	mov.w	r2, #0
 8007baa:	f04f 0300 	mov.w	r3, #0
 8007bae:	020b      	lsls	r3, r1, #8
 8007bb0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007bb4:	0202      	lsls	r2, r0, #8
 8007bb6:	6979      	ldr	r1, [r7, #20]
 8007bb8:	6849      	ldr	r1, [r1, #4]
 8007bba:	0849      	lsrs	r1, r1, #1
 8007bbc:	2000      	movs	r0, #0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	4605      	mov	r5, r0
 8007bc2:	eb12 0804 	adds.w	r8, r2, r4
 8007bc6:	eb43 0905 	adc.w	r9, r3, r5
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	469a      	mov	sl, r3
 8007bd2:	4693      	mov	fp, r2
 8007bd4:	4652      	mov	r2, sl
 8007bd6:	465b      	mov	r3, fp
 8007bd8:	4640      	mov	r0, r8
 8007bda:	4649      	mov	r1, r9
 8007bdc:	f7f8 fbf0 	bl	80003c0 <__aeabi_uldivmod>
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	4613      	mov	r3, r2
 8007be6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bee:	d308      	bcc.n	8007c02 <UART_SetConfig+0x9a2>
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bf6:	d204      	bcs.n	8007c02 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bfe:	60da      	str	r2, [r3, #12]
 8007c00:	e17f      	b.n	8007f02 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007c08:	e17b      	b.n	8007f02 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c12:	f040 80bd 	bne.w	8007d90 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007c16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007c1a:	2b20      	cmp	r3, #32
 8007c1c:	dc48      	bgt.n	8007cb0 <UART_SetConfig+0xa50>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	db7b      	blt.n	8007d1a <UART_SetConfig+0xaba>
 8007c22:	2b20      	cmp	r3, #32
 8007c24:	d879      	bhi.n	8007d1a <UART_SetConfig+0xaba>
 8007c26:	a201      	add	r2, pc, #4	; (adr r2, 8007c2c <UART_SetConfig+0x9cc>)
 8007c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2c:	08007cb7 	.word	0x08007cb7
 8007c30:	08007cbf 	.word	0x08007cbf
 8007c34:	08007d1b 	.word	0x08007d1b
 8007c38:	08007d1b 	.word	0x08007d1b
 8007c3c:	08007cc7 	.word	0x08007cc7
 8007c40:	08007d1b 	.word	0x08007d1b
 8007c44:	08007d1b 	.word	0x08007d1b
 8007c48:	08007d1b 	.word	0x08007d1b
 8007c4c:	08007cd7 	.word	0x08007cd7
 8007c50:	08007d1b 	.word	0x08007d1b
 8007c54:	08007d1b 	.word	0x08007d1b
 8007c58:	08007d1b 	.word	0x08007d1b
 8007c5c:	08007d1b 	.word	0x08007d1b
 8007c60:	08007d1b 	.word	0x08007d1b
 8007c64:	08007d1b 	.word	0x08007d1b
 8007c68:	08007d1b 	.word	0x08007d1b
 8007c6c:	08007ce7 	.word	0x08007ce7
 8007c70:	08007d1b 	.word	0x08007d1b
 8007c74:	08007d1b 	.word	0x08007d1b
 8007c78:	08007d1b 	.word	0x08007d1b
 8007c7c:	08007d1b 	.word	0x08007d1b
 8007c80:	08007d1b 	.word	0x08007d1b
 8007c84:	08007d1b 	.word	0x08007d1b
 8007c88:	08007d1b 	.word	0x08007d1b
 8007c8c:	08007d1b 	.word	0x08007d1b
 8007c90:	08007d1b 	.word	0x08007d1b
 8007c94:	08007d1b 	.word	0x08007d1b
 8007c98:	08007d1b 	.word	0x08007d1b
 8007c9c:	08007d1b 	.word	0x08007d1b
 8007ca0:	08007d1b 	.word	0x08007d1b
 8007ca4:	08007d1b 	.word	0x08007d1b
 8007ca8:	08007d1b 	.word	0x08007d1b
 8007cac:	08007d0d 	.word	0x08007d0d
 8007cb0:	2b40      	cmp	r3, #64	; 0x40
 8007cb2:	d02e      	beq.n	8007d12 <UART_SetConfig+0xab2>
 8007cb4:	e031      	b.n	8007d1a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cb6:	f7fd fea5 	bl	8005a04 <HAL_RCC_GetPCLK1Freq>
 8007cba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007cbc:	e033      	b.n	8007d26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cbe:	f7fd feb7 	bl	8005a30 <HAL_RCC_GetPCLK2Freq>
 8007cc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007cc4:	e02f      	b.n	8007d26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fe fdd6 	bl	800687c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cd4:	e027      	b.n	8007d26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cd6:	f107 0318 	add.w	r3, r7, #24
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fe ff22 	bl	8006b24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ce4:	e01f      	b.n	8007d26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ce6:	4b69      	ldr	r3, [pc, #420]	; (8007e8c <UART_SetConfig+0xc2c>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0320 	and.w	r3, r3, #32
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d009      	beq.n	8007d06 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cf2:	4b66      	ldr	r3, [pc, #408]	; (8007e8c <UART_SetConfig+0xc2c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	08db      	lsrs	r3, r3, #3
 8007cf8:	f003 0303 	and.w	r3, r3, #3
 8007cfc:	4a64      	ldr	r2, [pc, #400]	; (8007e90 <UART_SetConfig+0xc30>)
 8007cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8007d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d04:	e00f      	b.n	8007d26 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007d06:	4b62      	ldr	r3, [pc, #392]	; (8007e90 <UART_SetConfig+0xc30>)
 8007d08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d0a:	e00c      	b.n	8007d26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d0c:	4b61      	ldr	r3, [pc, #388]	; (8007e94 <UART_SetConfig+0xc34>)
 8007d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d10:	e009      	b.n	8007d26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d18:	e005      	b.n	8007d26 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007d24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 80ea 	beq.w	8007f02 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d32:	4a55      	ldr	r2, [pc, #340]	; (8007e88 <UART_SetConfig+0xc28>)
 8007d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d40:	005a      	lsls	r2, r3, #1
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	085b      	lsrs	r3, r3, #1
 8007d48:	441a      	add	r2, r3
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d56:	2b0f      	cmp	r3, #15
 8007d58:	d916      	bls.n	8007d88 <UART_SetConfig+0xb28>
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d60:	d212      	bcs.n	8007d88 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	f023 030f 	bic.w	r3, r3, #15
 8007d6a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6e:	085b      	lsrs	r3, r3, #1
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007d84:	60da      	str	r2, [r3, #12]
 8007d86:	e0bc      	b.n	8007f02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007d8e:	e0b8      	b.n	8007f02 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d94:	2b20      	cmp	r3, #32
 8007d96:	dc4b      	bgt.n	8007e30 <UART_SetConfig+0xbd0>
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f2c0 8087 	blt.w	8007eac <UART_SetConfig+0xc4c>
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	f200 8084 	bhi.w	8007eac <UART_SetConfig+0xc4c>
 8007da4:	a201      	add	r2, pc, #4	; (adr r2, 8007dac <UART_SetConfig+0xb4c>)
 8007da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007daa:	bf00      	nop
 8007dac:	08007e37 	.word	0x08007e37
 8007db0:	08007e3f 	.word	0x08007e3f
 8007db4:	08007ead 	.word	0x08007ead
 8007db8:	08007ead 	.word	0x08007ead
 8007dbc:	08007e47 	.word	0x08007e47
 8007dc0:	08007ead 	.word	0x08007ead
 8007dc4:	08007ead 	.word	0x08007ead
 8007dc8:	08007ead 	.word	0x08007ead
 8007dcc:	08007e57 	.word	0x08007e57
 8007dd0:	08007ead 	.word	0x08007ead
 8007dd4:	08007ead 	.word	0x08007ead
 8007dd8:	08007ead 	.word	0x08007ead
 8007ddc:	08007ead 	.word	0x08007ead
 8007de0:	08007ead 	.word	0x08007ead
 8007de4:	08007ead 	.word	0x08007ead
 8007de8:	08007ead 	.word	0x08007ead
 8007dec:	08007e67 	.word	0x08007e67
 8007df0:	08007ead 	.word	0x08007ead
 8007df4:	08007ead 	.word	0x08007ead
 8007df8:	08007ead 	.word	0x08007ead
 8007dfc:	08007ead 	.word	0x08007ead
 8007e00:	08007ead 	.word	0x08007ead
 8007e04:	08007ead 	.word	0x08007ead
 8007e08:	08007ead 	.word	0x08007ead
 8007e0c:	08007ead 	.word	0x08007ead
 8007e10:	08007ead 	.word	0x08007ead
 8007e14:	08007ead 	.word	0x08007ead
 8007e18:	08007ead 	.word	0x08007ead
 8007e1c:	08007ead 	.word	0x08007ead
 8007e20:	08007ead 	.word	0x08007ead
 8007e24:	08007ead 	.word	0x08007ead
 8007e28:	08007ead 	.word	0x08007ead
 8007e2c:	08007e9f 	.word	0x08007e9f
 8007e30:	2b40      	cmp	r3, #64	; 0x40
 8007e32:	d037      	beq.n	8007ea4 <UART_SetConfig+0xc44>
 8007e34:	e03a      	b.n	8007eac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e36:	f7fd fde5 	bl	8005a04 <HAL_RCC_GetPCLK1Freq>
 8007e3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e3c:	e03c      	b.n	8007eb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e3e:	f7fd fdf7 	bl	8005a30 <HAL_RCC_GetPCLK2Freq>
 8007e42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e44:	e038      	b.n	8007eb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fe fd16 	bl	800687c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e54:	e030      	b.n	8007eb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e56:	f107 0318 	add.w	r3, r7, #24
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fe fe62 	bl	8006b24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e64:	e028      	b.n	8007eb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e66:	4b09      	ldr	r3, [pc, #36]	; (8007e8c <UART_SetConfig+0xc2c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0320 	and.w	r3, r3, #32
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d012      	beq.n	8007e98 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e72:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <UART_SetConfig+0xc2c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	08db      	lsrs	r3, r3, #3
 8007e78:	f003 0303 	and.w	r3, r3, #3
 8007e7c:	4a04      	ldr	r2, [pc, #16]	; (8007e90 <UART_SetConfig+0xc30>)
 8007e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e84:	e018      	b.n	8007eb8 <UART_SetConfig+0xc58>
 8007e86:	bf00      	nop
 8007e88:	0800b1a4 	.word	0x0800b1a4
 8007e8c:	58024400 	.word	0x58024400
 8007e90:	03d09000 	.word	0x03d09000
 8007e94:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007e98:	4b24      	ldr	r3, [pc, #144]	; (8007f2c <UART_SetConfig+0xccc>)
 8007e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e9c:	e00c      	b.n	8007eb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e9e:	4b24      	ldr	r3, [pc, #144]	; (8007f30 <UART_SetConfig+0xcd0>)
 8007ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ea2:	e009      	b.n	8007eb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eaa:	e005      	b.n	8007eb8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007eac:	2300      	movs	r3, #0
 8007eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007eb6:	bf00      	nop
    }

    if (pclk != 0U)
 8007eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d021      	beq.n	8007f02 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	4a1c      	ldr	r2, [pc, #112]	; (8007f34 <UART_SetConfig+0xcd4>)
 8007ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ecc:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	085b      	lsrs	r3, r3, #1
 8007ed6:	441a      	add	r2, r3
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee4:	2b0f      	cmp	r3, #15
 8007ee6:	d909      	bls.n	8007efc <UART_SetConfig+0xc9c>
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eee:	d205      	bcs.n	8007efc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	60da      	str	r2, [r3, #12]
 8007efa:	e002      	b.n	8007f02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2200      	movs	r2, #0
 8007f16:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007f1e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3748      	adds	r7, #72	; 0x48
 8007f26:	46bd      	mov	sp, r7
 8007f28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f2c:	03d09000 	.word	0x03d09000
 8007f30:	003d0900 	.word	0x003d0900
 8007f34:	0800b1a4 	.word	0x0800b1a4

08007f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00a      	beq.n	8007f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f66:	f003 0302 	and.w	r3, r3, #2
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00a      	beq.n	8007f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f88:	f003 0304 	and.w	r3, r3, #4
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00a      	beq.n	8007fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007faa:	f003 0308 	and.w	r3, r3, #8
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00a      	beq.n	8007fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fcc:	f003 0310 	and.w	r3, r3, #16
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00a      	beq.n	8007fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fee:	f003 0320 	and.w	r3, r3, #32
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00a      	beq.n	800800c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01a      	beq.n	800804e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008036:	d10a      	bne.n	800804e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	430a      	orrs	r2, r1
 800806e:	605a      	str	r2, [r3, #4]
  }
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af02      	add	r7, sp, #8
 8008082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800808c:	f7f9 fe6c 	bl	8001d68 <HAL_GetTick>
 8008090:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0308 	and.w	r3, r3, #8
 800809c:	2b08      	cmp	r3, #8
 800809e:	d10e      	bne.n	80080be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f82f 	bl	8008112 <UART_WaitOnFlagUntilTimeout>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e025      	b.n	800810a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	2b04      	cmp	r3, #4
 80080ca:	d10e      	bne.n	80080ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f819 	bl	8008112 <UART_WaitOnFlagUntilTimeout>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e00f      	b.n	800810a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2220      	movs	r2, #32
 80080ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2220      	movs	r2, #32
 80080f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b09c      	sub	sp, #112	; 0x70
 8008116:	af00      	add	r7, sp, #0
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	60b9      	str	r1, [r7, #8]
 800811c:	603b      	str	r3, [r7, #0]
 800811e:	4613      	mov	r3, r2
 8008120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008122:	e0a9      	b.n	8008278 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812a:	f000 80a5 	beq.w	8008278 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800812e:	f7f9 fe1b 	bl	8001d68 <HAL_GetTick>
 8008132:	4602      	mov	r2, r0
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800813a:	429a      	cmp	r2, r3
 800813c:	d302      	bcc.n	8008144 <UART_WaitOnFlagUntilTimeout+0x32>
 800813e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008140:	2b00      	cmp	r3, #0
 8008142:	d140      	bne.n	80081c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008154:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008158:	667b      	str	r3, [r7, #100]	; 0x64
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008162:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008164:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008168:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e6      	bne.n	8008144 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3308      	adds	r3, #8
 800817c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008180:	e853 3f00 	ldrex	r3, [r3]
 8008184:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008188:	f023 0301 	bic.w	r3, r3, #1
 800818c:	663b      	str	r3, [r7, #96]	; 0x60
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3308      	adds	r3, #8
 8008194:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008196:	64ba      	str	r2, [r7, #72]	; 0x48
 8008198:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800819c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800819e:	e841 2300 	strex	r3, r2, [r1]
 80081a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80081a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1e5      	bne.n	8008176 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2220      	movs	r2, #32
 80081ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2220      	movs	r2, #32
 80081b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e069      	b.n	800829a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0304 	and.w	r3, r3, #4
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d051      	beq.n	8008278 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	69db      	ldr	r3, [r3, #28]
 80081da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081e2:	d149      	bne.n	8008278 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f6:	e853 3f00 	ldrex	r3, [r3]
 80081fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008202:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	461a      	mov	r2, r3
 800820a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800820c:	637b      	str	r3, [r7, #52]	; 0x34
 800820e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008210:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008214:	e841 2300 	strex	r3, r2, [r1]
 8008218:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800821a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e6      	bne.n	80081ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3308      	adds	r3, #8
 8008226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	e853 3f00 	ldrex	r3, [r3]
 800822e:	613b      	str	r3, [r7, #16]
   return(result);
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f023 0301 	bic.w	r3, r3, #1
 8008236:	66bb      	str	r3, [r7, #104]	; 0x68
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3308      	adds	r3, #8
 800823e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008240:	623a      	str	r2, [r7, #32]
 8008242:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008244:	69f9      	ldr	r1, [r7, #28]
 8008246:	6a3a      	ldr	r2, [r7, #32]
 8008248:	e841 2300 	strex	r3, r2, [r1]
 800824c:	61bb      	str	r3, [r7, #24]
   return(result);
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1e5      	bne.n	8008220 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2220      	movs	r2, #32
 8008258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2220      	movs	r2, #32
 8008260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2220      	movs	r2, #32
 8008268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008274:	2303      	movs	r3, #3
 8008276:	e010      	b.n	800829a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	69da      	ldr	r2, [r3, #28]
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	4013      	ands	r3, r2
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	429a      	cmp	r2, r3
 8008286:	bf0c      	ite	eq
 8008288:	2301      	moveq	r3, #1
 800828a:	2300      	movne	r3, #0
 800828c:	b2db      	uxtb	r3, r3
 800828e:	461a      	mov	r2, r3
 8008290:	79fb      	ldrb	r3, [r7, #7]
 8008292:	429a      	cmp	r2, r3
 8008294:	f43f af46 	beq.w	8008124 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3770      	adds	r7, #112	; 0x70
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b085      	sub	sp, #20
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d101      	bne.n	80082b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80082b4:	2302      	movs	r3, #2
 80082b6:	e027      	b.n	8008308 <HAL_UARTEx_DisableFifoMode+0x66>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2224      	movs	r2, #36	; 0x24
 80082c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f022 0201 	bic.w	r2, r2, #1
 80082de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80082e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008324:	2b01      	cmp	r3, #1
 8008326:	d101      	bne.n	800832c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008328:	2302      	movs	r3, #2
 800832a:	e02d      	b.n	8008388 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2224      	movs	r2, #36	; 0x24
 8008338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 0201 	bic.w	r2, r2, #1
 8008352:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	430a      	orrs	r2, r1
 8008366:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f84f 	bl	800840c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2220      	movs	r2, #32
 800837a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d101      	bne.n	80083a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083a4:	2302      	movs	r3, #2
 80083a6:	e02d      	b.n	8008404 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2224      	movs	r2, #36	; 0x24
 80083b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 0201 	bic.w	r2, r2, #1
 80083ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	683a      	ldr	r2, [r7, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f811 	bl	800840c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2220      	movs	r2, #32
 80083f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008418:	2b00      	cmp	r3, #0
 800841a:	d108      	bne.n	800842e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800842c:	e031      	b.n	8008492 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800842e:	2310      	movs	r3, #16
 8008430:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008432:	2310      	movs	r3, #16
 8008434:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	0e5b      	lsrs	r3, r3, #25
 800843e:	b2db      	uxtb	r3, r3
 8008440:	f003 0307 	and.w	r3, r3, #7
 8008444:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	0f5b      	lsrs	r3, r3, #29
 800844e:	b2db      	uxtb	r3, r3
 8008450:	f003 0307 	and.w	r3, r3, #7
 8008454:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	7b3a      	ldrb	r2, [r7, #12]
 800845a:	4911      	ldr	r1, [pc, #68]	; (80084a0 <UARTEx_SetNbDataToProcess+0x94>)
 800845c:	5c8a      	ldrb	r2, [r1, r2]
 800845e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008462:	7b3a      	ldrb	r2, [r7, #12]
 8008464:	490f      	ldr	r1, [pc, #60]	; (80084a4 <UARTEx_SetNbDataToProcess+0x98>)
 8008466:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008468:	fb93 f3f2 	sdiv	r3, r3, r2
 800846c:	b29a      	uxth	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008474:	7bfb      	ldrb	r3, [r7, #15]
 8008476:	7b7a      	ldrb	r2, [r7, #13]
 8008478:	4909      	ldr	r1, [pc, #36]	; (80084a0 <UARTEx_SetNbDataToProcess+0x94>)
 800847a:	5c8a      	ldrb	r2, [r1, r2]
 800847c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008480:	7b7a      	ldrb	r2, [r7, #13]
 8008482:	4908      	ldr	r1, [pc, #32]	; (80084a4 <UARTEx_SetNbDataToProcess+0x98>)
 8008484:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008486:	fb93 f3f2 	sdiv	r3, r3, r2
 800848a:	b29a      	uxth	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008492:	bf00      	nop
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	0800b1bc 	.word	0x0800b1bc
 80084a4:	0800b1c4 	.word	0x0800b1c4

080084a8 <TMP117_setup>:
#include "TMP117.h"

#define REV16_A(X) (((X) << 8) | ((X)>>8))

void TMP117_setup(TMP117_dev * dev, I2C_Bus * bus, uint8_t addr)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	4613      	mov	r3, r2
 80084b4:	71fb      	strb	r3, [r7, #7]
	dev->addr = addr;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	79fa      	ldrb	r2, [r7, #7]
 80084ba:	711a      	strb	r2, [r3, #4]
	dev->bus = bus;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	601a      	str	r2, [r3, #0]
}
 80084c2:	bf00      	nop
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
	...

080084d0 <TMP117_read_temperature>:

int32_t TMP117_read_temperature(TMP117_dev * dev, float * temperature) {
 80084d0:	b590      	push	{r4, r7, lr}
 80084d2:	b08b      	sub	sp, #44	; 0x2c
 80084d4:	af02      	add	r7, sp, #8
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
	int16_t data = 0;
 80084da:	2300      	movs	r3, #0
 80084dc:	81bb      	strh	r3, [r7, #12]
	uint16_t addr = (dev->addr << 1) | 0x01;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	791b      	ldrb	r3, [r3, #4]
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	b21b      	sxth	r3, r3
 80084e6:	f043 0301 	orr.w	r3, r3, #1
 80084ea:	b21b      	sxth	r3, r3
 80084ec:	83fb      	strh	r3, [r7, #30]
	int TMP117_RESOLUTION = .1;
 80084ee:	2300      	movs	r3, #0
 80084f0:	61bb      	str	r3, [r7, #24]

	int16_t _offset = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	82fb      	strh	r3, [r7, #22]
	//_offset = TMP117_REG_TEMP_OFFSET;				// Reads from the temperature offset register
	float finalOffset = (float)_offset * TMP117_RESOLUTION; // Multiplies by the resolution for correct offset temperature
 80084f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80084fa:	ee07 3a90 	vmov	s15, r3
 80084fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	ee07 3a90 	vmov	s15, r3
 8008508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800850c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008510:	edc7 7a04 	vstr	s15, [r7, #16]

	int16_t resolutionOffset = _offset / TMP117_RESOLUTION; // Divides by the resolution to send the correct value to the sensor
 8008514:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	fb92 f3f3 	sdiv	r3, r2, r3
 800851e:	81fb      	strh	r3, [r7, #14]
	//TMP117_REG_TEMP_OFFSET, resolutionOffset;   // Writes to the offset temperature register with the new offset value
	//TMP117_REG_TEMP_OFFSET = *resolutionOffset;


	if(dev->bus->read(addr, TMP117_REG_TEMP_RESULT, 2, (uint8_t *)&data, 2) == HAL_OK)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	691c      	ldr	r4, [r3, #16]
 8008526:	f107 030c 	add.w	r3, r7, #12
 800852a:	8bf8      	ldrh	r0, [r7, #30]
 800852c:	2202      	movs	r2, #2
 800852e:	9200      	str	r2, [sp, #0]
 8008530:	2202      	movs	r2, #2
 8008532:	2100      	movs	r1, #0
 8008534:	47a0      	blx	r4
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d128      	bne.n	800858e <TMP117_read_temperature+0xbe>
	{
		if (data == -256) {
 800853c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008540:	f513 7f80 	cmn.w	r3, #256	; 0x100
 8008544:	d101      	bne.n	800854a <TMP117_read_temperature+0x7a>
			//Invalid Data, TMP117 has not done a conversion yet
			return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e025      	b.n	8008596 <TMP117_read_temperature+0xc6>
		}
		data = REV16_A(data); //switch byte order
 800854a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800854e:	021b      	lsls	r3, r3, #8
 8008550:	b21a      	sxth	r2, r3
 8008552:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008556:	121b      	asrs	r3, r3, #8
 8008558:	b21b      	sxth	r3, r3
 800855a:	4313      	orrs	r3, r2
 800855c:	b21b      	sxth	r3, r3
 800855e:	81bb      	strh	r3, [r7, #12]
		*temperature = (((float)data) * TMP117_LSB_TEMP * 0.00078125);
 8008560:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008564:	ee07 3a90 	vmov	s15, r3
 8008568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800856c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80085a8 <TMP117_read_temperature+0xd8>
 8008570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008574:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008578:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80085a0 <TMP117_read_temperature+0xd0>
 800857c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008580:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	edc3 7a00 	vstr	s15, [r3]
		//log_info("float data :%d", data);
		//log_info("tmp lsb:%p", TMP117_LSB_TEMP);
		return HAL_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	e003      	b.n	8008596 <TMP117_read_temperature+0xc6>
	}
	else
	{
		*temperature = -1;
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	4a06      	ldr	r2, [pc, #24]	; (80085ac <TMP117_read_temperature+0xdc>)
 8008592:	601a      	str	r2, [r3, #0]
		return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
	}
	return HAL_ERROR;
}
 8008596:	4618      	mov	r0, r3
 8008598:	3724      	adds	r7, #36	; 0x24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd90      	pop	{r4, r7, pc}
 800859e:	bf00      	nop
 80085a0:	9999999a 	.word	0x9999999a
 80085a4:	3f499999 	.word	0x3f499999
 80085a8:	40fa0000 	.word	0x40fa0000
 80085ac:	bf800000 	.word	0xbf800000

080085b0 <__errno>:
 80085b0:	4b01      	ldr	r3, [pc, #4]	; (80085b8 <__errno+0x8>)
 80085b2:	6818      	ldr	r0, [r3, #0]
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	24000010 	.word	0x24000010

080085bc <__libc_init_array>:
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	4d0d      	ldr	r5, [pc, #52]	; (80085f4 <__libc_init_array+0x38>)
 80085c0:	4c0d      	ldr	r4, [pc, #52]	; (80085f8 <__libc_init_array+0x3c>)
 80085c2:	1b64      	subs	r4, r4, r5
 80085c4:	10a4      	asrs	r4, r4, #2
 80085c6:	2600      	movs	r6, #0
 80085c8:	42a6      	cmp	r6, r4
 80085ca:	d109      	bne.n	80085e0 <__libc_init_array+0x24>
 80085cc:	4d0b      	ldr	r5, [pc, #44]	; (80085fc <__libc_init_array+0x40>)
 80085ce:	4c0c      	ldr	r4, [pc, #48]	; (8008600 <__libc_init_array+0x44>)
 80085d0:	f002 fd32 	bl	800b038 <_init>
 80085d4:	1b64      	subs	r4, r4, r5
 80085d6:	10a4      	asrs	r4, r4, #2
 80085d8:	2600      	movs	r6, #0
 80085da:	42a6      	cmp	r6, r4
 80085dc:	d105      	bne.n	80085ea <__libc_init_array+0x2e>
 80085de:	bd70      	pop	{r4, r5, r6, pc}
 80085e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e4:	4798      	blx	r3
 80085e6:	3601      	adds	r6, #1
 80085e8:	e7ee      	b.n	80085c8 <__libc_init_array+0xc>
 80085ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ee:	4798      	blx	r3
 80085f0:	3601      	adds	r6, #1
 80085f2:	e7f2      	b.n	80085da <__libc_init_array+0x1e>
 80085f4:	0800b5ac 	.word	0x0800b5ac
 80085f8:	0800b5ac 	.word	0x0800b5ac
 80085fc:	0800b5ac 	.word	0x0800b5ac
 8008600:	0800b5b0 	.word	0x0800b5b0

08008604 <memcpy>:
 8008604:	440a      	add	r2, r1
 8008606:	4291      	cmp	r1, r2
 8008608:	f100 33ff 	add.w	r3, r0, #4294967295
 800860c:	d100      	bne.n	8008610 <memcpy+0xc>
 800860e:	4770      	bx	lr
 8008610:	b510      	push	{r4, lr}
 8008612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008616:	f803 4f01 	strb.w	r4, [r3, #1]!
 800861a:	4291      	cmp	r1, r2
 800861c:	d1f9      	bne.n	8008612 <memcpy+0xe>
 800861e:	bd10      	pop	{r4, pc}

08008620 <memset>:
 8008620:	4402      	add	r2, r0
 8008622:	4603      	mov	r3, r0
 8008624:	4293      	cmp	r3, r2
 8008626:	d100      	bne.n	800862a <memset+0xa>
 8008628:	4770      	bx	lr
 800862a:	f803 1b01 	strb.w	r1, [r3], #1
 800862e:	e7f9      	b.n	8008624 <memset+0x4>

08008630 <__cvt>:
 8008630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008632:	ed2d 8b02 	vpush	{d8}
 8008636:	eeb0 8b40 	vmov.f64	d8, d0
 800863a:	b085      	sub	sp, #20
 800863c:	4617      	mov	r7, r2
 800863e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008640:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008642:	ee18 2a90 	vmov	r2, s17
 8008646:	f025 0520 	bic.w	r5, r5, #32
 800864a:	2a00      	cmp	r2, #0
 800864c:	bfb6      	itet	lt
 800864e:	222d      	movlt	r2, #45	; 0x2d
 8008650:	2200      	movge	r2, #0
 8008652:	eeb1 8b40 	vneglt.f64	d8, d0
 8008656:	2d46      	cmp	r5, #70	; 0x46
 8008658:	460c      	mov	r4, r1
 800865a:	701a      	strb	r2, [r3, #0]
 800865c:	d004      	beq.n	8008668 <__cvt+0x38>
 800865e:	2d45      	cmp	r5, #69	; 0x45
 8008660:	d100      	bne.n	8008664 <__cvt+0x34>
 8008662:	3401      	adds	r4, #1
 8008664:	2102      	movs	r1, #2
 8008666:	e000      	b.n	800866a <__cvt+0x3a>
 8008668:	2103      	movs	r1, #3
 800866a:	ab03      	add	r3, sp, #12
 800866c:	9301      	str	r3, [sp, #4]
 800866e:	ab02      	add	r3, sp, #8
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	4622      	mov	r2, r4
 8008674:	4633      	mov	r3, r6
 8008676:	eeb0 0b48 	vmov.f64	d0, d8
 800867a:	f000 fe0d 	bl	8009298 <_dtoa_r>
 800867e:	2d47      	cmp	r5, #71	; 0x47
 8008680:	d101      	bne.n	8008686 <__cvt+0x56>
 8008682:	07fb      	lsls	r3, r7, #31
 8008684:	d51a      	bpl.n	80086bc <__cvt+0x8c>
 8008686:	2d46      	cmp	r5, #70	; 0x46
 8008688:	eb00 0204 	add.w	r2, r0, r4
 800868c:	d10c      	bne.n	80086a8 <__cvt+0x78>
 800868e:	7803      	ldrb	r3, [r0, #0]
 8008690:	2b30      	cmp	r3, #48	; 0x30
 8008692:	d107      	bne.n	80086a4 <__cvt+0x74>
 8008694:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800869c:	bf1c      	itt	ne
 800869e:	f1c4 0401 	rsbne	r4, r4, #1
 80086a2:	6034      	strne	r4, [r6, #0]
 80086a4:	6833      	ldr	r3, [r6, #0]
 80086a6:	441a      	add	r2, r3
 80086a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80086ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086b0:	bf08      	it	eq
 80086b2:	9203      	streq	r2, [sp, #12]
 80086b4:	2130      	movs	r1, #48	; 0x30
 80086b6:	9b03      	ldr	r3, [sp, #12]
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d307      	bcc.n	80086cc <__cvt+0x9c>
 80086bc:	9b03      	ldr	r3, [sp, #12]
 80086be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086c0:	1a1b      	subs	r3, r3, r0
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	b005      	add	sp, #20
 80086c6:	ecbd 8b02 	vpop	{d8}
 80086ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086cc:	1c5c      	adds	r4, r3, #1
 80086ce:	9403      	str	r4, [sp, #12]
 80086d0:	7019      	strb	r1, [r3, #0]
 80086d2:	e7f0      	b.n	80086b6 <__cvt+0x86>

080086d4 <__exponent>:
 80086d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086d6:	4603      	mov	r3, r0
 80086d8:	2900      	cmp	r1, #0
 80086da:	bfb8      	it	lt
 80086dc:	4249      	neglt	r1, r1
 80086de:	f803 2b02 	strb.w	r2, [r3], #2
 80086e2:	bfb4      	ite	lt
 80086e4:	222d      	movlt	r2, #45	; 0x2d
 80086e6:	222b      	movge	r2, #43	; 0x2b
 80086e8:	2909      	cmp	r1, #9
 80086ea:	7042      	strb	r2, [r0, #1]
 80086ec:	dd2a      	ble.n	8008744 <__exponent+0x70>
 80086ee:	f10d 0407 	add.w	r4, sp, #7
 80086f2:	46a4      	mov	ip, r4
 80086f4:	270a      	movs	r7, #10
 80086f6:	46a6      	mov	lr, r4
 80086f8:	460a      	mov	r2, r1
 80086fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80086fe:	fb07 1516 	mls	r5, r7, r6, r1
 8008702:	3530      	adds	r5, #48	; 0x30
 8008704:	2a63      	cmp	r2, #99	; 0x63
 8008706:	f104 34ff 	add.w	r4, r4, #4294967295
 800870a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800870e:	4631      	mov	r1, r6
 8008710:	dcf1      	bgt.n	80086f6 <__exponent+0x22>
 8008712:	3130      	adds	r1, #48	; 0x30
 8008714:	f1ae 0502 	sub.w	r5, lr, #2
 8008718:	f804 1c01 	strb.w	r1, [r4, #-1]
 800871c:	1c44      	adds	r4, r0, #1
 800871e:	4629      	mov	r1, r5
 8008720:	4561      	cmp	r1, ip
 8008722:	d30a      	bcc.n	800873a <__exponent+0x66>
 8008724:	f10d 0209 	add.w	r2, sp, #9
 8008728:	eba2 020e 	sub.w	r2, r2, lr
 800872c:	4565      	cmp	r5, ip
 800872e:	bf88      	it	hi
 8008730:	2200      	movhi	r2, #0
 8008732:	4413      	add	r3, r2
 8008734:	1a18      	subs	r0, r3, r0
 8008736:	b003      	add	sp, #12
 8008738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800873a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800873e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008742:	e7ed      	b.n	8008720 <__exponent+0x4c>
 8008744:	2330      	movs	r3, #48	; 0x30
 8008746:	3130      	adds	r1, #48	; 0x30
 8008748:	7083      	strb	r3, [r0, #2]
 800874a:	70c1      	strb	r1, [r0, #3]
 800874c:	1d03      	adds	r3, r0, #4
 800874e:	e7f1      	b.n	8008734 <__exponent+0x60>

08008750 <_printf_float>:
 8008750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	b08b      	sub	sp, #44	; 0x2c
 8008756:	460c      	mov	r4, r1
 8008758:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800875c:	4616      	mov	r6, r2
 800875e:	461f      	mov	r7, r3
 8008760:	4605      	mov	r5, r0
 8008762:	f001 fcbf 	bl	800a0e4 <_localeconv_r>
 8008766:	f8d0 b000 	ldr.w	fp, [r0]
 800876a:	4658      	mov	r0, fp
 800876c:	f7f7 fdd0 	bl	8000310 <strlen>
 8008770:	2300      	movs	r3, #0
 8008772:	9308      	str	r3, [sp, #32]
 8008774:	f8d8 3000 	ldr.w	r3, [r8]
 8008778:	f894 9018 	ldrb.w	r9, [r4, #24]
 800877c:	6822      	ldr	r2, [r4, #0]
 800877e:	3307      	adds	r3, #7
 8008780:	f023 0307 	bic.w	r3, r3, #7
 8008784:	f103 0108 	add.w	r1, r3, #8
 8008788:	f8c8 1000 	str.w	r1, [r8]
 800878c:	4682      	mov	sl, r0
 800878e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008792:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8008796:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80089f8 <_printf_float+0x2a8>
 800879a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800879e:	eeb0 6bc0 	vabs.f64	d6, d0
 80087a2:	eeb4 6b47 	vcmp.f64	d6, d7
 80087a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087aa:	dd24      	ble.n	80087f6 <_printf_float+0xa6>
 80087ac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80087b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b4:	d502      	bpl.n	80087bc <_printf_float+0x6c>
 80087b6:	232d      	movs	r3, #45	; 0x2d
 80087b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087bc:	4b90      	ldr	r3, [pc, #576]	; (8008a00 <_printf_float+0x2b0>)
 80087be:	4891      	ldr	r0, [pc, #580]	; (8008a04 <_printf_float+0x2b4>)
 80087c0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80087c4:	bf94      	ite	ls
 80087c6:	4698      	movls	r8, r3
 80087c8:	4680      	movhi	r8, r0
 80087ca:	2303      	movs	r3, #3
 80087cc:	6123      	str	r3, [r4, #16]
 80087ce:	f022 0204 	bic.w	r2, r2, #4
 80087d2:	2300      	movs	r3, #0
 80087d4:	6022      	str	r2, [r4, #0]
 80087d6:	9304      	str	r3, [sp, #16]
 80087d8:	9700      	str	r7, [sp, #0]
 80087da:	4633      	mov	r3, r6
 80087dc:	aa09      	add	r2, sp, #36	; 0x24
 80087de:	4621      	mov	r1, r4
 80087e0:	4628      	mov	r0, r5
 80087e2:	f000 f9d3 	bl	8008b8c <_printf_common>
 80087e6:	3001      	adds	r0, #1
 80087e8:	f040 808a 	bne.w	8008900 <_printf_float+0x1b0>
 80087ec:	f04f 30ff 	mov.w	r0, #4294967295
 80087f0:	b00b      	add	sp, #44	; 0x2c
 80087f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f6:	eeb4 0b40 	vcmp.f64	d0, d0
 80087fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087fe:	d709      	bvc.n	8008814 <_printf_float+0xc4>
 8008800:	ee10 3a90 	vmov	r3, s1
 8008804:	2b00      	cmp	r3, #0
 8008806:	bfbc      	itt	lt
 8008808:	232d      	movlt	r3, #45	; 0x2d
 800880a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800880e:	487e      	ldr	r0, [pc, #504]	; (8008a08 <_printf_float+0x2b8>)
 8008810:	4b7e      	ldr	r3, [pc, #504]	; (8008a0c <_printf_float+0x2bc>)
 8008812:	e7d5      	b.n	80087c0 <_printf_float+0x70>
 8008814:	6863      	ldr	r3, [r4, #4]
 8008816:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800881a:	9104      	str	r1, [sp, #16]
 800881c:	1c59      	adds	r1, r3, #1
 800881e:	d13c      	bne.n	800889a <_printf_float+0x14a>
 8008820:	2306      	movs	r3, #6
 8008822:	6063      	str	r3, [r4, #4]
 8008824:	2300      	movs	r3, #0
 8008826:	9303      	str	r3, [sp, #12]
 8008828:	ab08      	add	r3, sp, #32
 800882a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800882e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008832:	ab07      	add	r3, sp, #28
 8008834:	6861      	ldr	r1, [r4, #4]
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	6022      	str	r2, [r4, #0]
 800883a:	f10d 031b 	add.w	r3, sp, #27
 800883e:	4628      	mov	r0, r5
 8008840:	f7ff fef6 	bl	8008630 <__cvt>
 8008844:	9b04      	ldr	r3, [sp, #16]
 8008846:	9907      	ldr	r1, [sp, #28]
 8008848:	2b47      	cmp	r3, #71	; 0x47
 800884a:	4680      	mov	r8, r0
 800884c:	d108      	bne.n	8008860 <_printf_float+0x110>
 800884e:	1cc8      	adds	r0, r1, #3
 8008850:	db02      	blt.n	8008858 <_printf_float+0x108>
 8008852:	6863      	ldr	r3, [r4, #4]
 8008854:	4299      	cmp	r1, r3
 8008856:	dd41      	ble.n	80088dc <_printf_float+0x18c>
 8008858:	f1a9 0902 	sub.w	r9, r9, #2
 800885c:	fa5f f989 	uxtb.w	r9, r9
 8008860:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008864:	d820      	bhi.n	80088a8 <_printf_float+0x158>
 8008866:	3901      	subs	r1, #1
 8008868:	464a      	mov	r2, r9
 800886a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800886e:	9107      	str	r1, [sp, #28]
 8008870:	f7ff ff30 	bl	80086d4 <__exponent>
 8008874:	9a08      	ldr	r2, [sp, #32]
 8008876:	9004      	str	r0, [sp, #16]
 8008878:	1813      	adds	r3, r2, r0
 800887a:	2a01      	cmp	r2, #1
 800887c:	6123      	str	r3, [r4, #16]
 800887e:	dc02      	bgt.n	8008886 <_printf_float+0x136>
 8008880:	6822      	ldr	r2, [r4, #0]
 8008882:	07d2      	lsls	r2, r2, #31
 8008884:	d501      	bpl.n	800888a <_printf_float+0x13a>
 8008886:	3301      	adds	r3, #1
 8008888:	6123      	str	r3, [r4, #16]
 800888a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d0a2      	beq.n	80087d8 <_printf_float+0x88>
 8008892:	232d      	movs	r3, #45	; 0x2d
 8008894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008898:	e79e      	b.n	80087d8 <_printf_float+0x88>
 800889a:	9904      	ldr	r1, [sp, #16]
 800889c:	2947      	cmp	r1, #71	; 0x47
 800889e:	d1c1      	bne.n	8008824 <_printf_float+0xd4>
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1bf      	bne.n	8008824 <_printf_float+0xd4>
 80088a4:	2301      	movs	r3, #1
 80088a6:	e7bc      	b.n	8008822 <_printf_float+0xd2>
 80088a8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80088ac:	d118      	bne.n	80088e0 <_printf_float+0x190>
 80088ae:	2900      	cmp	r1, #0
 80088b0:	6863      	ldr	r3, [r4, #4]
 80088b2:	dd0b      	ble.n	80088cc <_printf_float+0x17c>
 80088b4:	6121      	str	r1, [r4, #16]
 80088b6:	b913      	cbnz	r3, 80088be <_printf_float+0x16e>
 80088b8:	6822      	ldr	r2, [r4, #0]
 80088ba:	07d0      	lsls	r0, r2, #31
 80088bc:	d502      	bpl.n	80088c4 <_printf_float+0x174>
 80088be:	3301      	adds	r3, #1
 80088c0:	440b      	add	r3, r1
 80088c2:	6123      	str	r3, [r4, #16]
 80088c4:	2300      	movs	r3, #0
 80088c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80088c8:	9304      	str	r3, [sp, #16]
 80088ca:	e7de      	b.n	800888a <_printf_float+0x13a>
 80088cc:	b913      	cbnz	r3, 80088d4 <_printf_float+0x184>
 80088ce:	6822      	ldr	r2, [r4, #0]
 80088d0:	07d2      	lsls	r2, r2, #31
 80088d2:	d501      	bpl.n	80088d8 <_printf_float+0x188>
 80088d4:	3302      	adds	r3, #2
 80088d6:	e7f4      	b.n	80088c2 <_printf_float+0x172>
 80088d8:	2301      	movs	r3, #1
 80088da:	e7f2      	b.n	80088c2 <_printf_float+0x172>
 80088dc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80088e0:	9b08      	ldr	r3, [sp, #32]
 80088e2:	4299      	cmp	r1, r3
 80088e4:	db05      	blt.n	80088f2 <_printf_float+0x1a2>
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	6121      	str	r1, [r4, #16]
 80088ea:	07d8      	lsls	r0, r3, #31
 80088ec:	d5ea      	bpl.n	80088c4 <_printf_float+0x174>
 80088ee:	1c4b      	adds	r3, r1, #1
 80088f0:	e7e7      	b.n	80088c2 <_printf_float+0x172>
 80088f2:	2900      	cmp	r1, #0
 80088f4:	bfd4      	ite	le
 80088f6:	f1c1 0202 	rsble	r2, r1, #2
 80088fa:	2201      	movgt	r2, #1
 80088fc:	4413      	add	r3, r2
 80088fe:	e7e0      	b.n	80088c2 <_printf_float+0x172>
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	055a      	lsls	r2, r3, #21
 8008904:	d407      	bmi.n	8008916 <_printf_float+0x1c6>
 8008906:	6923      	ldr	r3, [r4, #16]
 8008908:	4642      	mov	r2, r8
 800890a:	4631      	mov	r1, r6
 800890c:	4628      	mov	r0, r5
 800890e:	47b8      	blx	r7
 8008910:	3001      	adds	r0, #1
 8008912:	d12a      	bne.n	800896a <_printf_float+0x21a>
 8008914:	e76a      	b.n	80087ec <_printf_float+0x9c>
 8008916:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800891a:	f240 80e2 	bls.w	8008ae2 <_printf_float+0x392>
 800891e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008922:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800892a:	d133      	bne.n	8008994 <_printf_float+0x244>
 800892c:	4a38      	ldr	r2, [pc, #224]	; (8008a10 <_printf_float+0x2c0>)
 800892e:	2301      	movs	r3, #1
 8008930:	4631      	mov	r1, r6
 8008932:	4628      	mov	r0, r5
 8008934:	47b8      	blx	r7
 8008936:	3001      	adds	r0, #1
 8008938:	f43f af58 	beq.w	80087ec <_printf_float+0x9c>
 800893c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008940:	429a      	cmp	r2, r3
 8008942:	db02      	blt.n	800894a <_printf_float+0x1fa>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	07d8      	lsls	r0, r3, #31
 8008948:	d50f      	bpl.n	800896a <_printf_float+0x21a>
 800894a:	4653      	mov	r3, sl
 800894c:	465a      	mov	r2, fp
 800894e:	4631      	mov	r1, r6
 8008950:	4628      	mov	r0, r5
 8008952:	47b8      	blx	r7
 8008954:	3001      	adds	r0, #1
 8008956:	f43f af49 	beq.w	80087ec <_printf_float+0x9c>
 800895a:	f04f 0800 	mov.w	r8, #0
 800895e:	f104 091a 	add.w	r9, r4, #26
 8008962:	9b08      	ldr	r3, [sp, #32]
 8008964:	3b01      	subs	r3, #1
 8008966:	4543      	cmp	r3, r8
 8008968:	dc09      	bgt.n	800897e <_printf_float+0x22e>
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	079b      	lsls	r3, r3, #30
 800896e:	f100 8108 	bmi.w	8008b82 <_printf_float+0x432>
 8008972:	68e0      	ldr	r0, [r4, #12]
 8008974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008976:	4298      	cmp	r0, r3
 8008978:	bfb8      	it	lt
 800897a:	4618      	movlt	r0, r3
 800897c:	e738      	b.n	80087f0 <_printf_float+0xa0>
 800897e:	2301      	movs	r3, #1
 8008980:	464a      	mov	r2, r9
 8008982:	4631      	mov	r1, r6
 8008984:	4628      	mov	r0, r5
 8008986:	47b8      	blx	r7
 8008988:	3001      	adds	r0, #1
 800898a:	f43f af2f 	beq.w	80087ec <_printf_float+0x9c>
 800898e:	f108 0801 	add.w	r8, r8, #1
 8008992:	e7e6      	b.n	8008962 <_printf_float+0x212>
 8008994:	9b07      	ldr	r3, [sp, #28]
 8008996:	2b00      	cmp	r3, #0
 8008998:	dc3c      	bgt.n	8008a14 <_printf_float+0x2c4>
 800899a:	4a1d      	ldr	r2, [pc, #116]	; (8008a10 <_printf_float+0x2c0>)
 800899c:	2301      	movs	r3, #1
 800899e:	4631      	mov	r1, r6
 80089a0:	4628      	mov	r0, r5
 80089a2:	47b8      	blx	r7
 80089a4:	3001      	adds	r0, #1
 80089a6:	f43f af21 	beq.w	80087ec <_printf_float+0x9c>
 80089aa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	d102      	bne.n	80089b8 <_printf_float+0x268>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	07d9      	lsls	r1, r3, #31
 80089b6:	d5d8      	bpl.n	800896a <_printf_float+0x21a>
 80089b8:	4653      	mov	r3, sl
 80089ba:	465a      	mov	r2, fp
 80089bc:	4631      	mov	r1, r6
 80089be:	4628      	mov	r0, r5
 80089c0:	47b8      	blx	r7
 80089c2:	3001      	adds	r0, #1
 80089c4:	f43f af12 	beq.w	80087ec <_printf_float+0x9c>
 80089c8:	f04f 0900 	mov.w	r9, #0
 80089cc:	f104 0a1a 	add.w	sl, r4, #26
 80089d0:	9b07      	ldr	r3, [sp, #28]
 80089d2:	425b      	negs	r3, r3
 80089d4:	454b      	cmp	r3, r9
 80089d6:	dc01      	bgt.n	80089dc <_printf_float+0x28c>
 80089d8:	9b08      	ldr	r3, [sp, #32]
 80089da:	e795      	b.n	8008908 <_printf_float+0x1b8>
 80089dc:	2301      	movs	r3, #1
 80089de:	4652      	mov	r2, sl
 80089e0:	4631      	mov	r1, r6
 80089e2:	4628      	mov	r0, r5
 80089e4:	47b8      	blx	r7
 80089e6:	3001      	adds	r0, #1
 80089e8:	f43f af00 	beq.w	80087ec <_printf_float+0x9c>
 80089ec:	f109 0901 	add.w	r9, r9, #1
 80089f0:	e7ee      	b.n	80089d0 <_printf_float+0x280>
 80089f2:	bf00      	nop
 80089f4:	f3af 8000 	nop.w
 80089f8:	ffffffff 	.word	0xffffffff
 80089fc:	7fefffff 	.word	0x7fefffff
 8008a00:	0800b1d0 	.word	0x0800b1d0
 8008a04:	0800b1d4 	.word	0x0800b1d4
 8008a08:	0800b1dc 	.word	0x0800b1dc
 8008a0c:	0800b1d8 	.word	0x0800b1d8
 8008a10:	0800b1e0 	.word	0x0800b1e0
 8008a14:	9a08      	ldr	r2, [sp, #32]
 8008a16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	bfa8      	it	ge
 8008a1c:	461a      	movge	r2, r3
 8008a1e:	2a00      	cmp	r2, #0
 8008a20:	4691      	mov	r9, r2
 8008a22:	dc38      	bgt.n	8008a96 <_printf_float+0x346>
 8008a24:	2300      	movs	r3, #0
 8008a26:	9305      	str	r3, [sp, #20]
 8008a28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a2c:	f104 021a 	add.w	r2, r4, #26
 8008a30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a32:	9905      	ldr	r1, [sp, #20]
 8008a34:	9304      	str	r3, [sp, #16]
 8008a36:	eba3 0309 	sub.w	r3, r3, r9
 8008a3a:	428b      	cmp	r3, r1
 8008a3c:	dc33      	bgt.n	8008aa6 <_printf_float+0x356>
 8008a3e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	db3c      	blt.n	8008ac0 <_printf_float+0x370>
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	07da      	lsls	r2, r3, #31
 8008a4a:	d439      	bmi.n	8008ac0 <_printf_float+0x370>
 8008a4c:	9b08      	ldr	r3, [sp, #32]
 8008a4e:	9a04      	ldr	r2, [sp, #16]
 8008a50:	9907      	ldr	r1, [sp, #28]
 8008a52:	1a9a      	subs	r2, r3, r2
 8008a54:	eba3 0901 	sub.w	r9, r3, r1
 8008a58:	4591      	cmp	r9, r2
 8008a5a:	bfa8      	it	ge
 8008a5c:	4691      	movge	r9, r2
 8008a5e:	f1b9 0f00 	cmp.w	r9, #0
 8008a62:	dc35      	bgt.n	8008ad0 <_printf_float+0x380>
 8008a64:	f04f 0800 	mov.w	r8, #0
 8008a68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a6c:	f104 0a1a 	add.w	sl, r4, #26
 8008a70:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008a74:	1a9b      	subs	r3, r3, r2
 8008a76:	eba3 0309 	sub.w	r3, r3, r9
 8008a7a:	4543      	cmp	r3, r8
 8008a7c:	f77f af75 	ble.w	800896a <_printf_float+0x21a>
 8008a80:	2301      	movs	r3, #1
 8008a82:	4652      	mov	r2, sl
 8008a84:	4631      	mov	r1, r6
 8008a86:	4628      	mov	r0, r5
 8008a88:	47b8      	blx	r7
 8008a8a:	3001      	adds	r0, #1
 8008a8c:	f43f aeae 	beq.w	80087ec <_printf_float+0x9c>
 8008a90:	f108 0801 	add.w	r8, r8, #1
 8008a94:	e7ec      	b.n	8008a70 <_printf_float+0x320>
 8008a96:	4613      	mov	r3, r2
 8008a98:	4631      	mov	r1, r6
 8008a9a:	4642      	mov	r2, r8
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	47b8      	blx	r7
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	d1bf      	bne.n	8008a24 <_printf_float+0x2d4>
 8008aa4:	e6a2      	b.n	80087ec <_printf_float+0x9c>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	4631      	mov	r1, r6
 8008aaa:	4628      	mov	r0, r5
 8008aac:	9204      	str	r2, [sp, #16]
 8008aae:	47b8      	blx	r7
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	f43f ae9b 	beq.w	80087ec <_printf_float+0x9c>
 8008ab6:	9b05      	ldr	r3, [sp, #20]
 8008ab8:	9a04      	ldr	r2, [sp, #16]
 8008aba:	3301      	adds	r3, #1
 8008abc:	9305      	str	r3, [sp, #20]
 8008abe:	e7b7      	b.n	8008a30 <_printf_float+0x2e0>
 8008ac0:	4653      	mov	r3, sl
 8008ac2:	465a      	mov	r2, fp
 8008ac4:	4631      	mov	r1, r6
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	47b8      	blx	r7
 8008aca:	3001      	adds	r0, #1
 8008acc:	d1be      	bne.n	8008a4c <_printf_float+0x2fc>
 8008ace:	e68d      	b.n	80087ec <_printf_float+0x9c>
 8008ad0:	9a04      	ldr	r2, [sp, #16]
 8008ad2:	464b      	mov	r3, r9
 8008ad4:	4442      	add	r2, r8
 8008ad6:	4631      	mov	r1, r6
 8008ad8:	4628      	mov	r0, r5
 8008ada:	47b8      	blx	r7
 8008adc:	3001      	adds	r0, #1
 8008ade:	d1c1      	bne.n	8008a64 <_printf_float+0x314>
 8008ae0:	e684      	b.n	80087ec <_printf_float+0x9c>
 8008ae2:	9a08      	ldr	r2, [sp, #32]
 8008ae4:	2a01      	cmp	r2, #1
 8008ae6:	dc01      	bgt.n	8008aec <_printf_float+0x39c>
 8008ae8:	07db      	lsls	r3, r3, #31
 8008aea:	d537      	bpl.n	8008b5c <_printf_float+0x40c>
 8008aec:	2301      	movs	r3, #1
 8008aee:	4642      	mov	r2, r8
 8008af0:	4631      	mov	r1, r6
 8008af2:	4628      	mov	r0, r5
 8008af4:	47b8      	blx	r7
 8008af6:	3001      	adds	r0, #1
 8008af8:	f43f ae78 	beq.w	80087ec <_printf_float+0x9c>
 8008afc:	4653      	mov	r3, sl
 8008afe:	465a      	mov	r2, fp
 8008b00:	4631      	mov	r1, r6
 8008b02:	4628      	mov	r0, r5
 8008b04:	47b8      	blx	r7
 8008b06:	3001      	adds	r0, #1
 8008b08:	f43f ae70 	beq.w	80087ec <_printf_float+0x9c>
 8008b0c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008b10:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b18:	d01b      	beq.n	8008b52 <_printf_float+0x402>
 8008b1a:	9b08      	ldr	r3, [sp, #32]
 8008b1c:	f108 0201 	add.w	r2, r8, #1
 8008b20:	3b01      	subs	r3, #1
 8008b22:	4631      	mov	r1, r6
 8008b24:	4628      	mov	r0, r5
 8008b26:	47b8      	blx	r7
 8008b28:	3001      	adds	r0, #1
 8008b2a:	d10e      	bne.n	8008b4a <_printf_float+0x3fa>
 8008b2c:	e65e      	b.n	80087ec <_printf_float+0x9c>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	464a      	mov	r2, r9
 8008b32:	4631      	mov	r1, r6
 8008b34:	4628      	mov	r0, r5
 8008b36:	47b8      	blx	r7
 8008b38:	3001      	adds	r0, #1
 8008b3a:	f43f ae57 	beq.w	80087ec <_printf_float+0x9c>
 8008b3e:	f108 0801 	add.w	r8, r8, #1
 8008b42:	9b08      	ldr	r3, [sp, #32]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	4543      	cmp	r3, r8
 8008b48:	dcf1      	bgt.n	8008b2e <_printf_float+0x3de>
 8008b4a:	9b04      	ldr	r3, [sp, #16]
 8008b4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b50:	e6db      	b.n	800890a <_printf_float+0x1ba>
 8008b52:	f04f 0800 	mov.w	r8, #0
 8008b56:	f104 091a 	add.w	r9, r4, #26
 8008b5a:	e7f2      	b.n	8008b42 <_printf_float+0x3f2>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	4642      	mov	r2, r8
 8008b60:	e7df      	b.n	8008b22 <_printf_float+0x3d2>
 8008b62:	2301      	movs	r3, #1
 8008b64:	464a      	mov	r2, r9
 8008b66:	4631      	mov	r1, r6
 8008b68:	4628      	mov	r0, r5
 8008b6a:	47b8      	blx	r7
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	f43f ae3d 	beq.w	80087ec <_printf_float+0x9c>
 8008b72:	f108 0801 	add.w	r8, r8, #1
 8008b76:	68e3      	ldr	r3, [r4, #12]
 8008b78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b7a:	1a5b      	subs	r3, r3, r1
 8008b7c:	4543      	cmp	r3, r8
 8008b7e:	dcf0      	bgt.n	8008b62 <_printf_float+0x412>
 8008b80:	e6f7      	b.n	8008972 <_printf_float+0x222>
 8008b82:	f04f 0800 	mov.w	r8, #0
 8008b86:	f104 0919 	add.w	r9, r4, #25
 8008b8a:	e7f4      	b.n	8008b76 <_printf_float+0x426>

08008b8c <_printf_common>:
 8008b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b90:	4616      	mov	r6, r2
 8008b92:	4699      	mov	r9, r3
 8008b94:	688a      	ldr	r2, [r1, #8]
 8008b96:	690b      	ldr	r3, [r1, #16]
 8008b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	bfb8      	it	lt
 8008ba0:	4613      	movlt	r3, r2
 8008ba2:	6033      	str	r3, [r6, #0]
 8008ba4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ba8:	4607      	mov	r7, r0
 8008baa:	460c      	mov	r4, r1
 8008bac:	b10a      	cbz	r2, 8008bb2 <_printf_common+0x26>
 8008bae:	3301      	adds	r3, #1
 8008bb0:	6033      	str	r3, [r6, #0]
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	0699      	lsls	r1, r3, #26
 8008bb6:	bf42      	ittt	mi
 8008bb8:	6833      	ldrmi	r3, [r6, #0]
 8008bba:	3302      	addmi	r3, #2
 8008bbc:	6033      	strmi	r3, [r6, #0]
 8008bbe:	6825      	ldr	r5, [r4, #0]
 8008bc0:	f015 0506 	ands.w	r5, r5, #6
 8008bc4:	d106      	bne.n	8008bd4 <_printf_common+0x48>
 8008bc6:	f104 0a19 	add.w	sl, r4, #25
 8008bca:	68e3      	ldr	r3, [r4, #12]
 8008bcc:	6832      	ldr	r2, [r6, #0]
 8008bce:	1a9b      	subs	r3, r3, r2
 8008bd0:	42ab      	cmp	r3, r5
 8008bd2:	dc26      	bgt.n	8008c22 <_printf_common+0x96>
 8008bd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bd8:	1e13      	subs	r3, r2, #0
 8008bda:	6822      	ldr	r2, [r4, #0]
 8008bdc:	bf18      	it	ne
 8008bde:	2301      	movne	r3, #1
 8008be0:	0692      	lsls	r2, r2, #26
 8008be2:	d42b      	bmi.n	8008c3c <_printf_common+0xb0>
 8008be4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008be8:	4649      	mov	r1, r9
 8008bea:	4638      	mov	r0, r7
 8008bec:	47c0      	blx	r8
 8008bee:	3001      	adds	r0, #1
 8008bf0:	d01e      	beq.n	8008c30 <_printf_common+0xa4>
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	68e5      	ldr	r5, [r4, #12]
 8008bf6:	6832      	ldr	r2, [r6, #0]
 8008bf8:	f003 0306 	and.w	r3, r3, #6
 8008bfc:	2b04      	cmp	r3, #4
 8008bfe:	bf08      	it	eq
 8008c00:	1aad      	subeq	r5, r5, r2
 8008c02:	68a3      	ldr	r3, [r4, #8]
 8008c04:	6922      	ldr	r2, [r4, #16]
 8008c06:	bf0c      	ite	eq
 8008c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c0c:	2500      	movne	r5, #0
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	bfc4      	itt	gt
 8008c12:	1a9b      	subgt	r3, r3, r2
 8008c14:	18ed      	addgt	r5, r5, r3
 8008c16:	2600      	movs	r6, #0
 8008c18:	341a      	adds	r4, #26
 8008c1a:	42b5      	cmp	r5, r6
 8008c1c:	d11a      	bne.n	8008c54 <_printf_common+0xc8>
 8008c1e:	2000      	movs	r0, #0
 8008c20:	e008      	b.n	8008c34 <_printf_common+0xa8>
 8008c22:	2301      	movs	r3, #1
 8008c24:	4652      	mov	r2, sl
 8008c26:	4649      	mov	r1, r9
 8008c28:	4638      	mov	r0, r7
 8008c2a:	47c0      	blx	r8
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d103      	bne.n	8008c38 <_printf_common+0xac>
 8008c30:	f04f 30ff 	mov.w	r0, #4294967295
 8008c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c38:	3501      	adds	r5, #1
 8008c3a:	e7c6      	b.n	8008bca <_printf_common+0x3e>
 8008c3c:	18e1      	adds	r1, r4, r3
 8008c3e:	1c5a      	adds	r2, r3, #1
 8008c40:	2030      	movs	r0, #48	; 0x30
 8008c42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c46:	4422      	add	r2, r4
 8008c48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c50:	3302      	adds	r3, #2
 8008c52:	e7c7      	b.n	8008be4 <_printf_common+0x58>
 8008c54:	2301      	movs	r3, #1
 8008c56:	4622      	mov	r2, r4
 8008c58:	4649      	mov	r1, r9
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	47c0      	blx	r8
 8008c5e:	3001      	adds	r0, #1
 8008c60:	d0e6      	beq.n	8008c30 <_printf_common+0xa4>
 8008c62:	3601      	adds	r6, #1
 8008c64:	e7d9      	b.n	8008c1a <_printf_common+0x8e>
	...

08008c68 <_printf_i>:
 8008c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c6c:	7e0f      	ldrb	r7, [r1, #24]
 8008c6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c70:	2f78      	cmp	r7, #120	; 0x78
 8008c72:	4691      	mov	r9, r2
 8008c74:	4680      	mov	r8, r0
 8008c76:	460c      	mov	r4, r1
 8008c78:	469a      	mov	sl, r3
 8008c7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c7e:	d807      	bhi.n	8008c90 <_printf_i+0x28>
 8008c80:	2f62      	cmp	r7, #98	; 0x62
 8008c82:	d80a      	bhi.n	8008c9a <_printf_i+0x32>
 8008c84:	2f00      	cmp	r7, #0
 8008c86:	f000 80d8 	beq.w	8008e3a <_printf_i+0x1d2>
 8008c8a:	2f58      	cmp	r7, #88	; 0x58
 8008c8c:	f000 80a3 	beq.w	8008dd6 <_printf_i+0x16e>
 8008c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c98:	e03a      	b.n	8008d10 <_printf_i+0xa8>
 8008c9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c9e:	2b15      	cmp	r3, #21
 8008ca0:	d8f6      	bhi.n	8008c90 <_printf_i+0x28>
 8008ca2:	a101      	add	r1, pc, #4	; (adr r1, 8008ca8 <_printf_i+0x40>)
 8008ca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ca8:	08008d01 	.word	0x08008d01
 8008cac:	08008d15 	.word	0x08008d15
 8008cb0:	08008c91 	.word	0x08008c91
 8008cb4:	08008c91 	.word	0x08008c91
 8008cb8:	08008c91 	.word	0x08008c91
 8008cbc:	08008c91 	.word	0x08008c91
 8008cc0:	08008d15 	.word	0x08008d15
 8008cc4:	08008c91 	.word	0x08008c91
 8008cc8:	08008c91 	.word	0x08008c91
 8008ccc:	08008c91 	.word	0x08008c91
 8008cd0:	08008c91 	.word	0x08008c91
 8008cd4:	08008e21 	.word	0x08008e21
 8008cd8:	08008d45 	.word	0x08008d45
 8008cdc:	08008e03 	.word	0x08008e03
 8008ce0:	08008c91 	.word	0x08008c91
 8008ce4:	08008c91 	.word	0x08008c91
 8008ce8:	08008e43 	.word	0x08008e43
 8008cec:	08008c91 	.word	0x08008c91
 8008cf0:	08008d45 	.word	0x08008d45
 8008cf4:	08008c91 	.word	0x08008c91
 8008cf8:	08008c91 	.word	0x08008c91
 8008cfc:	08008e0b 	.word	0x08008e0b
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	1d1a      	adds	r2, r3, #4
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	602a      	str	r2, [r5, #0]
 8008d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d10:	2301      	movs	r3, #1
 8008d12:	e0a3      	b.n	8008e5c <_printf_i+0x1f4>
 8008d14:	6820      	ldr	r0, [r4, #0]
 8008d16:	6829      	ldr	r1, [r5, #0]
 8008d18:	0606      	lsls	r6, r0, #24
 8008d1a:	f101 0304 	add.w	r3, r1, #4
 8008d1e:	d50a      	bpl.n	8008d36 <_printf_i+0xce>
 8008d20:	680e      	ldr	r6, [r1, #0]
 8008d22:	602b      	str	r3, [r5, #0]
 8008d24:	2e00      	cmp	r6, #0
 8008d26:	da03      	bge.n	8008d30 <_printf_i+0xc8>
 8008d28:	232d      	movs	r3, #45	; 0x2d
 8008d2a:	4276      	negs	r6, r6
 8008d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d30:	485e      	ldr	r0, [pc, #376]	; (8008eac <_printf_i+0x244>)
 8008d32:	230a      	movs	r3, #10
 8008d34:	e019      	b.n	8008d6a <_printf_i+0x102>
 8008d36:	680e      	ldr	r6, [r1, #0]
 8008d38:	602b      	str	r3, [r5, #0]
 8008d3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d3e:	bf18      	it	ne
 8008d40:	b236      	sxthne	r6, r6
 8008d42:	e7ef      	b.n	8008d24 <_printf_i+0xbc>
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	6820      	ldr	r0, [r4, #0]
 8008d48:	1d19      	adds	r1, r3, #4
 8008d4a:	6029      	str	r1, [r5, #0]
 8008d4c:	0601      	lsls	r1, r0, #24
 8008d4e:	d501      	bpl.n	8008d54 <_printf_i+0xec>
 8008d50:	681e      	ldr	r6, [r3, #0]
 8008d52:	e002      	b.n	8008d5a <_printf_i+0xf2>
 8008d54:	0646      	lsls	r6, r0, #25
 8008d56:	d5fb      	bpl.n	8008d50 <_printf_i+0xe8>
 8008d58:	881e      	ldrh	r6, [r3, #0]
 8008d5a:	4854      	ldr	r0, [pc, #336]	; (8008eac <_printf_i+0x244>)
 8008d5c:	2f6f      	cmp	r7, #111	; 0x6f
 8008d5e:	bf0c      	ite	eq
 8008d60:	2308      	moveq	r3, #8
 8008d62:	230a      	movne	r3, #10
 8008d64:	2100      	movs	r1, #0
 8008d66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d6a:	6865      	ldr	r5, [r4, #4]
 8008d6c:	60a5      	str	r5, [r4, #8]
 8008d6e:	2d00      	cmp	r5, #0
 8008d70:	bfa2      	ittt	ge
 8008d72:	6821      	ldrge	r1, [r4, #0]
 8008d74:	f021 0104 	bicge.w	r1, r1, #4
 8008d78:	6021      	strge	r1, [r4, #0]
 8008d7a:	b90e      	cbnz	r6, 8008d80 <_printf_i+0x118>
 8008d7c:	2d00      	cmp	r5, #0
 8008d7e:	d04d      	beq.n	8008e1c <_printf_i+0x1b4>
 8008d80:	4615      	mov	r5, r2
 8008d82:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d86:	fb03 6711 	mls	r7, r3, r1, r6
 8008d8a:	5dc7      	ldrb	r7, [r0, r7]
 8008d8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d90:	4637      	mov	r7, r6
 8008d92:	42bb      	cmp	r3, r7
 8008d94:	460e      	mov	r6, r1
 8008d96:	d9f4      	bls.n	8008d82 <_printf_i+0x11a>
 8008d98:	2b08      	cmp	r3, #8
 8008d9a:	d10b      	bne.n	8008db4 <_printf_i+0x14c>
 8008d9c:	6823      	ldr	r3, [r4, #0]
 8008d9e:	07de      	lsls	r6, r3, #31
 8008da0:	d508      	bpl.n	8008db4 <_printf_i+0x14c>
 8008da2:	6923      	ldr	r3, [r4, #16]
 8008da4:	6861      	ldr	r1, [r4, #4]
 8008da6:	4299      	cmp	r1, r3
 8008da8:	bfde      	ittt	le
 8008daa:	2330      	movle	r3, #48	; 0x30
 8008dac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008db0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008db4:	1b52      	subs	r2, r2, r5
 8008db6:	6122      	str	r2, [r4, #16]
 8008db8:	f8cd a000 	str.w	sl, [sp]
 8008dbc:	464b      	mov	r3, r9
 8008dbe:	aa03      	add	r2, sp, #12
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	4640      	mov	r0, r8
 8008dc4:	f7ff fee2 	bl	8008b8c <_printf_common>
 8008dc8:	3001      	adds	r0, #1
 8008dca:	d14c      	bne.n	8008e66 <_printf_i+0x1fe>
 8008dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd0:	b004      	add	sp, #16
 8008dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dd6:	4835      	ldr	r0, [pc, #212]	; (8008eac <_printf_i+0x244>)
 8008dd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ddc:	6829      	ldr	r1, [r5, #0]
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008de4:	6029      	str	r1, [r5, #0]
 8008de6:	061d      	lsls	r5, r3, #24
 8008de8:	d514      	bpl.n	8008e14 <_printf_i+0x1ac>
 8008dea:	07df      	lsls	r7, r3, #31
 8008dec:	bf44      	itt	mi
 8008dee:	f043 0320 	orrmi.w	r3, r3, #32
 8008df2:	6023      	strmi	r3, [r4, #0]
 8008df4:	b91e      	cbnz	r6, 8008dfe <_printf_i+0x196>
 8008df6:	6823      	ldr	r3, [r4, #0]
 8008df8:	f023 0320 	bic.w	r3, r3, #32
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	2310      	movs	r3, #16
 8008e00:	e7b0      	b.n	8008d64 <_printf_i+0xfc>
 8008e02:	6823      	ldr	r3, [r4, #0]
 8008e04:	f043 0320 	orr.w	r3, r3, #32
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	2378      	movs	r3, #120	; 0x78
 8008e0c:	4828      	ldr	r0, [pc, #160]	; (8008eb0 <_printf_i+0x248>)
 8008e0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e12:	e7e3      	b.n	8008ddc <_printf_i+0x174>
 8008e14:	0659      	lsls	r1, r3, #25
 8008e16:	bf48      	it	mi
 8008e18:	b2b6      	uxthmi	r6, r6
 8008e1a:	e7e6      	b.n	8008dea <_printf_i+0x182>
 8008e1c:	4615      	mov	r5, r2
 8008e1e:	e7bb      	b.n	8008d98 <_printf_i+0x130>
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	6826      	ldr	r6, [r4, #0]
 8008e24:	6961      	ldr	r1, [r4, #20]
 8008e26:	1d18      	adds	r0, r3, #4
 8008e28:	6028      	str	r0, [r5, #0]
 8008e2a:	0635      	lsls	r5, r6, #24
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	d501      	bpl.n	8008e34 <_printf_i+0x1cc>
 8008e30:	6019      	str	r1, [r3, #0]
 8008e32:	e002      	b.n	8008e3a <_printf_i+0x1d2>
 8008e34:	0670      	lsls	r0, r6, #25
 8008e36:	d5fb      	bpl.n	8008e30 <_printf_i+0x1c8>
 8008e38:	8019      	strh	r1, [r3, #0]
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	6123      	str	r3, [r4, #16]
 8008e3e:	4615      	mov	r5, r2
 8008e40:	e7ba      	b.n	8008db8 <_printf_i+0x150>
 8008e42:	682b      	ldr	r3, [r5, #0]
 8008e44:	1d1a      	adds	r2, r3, #4
 8008e46:	602a      	str	r2, [r5, #0]
 8008e48:	681d      	ldr	r5, [r3, #0]
 8008e4a:	6862      	ldr	r2, [r4, #4]
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	4628      	mov	r0, r5
 8008e50:	f7f7 fa66 	bl	8000320 <memchr>
 8008e54:	b108      	cbz	r0, 8008e5a <_printf_i+0x1f2>
 8008e56:	1b40      	subs	r0, r0, r5
 8008e58:	6060      	str	r0, [r4, #4]
 8008e5a:	6863      	ldr	r3, [r4, #4]
 8008e5c:	6123      	str	r3, [r4, #16]
 8008e5e:	2300      	movs	r3, #0
 8008e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e64:	e7a8      	b.n	8008db8 <_printf_i+0x150>
 8008e66:	6923      	ldr	r3, [r4, #16]
 8008e68:	462a      	mov	r2, r5
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	4640      	mov	r0, r8
 8008e6e:	47d0      	blx	sl
 8008e70:	3001      	adds	r0, #1
 8008e72:	d0ab      	beq.n	8008dcc <_printf_i+0x164>
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	079b      	lsls	r3, r3, #30
 8008e78:	d413      	bmi.n	8008ea2 <_printf_i+0x23a>
 8008e7a:	68e0      	ldr	r0, [r4, #12]
 8008e7c:	9b03      	ldr	r3, [sp, #12]
 8008e7e:	4298      	cmp	r0, r3
 8008e80:	bfb8      	it	lt
 8008e82:	4618      	movlt	r0, r3
 8008e84:	e7a4      	b.n	8008dd0 <_printf_i+0x168>
 8008e86:	2301      	movs	r3, #1
 8008e88:	4632      	mov	r2, r6
 8008e8a:	4649      	mov	r1, r9
 8008e8c:	4640      	mov	r0, r8
 8008e8e:	47d0      	blx	sl
 8008e90:	3001      	adds	r0, #1
 8008e92:	d09b      	beq.n	8008dcc <_printf_i+0x164>
 8008e94:	3501      	adds	r5, #1
 8008e96:	68e3      	ldr	r3, [r4, #12]
 8008e98:	9903      	ldr	r1, [sp, #12]
 8008e9a:	1a5b      	subs	r3, r3, r1
 8008e9c:	42ab      	cmp	r3, r5
 8008e9e:	dcf2      	bgt.n	8008e86 <_printf_i+0x21e>
 8008ea0:	e7eb      	b.n	8008e7a <_printf_i+0x212>
 8008ea2:	2500      	movs	r5, #0
 8008ea4:	f104 0619 	add.w	r6, r4, #25
 8008ea8:	e7f5      	b.n	8008e96 <_printf_i+0x22e>
 8008eaa:	bf00      	nop
 8008eac:	0800b1e2 	.word	0x0800b1e2
 8008eb0:	0800b1f3 	.word	0x0800b1f3

08008eb4 <iprintf>:
 8008eb4:	b40f      	push	{r0, r1, r2, r3}
 8008eb6:	4b0a      	ldr	r3, [pc, #40]	; (8008ee0 <iprintf+0x2c>)
 8008eb8:	b513      	push	{r0, r1, r4, lr}
 8008eba:	681c      	ldr	r4, [r3, #0]
 8008ebc:	b124      	cbz	r4, 8008ec8 <iprintf+0x14>
 8008ebe:	69a3      	ldr	r3, [r4, #24]
 8008ec0:	b913      	cbnz	r3, 8008ec8 <iprintf+0x14>
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f001 f870 	bl	8009fa8 <__sinit>
 8008ec8:	ab05      	add	r3, sp, #20
 8008eca:	9a04      	ldr	r2, [sp, #16]
 8008ecc:	68a1      	ldr	r1, [r4, #8]
 8008ece:	9301      	str	r3, [sp, #4]
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f001 fe1f 	bl	800ab14 <_vfiprintf_r>
 8008ed6:	b002      	add	sp, #8
 8008ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008edc:	b004      	add	sp, #16
 8008ede:	4770      	bx	lr
 8008ee0:	24000010 	.word	0x24000010

08008ee4 <_puts_r>:
 8008ee4:	b570      	push	{r4, r5, r6, lr}
 8008ee6:	460e      	mov	r6, r1
 8008ee8:	4605      	mov	r5, r0
 8008eea:	b118      	cbz	r0, 8008ef4 <_puts_r+0x10>
 8008eec:	6983      	ldr	r3, [r0, #24]
 8008eee:	b90b      	cbnz	r3, 8008ef4 <_puts_r+0x10>
 8008ef0:	f001 f85a 	bl	8009fa8 <__sinit>
 8008ef4:	69ab      	ldr	r3, [r5, #24]
 8008ef6:	68ac      	ldr	r4, [r5, #8]
 8008ef8:	b913      	cbnz	r3, 8008f00 <_puts_r+0x1c>
 8008efa:	4628      	mov	r0, r5
 8008efc:	f001 f854 	bl	8009fa8 <__sinit>
 8008f00:	4b2c      	ldr	r3, [pc, #176]	; (8008fb4 <_puts_r+0xd0>)
 8008f02:	429c      	cmp	r4, r3
 8008f04:	d120      	bne.n	8008f48 <_puts_r+0x64>
 8008f06:	686c      	ldr	r4, [r5, #4]
 8008f08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f0a:	07db      	lsls	r3, r3, #31
 8008f0c:	d405      	bmi.n	8008f1a <_puts_r+0x36>
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	0598      	lsls	r0, r3, #22
 8008f12:	d402      	bmi.n	8008f1a <_puts_r+0x36>
 8008f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f16:	f001 f8ea 	bl	800a0ee <__retarget_lock_acquire_recursive>
 8008f1a:	89a3      	ldrh	r3, [r4, #12]
 8008f1c:	0719      	lsls	r1, r3, #28
 8008f1e:	d51d      	bpl.n	8008f5c <_puts_r+0x78>
 8008f20:	6923      	ldr	r3, [r4, #16]
 8008f22:	b1db      	cbz	r3, 8008f5c <_puts_r+0x78>
 8008f24:	3e01      	subs	r6, #1
 8008f26:	68a3      	ldr	r3, [r4, #8]
 8008f28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	60a3      	str	r3, [r4, #8]
 8008f30:	bb39      	cbnz	r1, 8008f82 <_puts_r+0x9e>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	da38      	bge.n	8008fa8 <_puts_r+0xc4>
 8008f36:	4622      	mov	r2, r4
 8008f38:	210a      	movs	r1, #10
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	f000 f860 	bl	8009000 <__swbuf_r>
 8008f40:	3001      	adds	r0, #1
 8008f42:	d011      	beq.n	8008f68 <_puts_r+0x84>
 8008f44:	250a      	movs	r5, #10
 8008f46:	e011      	b.n	8008f6c <_puts_r+0x88>
 8008f48:	4b1b      	ldr	r3, [pc, #108]	; (8008fb8 <_puts_r+0xd4>)
 8008f4a:	429c      	cmp	r4, r3
 8008f4c:	d101      	bne.n	8008f52 <_puts_r+0x6e>
 8008f4e:	68ac      	ldr	r4, [r5, #8]
 8008f50:	e7da      	b.n	8008f08 <_puts_r+0x24>
 8008f52:	4b1a      	ldr	r3, [pc, #104]	; (8008fbc <_puts_r+0xd8>)
 8008f54:	429c      	cmp	r4, r3
 8008f56:	bf08      	it	eq
 8008f58:	68ec      	ldreq	r4, [r5, #12]
 8008f5a:	e7d5      	b.n	8008f08 <_puts_r+0x24>
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f000 f8a0 	bl	80090a4 <__swsetup_r>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d0dd      	beq.n	8008f24 <_puts_r+0x40>
 8008f68:	f04f 35ff 	mov.w	r5, #4294967295
 8008f6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f6e:	07da      	lsls	r2, r3, #31
 8008f70:	d405      	bmi.n	8008f7e <_puts_r+0x9a>
 8008f72:	89a3      	ldrh	r3, [r4, #12]
 8008f74:	059b      	lsls	r3, r3, #22
 8008f76:	d402      	bmi.n	8008f7e <_puts_r+0x9a>
 8008f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f7a:	f001 f8b9 	bl	800a0f0 <__retarget_lock_release_recursive>
 8008f7e:	4628      	mov	r0, r5
 8008f80:	bd70      	pop	{r4, r5, r6, pc}
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	da04      	bge.n	8008f90 <_puts_r+0xac>
 8008f86:	69a2      	ldr	r2, [r4, #24]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	dc06      	bgt.n	8008f9a <_puts_r+0xb6>
 8008f8c:	290a      	cmp	r1, #10
 8008f8e:	d004      	beq.n	8008f9a <_puts_r+0xb6>
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	1c5a      	adds	r2, r3, #1
 8008f94:	6022      	str	r2, [r4, #0]
 8008f96:	7019      	strb	r1, [r3, #0]
 8008f98:	e7c5      	b.n	8008f26 <_puts_r+0x42>
 8008f9a:	4622      	mov	r2, r4
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	f000 f82f 	bl	8009000 <__swbuf_r>
 8008fa2:	3001      	adds	r0, #1
 8008fa4:	d1bf      	bne.n	8008f26 <_puts_r+0x42>
 8008fa6:	e7df      	b.n	8008f68 <_puts_r+0x84>
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	250a      	movs	r5, #10
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	6022      	str	r2, [r4, #0]
 8008fb0:	701d      	strb	r5, [r3, #0]
 8008fb2:	e7db      	b.n	8008f6c <_puts_r+0x88>
 8008fb4:	0800b2b4 	.word	0x0800b2b4
 8008fb8:	0800b2d4 	.word	0x0800b2d4
 8008fbc:	0800b294 	.word	0x0800b294

08008fc0 <puts>:
 8008fc0:	4b02      	ldr	r3, [pc, #8]	; (8008fcc <puts+0xc>)
 8008fc2:	4601      	mov	r1, r0
 8008fc4:	6818      	ldr	r0, [r3, #0]
 8008fc6:	f7ff bf8d 	b.w	8008ee4 <_puts_r>
 8008fca:	bf00      	nop
 8008fcc:	24000010 	.word	0x24000010

08008fd0 <viprintf>:
 8008fd0:	b513      	push	{r0, r1, r4, lr}
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4909      	ldr	r1, [pc, #36]	; (8008ffc <viprintf+0x2c>)
 8008fd6:	680c      	ldr	r4, [r1, #0]
 8008fd8:	4602      	mov	r2, r0
 8008fda:	b144      	cbz	r4, 8008fee <viprintf+0x1e>
 8008fdc:	69a1      	ldr	r1, [r4, #24]
 8008fde:	b931      	cbnz	r1, 8008fee <viprintf+0x1e>
 8008fe0:	e9cd 0300 	strd	r0, r3, [sp]
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f000 ffdf 	bl	8009fa8 <__sinit>
 8008fea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fee:	68a1      	ldr	r1, [r4, #8]
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	b002      	add	sp, #8
 8008ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ff8:	f001 bd8c 	b.w	800ab14 <_vfiprintf_r>
 8008ffc:	24000010 	.word	0x24000010

08009000 <__swbuf_r>:
 8009000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009002:	460e      	mov	r6, r1
 8009004:	4614      	mov	r4, r2
 8009006:	4605      	mov	r5, r0
 8009008:	b118      	cbz	r0, 8009012 <__swbuf_r+0x12>
 800900a:	6983      	ldr	r3, [r0, #24]
 800900c:	b90b      	cbnz	r3, 8009012 <__swbuf_r+0x12>
 800900e:	f000 ffcb 	bl	8009fa8 <__sinit>
 8009012:	4b21      	ldr	r3, [pc, #132]	; (8009098 <__swbuf_r+0x98>)
 8009014:	429c      	cmp	r4, r3
 8009016:	d12b      	bne.n	8009070 <__swbuf_r+0x70>
 8009018:	686c      	ldr	r4, [r5, #4]
 800901a:	69a3      	ldr	r3, [r4, #24]
 800901c:	60a3      	str	r3, [r4, #8]
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	071a      	lsls	r2, r3, #28
 8009022:	d52f      	bpl.n	8009084 <__swbuf_r+0x84>
 8009024:	6923      	ldr	r3, [r4, #16]
 8009026:	b36b      	cbz	r3, 8009084 <__swbuf_r+0x84>
 8009028:	6923      	ldr	r3, [r4, #16]
 800902a:	6820      	ldr	r0, [r4, #0]
 800902c:	1ac0      	subs	r0, r0, r3
 800902e:	6963      	ldr	r3, [r4, #20]
 8009030:	b2f6      	uxtb	r6, r6
 8009032:	4283      	cmp	r3, r0
 8009034:	4637      	mov	r7, r6
 8009036:	dc04      	bgt.n	8009042 <__swbuf_r+0x42>
 8009038:	4621      	mov	r1, r4
 800903a:	4628      	mov	r0, r5
 800903c:	f000 ff20 	bl	8009e80 <_fflush_r>
 8009040:	bb30      	cbnz	r0, 8009090 <__swbuf_r+0x90>
 8009042:	68a3      	ldr	r3, [r4, #8]
 8009044:	3b01      	subs	r3, #1
 8009046:	60a3      	str	r3, [r4, #8]
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	6022      	str	r2, [r4, #0]
 800904e:	701e      	strb	r6, [r3, #0]
 8009050:	6963      	ldr	r3, [r4, #20]
 8009052:	3001      	adds	r0, #1
 8009054:	4283      	cmp	r3, r0
 8009056:	d004      	beq.n	8009062 <__swbuf_r+0x62>
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	07db      	lsls	r3, r3, #31
 800905c:	d506      	bpl.n	800906c <__swbuf_r+0x6c>
 800905e:	2e0a      	cmp	r6, #10
 8009060:	d104      	bne.n	800906c <__swbuf_r+0x6c>
 8009062:	4621      	mov	r1, r4
 8009064:	4628      	mov	r0, r5
 8009066:	f000 ff0b 	bl	8009e80 <_fflush_r>
 800906a:	b988      	cbnz	r0, 8009090 <__swbuf_r+0x90>
 800906c:	4638      	mov	r0, r7
 800906e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009070:	4b0a      	ldr	r3, [pc, #40]	; (800909c <__swbuf_r+0x9c>)
 8009072:	429c      	cmp	r4, r3
 8009074:	d101      	bne.n	800907a <__swbuf_r+0x7a>
 8009076:	68ac      	ldr	r4, [r5, #8]
 8009078:	e7cf      	b.n	800901a <__swbuf_r+0x1a>
 800907a:	4b09      	ldr	r3, [pc, #36]	; (80090a0 <__swbuf_r+0xa0>)
 800907c:	429c      	cmp	r4, r3
 800907e:	bf08      	it	eq
 8009080:	68ec      	ldreq	r4, [r5, #12]
 8009082:	e7ca      	b.n	800901a <__swbuf_r+0x1a>
 8009084:	4621      	mov	r1, r4
 8009086:	4628      	mov	r0, r5
 8009088:	f000 f80c 	bl	80090a4 <__swsetup_r>
 800908c:	2800      	cmp	r0, #0
 800908e:	d0cb      	beq.n	8009028 <__swbuf_r+0x28>
 8009090:	f04f 37ff 	mov.w	r7, #4294967295
 8009094:	e7ea      	b.n	800906c <__swbuf_r+0x6c>
 8009096:	bf00      	nop
 8009098:	0800b2b4 	.word	0x0800b2b4
 800909c:	0800b2d4 	.word	0x0800b2d4
 80090a0:	0800b294 	.word	0x0800b294

080090a4 <__swsetup_r>:
 80090a4:	4b32      	ldr	r3, [pc, #200]	; (8009170 <__swsetup_r+0xcc>)
 80090a6:	b570      	push	{r4, r5, r6, lr}
 80090a8:	681d      	ldr	r5, [r3, #0]
 80090aa:	4606      	mov	r6, r0
 80090ac:	460c      	mov	r4, r1
 80090ae:	b125      	cbz	r5, 80090ba <__swsetup_r+0x16>
 80090b0:	69ab      	ldr	r3, [r5, #24]
 80090b2:	b913      	cbnz	r3, 80090ba <__swsetup_r+0x16>
 80090b4:	4628      	mov	r0, r5
 80090b6:	f000 ff77 	bl	8009fa8 <__sinit>
 80090ba:	4b2e      	ldr	r3, [pc, #184]	; (8009174 <__swsetup_r+0xd0>)
 80090bc:	429c      	cmp	r4, r3
 80090be:	d10f      	bne.n	80090e0 <__swsetup_r+0x3c>
 80090c0:	686c      	ldr	r4, [r5, #4]
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090c8:	0719      	lsls	r1, r3, #28
 80090ca:	d42c      	bmi.n	8009126 <__swsetup_r+0x82>
 80090cc:	06dd      	lsls	r5, r3, #27
 80090ce:	d411      	bmi.n	80090f4 <__swsetup_r+0x50>
 80090d0:	2309      	movs	r3, #9
 80090d2:	6033      	str	r3, [r6, #0]
 80090d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090d8:	81a3      	strh	r3, [r4, #12]
 80090da:	f04f 30ff 	mov.w	r0, #4294967295
 80090de:	e03e      	b.n	800915e <__swsetup_r+0xba>
 80090e0:	4b25      	ldr	r3, [pc, #148]	; (8009178 <__swsetup_r+0xd4>)
 80090e2:	429c      	cmp	r4, r3
 80090e4:	d101      	bne.n	80090ea <__swsetup_r+0x46>
 80090e6:	68ac      	ldr	r4, [r5, #8]
 80090e8:	e7eb      	b.n	80090c2 <__swsetup_r+0x1e>
 80090ea:	4b24      	ldr	r3, [pc, #144]	; (800917c <__swsetup_r+0xd8>)
 80090ec:	429c      	cmp	r4, r3
 80090ee:	bf08      	it	eq
 80090f0:	68ec      	ldreq	r4, [r5, #12]
 80090f2:	e7e6      	b.n	80090c2 <__swsetup_r+0x1e>
 80090f4:	0758      	lsls	r0, r3, #29
 80090f6:	d512      	bpl.n	800911e <__swsetup_r+0x7a>
 80090f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090fa:	b141      	cbz	r1, 800910e <__swsetup_r+0x6a>
 80090fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009100:	4299      	cmp	r1, r3
 8009102:	d002      	beq.n	800910a <__swsetup_r+0x66>
 8009104:	4630      	mov	r0, r6
 8009106:	f001 fbfb 	bl	800a900 <_free_r>
 800910a:	2300      	movs	r3, #0
 800910c:	6363      	str	r3, [r4, #52]	; 0x34
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009114:	81a3      	strh	r3, [r4, #12]
 8009116:	2300      	movs	r3, #0
 8009118:	6063      	str	r3, [r4, #4]
 800911a:	6923      	ldr	r3, [r4, #16]
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	89a3      	ldrh	r3, [r4, #12]
 8009120:	f043 0308 	orr.w	r3, r3, #8
 8009124:	81a3      	strh	r3, [r4, #12]
 8009126:	6923      	ldr	r3, [r4, #16]
 8009128:	b94b      	cbnz	r3, 800913e <__swsetup_r+0x9a>
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009134:	d003      	beq.n	800913e <__swsetup_r+0x9a>
 8009136:	4621      	mov	r1, r4
 8009138:	4630      	mov	r0, r6
 800913a:	f000 ffff 	bl	800a13c <__smakebuf_r>
 800913e:	89a0      	ldrh	r0, [r4, #12]
 8009140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009144:	f010 0301 	ands.w	r3, r0, #1
 8009148:	d00a      	beq.n	8009160 <__swsetup_r+0xbc>
 800914a:	2300      	movs	r3, #0
 800914c:	60a3      	str	r3, [r4, #8]
 800914e:	6963      	ldr	r3, [r4, #20]
 8009150:	425b      	negs	r3, r3
 8009152:	61a3      	str	r3, [r4, #24]
 8009154:	6923      	ldr	r3, [r4, #16]
 8009156:	b943      	cbnz	r3, 800916a <__swsetup_r+0xc6>
 8009158:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800915c:	d1ba      	bne.n	80090d4 <__swsetup_r+0x30>
 800915e:	bd70      	pop	{r4, r5, r6, pc}
 8009160:	0781      	lsls	r1, r0, #30
 8009162:	bf58      	it	pl
 8009164:	6963      	ldrpl	r3, [r4, #20]
 8009166:	60a3      	str	r3, [r4, #8]
 8009168:	e7f4      	b.n	8009154 <__swsetup_r+0xb0>
 800916a:	2000      	movs	r0, #0
 800916c:	e7f7      	b.n	800915e <__swsetup_r+0xba>
 800916e:	bf00      	nop
 8009170:	24000010 	.word	0x24000010
 8009174:	0800b2b4 	.word	0x0800b2b4
 8009178:	0800b2d4 	.word	0x0800b2d4
 800917c:	0800b294 	.word	0x0800b294

08009180 <quorem>:
 8009180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009184:	6903      	ldr	r3, [r0, #16]
 8009186:	690c      	ldr	r4, [r1, #16]
 8009188:	42a3      	cmp	r3, r4
 800918a:	4607      	mov	r7, r0
 800918c:	f2c0 8081 	blt.w	8009292 <quorem+0x112>
 8009190:	3c01      	subs	r4, #1
 8009192:	f101 0814 	add.w	r8, r1, #20
 8009196:	f100 0514 	add.w	r5, r0, #20
 800919a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800919e:	9301      	str	r3, [sp, #4]
 80091a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80091a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091a8:	3301      	adds	r3, #1
 80091aa:	429a      	cmp	r2, r3
 80091ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80091b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80091b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80091b8:	d331      	bcc.n	800921e <quorem+0x9e>
 80091ba:	f04f 0e00 	mov.w	lr, #0
 80091be:	4640      	mov	r0, r8
 80091c0:	46ac      	mov	ip, r5
 80091c2:	46f2      	mov	sl, lr
 80091c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80091c8:	b293      	uxth	r3, r2
 80091ca:	fb06 e303 	mla	r3, r6, r3, lr
 80091ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	ebaa 0303 	sub.w	r3, sl, r3
 80091d8:	f8dc a000 	ldr.w	sl, [ip]
 80091dc:	0c12      	lsrs	r2, r2, #16
 80091de:	fa13 f38a 	uxtah	r3, r3, sl
 80091e2:	fb06 e202 	mla	r2, r6, r2, lr
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	9b00      	ldr	r3, [sp, #0]
 80091ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80091ee:	b292      	uxth	r2, r2
 80091f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80091f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80091fc:	4581      	cmp	r9, r0
 80091fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009202:	f84c 3b04 	str.w	r3, [ip], #4
 8009206:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800920a:	d2db      	bcs.n	80091c4 <quorem+0x44>
 800920c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009210:	b92b      	cbnz	r3, 800921e <quorem+0x9e>
 8009212:	9b01      	ldr	r3, [sp, #4]
 8009214:	3b04      	subs	r3, #4
 8009216:	429d      	cmp	r5, r3
 8009218:	461a      	mov	r2, r3
 800921a:	d32e      	bcc.n	800927a <quorem+0xfa>
 800921c:	613c      	str	r4, [r7, #16]
 800921e:	4638      	mov	r0, r7
 8009220:	f001 fa56 	bl	800a6d0 <__mcmp>
 8009224:	2800      	cmp	r0, #0
 8009226:	db24      	blt.n	8009272 <quorem+0xf2>
 8009228:	3601      	adds	r6, #1
 800922a:	4628      	mov	r0, r5
 800922c:	f04f 0c00 	mov.w	ip, #0
 8009230:	f858 2b04 	ldr.w	r2, [r8], #4
 8009234:	f8d0 e000 	ldr.w	lr, [r0]
 8009238:	b293      	uxth	r3, r2
 800923a:	ebac 0303 	sub.w	r3, ip, r3
 800923e:	0c12      	lsrs	r2, r2, #16
 8009240:	fa13 f38e 	uxtah	r3, r3, lr
 8009244:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009248:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800924c:	b29b      	uxth	r3, r3
 800924e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009252:	45c1      	cmp	r9, r8
 8009254:	f840 3b04 	str.w	r3, [r0], #4
 8009258:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800925c:	d2e8      	bcs.n	8009230 <quorem+0xb0>
 800925e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009262:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009266:	b922      	cbnz	r2, 8009272 <quorem+0xf2>
 8009268:	3b04      	subs	r3, #4
 800926a:	429d      	cmp	r5, r3
 800926c:	461a      	mov	r2, r3
 800926e:	d30a      	bcc.n	8009286 <quorem+0x106>
 8009270:	613c      	str	r4, [r7, #16]
 8009272:	4630      	mov	r0, r6
 8009274:	b003      	add	sp, #12
 8009276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927a:	6812      	ldr	r2, [r2, #0]
 800927c:	3b04      	subs	r3, #4
 800927e:	2a00      	cmp	r2, #0
 8009280:	d1cc      	bne.n	800921c <quorem+0x9c>
 8009282:	3c01      	subs	r4, #1
 8009284:	e7c7      	b.n	8009216 <quorem+0x96>
 8009286:	6812      	ldr	r2, [r2, #0]
 8009288:	3b04      	subs	r3, #4
 800928a:	2a00      	cmp	r2, #0
 800928c:	d1f0      	bne.n	8009270 <quorem+0xf0>
 800928e:	3c01      	subs	r4, #1
 8009290:	e7eb      	b.n	800926a <quorem+0xea>
 8009292:	2000      	movs	r0, #0
 8009294:	e7ee      	b.n	8009274 <quorem+0xf4>
	...

08009298 <_dtoa_r>:
 8009298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800929c:	ed2d 8b02 	vpush	{d8}
 80092a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80092a2:	b091      	sub	sp, #68	; 0x44
 80092a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80092a8:	ec59 8b10 	vmov	r8, r9, d0
 80092ac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80092ae:	9106      	str	r1, [sp, #24]
 80092b0:	4606      	mov	r6, r0
 80092b2:	9208      	str	r2, [sp, #32]
 80092b4:	930c      	str	r3, [sp, #48]	; 0x30
 80092b6:	b975      	cbnz	r5, 80092d6 <_dtoa_r+0x3e>
 80092b8:	2010      	movs	r0, #16
 80092ba:	f000 ff7f 	bl	800a1bc <malloc>
 80092be:	4602      	mov	r2, r0
 80092c0:	6270      	str	r0, [r6, #36]	; 0x24
 80092c2:	b920      	cbnz	r0, 80092ce <_dtoa_r+0x36>
 80092c4:	4baa      	ldr	r3, [pc, #680]	; (8009570 <_dtoa_r+0x2d8>)
 80092c6:	21ea      	movs	r1, #234	; 0xea
 80092c8:	48aa      	ldr	r0, [pc, #680]	; (8009574 <_dtoa_r+0x2dc>)
 80092ca:	f001 fdb9 	bl	800ae40 <__assert_func>
 80092ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80092d2:	6005      	str	r5, [r0, #0]
 80092d4:	60c5      	str	r5, [r0, #12]
 80092d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80092d8:	6819      	ldr	r1, [r3, #0]
 80092da:	b151      	cbz	r1, 80092f2 <_dtoa_r+0x5a>
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	604a      	str	r2, [r1, #4]
 80092e0:	2301      	movs	r3, #1
 80092e2:	4093      	lsls	r3, r2
 80092e4:	608b      	str	r3, [r1, #8]
 80092e6:	4630      	mov	r0, r6
 80092e8:	f000 ffb0 	bl	800a24c <_Bfree>
 80092ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80092ee:	2200      	movs	r2, #0
 80092f0:	601a      	str	r2, [r3, #0]
 80092f2:	f1b9 0300 	subs.w	r3, r9, #0
 80092f6:	bfbb      	ittet	lt
 80092f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80092fc:	9303      	strlt	r3, [sp, #12]
 80092fe:	2300      	movge	r3, #0
 8009300:	2201      	movlt	r2, #1
 8009302:	bfac      	ite	ge
 8009304:	6023      	strge	r3, [r4, #0]
 8009306:	6022      	strlt	r2, [r4, #0]
 8009308:	4b9b      	ldr	r3, [pc, #620]	; (8009578 <_dtoa_r+0x2e0>)
 800930a:	9c03      	ldr	r4, [sp, #12]
 800930c:	43a3      	bics	r3, r4
 800930e:	d11c      	bne.n	800934a <_dtoa_r+0xb2>
 8009310:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009312:	f242 730f 	movw	r3, #9999	; 0x270f
 8009316:	6013      	str	r3, [r2, #0]
 8009318:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800931c:	ea53 0308 	orrs.w	r3, r3, r8
 8009320:	f000 84fd 	beq.w	8009d1e <_dtoa_r+0xa86>
 8009324:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009326:	b963      	cbnz	r3, 8009342 <_dtoa_r+0xaa>
 8009328:	4b94      	ldr	r3, [pc, #592]	; (800957c <_dtoa_r+0x2e4>)
 800932a:	e01f      	b.n	800936c <_dtoa_r+0xd4>
 800932c:	4b94      	ldr	r3, [pc, #592]	; (8009580 <_dtoa_r+0x2e8>)
 800932e:	9301      	str	r3, [sp, #4]
 8009330:	3308      	adds	r3, #8
 8009332:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	9801      	ldr	r0, [sp, #4]
 8009338:	b011      	add	sp, #68	; 0x44
 800933a:	ecbd 8b02 	vpop	{d8}
 800933e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009342:	4b8e      	ldr	r3, [pc, #568]	; (800957c <_dtoa_r+0x2e4>)
 8009344:	9301      	str	r3, [sp, #4]
 8009346:	3303      	adds	r3, #3
 8009348:	e7f3      	b.n	8009332 <_dtoa_r+0x9a>
 800934a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800934e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009356:	d10b      	bne.n	8009370 <_dtoa_r+0xd8>
 8009358:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800935a:	2301      	movs	r3, #1
 800935c:	6013      	str	r3, [r2, #0]
 800935e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 84d9 	beq.w	8009d18 <_dtoa_r+0xa80>
 8009366:	4887      	ldr	r0, [pc, #540]	; (8009584 <_dtoa_r+0x2ec>)
 8009368:	6018      	str	r0, [r3, #0]
 800936a:	1e43      	subs	r3, r0, #1
 800936c:	9301      	str	r3, [sp, #4]
 800936e:	e7e2      	b.n	8009336 <_dtoa_r+0x9e>
 8009370:	a90f      	add	r1, sp, #60	; 0x3c
 8009372:	aa0e      	add	r2, sp, #56	; 0x38
 8009374:	4630      	mov	r0, r6
 8009376:	eeb0 0b48 	vmov.f64	d0, d8
 800937a:	f001 fa4f 	bl	800a81c <__d2b>
 800937e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8009382:	4605      	mov	r5, r0
 8009384:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009386:	2900      	cmp	r1, #0
 8009388:	d046      	beq.n	8009418 <_dtoa_r+0x180>
 800938a:	ee18 4a90 	vmov	r4, s17
 800938e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009392:	ec53 2b18 	vmov	r2, r3, d8
 8009396:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800939a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800939e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80093a2:	2400      	movs	r4, #0
 80093a4:	ec43 2b16 	vmov	d6, r2, r3
 80093a8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80093ac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009558 <_dtoa_r+0x2c0>
 80093b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80093b4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009560 <_dtoa_r+0x2c8>
 80093b8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80093bc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009568 <_dtoa_r+0x2d0>
 80093c0:	ee07 1a90 	vmov	s15, r1
 80093c4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80093c8:	eeb0 7b46 	vmov.f64	d7, d6
 80093cc:	eea4 7b05 	vfma.f64	d7, d4, d5
 80093d0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80093d4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80093d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093dc:	ee16 ba90 	vmov	fp, s13
 80093e0:	940a      	str	r4, [sp, #40]	; 0x28
 80093e2:	d508      	bpl.n	80093f6 <_dtoa_r+0x15e>
 80093e4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80093e8:	eeb4 6b47 	vcmp.f64	d6, d7
 80093ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093f0:	bf18      	it	ne
 80093f2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80093f6:	f1bb 0f16 	cmp.w	fp, #22
 80093fa:	d82f      	bhi.n	800945c <_dtoa_r+0x1c4>
 80093fc:	4b62      	ldr	r3, [pc, #392]	; (8009588 <_dtoa_r+0x2f0>)
 80093fe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009402:	ed93 7b00 	vldr	d7, [r3]
 8009406:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800940a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800940e:	d501      	bpl.n	8009414 <_dtoa_r+0x17c>
 8009410:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009414:	2300      	movs	r3, #0
 8009416:	e022      	b.n	800945e <_dtoa_r+0x1c6>
 8009418:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800941a:	4401      	add	r1, r0
 800941c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009420:	2b20      	cmp	r3, #32
 8009422:	bfc1      	itttt	gt
 8009424:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009428:	fa04 f303 	lslgt.w	r3, r4, r3
 800942c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009430:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009434:	bfd6      	itet	le
 8009436:	f1c3 0320 	rsble	r3, r3, #32
 800943a:	ea43 0808 	orrgt.w	r8, r3, r8
 800943e:	fa08 f803 	lslle.w	r8, r8, r3
 8009442:	ee07 8a90 	vmov	s15, r8
 8009446:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800944a:	3901      	subs	r1, #1
 800944c:	ee17 4a90 	vmov	r4, s15
 8009450:	ec53 2b17 	vmov	r2, r3, d7
 8009454:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009458:	2401      	movs	r4, #1
 800945a:	e7a3      	b.n	80093a4 <_dtoa_r+0x10c>
 800945c:	2301      	movs	r3, #1
 800945e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009460:	1a43      	subs	r3, r0, r1
 8009462:	1e5a      	subs	r2, r3, #1
 8009464:	bf45      	ittet	mi
 8009466:	f1c3 0301 	rsbmi	r3, r3, #1
 800946a:	9304      	strmi	r3, [sp, #16]
 800946c:	2300      	movpl	r3, #0
 800946e:	2300      	movmi	r3, #0
 8009470:	9205      	str	r2, [sp, #20]
 8009472:	bf54      	ite	pl
 8009474:	9304      	strpl	r3, [sp, #16]
 8009476:	9305      	strmi	r3, [sp, #20]
 8009478:	f1bb 0f00 	cmp.w	fp, #0
 800947c:	db18      	blt.n	80094b0 <_dtoa_r+0x218>
 800947e:	9b05      	ldr	r3, [sp, #20]
 8009480:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8009484:	445b      	add	r3, fp
 8009486:	9305      	str	r3, [sp, #20]
 8009488:	2300      	movs	r3, #0
 800948a:	9a06      	ldr	r2, [sp, #24]
 800948c:	2a09      	cmp	r2, #9
 800948e:	d849      	bhi.n	8009524 <_dtoa_r+0x28c>
 8009490:	2a05      	cmp	r2, #5
 8009492:	bfc4      	itt	gt
 8009494:	3a04      	subgt	r2, #4
 8009496:	9206      	strgt	r2, [sp, #24]
 8009498:	9a06      	ldr	r2, [sp, #24]
 800949a:	f1a2 0202 	sub.w	r2, r2, #2
 800949e:	bfcc      	ite	gt
 80094a0:	2400      	movgt	r4, #0
 80094a2:	2401      	movle	r4, #1
 80094a4:	2a03      	cmp	r2, #3
 80094a6:	d848      	bhi.n	800953a <_dtoa_r+0x2a2>
 80094a8:	e8df f002 	tbb	[pc, r2]
 80094ac:	3a2c2e0b 	.word	0x3a2c2e0b
 80094b0:	9b04      	ldr	r3, [sp, #16]
 80094b2:	2200      	movs	r2, #0
 80094b4:	eba3 030b 	sub.w	r3, r3, fp
 80094b8:	9304      	str	r3, [sp, #16]
 80094ba:	9209      	str	r2, [sp, #36]	; 0x24
 80094bc:	f1cb 0300 	rsb	r3, fp, #0
 80094c0:	e7e3      	b.n	800948a <_dtoa_r+0x1f2>
 80094c2:	2200      	movs	r2, #0
 80094c4:	9207      	str	r2, [sp, #28]
 80094c6:	9a08      	ldr	r2, [sp, #32]
 80094c8:	2a00      	cmp	r2, #0
 80094ca:	dc39      	bgt.n	8009540 <_dtoa_r+0x2a8>
 80094cc:	f04f 0a01 	mov.w	sl, #1
 80094d0:	46d1      	mov	r9, sl
 80094d2:	4652      	mov	r2, sl
 80094d4:	f8cd a020 	str.w	sl, [sp, #32]
 80094d8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80094da:	2100      	movs	r1, #0
 80094dc:	6079      	str	r1, [r7, #4]
 80094de:	2004      	movs	r0, #4
 80094e0:	f100 0c14 	add.w	ip, r0, #20
 80094e4:	4594      	cmp	ip, r2
 80094e6:	6879      	ldr	r1, [r7, #4]
 80094e8:	d92f      	bls.n	800954a <_dtoa_r+0x2b2>
 80094ea:	4630      	mov	r0, r6
 80094ec:	930d      	str	r3, [sp, #52]	; 0x34
 80094ee:	f000 fe6d 	bl	800a1cc <_Balloc>
 80094f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094f4:	9001      	str	r0, [sp, #4]
 80094f6:	4602      	mov	r2, r0
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d149      	bne.n	8009590 <_dtoa_r+0x2f8>
 80094fc:	4b23      	ldr	r3, [pc, #140]	; (800958c <_dtoa_r+0x2f4>)
 80094fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009502:	e6e1      	b.n	80092c8 <_dtoa_r+0x30>
 8009504:	2201      	movs	r2, #1
 8009506:	e7dd      	b.n	80094c4 <_dtoa_r+0x22c>
 8009508:	2200      	movs	r2, #0
 800950a:	9207      	str	r2, [sp, #28]
 800950c:	9a08      	ldr	r2, [sp, #32]
 800950e:	eb0b 0a02 	add.w	sl, fp, r2
 8009512:	f10a 0901 	add.w	r9, sl, #1
 8009516:	464a      	mov	r2, r9
 8009518:	2a01      	cmp	r2, #1
 800951a:	bfb8      	it	lt
 800951c:	2201      	movlt	r2, #1
 800951e:	e7db      	b.n	80094d8 <_dtoa_r+0x240>
 8009520:	2201      	movs	r2, #1
 8009522:	e7f2      	b.n	800950a <_dtoa_r+0x272>
 8009524:	2401      	movs	r4, #1
 8009526:	2200      	movs	r2, #0
 8009528:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800952c:	f04f 3aff 	mov.w	sl, #4294967295
 8009530:	2100      	movs	r1, #0
 8009532:	46d1      	mov	r9, sl
 8009534:	2212      	movs	r2, #18
 8009536:	9108      	str	r1, [sp, #32]
 8009538:	e7ce      	b.n	80094d8 <_dtoa_r+0x240>
 800953a:	2201      	movs	r2, #1
 800953c:	9207      	str	r2, [sp, #28]
 800953e:	e7f5      	b.n	800952c <_dtoa_r+0x294>
 8009540:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009544:	46d1      	mov	r9, sl
 8009546:	4652      	mov	r2, sl
 8009548:	e7c6      	b.n	80094d8 <_dtoa_r+0x240>
 800954a:	3101      	adds	r1, #1
 800954c:	6079      	str	r1, [r7, #4]
 800954e:	0040      	lsls	r0, r0, #1
 8009550:	e7c6      	b.n	80094e0 <_dtoa_r+0x248>
 8009552:	bf00      	nop
 8009554:	f3af 8000 	nop.w
 8009558:	636f4361 	.word	0x636f4361
 800955c:	3fd287a7 	.word	0x3fd287a7
 8009560:	8b60c8b3 	.word	0x8b60c8b3
 8009564:	3fc68a28 	.word	0x3fc68a28
 8009568:	509f79fb 	.word	0x509f79fb
 800956c:	3fd34413 	.word	0x3fd34413
 8009570:	0800b211 	.word	0x0800b211
 8009574:	0800b228 	.word	0x0800b228
 8009578:	7ff00000 	.word	0x7ff00000
 800957c:	0800b20d 	.word	0x0800b20d
 8009580:	0800b204 	.word	0x0800b204
 8009584:	0800b1e1 	.word	0x0800b1e1
 8009588:	0800b378 	.word	0x0800b378
 800958c:	0800b283 	.word	0x0800b283
 8009590:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009592:	9901      	ldr	r1, [sp, #4]
 8009594:	6011      	str	r1, [r2, #0]
 8009596:	f1b9 0f0e 	cmp.w	r9, #14
 800959a:	d86c      	bhi.n	8009676 <_dtoa_r+0x3de>
 800959c:	2c00      	cmp	r4, #0
 800959e:	d06a      	beq.n	8009676 <_dtoa_r+0x3de>
 80095a0:	f1bb 0f00 	cmp.w	fp, #0
 80095a4:	f340 80a0 	ble.w	80096e8 <_dtoa_r+0x450>
 80095a8:	49c1      	ldr	r1, [pc, #772]	; (80098b0 <_dtoa_r+0x618>)
 80095aa:	f00b 020f 	and.w	r2, fp, #15
 80095ae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80095b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80095b6:	ed92 7b00 	vldr	d7, [r2]
 80095ba:	ea4f 112b 	mov.w	r1, fp, asr #4
 80095be:	f000 8087 	beq.w	80096d0 <_dtoa_r+0x438>
 80095c2:	4abc      	ldr	r2, [pc, #752]	; (80098b4 <_dtoa_r+0x61c>)
 80095c4:	ed92 6b08 	vldr	d6, [r2, #32]
 80095c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80095cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80095d0:	f001 010f 	and.w	r1, r1, #15
 80095d4:	2203      	movs	r2, #3
 80095d6:	48b7      	ldr	r0, [pc, #732]	; (80098b4 <_dtoa_r+0x61c>)
 80095d8:	2900      	cmp	r1, #0
 80095da:	d17b      	bne.n	80096d4 <_dtoa_r+0x43c>
 80095dc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80095e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80095e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80095e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095ea:	2900      	cmp	r1, #0
 80095ec:	f000 80a2 	beq.w	8009734 <_dtoa_r+0x49c>
 80095f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80095f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80095fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009600:	f140 8098 	bpl.w	8009734 <_dtoa_r+0x49c>
 8009604:	f1b9 0f00 	cmp.w	r9, #0
 8009608:	f000 8094 	beq.w	8009734 <_dtoa_r+0x49c>
 800960c:	f1ba 0f00 	cmp.w	sl, #0
 8009610:	dd2f      	ble.n	8009672 <_dtoa_r+0x3da>
 8009612:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009616:	ee27 7b06 	vmul.f64	d7, d7, d6
 800961a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800961e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009622:	3201      	adds	r2, #1
 8009624:	4650      	mov	r0, sl
 8009626:	ed9d 6b02 	vldr	d6, [sp, #8]
 800962a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800962e:	ee07 2a90 	vmov	s15, r2
 8009632:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009636:	eea7 5b06 	vfma.f64	d5, d7, d6
 800963a:	ee15 4a90 	vmov	r4, s11
 800963e:	ec52 1b15 	vmov	r1, r2, d5
 8009642:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009646:	2800      	cmp	r0, #0
 8009648:	d177      	bne.n	800973a <_dtoa_r+0x4a2>
 800964a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800964e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009652:	ec42 1b17 	vmov	d7, r1, r2
 8009656:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800965a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800965e:	f300 8263 	bgt.w	8009b28 <_dtoa_r+0x890>
 8009662:	eeb1 7b47 	vneg.f64	d7, d7
 8009666:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800966a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800966e:	f100 8258 	bmi.w	8009b22 <_dtoa_r+0x88a>
 8009672:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009676:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009678:	2a00      	cmp	r2, #0
 800967a:	f2c0 811d 	blt.w	80098b8 <_dtoa_r+0x620>
 800967e:	f1bb 0f0e 	cmp.w	fp, #14
 8009682:	f300 8119 	bgt.w	80098b8 <_dtoa_r+0x620>
 8009686:	4b8a      	ldr	r3, [pc, #552]	; (80098b0 <_dtoa_r+0x618>)
 8009688:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800968c:	ed93 6b00 	vldr	d6, [r3]
 8009690:	9b08      	ldr	r3, [sp, #32]
 8009692:	2b00      	cmp	r3, #0
 8009694:	f280 80b7 	bge.w	8009806 <_dtoa_r+0x56e>
 8009698:	f1b9 0f00 	cmp.w	r9, #0
 800969c:	f300 80b3 	bgt.w	8009806 <_dtoa_r+0x56e>
 80096a0:	f040 823f 	bne.w	8009b22 <_dtoa_r+0x88a>
 80096a4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80096a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80096ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80096b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b8:	464c      	mov	r4, r9
 80096ba:	464f      	mov	r7, r9
 80096bc:	f280 8215 	bge.w	8009aea <_dtoa_r+0x852>
 80096c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80096c4:	2331      	movs	r3, #49	; 0x31
 80096c6:	f808 3b01 	strb.w	r3, [r8], #1
 80096ca:	f10b 0b01 	add.w	fp, fp, #1
 80096ce:	e211      	b.n	8009af4 <_dtoa_r+0x85c>
 80096d0:	2202      	movs	r2, #2
 80096d2:	e780      	b.n	80095d6 <_dtoa_r+0x33e>
 80096d4:	07cc      	lsls	r4, r1, #31
 80096d6:	d504      	bpl.n	80096e2 <_dtoa_r+0x44a>
 80096d8:	ed90 6b00 	vldr	d6, [r0]
 80096dc:	3201      	adds	r2, #1
 80096de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80096e2:	1049      	asrs	r1, r1, #1
 80096e4:	3008      	adds	r0, #8
 80096e6:	e777      	b.n	80095d8 <_dtoa_r+0x340>
 80096e8:	d022      	beq.n	8009730 <_dtoa_r+0x498>
 80096ea:	f1cb 0100 	rsb	r1, fp, #0
 80096ee:	4a70      	ldr	r2, [pc, #448]	; (80098b0 <_dtoa_r+0x618>)
 80096f0:	f001 000f 	and.w	r0, r1, #15
 80096f4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80096f8:	ed92 7b00 	vldr	d7, [r2]
 80096fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009700:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009704:	486b      	ldr	r0, [pc, #428]	; (80098b4 <_dtoa_r+0x61c>)
 8009706:	1109      	asrs	r1, r1, #4
 8009708:	2400      	movs	r4, #0
 800970a:	2202      	movs	r2, #2
 800970c:	b929      	cbnz	r1, 800971a <_dtoa_r+0x482>
 800970e:	2c00      	cmp	r4, #0
 8009710:	f43f af6a 	beq.w	80095e8 <_dtoa_r+0x350>
 8009714:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009718:	e766      	b.n	80095e8 <_dtoa_r+0x350>
 800971a:	07cf      	lsls	r7, r1, #31
 800971c:	d505      	bpl.n	800972a <_dtoa_r+0x492>
 800971e:	ed90 6b00 	vldr	d6, [r0]
 8009722:	3201      	adds	r2, #1
 8009724:	2401      	movs	r4, #1
 8009726:	ee27 7b06 	vmul.f64	d7, d7, d6
 800972a:	1049      	asrs	r1, r1, #1
 800972c:	3008      	adds	r0, #8
 800972e:	e7ed      	b.n	800970c <_dtoa_r+0x474>
 8009730:	2202      	movs	r2, #2
 8009732:	e759      	b.n	80095e8 <_dtoa_r+0x350>
 8009734:	465f      	mov	r7, fp
 8009736:	4648      	mov	r0, r9
 8009738:	e775      	b.n	8009626 <_dtoa_r+0x38e>
 800973a:	ec42 1b17 	vmov	d7, r1, r2
 800973e:	4a5c      	ldr	r2, [pc, #368]	; (80098b0 <_dtoa_r+0x618>)
 8009740:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009744:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009748:	9a01      	ldr	r2, [sp, #4]
 800974a:	1814      	adds	r4, r2, r0
 800974c:	9a07      	ldr	r2, [sp, #28]
 800974e:	b352      	cbz	r2, 80097a6 <_dtoa_r+0x50e>
 8009750:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009754:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009758:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800975c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009760:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009764:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009768:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800976c:	ee14 2a90 	vmov	r2, s9
 8009770:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009774:	3230      	adds	r2, #48	; 0x30
 8009776:	ee36 6b45 	vsub.f64	d6, d6, d5
 800977a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800977e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009782:	f808 2b01 	strb.w	r2, [r8], #1
 8009786:	d439      	bmi.n	80097fc <_dtoa_r+0x564>
 8009788:	ee32 5b46 	vsub.f64	d5, d2, d6
 800978c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009794:	d472      	bmi.n	800987c <_dtoa_r+0x5e4>
 8009796:	45a0      	cmp	r8, r4
 8009798:	f43f af6b 	beq.w	8009672 <_dtoa_r+0x3da>
 800979c:	ee27 7b03 	vmul.f64	d7, d7, d3
 80097a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80097a4:	e7e0      	b.n	8009768 <_dtoa_r+0x4d0>
 80097a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80097aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80097ae:	4621      	mov	r1, r4
 80097b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80097b4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80097b8:	ee14 2a90 	vmov	r2, s9
 80097bc:	3230      	adds	r2, #48	; 0x30
 80097be:	f808 2b01 	strb.w	r2, [r8], #1
 80097c2:	45a0      	cmp	r8, r4
 80097c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80097c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80097cc:	d118      	bne.n	8009800 <_dtoa_r+0x568>
 80097ce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80097d2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80097d6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80097da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097de:	dc4d      	bgt.n	800987c <_dtoa_r+0x5e4>
 80097e0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80097e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80097e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ec:	f57f af41 	bpl.w	8009672 <_dtoa_r+0x3da>
 80097f0:	4688      	mov	r8, r1
 80097f2:	3901      	subs	r1, #1
 80097f4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80097f8:	2b30      	cmp	r3, #48	; 0x30
 80097fa:	d0f9      	beq.n	80097f0 <_dtoa_r+0x558>
 80097fc:	46bb      	mov	fp, r7
 80097fe:	e02a      	b.n	8009856 <_dtoa_r+0x5be>
 8009800:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009804:	e7d6      	b.n	80097b4 <_dtoa_r+0x51c>
 8009806:	ed9d 7b02 	vldr	d7, [sp, #8]
 800980a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800980e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009812:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009816:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800981a:	ee15 3a10 	vmov	r3, s10
 800981e:	3330      	adds	r3, #48	; 0x30
 8009820:	f808 3b01 	strb.w	r3, [r8], #1
 8009824:	9b01      	ldr	r3, [sp, #4]
 8009826:	eba8 0303 	sub.w	r3, r8, r3
 800982a:	4599      	cmp	r9, r3
 800982c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009830:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009834:	d133      	bne.n	800989e <_dtoa_r+0x606>
 8009836:	ee37 7b07 	vadd.f64	d7, d7, d7
 800983a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800983e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009842:	dc1a      	bgt.n	800987a <_dtoa_r+0x5e2>
 8009844:	eeb4 7b46 	vcmp.f64	d7, d6
 8009848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800984c:	d103      	bne.n	8009856 <_dtoa_r+0x5be>
 800984e:	ee15 3a10 	vmov	r3, s10
 8009852:	07d9      	lsls	r1, r3, #31
 8009854:	d411      	bmi.n	800987a <_dtoa_r+0x5e2>
 8009856:	4629      	mov	r1, r5
 8009858:	4630      	mov	r0, r6
 800985a:	f000 fcf7 	bl	800a24c <_Bfree>
 800985e:	2300      	movs	r3, #0
 8009860:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009862:	f888 3000 	strb.w	r3, [r8]
 8009866:	f10b 0301 	add.w	r3, fp, #1
 800986a:	6013      	str	r3, [r2, #0]
 800986c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800986e:	2b00      	cmp	r3, #0
 8009870:	f43f ad61 	beq.w	8009336 <_dtoa_r+0x9e>
 8009874:	f8c3 8000 	str.w	r8, [r3]
 8009878:	e55d      	b.n	8009336 <_dtoa_r+0x9e>
 800987a:	465f      	mov	r7, fp
 800987c:	4643      	mov	r3, r8
 800987e:	4698      	mov	r8, r3
 8009880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009884:	2a39      	cmp	r2, #57	; 0x39
 8009886:	d106      	bne.n	8009896 <_dtoa_r+0x5fe>
 8009888:	9a01      	ldr	r2, [sp, #4]
 800988a:	429a      	cmp	r2, r3
 800988c:	d1f7      	bne.n	800987e <_dtoa_r+0x5e6>
 800988e:	9901      	ldr	r1, [sp, #4]
 8009890:	2230      	movs	r2, #48	; 0x30
 8009892:	3701      	adds	r7, #1
 8009894:	700a      	strb	r2, [r1, #0]
 8009896:	781a      	ldrb	r2, [r3, #0]
 8009898:	3201      	adds	r2, #1
 800989a:	701a      	strb	r2, [r3, #0]
 800989c:	e7ae      	b.n	80097fc <_dtoa_r+0x564>
 800989e:	ee27 7b04 	vmul.f64	d7, d7, d4
 80098a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80098a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098aa:	d1b2      	bne.n	8009812 <_dtoa_r+0x57a>
 80098ac:	e7d3      	b.n	8009856 <_dtoa_r+0x5be>
 80098ae:	bf00      	nop
 80098b0:	0800b378 	.word	0x0800b378
 80098b4:	0800b350 	.word	0x0800b350
 80098b8:	9907      	ldr	r1, [sp, #28]
 80098ba:	2900      	cmp	r1, #0
 80098bc:	f000 80d0 	beq.w	8009a60 <_dtoa_r+0x7c8>
 80098c0:	9906      	ldr	r1, [sp, #24]
 80098c2:	2901      	cmp	r1, #1
 80098c4:	f300 80b4 	bgt.w	8009a30 <_dtoa_r+0x798>
 80098c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80098ca:	2900      	cmp	r1, #0
 80098cc:	f000 80ac 	beq.w	8009a28 <_dtoa_r+0x790>
 80098d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80098d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80098d8:	461c      	mov	r4, r3
 80098da:	930a      	str	r3, [sp, #40]	; 0x28
 80098dc:	9b04      	ldr	r3, [sp, #16]
 80098de:	4413      	add	r3, r2
 80098e0:	9304      	str	r3, [sp, #16]
 80098e2:	9b05      	ldr	r3, [sp, #20]
 80098e4:	2101      	movs	r1, #1
 80098e6:	4413      	add	r3, r2
 80098e8:	4630      	mov	r0, r6
 80098ea:	9305      	str	r3, [sp, #20]
 80098ec:	f000 fd66 	bl	800a3bc <__i2b>
 80098f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098f2:	4607      	mov	r7, r0
 80098f4:	f1b8 0f00 	cmp.w	r8, #0
 80098f8:	dd0d      	ble.n	8009916 <_dtoa_r+0x67e>
 80098fa:	9a05      	ldr	r2, [sp, #20]
 80098fc:	2a00      	cmp	r2, #0
 80098fe:	dd0a      	ble.n	8009916 <_dtoa_r+0x67e>
 8009900:	4542      	cmp	r2, r8
 8009902:	9904      	ldr	r1, [sp, #16]
 8009904:	bfa8      	it	ge
 8009906:	4642      	movge	r2, r8
 8009908:	1a89      	subs	r1, r1, r2
 800990a:	9104      	str	r1, [sp, #16]
 800990c:	9905      	ldr	r1, [sp, #20]
 800990e:	eba8 0802 	sub.w	r8, r8, r2
 8009912:	1a8a      	subs	r2, r1, r2
 8009914:	9205      	str	r2, [sp, #20]
 8009916:	b303      	cbz	r3, 800995a <_dtoa_r+0x6c2>
 8009918:	9a07      	ldr	r2, [sp, #28]
 800991a:	2a00      	cmp	r2, #0
 800991c:	f000 80a5 	beq.w	8009a6a <_dtoa_r+0x7d2>
 8009920:	2c00      	cmp	r4, #0
 8009922:	dd13      	ble.n	800994c <_dtoa_r+0x6b4>
 8009924:	4639      	mov	r1, r7
 8009926:	4622      	mov	r2, r4
 8009928:	4630      	mov	r0, r6
 800992a:	930d      	str	r3, [sp, #52]	; 0x34
 800992c:	f000 fe06 	bl	800a53c <__pow5mult>
 8009930:	462a      	mov	r2, r5
 8009932:	4601      	mov	r1, r0
 8009934:	4607      	mov	r7, r0
 8009936:	4630      	mov	r0, r6
 8009938:	f000 fd56 	bl	800a3e8 <__multiply>
 800993c:	4629      	mov	r1, r5
 800993e:	900a      	str	r0, [sp, #40]	; 0x28
 8009940:	4630      	mov	r0, r6
 8009942:	f000 fc83 	bl	800a24c <_Bfree>
 8009946:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009948:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800994a:	4615      	mov	r5, r2
 800994c:	1b1a      	subs	r2, r3, r4
 800994e:	d004      	beq.n	800995a <_dtoa_r+0x6c2>
 8009950:	4629      	mov	r1, r5
 8009952:	4630      	mov	r0, r6
 8009954:	f000 fdf2 	bl	800a53c <__pow5mult>
 8009958:	4605      	mov	r5, r0
 800995a:	2101      	movs	r1, #1
 800995c:	4630      	mov	r0, r6
 800995e:	f000 fd2d 	bl	800a3bc <__i2b>
 8009962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009964:	2b00      	cmp	r3, #0
 8009966:	4604      	mov	r4, r0
 8009968:	f340 8081 	ble.w	8009a6e <_dtoa_r+0x7d6>
 800996c:	461a      	mov	r2, r3
 800996e:	4601      	mov	r1, r0
 8009970:	4630      	mov	r0, r6
 8009972:	f000 fde3 	bl	800a53c <__pow5mult>
 8009976:	9b06      	ldr	r3, [sp, #24]
 8009978:	2b01      	cmp	r3, #1
 800997a:	4604      	mov	r4, r0
 800997c:	dd7a      	ble.n	8009a74 <_dtoa_r+0x7dc>
 800997e:	2300      	movs	r3, #0
 8009980:	930a      	str	r3, [sp, #40]	; 0x28
 8009982:	6922      	ldr	r2, [r4, #16]
 8009984:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009988:	6910      	ldr	r0, [r2, #16]
 800998a:	f000 fcc7 	bl	800a31c <__hi0bits>
 800998e:	f1c0 0020 	rsb	r0, r0, #32
 8009992:	9b05      	ldr	r3, [sp, #20]
 8009994:	4418      	add	r0, r3
 8009996:	f010 001f 	ands.w	r0, r0, #31
 800999a:	f000 808c 	beq.w	8009ab6 <_dtoa_r+0x81e>
 800999e:	f1c0 0220 	rsb	r2, r0, #32
 80099a2:	2a04      	cmp	r2, #4
 80099a4:	f340 8085 	ble.w	8009ab2 <_dtoa_r+0x81a>
 80099a8:	f1c0 001c 	rsb	r0, r0, #28
 80099ac:	9b04      	ldr	r3, [sp, #16]
 80099ae:	4403      	add	r3, r0
 80099b0:	9304      	str	r3, [sp, #16]
 80099b2:	9b05      	ldr	r3, [sp, #20]
 80099b4:	4403      	add	r3, r0
 80099b6:	4480      	add	r8, r0
 80099b8:	9305      	str	r3, [sp, #20]
 80099ba:	9b04      	ldr	r3, [sp, #16]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	dd05      	ble.n	80099cc <_dtoa_r+0x734>
 80099c0:	4629      	mov	r1, r5
 80099c2:	461a      	mov	r2, r3
 80099c4:	4630      	mov	r0, r6
 80099c6:	f000 fe13 	bl	800a5f0 <__lshift>
 80099ca:	4605      	mov	r5, r0
 80099cc:	9b05      	ldr	r3, [sp, #20]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	dd05      	ble.n	80099de <_dtoa_r+0x746>
 80099d2:	4621      	mov	r1, r4
 80099d4:	461a      	mov	r2, r3
 80099d6:	4630      	mov	r0, r6
 80099d8:	f000 fe0a 	bl	800a5f0 <__lshift>
 80099dc:	4604      	mov	r4, r0
 80099de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d06a      	beq.n	8009aba <_dtoa_r+0x822>
 80099e4:	4621      	mov	r1, r4
 80099e6:	4628      	mov	r0, r5
 80099e8:	f000 fe72 	bl	800a6d0 <__mcmp>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	da64      	bge.n	8009aba <_dtoa_r+0x822>
 80099f0:	2300      	movs	r3, #0
 80099f2:	4629      	mov	r1, r5
 80099f4:	220a      	movs	r2, #10
 80099f6:	4630      	mov	r0, r6
 80099f8:	f000 fc4a 	bl	800a290 <__multadd>
 80099fc:	9b07      	ldr	r3, [sp, #28]
 80099fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a02:	4605      	mov	r5, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 8191 	beq.w	8009d2c <_dtoa_r+0xa94>
 8009a0a:	4639      	mov	r1, r7
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	220a      	movs	r2, #10
 8009a10:	4630      	mov	r0, r6
 8009a12:	f000 fc3d 	bl	800a290 <__multadd>
 8009a16:	f1ba 0f00 	cmp.w	sl, #0
 8009a1a:	4607      	mov	r7, r0
 8009a1c:	f300 808d 	bgt.w	8009b3a <_dtoa_r+0x8a2>
 8009a20:	9b06      	ldr	r3, [sp, #24]
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	dc50      	bgt.n	8009ac8 <_dtoa_r+0x830>
 8009a26:	e088      	b.n	8009b3a <_dtoa_r+0x8a2>
 8009a28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a2a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009a2e:	e751      	b.n	80098d4 <_dtoa_r+0x63c>
 8009a30:	f109 34ff 	add.w	r4, r9, #4294967295
 8009a34:	42a3      	cmp	r3, r4
 8009a36:	bfbf      	itttt	lt
 8009a38:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009a3a:	1ae3      	sublt	r3, r4, r3
 8009a3c:	18d2      	addlt	r2, r2, r3
 8009a3e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009a40:	bfb6      	itet	lt
 8009a42:	4623      	movlt	r3, r4
 8009a44:	1b1c      	subge	r4, r3, r4
 8009a46:	2400      	movlt	r4, #0
 8009a48:	f1b9 0f00 	cmp.w	r9, #0
 8009a4c:	bfb5      	itete	lt
 8009a4e:	9a04      	ldrlt	r2, [sp, #16]
 8009a50:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009a54:	eba2 0809 	sublt.w	r8, r2, r9
 8009a58:	464a      	movge	r2, r9
 8009a5a:	bfb8      	it	lt
 8009a5c:	2200      	movlt	r2, #0
 8009a5e:	e73c      	b.n	80098da <_dtoa_r+0x642>
 8009a60:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009a64:	9f07      	ldr	r7, [sp, #28]
 8009a66:	461c      	mov	r4, r3
 8009a68:	e744      	b.n	80098f4 <_dtoa_r+0x65c>
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	e770      	b.n	8009950 <_dtoa_r+0x6b8>
 8009a6e:	9b06      	ldr	r3, [sp, #24]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	dc18      	bgt.n	8009aa6 <_dtoa_r+0x80e>
 8009a74:	9b02      	ldr	r3, [sp, #8]
 8009a76:	b9b3      	cbnz	r3, 8009aa6 <_dtoa_r+0x80e>
 8009a78:	9b03      	ldr	r3, [sp, #12]
 8009a7a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009a7e:	b9a2      	cbnz	r2, 8009aaa <_dtoa_r+0x812>
 8009a80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009a84:	0d12      	lsrs	r2, r2, #20
 8009a86:	0512      	lsls	r2, r2, #20
 8009a88:	b18a      	cbz	r2, 8009aae <_dtoa_r+0x816>
 8009a8a:	9b04      	ldr	r3, [sp, #16]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	9304      	str	r3, [sp, #16]
 8009a90:	9b05      	ldr	r3, [sp, #20]
 8009a92:	3301      	adds	r3, #1
 8009a94:	9305      	str	r3, [sp, #20]
 8009a96:	2301      	movs	r3, #1
 8009a98:	930a      	str	r3, [sp, #40]	; 0x28
 8009a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f47f af70 	bne.w	8009982 <_dtoa_r+0x6ea>
 8009aa2:	2001      	movs	r0, #1
 8009aa4:	e775      	b.n	8009992 <_dtoa_r+0x6fa>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	e7f6      	b.n	8009a98 <_dtoa_r+0x800>
 8009aaa:	9b02      	ldr	r3, [sp, #8]
 8009aac:	e7f4      	b.n	8009a98 <_dtoa_r+0x800>
 8009aae:	920a      	str	r2, [sp, #40]	; 0x28
 8009ab0:	e7f3      	b.n	8009a9a <_dtoa_r+0x802>
 8009ab2:	d082      	beq.n	80099ba <_dtoa_r+0x722>
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	301c      	adds	r0, #28
 8009ab8:	e778      	b.n	80099ac <_dtoa_r+0x714>
 8009aba:	f1b9 0f00 	cmp.w	r9, #0
 8009abe:	dc37      	bgt.n	8009b30 <_dtoa_r+0x898>
 8009ac0:	9b06      	ldr	r3, [sp, #24]
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	dd34      	ble.n	8009b30 <_dtoa_r+0x898>
 8009ac6:	46ca      	mov	sl, r9
 8009ac8:	f1ba 0f00 	cmp.w	sl, #0
 8009acc:	d10d      	bne.n	8009aea <_dtoa_r+0x852>
 8009ace:	4621      	mov	r1, r4
 8009ad0:	4653      	mov	r3, sl
 8009ad2:	2205      	movs	r2, #5
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	f000 fbdb 	bl	800a290 <__multadd>
 8009ada:	4601      	mov	r1, r0
 8009adc:	4604      	mov	r4, r0
 8009ade:	4628      	mov	r0, r5
 8009ae0:	f000 fdf6 	bl	800a6d0 <__mcmp>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	f73f adeb 	bgt.w	80096c0 <_dtoa_r+0x428>
 8009aea:	9b08      	ldr	r3, [sp, #32]
 8009aec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009af0:	ea6f 0b03 	mvn.w	fp, r3
 8009af4:	f04f 0900 	mov.w	r9, #0
 8009af8:	4621      	mov	r1, r4
 8009afa:	4630      	mov	r0, r6
 8009afc:	f000 fba6 	bl	800a24c <_Bfree>
 8009b00:	2f00      	cmp	r7, #0
 8009b02:	f43f aea8 	beq.w	8009856 <_dtoa_r+0x5be>
 8009b06:	f1b9 0f00 	cmp.w	r9, #0
 8009b0a:	d005      	beq.n	8009b18 <_dtoa_r+0x880>
 8009b0c:	45b9      	cmp	r9, r7
 8009b0e:	d003      	beq.n	8009b18 <_dtoa_r+0x880>
 8009b10:	4649      	mov	r1, r9
 8009b12:	4630      	mov	r0, r6
 8009b14:	f000 fb9a 	bl	800a24c <_Bfree>
 8009b18:	4639      	mov	r1, r7
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	f000 fb96 	bl	800a24c <_Bfree>
 8009b20:	e699      	b.n	8009856 <_dtoa_r+0x5be>
 8009b22:	2400      	movs	r4, #0
 8009b24:	4627      	mov	r7, r4
 8009b26:	e7e0      	b.n	8009aea <_dtoa_r+0x852>
 8009b28:	46bb      	mov	fp, r7
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	4607      	mov	r7, r0
 8009b2e:	e5c7      	b.n	80096c0 <_dtoa_r+0x428>
 8009b30:	9b07      	ldr	r3, [sp, #28]
 8009b32:	46ca      	mov	sl, r9
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 8100 	beq.w	8009d3a <_dtoa_r+0xaa2>
 8009b3a:	f1b8 0f00 	cmp.w	r8, #0
 8009b3e:	dd05      	ble.n	8009b4c <_dtoa_r+0x8b4>
 8009b40:	4639      	mov	r1, r7
 8009b42:	4642      	mov	r2, r8
 8009b44:	4630      	mov	r0, r6
 8009b46:	f000 fd53 	bl	800a5f0 <__lshift>
 8009b4a:	4607      	mov	r7, r0
 8009b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d05d      	beq.n	8009c0e <_dtoa_r+0x976>
 8009b52:	6879      	ldr	r1, [r7, #4]
 8009b54:	4630      	mov	r0, r6
 8009b56:	f000 fb39 	bl	800a1cc <_Balloc>
 8009b5a:	4680      	mov	r8, r0
 8009b5c:	b928      	cbnz	r0, 8009b6a <_dtoa_r+0x8d2>
 8009b5e:	4b82      	ldr	r3, [pc, #520]	; (8009d68 <_dtoa_r+0xad0>)
 8009b60:	4602      	mov	r2, r0
 8009b62:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009b66:	f7ff bbaf 	b.w	80092c8 <_dtoa_r+0x30>
 8009b6a:	693a      	ldr	r2, [r7, #16]
 8009b6c:	3202      	adds	r2, #2
 8009b6e:	0092      	lsls	r2, r2, #2
 8009b70:	f107 010c 	add.w	r1, r7, #12
 8009b74:	300c      	adds	r0, #12
 8009b76:	f7fe fd45 	bl	8008604 <memcpy>
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	4641      	mov	r1, r8
 8009b7e:	4630      	mov	r0, r6
 8009b80:	f000 fd36 	bl	800a5f0 <__lshift>
 8009b84:	9b01      	ldr	r3, [sp, #4]
 8009b86:	3301      	adds	r3, #1
 8009b88:	9304      	str	r3, [sp, #16]
 8009b8a:	9b01      	ldr	r3, [sp, #4]
 8009b8c:	4453      	add	r3, sl
 8009b8e:	9308      	str	r3, [sp, #32]
 8009b90:	9b02      	ldr	r3, [sp, #8]
 8009b92:	f003 0301 	and.w	r3, r3, #1
 8009b96:	46b9      	mov	r9, r7
 8009b98:	9307      	str	r3, [sp, #28]
 8009b9a:	4607      	mov	r7, r0
 8009b9c:	9b04      	ldr	r3, [sp, #16]
 8009b9e:	4621      	mov	r1, r4
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	9302      	str	r3, [sp, #8]
 8009ba6:	f7ff faeb 	bl	8009180 <quorem>
 8009baa:	4603      	mov	r3, r0
 8009bac:	3330      	adds	r3, #48	; 0x30
 8009bae:	9005      	str	r0, [sp, #20]
 8009bb0:	4649      	mov	r1, r9
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb6:	f000 fd8b 	bl	800a6d0 <__mcmp>
 8009bba:	463a      	mov	r2, r7
 8009bbc:	4682      	mov	sl, r0
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f000 fda1 	bl	800a708 <__mdiff>
 8009bc6:	68c2      	ldr	r2, [r0, #12]
 8009bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bca:	4680      	mov	r8, r0
 8009bcc:	bb0a      	cbnz	r2, 8009c12 <_dtoa_r+0x97a>
 8009bce:	4601      	mov	r1, r0
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	f000 fd7d 	bl	800a6d0 <__mcmp>
 8009bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd8:	4602      	mov	r2, r0
 8009bda:	4641      	mov	r1, r8
 8009bdc:	4630      	mov	r0, r6
 8009bde:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009be2:	f000 fb33 	bl	800a24c <_Bfree>
 8009be6:	9b06      	ldr	r3, [sp, #24]
 8009be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bea:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009bee:	ea43 0102 	orr.w	r1, r3, r2
 8009bf2:	9b07      	ldr	r3, [sp, #28]
 8009bf4:	430b      	orrs	r3, r1
 8009bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf8:	d10d      	bne.n	8009c16 <_dtoa_r+0x97e>
 8009bfa:	2b39      	cmp	r3, #57	; 0x39
 8009bfc:	d029      	beq.n	8009c52 <_dtoa_r+0x9ba>
 8009bfe:	f1ba 0f00 	cmp.w	sl, #0
 8009c02:	dd01      	ble.n	8009c08 <_dtoa_r+0x970>
 8009c04:	9b05      	ldr	r3, [sp, #20]
 8009c06:	3331      	adds	r3, #49	; 0x31
 8009c08:	9a02      	ldr	r2, [sp, #8]
 8009c0a:	7013      	strb	r3, [r2, #0]
 8009c0c:	e774      	b.n	8009af8 <_dtoa_r+0x860>
 8009c0e:	4638      	mov	r0, r7
 8009c10:	e7b8      	b.n	8009b84 <_dtoa_r+0x8ec>
 8009c12:	2201      	movs	r2, #1
 8009c14:	e7e1      	b.n	8009bda <_dtoa_r+0x942>
 8009c16:	f1ba 0f00 	cmp.w	sl, #0
 8009c1a:	db06      	blt.n	8009c2a <_dtoa_r+0x992>
 8009c1c:	9906      	ldr	r1, [sp, #24]
 8009c1e:	ea41 0a0a 	orr.w	sl, r1, sl
 8009c22:	9907      	ldr	r1, [sp, #28]
 8009c24:	ea5a 0101 	orrs.w	r1, sl, r1
 8009c28:	d120      	bne.n	8009c6c <_dtoa_r+0x9d4>
 8009c2a:	2a00      	cmp	r2, #0
 8009c2c:	ddec      	ble.n	8009c08 <_dtoa_r+0x970>
 8009c2e:	4629      	mov	r1, r5
 8009c30:	2201      	movs	r2, #1
 8009c32:	4630      	mov	r0, r6
 8009c34:	9304      	str	r3, [sp, #16]
 8009c36:	f000 fcdb 	bl	800a5f0 <__lshift>
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4605      	mov	r5, r0
 8009c3e:	f000 fd47 	bl	800a6d0 <__mcmp>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	9b04      	ldr	r3, [sp, #16]
 8009c46:	dc02      	bgt.n	8009c4e <_dtoa_r+0x9b6>
 8009c48:	d1de      	bne.n	8009c08 <_dtoa_r+0x970>
 8009c4a:	07da      	lsls	r2, r3, #31
 8009c4c:	d5dc      	bpl.n	8009c08 <_dtoa_r+0x970>
 8009c4e:	2b39      	cmp	r3, #57	; 0x39
 8009c50:	d1d8      	bne.n	8009c04 <_dtoa_r+0x96c>
 8009c52:	9a02      	ldr	r2, [sp, #8]
 8009c54:	2339      	movs	r3, #57	; 0x39
 8009c56:	7013      	strb	r3, [r2, #0]
 8009c58:	4643      	mov	r3, r8
 8009c5a:	4698      	mov	r8, r3
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009c62:	2a39      	cmp	r2, #57	; 0x39
 8009c64:	d051      	beq.n	8009d0a <_dtoa_r+0xa72>
 8009c66:	3201      	adds	r2, #1
 8009c68:	701a      	strb	r2, [r3, #0]
 8009c6a:	e745      	b.n	8009af8 <_dtoa_r+0x860>
 8009c6c:	2a00      	cmp	r2, #0
 8009c6e:	dd03      	ble.n	8009c78 <_dtoa_r+0x9e0>
 8009c70:	2b39      	cmp	r3, #57	; 0x39
 8009c72:	d0ee      	beq.n	8009c52 <_dtoa_r+0x9ba>
 8009c74:	3301      	adds	r3, #1
 8009c76:	e7c7      	b.n	8009c08 <_dtoa_r+0x970>
 8009c78:	9a04      	ldr	r2, [sp, #16]
 8009c7a:	9908      	ldr	r1, [sp, #32]
 8009c7c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009c80:	428a      	cmp	r2, r1
 8009c82:	d02b      	beq.n	8009cdc <_dtoa_r+0xa44>
 8009c84:	4629      	mov	r1, r5
 8009c86:	2300      	movs	r3, #0
 8009c88:	220a      	movs	r2, #10
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f000 fb00 	bl	800a290 <__multadd>
 8009c90:	45b9      	cmp	r9, r7
 8009c92:	4605      	mov	r5, r0
 8009c94:	f04f 0300 	mov.w	r3, #0
 8009c98:	f04f 020a 	mov.w	r2, #10
 8009c9c:	4649      	mov	r1, r9
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	d107      	bne.n	8009cb2 <_dtoa_r+0xa1a>
 8009ca2:	f000 faf5 	bl	800a290 <__multadd>
 8009ca6:	4681      	mov	r9, r0
 8009ca8:	4607      	mov	r7, r0
 8009caa:	9b04      	ldr	r3, [sp, #16]
 8009cac:	3301      	adds	r3, #1
 8009cae:	9304      	str	r3, [sp, #16]
 8009cb0:	e774      	b.n	8009b9c <_dtoa_r+0x904>
 8009cb2:	f000 faed 	bl	800a290 <__multadd>
 8009cb6:	4639      	mov	r1, r7
 8009cb8:	4681      	mov	r9, r0
 8009cba:	2300      	movs	r3, #0
 8009cbc:	220a      	movs	r2, #10
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	f000 fae6 	bl	800a290 <__multadd>
 8009cc4:	4607      	mov	r7, r0
 8009cc6:	e7f0      	b.n	8009caa <_dtoa_r+0xa12>
 8009cc8:	f1ba 0f00 	cmp.w	sl, #0
 8009ccc:	9a01      	ldr	r2, [sp, #4]
 8009cce:	bfcc      	ite	gt
 8009cd0:	46d0      	movgt	r8, sl
 8009cd2:	f04f 0801 	movle.w	r8, #1
 8009cd6:	4490      	add	r8, r2
 8009cd8:	f04f 0900 	mov.w	r9, #0
 8009cdc:	4629      	mov	r1, r5
 8009cde:	2201      	movs	r2, #1
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	9302      	str	r3, [sp, #8]
 8009ce4:	f000 fc84 	bl	800a5f0 <__lshift>
 8009ce8:	4621      	mov	r1, r4
 8009cea:	4605      	mov	r5, r0
 8009cec:	f000 fcf0 	bl	800a6d0 <__mcmp>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	dcb1      	bgt.n	8009c58 <_dtoa_r+0x9c0>
 8009cf4:	d102      	bne.n	8009cfc <_dtoa_r+0xa64>
 8009cf6:	9b02      	ldr	r3, [sp, #8]
 8009cf8:	07db      	lsls	r3, r3, #31
 8009cfa:	d4ad      	bmi.n	8009c58 <_dtoa_r+0x9c0>
 8009cfc:	4643      	mov	r3, r8
 8009cfe:	4698      	mov	r8, r3
 8009d00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d04:	2a30      	cmp	r2, #48	; 0x30
 8009d06:	d0fa      	beq.n	8009cfe <_dtoa_r+0xa66>
 8009d08:	e6f6      	b.n	8009af8 <_dtoa_r+0x860>
 8009d0a:	9a01      	ldr	r2, [sp, #4]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d1a4      	bne.n	8009c5a <_dtoa_r+0x9c2>
 8009d10:	f10b 0b01 	add.w	fp, fp, #1
 8009d14:	2331      	movs	r3, #49	; 0x31
 8009d16:	e778      	b.n	8009c0a <_dtoa_r+0x972>
 8009d18:	4b14      	ldr	r3, [pc, #80]	; (8009d6c <_dtoa_r+0xad4>)
 8009d1a:	f7ff bb27 	b.w	800936c <_dtoa_r+0xd4>
 8009d1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f47f ab03 	bne.w	800932c <_dtoa_r+0x94>
 8009d26:	4b12      	ldr	r3, [pc, #72]	; (8009d70 <_dtoa_r+0xad8>)
 8009d28:	f7ff bb20 	b.w	800936c <_dtoa_r+0xd4>
 8009d2c:	f1ba 0f00 	cmp.w	sl, #0
 8009d30:	dc03      	bgt.n	8009d3a <_dtoa_r+0xaa2>
 8009d32:	9b06      	ldr	r3, [sp, #24]
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	f73f aec7 	bgt.w	8009ac8 <_dtoa_r+0x830>
 8009d3a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d3e:	4621      	mov	r1, r4
 8009d40:	4628      	mov	r0, r5
 8009d42:	f7ff fa1d 	bl	8009180 <quorem>
 8009d46:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009d4a:	f808 3b01 	strb.w	r3, [r8], #1
 8009d4e:	9a01      	ldr	r2, [sp, #4]
 8009d50:	eba8 0202 	sub.w	r2, r8, r2
 8009d54:	4592      	cmp	sl, r2
 8009d56:	ddb7      	ble.n	8009cc8 <_dtoa_r+0xa30>
 8009d58:	4629      	mov	r1, r5
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	220a      	movs	r2, #10
 8009d5e:	4630      	mov	r0, r6
 8009d60:	f000 fa96 	bl	800a290 <__multadd>
 8009d64:	4605      	mov	r5, r0
 8009d66:	e7ea      	b.n	8009d3e <_dtoa_r+0xaa6>
 8009d68:	0800b283 	.word	0x0800b283
 8009d6c:	0800b1e0 	.word	0x0800b1e0
 8009d70:	0800b204 	.word	0x0800b204

08009d74 <__sflush_r>:
 8009d74:	898a      	ldrh	r2, [r1, #12]
 8009d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7a:	4605      	mov	r5, r0
 8009d7c:	0710      	lsls	r0, r2, #28
 8009d7e:	460c      	mov	r4, r1
 8009d80:	d458      	bmi.n	8009e34 <__sflush_r+0xc0>
 8009d82:	684b      	ldr	r3, [r1, #4]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	dc05      	bgt.n	8009d94 <__sflush_r+0x20>
 8009d88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	dc02      	bgt.n	8009d94 <__sflush_r+0x20>
 8009d8e:	2000      	movs	r0, #0
 8009d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d96:	2e00      	cmp	r6, #0
 8009d98:	d0f9      	beq.n	8009d8e <__sflush_r+0x1a>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009da0:	682f      	ldr	r7, [r5, #0]
 8009da2:	602b      	str	r3, [r5, #0]
 8009da4:	d032      	beq.n	8009e0c <__sflush_r+0x98>
 8009da6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009da8:	89a3      	ldrh	r3, [r4, #12]
 8009daa:	075a      	lsls	r2, r3, #29
 8009dac:	d505      	bpl.n	8009dba <__sflush_r+0x46>
 8009dae:	6863      	ldr	r3, [r4, #4]
 8009db0:	1ac0      	subs	r0, r0, r3
 8009db2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009db4:	b10b      	cbz	r3, 8009dba <__sflush_r+0x46>
 8009db6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009db8:	1ac0      	subs	r0, r0, r3
 8009dba:	2300      	movs	r3, #0
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dc0:	6a21      	ldr	r1, [r4, #32]
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	47b0      	blx	r6
 8009dc6:	1c43      	adds	r3, r0, #1
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	d106      	bne.n	8009dda <__sflush_r+0x66>
 8009dcc:	6829      	ldr	r1, [r5, #0]
 8009dce:	291d      	cmp	r1, #29
 8009dd0:	d82c      	bhi.n	8009e2c <__sflush_r+0xb8>
 8009dd2:	4a2a      	ldr	r2, [pc, #168]	; (8009e7c <__sflush_r+0x108>)
 8009dd4:	40ca      	lsrs	r2, r1
 8009dd6:	07d6      	lsls	r6, r2, #31
 8009dd8:	d528      	bpl.n	8009e2c <__sflush_r+0xb8>
 8009dda:	2200      	movs	r2, #0
 8009ddc:	6062      	str	r2, [r4, #4]
 8009dde:	04d9      	lsls	r1, r3, #19
 8009de0:	6922      	ldr	r2, [r4, #16]
 8009de2:	6022      	str	r2, [r4, #0]
 8009de4:	d504      	bpl.n	8009df0 <__sflush_r+0x7c>
 8009de6:	1c42      	adds	r2, r0, #1
 8009de8:	d101      	bne.n	8009dee <__sflush_r+0x7a>
 8009dea:	682b      	ldr	r3, [r5, #0]
 8009dec:	b903      	cbnz	r3, 8009df0 <__sflush_r+0x7c>
 8009dee:	6560      	str	r0, [r4, #84]	; 0x54
 8009df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009df2:	602f      	str	r7, [r5, #0]
 8009df4:	2900      	cmp	r1, #0
 8009df6:	d0ca      	beq.n	8009d8e <__sflush_r+0x1a>
 8009df8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dfc:	4299      	cmp	r1, r3
 8009dfe:	d002      	beq.n	8009e06 <__sflush_r+0x92>
 8009e00:	4628      	mov	r0, r5
 8009e02:	f000 fd7d 	bl	800a900 <_free_r>
 8009e06:	2000      	movs	r0, #0
 8009e08:	6360      	str	r0, [r4, #52]	; 0x34
 8009e0a:	e7c1      	b.n	8009d90 <__sflush_r+0x1c>
 8009e0c:	6a21      	ldr	r1, [r4, #32]
 8009e0e:	2301      	movs	r3, #1
 8009e10:	4628      	mov	r0, r5
 8009e12:	47b0      	blx	r6
 8009e14:	1c41      	adds	r1, r0, #1
 8009e16:	d1c7      	bne.n	8009da8 <__sflush_r+0x34>
 8009e18:	682b      	ldr	r3, [r5, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d0c4      	beq.n	8009da8 <__sflush_r+0x34>
 8009e1e:	2b1d      	cmp	r3, #29
 8009e20:	d001      	beq.n	8009e26 <__sflush_r+0xb2>
 8009e22:	2b16      	cmp	r3, #22
 8009e24:	d101      	bne.n	8009e2a <__sflush_r+0xb6>
 8009e26:	602f      	str	r7, [r5, #0]
 8009e28:	e7b1      	b.n	8009d8e <__sflush_r+0x1a>
 8009e2a:	89a3      	ldrh	r3, [r4, #12]
 8009e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e30:	81a3      	strh	r3, [r4, #12]
 8009e32:	e7ad      	b.n	8009d90 <__sflush_r+0x1c>
 8009e34:	690f      	ldr	r7, [r1, #16]
 8009e36:	2f00      	cmp	r7, #0
 8009e38:	d0a9      	beq.n	8009d8e <__sflush_r+0x1a>
 8009e3a:	0793      	lsls	r3, r2, #30
 8009e3c:	680e      	ldr	r6, [r1, #0]
 8009e3e:	bf08      	it	eq
 8009e40:	694b      	ldreq	r3, [r1, #20]
 8009e42:	600f      	str	r7, [r1, #0]
 8009e44:	bf18      	it	ne
 8009e46:	2300      	movne	r3, #0
 8009e48:	eba6 0807 	sub.w	r8, r6, r7
 8009e4c:	608b      	str	r3, [r1, #8]
 8009e4e:	f1b8 0f00 	cmp.w	r8, #0
 8009e52:	dd9c      	ble.n	8009d8e <__sflush_r+0x1a>
 8009e54:	6a21      	ldr	r1, [r4, #32]
 8009e56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e58:	4643      	mov	r3, r8
 8009e5a:	463a      	mov	r2, r7
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	47b0      	blx	r6
 8009e60:	2800      	cmp	r0, #0
 8009e62:	dc06      	bgt.n	8009e72 <__sflush_r+0xfe>
 8009e64:	89a3      	ldrh	r3, [r4, #12]
 8009e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e6a:	81a3      	strh	r3, [r4, #12]
 8009e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e70:	e78e      	b.n	8009d90 <__sflush_r+0x1c>
 8009e72:	4407      	add	r7, r0
 8009e74:	eba8 0800 	sub.w	r8, r8, r0
 8009e78:	e7e9      	b.n	8009e4e <__sflush_r+0xda>
 8009e7a:	bf00      	nop
 8009e7c:	20400001 	.word	0x20400001

08009e80 <_fflush_r>:
 8009e80:	b538      	push	{r3, r4, r5, lr}
 8009e82:	690b      	ldr	r3, [r1, #16]
 8009e84:	4605      	mov	r5, r0
 8009e86:	460c      	mov	r4, r1
 8009e88:	b913      	cbnz	r3, 8009e90 <_fflush_r+0x10>
 8009e8a:	2500      	movs	r5, #0
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	bd38      	pop	{r3, r4, r5, pc}
 8009e90:	b118      	cbz	r0, 8009e9a <_fflush_r+0x1a>
 8009e92:	6983      	ldr	r3, [r0, #24]
 8009e94:	b90b      	cbnz	r3, 8009e9a <_fflush_r+0x1a>
 8009e96:	f000 f887 	bl	8009fa8 <__sinit>
 8009e9a:	4b14      	ldr	r3, [pc, #80]	; (8009eec <_fflush_r+0x6c>)
 8009e9c:	429c      	cmp	r4, r3
 8009e9e:	d11b      	bne.n	8009ed8 <_fflush_r+0x58>
 8009ea0:	686c      	ldr	r4, [r5, #4]
 8009ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d0ef      	beq.n	8009e8a <_fflush_r+0xa>
 8009eaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009eac:	07d0      	lsls	r0, r2, #31
 8009eae:	d404      	bmi.n	8009eba <_fflush_r+0x3a>
 8009eb0:	0599      	lsls	r1, r3, #22
 8009eb2:	d402      	bmi.n	8009eba <_fflush_r+0x3a>
 8009eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eb6:	f000 f91a 	bl	800a0ee <__retarget_lock_acquire_recursive>
 8009eba:	4628      	mov	r0, r5
 8009ebc:	4621      	mov	r1, r4
 8009ebe:	f7ff ff59 	bl	8009d74 <__sflush_r>
 8009ec2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ec4:	07da      	lsls	r2, r3, #31
 8009ec6:	4605      	mov	r5, r0
 8009ec8:	d4e0      	bmi.n	8009e8c <_fflush_r+0xc>
 8009eca:	89a3      	ldrh	r3, [r4, #12]
 8009ecc:	059b      	lsls	r3, r3, #22
 8009ece:	d4dd      	bmi.n	8009e8c <_fflush_r+0xc>
 8009ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ed2:	f000 f90d 	bl	800a0f0 <__retarget_lock_release_recursive>
 8009ed6:	e7d9      	b.n	8009e8c <_fflush_r+0xc>
 8009ed8:	4b05      	ldr	r3, [pc, #20]	; (8009ef0 <_fflush_r+0x70>)
 8009eda:	429c      	cmp	r4, r3
 8009edc:	d101      	bne.n	8009ee2 <_fflush_r+0x62>
 8009ede:	68ac      	ldr	r4, [r5, #8]
 8009ee0:	e7df      	b.n	8009ea2 <_fflush_r+0x22>
 8009ee2:	4b04      	ldr	r3, [pc, #16]	; (8009ef4 <_fflush_r+0x74>)
 8009ee4:	429c      	cmp	r4, r3
 8009ee6:	bf08      	it	eq
 8009ee8:	68ec      	ldreq	r4, [r5, #12]
 8009eea:	e7da      	b.n	8009ea2 <_fflush_r+0x22>
 8009eec:	0800b2b4 	.word	0x0800b2b4
 8009ef0:	0800b2d4 	.word	0x0800b2d4
 8009ef4:	0800b294 	.word	0x0800b294

08009ef8 <std>:
 8009ef8:	2300      	movs	r3, #0
 8009efa:	b510      	push	{r4, lr}
 8009efc:	4604      	mov	r4, r0
 8009efe:	e9c0 3300 	strd	r3, r3, [r0]
 8009f02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f06:	6083      	str	r3, [r0, #8]
 8009f08:	8181      	strh	r1, [r0, #12]
 8009f0a:	6643      	str	r3, [r0, #100]	; 0x64
 8009f0c:	81c2      	strh	r2, [r0, #14]
 8009f0e:	6183      	str	r3, [r0, #24]
 8009f10:	4619      	mov	r1, r3
 8009f12:	2208      	movs	r2, #8
 8009f14:	305c      	adds	r0, #92	; 0x5c
 8009f16:	f7fe fb83 	bl	8008620 <memset>
 8009f1a:	4b05      	ldr	r3, [pc, #20]	; (8009f30 <std+0x38>)
 8009f1c:	6263      	str	r3, [r4, #36]	; 0x24
 8009f1e:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <std+0x3c>)
 8009f20:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f22:	4b05      	ldr	r3, [pc, #20]	; (8009f38 <std+0x40>)
 8009f24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f26:	4b05      	ldr	r3, [pc, #20]	; (8009f3c <std+0x44>)
 8009f28:	6224      	str	r4, [r4, #32]
 8009f2a:	6323      	str	r3, [r4, #48]	; 0x30
 8009f2c:	bd10      	pop	{r4, pc}
 8009f2e:	bf00      	nop
 8009f30:	0800ad95 	.word	0x0800ad95
 8009f34:	0800adb7 	.word	0x0800adb7
 8009f38:	0800adef 	.word	0x0800adef
 8009f3c:	0800ae13 	.word	0x0800ae13

08009f40 <_cleanup_r>:
 8009f40:	4901      	ldr	r1, [pc, #4]	; (8009f48 <_cleanup_r+0x8>)
 8009f42:	f000 b8af 	b.w	800a0a4 <_fwalk_reent>
 8009f46:	bf00      	nop
 8009f48:	08009e81 	.word	0x08009e81

08009f4c <__sfmoreglue>:
 8009f4c:	b570      	push	{r4, r5, r6, lr}
 8009f4e:	2268      	movs	r2, #104	; 0x68
 8009f50:	1e4d      	subs	r5, r1, #1
 8009f52:	4355      	muls	r5, r2
 8009f54:	460e      	mov	r6, r1
 8009f56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f5a:	f000 fd3d 	bl	800a9d8 <_malloc_r>
 8009f5e:	4604      	mov	r4, r0
 8009f60:	b140      	cbz	r0, 8009f74 <__sfmoreglue+0x28>
 8009f62:	2100      	movs	r1, #0
 8009f64:	e9c0 1600 	strd	r1, r6, [r0]
 8009f68:	300c      	adds	r0, #12
 8009f6a:	60a0      	str	r0, [r4, #8]
 8009f6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f70:	f7fe fb56 	bl	8008620 <memset>
 8009f74:	4620      	mov	r0, r4
 8009f76:	bd70      	pop	{r4, r5, r6, pc}

08009f78 <__sfp_lock_acquire>:
 8009f78:	4801      	ldr	r0, [pc, #4]	; (8009f80 <__sfp_lock_acquire+0x8>)
 8009f7a:	f000 b8b8 	b.w	800a0ee <__retarget_lock_acquire_recursive>
 8009f7e:	bf00      	nop
 8009f80:	24000431 	.word	0x24000431

08009f84 <__sfp_lock_release>:
 8009f84:	4801      	ldr	r0, [pc, #4]	; (8009f8c <__sfp_lock_release+0x8>)
 8009f86:	f000 b8b3 	b.w	800a0f0 <__retarget_lock_release_recursive>
 8009f8a:	bf00      	nop
 8009f8c:	24000431 	.word	0x24000431

08009f90 <__sinit_lock_acquire>:
 8009f90:	4801      	ldr	r0, [pc, #4]	; (8009f98 <__sinit_lock_acquire+0x8>)
 8009f92:	f000 b8ac 	b.w	800a0ee <__retarget_lock_acquire_recursive>
 8009f96:	bf00      	nop
 8009f98:	24000432 	.word	0x24000432

08009f9c <__sinit_lock_release>:
 8009f9c:	4801      	ldr	r0, [pc, #4]	; (8009fa4 <__sinit_lock_release+0x8>)
 8009f9e:	f000 b8a7 	b.w	800a0f0 <__retarget_lock_release_recursive>
 8009fa2:	bf00      	nop
 8009fa4:	24000432 	.word	0x24000432

08009fa8 <__sinit>:
 8009fa8:	b510      	push	{r4, lr}
 8009faa:	4604      	mov	r4, r0
 8009fac:	f7ff fff0 	bl	8009f90 <__sinit_lock_acquire>
 8009fb0:	69a3      	ldr	r3, [r4, #24]
 8009fb2:	b11b      	cbz	r3, 8009fbc <__sinit+0x14>
 8009fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fb8:	f7ff bff0 	b.w	8009f9c <__sinit_lock_release>
 8009fbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009fc0:	6523      	str	r3, [r4, #80]	; 0x50
 8009fc2:	4b13      	ldr	r3, [pc, #76]	; (800a010 <__sinit+0x68>)
 8009fc4:	4a13      	ldr	r2, [pc, #76]	; (800a014 <__sinit+0x6c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009fca:	42a3      	cmp	r3, r4
 8009fcc:	bf04      	itt	eq
 8009fce:	2301      	moveq	r3, #1
 8009fd0:	61a3      	streq	r3, [r4, #24]
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f000 f820 	bl	800a018 <__sfp>
 8009fd8:	6060      	str	r0, [r4, #4]
 8009fda:	4620      	mov	r0, r4
 8009fdc:	f000 f81c 	bl	800a018 <__sfp>
 8009fe0:	60a0      	str	r0, [r4, #8]
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f000 f818 	bl	800a018 <__sfp>
 8009fe8:	2200      	movs	r2, #0
 8009fea:	60e0      	str	r0, [r4, #12]
 8009fec:	2104      	movs	r1, #4
 8009fee:	6860      	ldr	r0, [r4, #4]
 8009ff0:	f7ff ff82 	bl	8009ef8 <std>
 8009ff4:	68a0      	ldr	r0, [r4, #8]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	2109      	movs	r1, #9
 8009ffa:	f7ff ff7d 	bl	8009ef8 <std>
 8009ffe:	68e0      	ldr	r0, [r4, #12]
 800a000:	2202      	movs	r2, #2
 800a002:	2112      	movs	r1, #18
 800a004:	f7ff ff78 	bl	8009ef8 <std>
 800a008:	2301      	movs	r3, #1
 800a00a:	61a3      	str	r3, [r4, #24]
 800a00c:	e7d2      	b.n	8009fb4 <__sinit+0xc>
 800a00e:	bf00      	nop
 800a010:	0800b1cc 	.word	0x0800b1cc
 800a014:	08009f41 	.word	0x08009f41

0800a018 <__sfp>:
 800a018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01a:	4607      	mov	r7, r0
 800a01c:	f7ff ffac 	bl	8009f78 <__sfp_lock_acquire>
 800a020:	4b1e      	ldr	r3, [pc, #120]	; (800a09c <__sfp+0x84>)
 800a022:	681e      	ldr	r6, [r3, #0]
 800a024:	69b3      	ldr	r3, [r6, #24]
 800a026:	b913      	cbnz	r3, 800a02e <__sfp+0x16>
 800a028:	4630      	mov	r0, r6
 800a02a:	f7ff ffbd 	bl	8009fa8 <__sinit>
 800a02e:	3648      	adds	r6, #72	; 0x48
 800a030:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a034:	3b01      	subs	r3, #1
 800a036:	d503      	bpl.n	800a040 <__sfp+0x28>
 800a038:	6833      	ldr	r3, [r6, #0]
 800a03a:	b30b      	cbz	r3, 800a080 <__sfp+0x68>
 800a03c:	6836      	ldr	r6, [r6, #0]
 800a03e:	e7f7      	b.n	800a030 <__sfp+0x18>
 800a040:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a044:	b9d5      	cbnz	r5, 800a07c <__sfp+0x64>
 800a046:	4b16      	ldr	r3, [pc, #88]	; (800a0a0 <__sfp+0x88>)
 800a048:	60e3      	str	r3, [r4, #12]
 800a04a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a04e:	6665      	str	r5, [r4, #100]	; 0x64
 800a050:	f000 f84c 	bl	800a0ec <__retarget_lock_init_recursive>
 800a054:	f7ff ff96 	bl	8009f84 <__sfp_lock_release>
 800a058:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a05c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a060:	6025      	str	r5, [r4, #0]
 800a062:	61a5      	str	r5, [r4, #24]
 800a064:	2208      	movs	r2, #8
 800a066:	4629      	mov	r1, r5
 800a068:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a06c:	f7fe fad8 	bl	8008620 <memset>
 800a070:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a074:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a078:	4620      	mov	r0, r4
 800a07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a07c:	3468      	adds	r4, #104	; 0x68
 800a07e:	e7d9      	b.n	800a034 <__sfp+0x1c>
 800a080:	2104      	movs	r1, #4
 800a082:	4638      	mov	r0, r7
 800a084:	f7ff ff62 	bl	8009f4c <__sfmoreglue>
 800a088:	4604      	mov	r4, r0
 800a08a:	6030      	str	r0, [r6, #0]
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d1d5      	bne.n	800a03c <__sfp+0x24>
 800a090:	f7ff ff78 	bl	8009f84 <__sfp_lock_release>
 800a094:	230c      	movs	r3, #12
 800a096:	603b      	str	r3, [r7, #0]
 800a098:	e7ee      	b.n	800a078 <__sfp+0x60>
 800a09a:	bf00      	nop
 800a09c:	0800b1cc 	.word	0x0800b1cc
 800a0a0:	ffff0001 	.word	0xffff0001

0800a0a4 <_fwalk_reent>:
 800a0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0a8:	4606      	mov	r6, r0
 800a0aa:	4688      	mov	r8, r1
 800a0ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0b0:	2700      	movs	r7, #0
 800a0b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0b6:	f1b9 0901 	subs.w	r9, r9, #1
 800a0ba:	d505      	bpl.n	800a0c8 <_fwalk_reent+0x24>
 800a0bc:	6824      	ldr	r4, [r4, #0]
 800a0be:	2c00      	cmp	r4, #0
 800a0c0:	d1f7      	bne.n	800a0b2 <_fwalk_reent+0xe>
 800a0c2:	4638      	mov	r0, r7
 800a0c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0c8:	89ab      	ldrh	r3, [r5, #12]
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d907      	bls.n	800a0de <_fwalk_reent+0x3a>
 800a0ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	d003      	beq.n	800a0de <_fwalk_reent+0x3a>
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	4630      	mov	r0, r6
 800a0da:	47c0      	blx	r8
 800a0dc:	4307      	orrs	r7, r0
 800a0de:	3568      	adds	r5, #104	; 0x68
 800a0e0:	e7e9      	b.n	800a0b6 <_fwalk_reent+0x12>
	...

0800a0e4 <_localeconv_r>:
 800a0e4:	4800      	ldr	r0, [pc, #0]	; (800a0e8 <_localeconv_r+0x4>)
 800a0e6:	4770      	bx	lr
 800a0e8:	24000164 	.word	0x24000164

0800a0ec <__retarget_lock_init_recursive>:
 800a0ec:	4770      	bx	lr

0800a0ee <__retarget_lock_acquire_recursive>:
 800a0ee:	4770      	bx	lr

0800a0f0 <__retarget_lock_release_recursive>:
 800a0f0:	4770      	bx	lr

0800a0f2 <__swhatbuf_r>:
 800a0f2:	b570      	push	{r4, r5, r6, lr}
 800a0f4:	460e      	mov	r6, r1
 800a0f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0fa:	2900      	cmp	r1, #0
 800a0fc:	b096      	sub	sp, #88	; 0x58
 800a0fe:	4614      	mov	r4, r2
 800a100:	461d      	mov	r5, r3
 800a102:	da08      	bge.n	800a116 <__swhatbuf_r+0x24>
 800a104:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a108:	2200      	movs	r2, #0
 800a10a:	602a      	str	r2, [r5, #0]
 800a10c:	061a      	lsls	r2, r3, #24
 800a10e:	d410      	bmi.n	800a132 <__swhatbuf_r+0x40>
 800a110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a114:	e00e      	b.n	800a134 <__swhatbuf_r+0x42>
 800a116:	466a      	mov	r2, sp
 800a118:	f000 fed2 	bl	800aec0 <_fstat_r>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	dbf1      	blt.n	800a104 <__swhatbuf_r+0x12>
 800a120:	9a01      	ldr	r2, [sp, #4]
 800a122:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a126:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a12a:	425a      	negs	r2, r3
 800a12c:	415a      	adcs	r2, r3
 800a12e:	602a      	str	r2, [r5, #0]
 800a130:	e7ee      	b.n	800a110 <__swhatbuf_r+0x1e>
 800a132:	2340      	movs	r3, #64	; 0x40
 800a134:	2000      	movs	r0, #0
 800a136:	6023      	str	r3, [r4, #0]
 800a138:	b016      	add	sp, #88	; 0x58
 800a13a:	bd70      	pop	{r4, r5, r6, pc}

0800a13c <__smakebuf_r>:
 800a13c:	898b      	ldrh	r3, [r1, #12]
 800a13e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a140:	079d      	lsls	r5, r3, #30
 800a142:	4606      	mov	r6, r0
 800a144:	460c      	mov	r4, r1
 800a146:	d507      	bpl.n	800a158 <__smakebuf_r+0x1c>
 800a148:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a14c:	6023      	str	r3, [r4, #0]
 800a14e:	6123      	str	r3, [r4, #16]
 800a150:	2301      	movs	r3, #1
 800a152:	6163      	str	r3, [r4, #20]
 800a154:	b002      	add	sp, #8
 800a156:	bd70      	pop	{r4, r5, r6, pc}
 800a158:	ab01      	add	r3, sp, #4
 800a15a:	466a      	mov	r2, sp
 800a15c:	f7ff ffc9 	bl	800a0f2 <__swhatbuf_r>
 800a160:	9900      	ldr	r1, [sp, #0]
 800a162:	4605      	mov	r5, r0
 800a164:	4630      	mov	r0, r6
 800a166:	f000 fc37 	bl	800a9d8 <_malloc_r>
 800a16a:	b948      	cbnz	r0, 800a180 <__smakebuf_r+0x44>
 800a16c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a170:	059a      	lsls	r2, r3, #22
 800a172:	d4ef      	bmi.n	800a154 <__smakebuf_r+0x18>
 800a174:	f023 0303 	bic.w	r3, r3, #3
 800a178:	f043 0302 	orr.w	r3, r3, #2
 800a17c:	81a3      	strh	r3, [r4, #12]
 800a17e:	e7e3      	b.n	800a148 <__smakebuf_r+0xc>
 800a180:	4b0d      	ldr	r3, [pc, #52]	; (800a1b8 <__smakebuf_r+0x7c>)
 800a182:	62b3      	str	r3, [r6, #40]	; 0x28
 800a184:	89a3      	ldrh	r3, [r4, #12]
 800a186:	6020      	str	r0, [r4, #0]
 800a188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a18c:	81a3      	strh	r3, [r4, #12]
 800a18e:	9b00      	ldr	r3, [sp, #0]
 800a190:	6163      	str	r3, [r4, #20]
 800a192:	9b01      	ldr	r3, [sp, #4]
 800a194:	6120      	str	r0, [r4, #16]
 800a196:	b15b      	cbz	r3, 800a1b0 <__smakebuf_r+0x74>
 800a198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a19c:	4630      	mov	r0, r6
 800a19e:	f000 fea1 	bl	800aee4 <_isatty_r>
 800a1a2:	b128      	cbz	r0, 800a1b0 <__smakebuf_r+0x74>
 800a1a4:	89a3      	ldrh	r3, [r4, #12]
 800a1a6:	f023 0303 	bic.w	r3, r3, #3
 800a1aa:	f043 0301 	orr.w	r3, r3, #1
 800a1ae:	81a3      	strh	r3, [r4, #12]
 800a1b0:	89a0      	ldrh	r0, [r4, #12]
 800a1b2:	4305      	orrs	r5, r0
 800a1b4:	81a5      	strh	r5, [r4, #12]
 800a1b6:	e7cd      	b.n	800a154 <__smakebuf_r+0x18>
 800a1b8:	08009f41 	.word	0x08009f41

0800a1bc <malloc>:
 800a1bc:	4b02      	ldr	r3, [pc, #8]	; (800a1c8 <malloc+0xc>)
 800a1be:	4601      	mov	r1, r0
 800a1c0:	6818      	ldr	r0, [r3, #0]
 800a1c2:	f000 bc09 	b.w	800a9d8 <_malloc_r>
 800a1c6:	bf00      	nop
 800a1c8:	24000010 	.word	0x24000010

0800a1cc <_Balloc>:
 800a1cc:	b570      	push	{r4, r5, r6, lr}
 800a1ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1d0:	4604      	mov	r4, r0
 800a1d2:	460d      	mov	r5, r1
 800a1d4:	b976      	cbnz	r6, 800a1f4 <_Balloc+0x28>
 800a1d6:	2010      	movs	r0, #16
 800a1d8:	f7ff fff0 	bl	800a1bc <malloc>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	6260      	str	r0, [r4, #36]	; 0x24
 800a1e0:	b920      	cbnz	r0, 800a1ec <_Balloc+0x20>
 800a1e2:	4b18      	ldr	r3, [pc, #96]	; (800a244 <_Balloc+0x78>)
 800a1e4:	4818      	ldr	r0, [pc, #96]	; (800a248 <_Balloc+0x7c>)
 800a1e6:	2166      	movs	r1, #102	; 0x66
 800a1e8:	f000 fe2a 	bl	800ae40 <__assert_func>
 800a1ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1f0:	6006      	str	r6, [r0, #0]
 800a1f2:	60c6      	str	r6, [r0, #12]
 800a1f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1f6:	68f3      	ldr	r3, [r6, #12]
 800a1f8:	b183      	cbz	r3, 800a21c <_Balloc+0x50>
 800a1fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a202:	b9b8      	cbnz	r0, 800a234 <_Balloc+0x68>
 800a204:	2101      	movs	r1, #1
 800a206:	fa01 f605 	lsl.w	r6, r1, r5
 800a20a:	1d72      	adds	r2, r6, #5
 800a20c:	0092      	lsls	r2, r2, #2
 800a20e:	4620      	mov	r0, r4
 800a210:	f000 fb60 	bl	800a8d4 <_calloc_r>
 800a214:	b160      	cbz	r0, 800a230 <_Balloc+0x64>
 800a216:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a21a:	e00e      	b.n	800a23a <_Balloc+0x6e>
 800a21c:	2221      	movs	r2, #33	; 0x21
 800a21e:	2104      	movs	r1, #4
 800a220:	4620      	mov	r0, r4
 800a222:	f000 fb57 	bl	800a8d4 <_calloc_r>
 800a226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a228:	60f0      	str	r0, [r6, #12]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1e4      	bne.n	800a1fa <_Balloc+0x2e>
 800a230:	2000      	movs	r0, #0
 800a232:	bd70      	pop	{r4, r5, r6, pc}
 800a234:	6802      	ldr	r2, [r0, #0]
 800a236:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a23a:	2300      	movs	r3, #0
 800a23c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a240:	e7f7      	b.n	800a232 <_Balloc+0x66>
 800a242:	bf00      	nop
 800a244:	0800b211 	.word	0x0800b211
 800a248:	0800b2f4 	.word	0x0800b2f4

0800a24c <_Bfree>:
 800a24c:	b570      	push	{r4, r5, r6, lr}
 800a24e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a250:	4605      	mov	r5, r0
 800a252:	460c      	mov	r4, r1
 800a254:	b976      	cbnz	r6, 800a274 <_Bfree+0x28>
 800a256:	2010      	movs	r0, #16
 800a258:	f7ff ffb0 	bl	800a1bc <malloc>
 800a25c:	4602      	mov	r2, r0
 800a25e:	6268      	str	r0, [r5, #36]	; 0x24
 800a260:	b920      	cbnz	r0, 800a26c <_Bfree+0x20>
 800a262:	4b09      	ldr	r3, [pc, #36]	; (800a288 <_Bfree+0x3c>)
 800a264:	4809      	ldr	r0, [pc, #36]	; (800a28c <_Bfree+0x40>)
 800a266:	218a      	movs	r1, #138	; 0x8a
 800a268:	f000 fdea 	bl	800ae40 <__assert_func>
 800a26c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a270:	6006      	str	r6, [r0, #0]
 800a272:	60c6      	str	r6, [r0, #12]
 800a274:	b13c      	cbz	r4, 800a286 <_Bfree+0x3a>
 800a276:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a278:	6862      	ldr	r2, [r4, #4]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a280:	6021      	str	r1, [r4, #0]
 800a282:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a286:	bd70      	pop	{r4, r5, r6, pc}
 800a288:	0800b211 	.word	0x0800b211
 800a28c:	0800b2f4 	.word	0x0800b2f4

0800a290 <__multadd>:
 800a290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a294:	690d      	ldr	r5, [r1, #16]
 800a296:	4607      	mov	r7, r0
 800a298:	460c      	mov	r4, r1
 800a29a:	461e      	mov	r6, r3
 800a29c:	f101 0c14 	add.w	ip, r1, #20
 800a2a0:	2000      	movs	r0, #0
 800a2a2:	f8dc 3000 	ldr.w	r3, [ip]
 800a2a6:	b299      	uxth	r1, r3
 800a2a8:	fb02 6101 	mla	r1, r2, r1, r6
 800a2ac:	0c1e      	lsrs	r6, r3, #16
 800a2ae:	0c0b      	lsrs	r3, r1, #16
 800a2b0:	fb02 3306 	mla	r3, r2, r6, r3
 800a2b4:	b289      	uxth	r1, r1
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2bc:	4285      	cmp	r5, r0
 800a2be:	f84c 1b04 	str.w	r1, [ip], #4
 800a2c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2c6:	dcec      	bgt.n	800a2a2 <__multadd+0x12>
 800a2c8:	b30e      	cbz	r6, 800a30e <__multadd+0x7e>
 800a2ca:	68a3      	ldr	r3, [r4, #8]
 800a2cc:	42ab      	cmp	r3, r5
 800a2ce:	dc19      	bgt.n	800a304 <__multadd+0x74>
 800a2d0:	6861      	ldr	r1, [r4, #4]
 800a2d2:	4638      	mov	r0, r7
 800a2d4:	3101      	adds	r1, #1
 800a2d6:	f7ff ff79 	bl	800a1cc <_Balloc>
 800a2da:	4680      	mov	r8, r0
 800a2dc:	b928      	cbnz	r0, 800a2ea <__multadd+0x5a>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	4b0c      	ldr	r3, [pc, #48]	; (800a314 <__multadd+0x84>)
 800a2e2:	480d      	ldr	r0, [pc, #52]	; (800a318 <__multadd+0x88>)
 800a2e4:	21b5      	movs	r1, #181	; 0xb5
 800a2e6:	f000 fdab 	bl	800ae40 <__assert_func>
 800a2ea:	6922      	ldr	r2, [r4, #16]
 800a2ec:	3202      	adds	r2, #2
 800a2ee:	f104 010c 	add.w	r1, r4, #12
 800a2f2:	0092      	lsls	r2, r2, #2
 800a2f4:	300c      	adds	r0, #12
 800a2f6:	f7fe f985 	bl	8008604 <memcpy>
 800a2fa:	4621      	mov	r1, r4
 800a2fc:	4638      	mov	r0, r7
 800a2fe:	f7ff ffa5 	bl	800a24c <_Bfree>
 800a302:	4644      	mov	r4, r8
 800a304:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a308:	3501      	adds	r5, #1
 800a30a:	615e      	str	r6, [r3, #20]
 800a30c:	6125      	str	r5, [r4, #16]
 800a30e:	4620      	mov	r0, r4
 800a310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a314:	0800b283 	.word	0x0800b283
 800a318:	0800b2f4 	.word	0x0800b2f4

0800a31c <__hi0bits>:
 800a31c:	0c03      	lsrs	r3, r0, #16
 800a31e:	041b      	lsls	r3, r3, #16
 800a320:	b9d3      	cbnz	r3, 800a358 <__hi0bits+0x3c>
 800a322:	0400      	lsls	r0, r0, #16
 800a324:	2310      	movs	r3, #16
 800a326:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a32a:	bf04      	itt	eq
 800a32c:	0200      	lsleq	r0, r0, #8
 800a32e:	3308      	addeq	r3, #8
 800a330:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a334:	bf04      	itt	eq
 800a336:	0100      	lsleq	r0, r0, #4
 800a338:	3304      	addeq	r3, #4
 800a33a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a33e:	bf04      	itt	eq
 800a340:	0080      	lsleq	r0, r0, #2
 800a342:	3302      	addeq	r3, #2
 800a344:	2800      	cmp	r0, #0
 800a346:	db05      	blt.n	800a354 <__hi0bits+0x38>
 800a348:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a34c:	f103 0301 	add.w	r3, r3, #1
 800a350:	bf08      	it	eq
 800a352:	2320      	moveq	r3, #32
 800a354:	4618      	mov	r0, r3
 800a356:	4770      	bx	lr
 800a358:	2300      	movs	r3, #0
 800a35a:	e7e4      	b.n	800a326 <__hi0bits+0xa>

0800a35c <__lo0bits>:
 800a35c:	6803      	ldr	r3, [r0, #0]
 800a35e:	f013 0207 	ands.w	r2, r3, #7
 800a362:	4601      	mov	r1, r0
 800a364:	d00b      	beq.n	800a37e <__lo0bits+0x22>
 800a366:	07da      	lsls	r2, r3, #31
 800a368:	d423      	bmi.n	800a3b2 <__lo0bits+0x56>
 800a36a:	0798      	lsls	r0, r3, #30
 800a36c:	bf49      	itett	mi
 800a36e:	085b      	lsrmi	r3, r3, #1
 800a370:	089b      	lsrpl	r3, r3, #2
 800a372:	2001      	movmi	r0, #1
 800a374:	600b      	strmi	r3, [r1, #0]
 800a376:	bf5c      	itt	pl
 800a378:	600b      	strpl	r3, [r1, #0]
 800a37a:	2002      	movpl	r0, #2
 800a37c:	4770      	bx	lr
 800a37e:	b298      	uxth	r0, r3
 800a380:	b9a8      	cbnz	r0, 800a3ae <__lo0bits+0x52>
 800a382:	0c1b      	lsrs	r3, r3, #16
 800a384:	2010      	movs	r0, #16
 800a386:	b2da      	uxtb	r2, r3
 800a388:	b90a      	cbnz	r2, 800a38e <__lo0bits+0x32>
 800a38a:	3008      	adds	r0, #8
 800a38c:	0a1b      	lsrs	r3, r3, #8
 800a38e:	071a      	lsls	r2, r3, #28
 800a390:	bf04      	itt	eq
 800a392:	091b      	lsreq	r3, r3, #4
 800a394:	3004      	addeq	r0, #4
 800a396:	079a      	lsls	r2, r3, #30
 800a398:	bf04      	itt	eq
 800a39a:	089b      	lsreq	r3, r3, #2
 800a39c:	3002      	addeq	r0, #2
 800a39e:	07da      	lsls	r2, r3, #31
 800a3a0:	d403      	bmi.n	800a3aa <__lo0bits+0x4e>
 800a3a2:	085b      	lsrs	r3, r3, #1
 800a3a4:	f100 0001 	add.w	r0, r0, #1
 800a3a8:	d005      	beq.n	800a3b6 <__lo0bits+0x5a>
 800a3aa:	600b      	str	r3, [r1, #0]
 800a3ac:	4770      	bx	lr
 800a3ae:	4610      	mov	r0, r2
 800a3b0:	e7e9      	b.n	800a386 <__lo0bits+0x2a>
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	4770      	bx	lr
 800a3b6:	2020      	movs	r0, #32
 800a3b8:	4770      	bx	lr
	...

0800a3bc <__i2b>:
 800a3bc:	b510      	push	{r4, lr}
 800a3be:	460c      	mov	r4, r1
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	f7ff ff03 	bl	800a1cc <_Balloc>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	b928      	cbnz	r0, 800a3d6 <__i2b+0x1a>
 800a3ca:	4b05      	ldr	r3, [pc, #20]	; (800a3e0 <__i2b+0x24>)
 800a3cc:	4805      	ldr	r0, [pc, #20]	; (800a3e4 <__i2b+0x28>)
 800a3ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a3d2:	f000 fd35 	bl	800ae40 <__assert_func>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	6144      	str	r4, [r0, #20]
 800a3da:	6103      	str	r3, [r0, #16]
 800a3dc:	bd10      	pop	{r4, pc}
 800a3de:	bf00      	nop
 800a3e0:	0800b283 	.word	0x0800b283
 800a3e4:	0800b2f4 	.word	0x0800b2f4

0800a3e8 <__multiply>:
 800a3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ec:	4691      	mov	r9, r2
 800a3ee:	690a      	ldr	r2, [r1, #16]
 800a3f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	bfb8      	it	lt
 800a3f8:	460b      	movlt	r3, r1
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	bfbc      	itt	lt
 800a3fe:	464c      	movlt	r4, r9
 800a400:	4699      	movlt	r9, r3
 800a402:	6927      	ldr	r7, [r4, #16]
 800a404:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a408:	68a3      	ldr	r3, [r4, #8]
 800a40a:	6861      	ldr	r1, [r4, #4]
 800a40c:	eb07 060a 	add.w	r6, r7, sl
 800a410:	42b3      	cmp	r3, r6
 800a412:	b085      	sub	sp, #20
 800a414:	bfb8      	it	lt
 800a416:	3101      	addlt	r1, #1
 800a418:	f7ff fed8 	bl	800a1cc <_Balloc>
 800a41c:	b930      	cbnz	r0, 800a42c <__multiply+0x44>
 800a41e:	4602      	mov	r2, r0
 800a420:	4b44      	ldr	r3, [pc, #272]	; (800a534 <__multiply+0x14c>)
 800a422:	4845      	ldr	r0, [pc, #276]	; (800a538 <__multiply+0x150>)
 800a424:	f240 115d 	movw	r1, #349	; 0x15d
 800a428:	f000 fd0a 	bl	800ae40 <__assert_func>
 800a42c:	f100 0514 	add.w	r5, r0, #20
 800a430:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a434:	462b      	mov	r3, r5
 800a436:	2200      	movs	r2, #0
 800a438:	4543      	cmp	r3, r8
 800a43a:	d321      	bcc.n	800a480 <__multiply+0x98>
 800a43c:	f104 0314 	add.w	r3, r4, #20
 800a440:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a444:	f109 0314 	add.w	r3, r9, #20
 800a448:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a44c:	9202      	str	r2, [sp, #8]
 800a44e:	1b3a      	subs	r2, r7, r4
 800a450:	3a15      	subs	r2, #21
 800a452:	f022 0203 	bic.w	r2, r2, #3
 800a456:	3204      	adds	r2, #4
 800a458:	f104 0115 	add.w	r1, r4, #21
 800a45c:	428f      	cmp	r7, r1
 800a45e:	bf38      	it	cc
 800a460:	2204      	movcc	r2, #4
 800a462:	9201      	str	r2, [sp, #4]
 800a464:	9a02      	ldr	r2, [sp, #8]
 800a466:	9303      	str	r3, [sp, #12]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d80c      	bhi.n	800a486 <__multiply+0x9e>
 800a46c:	2e00      	cmp	r6, #0
 800a46e:	dd03      	ble.n	800a478 <__multiply+0x90>
 800a470:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a474:	2b00      	cmp	r3, #0
 800a476:	d05a      	beq.n	800a52e <__multiply+0x146>
 800a478:	6106      	str	r6, [r0, #16]
 800a47a:	b005      	add	sp, #20
 800a47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a480:	f843 2b04 	str.w	r2, [r3], #4
 800a484:	e7d8      	b.n	800a438 <__multiply+0x50>
 800a486:	f8b3 a000 	ldrh.w	sl, [r3]
 800a48a:	f1ba 0f00 	cmp.w	sl, #0
 800a48e:	d024      	beq.n	800a4da <__multiply+0xf2>
 800a490:	f104 0e14 	add.w	lr, r4, #20
 800a494:	46a9      	mov	r9, r5
 800a496:	f04f 0c00 	mov.w	ip, #0
 800a49a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a49e:	f8d9 1000 	ldr.w	r1, [r9]
 800a4a2:	fa1f fb82 	uxth.w	fp, r2
 800a4a6:	b289      	uxth	r1, r1
 800a4a8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a4ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a4b0:	f8d9 2000 	ldr.w	r2, [r9]
 800a4b4:	4461      	add	r1, ip
 800a4b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4ba:	fb0a c20b 	mla	r2, sl, fp, ip
 800a4be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a4c2:	b289      	uxth	r1, r1
 800a4c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a4c8:	4577      	cmp	r7, lr
 800a4ca:	f849 1b04 	str.w	r1, [r9], #4
 800a4ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4d2:	d8e2      	bhi.n	800a49a <__multiply+0xb2>
 800a4d4:	9a01      	ldr	r2, [sp, #4]
 800a4d6:	f845 c002 	str.w	ip, [r5, r2]
 800a4da:	9a03      	ldr	r2, [sp, #12]
 800a4dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	f1b9 0f00 	cmp.w	r9, #0
 800a4e6:	d020      	beq.n	800a52a <__multiply+0x142>
 800a4e8:	6829      	ldr	r1, [r5, #0]
 800a4ea:	f104 0c14 	add.w	ip, r4, #20
 800a4ee:	46ae      	mov	lr, r5
 800a4f0:	f04f 0a00 	mov.w	sl, #0
 800a4f4:	f8bc b000 	ldrh.w	fp, [ip]
 800a4f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a4fc:	fb09 220b 	mla	r2, r9, fp, r2
 800a500:	4492      	add	sl, r2
 800a502:	b289      	uxth	r1, r1
 800a504:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a508:	f84e 1b04 	str.w	r1, [lr], #4
 800a50c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a510:	f8be 1000 	ldrh.w	r1, [lr]
 800a514:	0c12      	lsrs	r2, r2, #16
 800a516:	fb09 1102 	mla	r1, r9, r2, r1
 800a51a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a51e:	4567      	cmp	r7, ip
 800a520:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a524:	d8e6      	bhi.n	800a4f4 <__multiply+0x10c>
 800a526:	9a01      	ldr	r2, [sp, #4]
 800a528:	50a9      	str	r1, [r5, r2]
 800a52a:	3504      	adds	r5, #4
 800a52c:	e79a      	b.n	800a464 <__multiply+0x7c>
 800a52e:	3e01      	subs	r6, #1
 800a530:	e79c      	b.n	800a46c <__multiply+0x84>
 800a532:	bf00      	nop
 800a534:	0800b283 	.word	0x0800b283
 800a538:	0800b2f4 	.word	0x0800b2f4

0800a53c <__pow5mult>:
 800a53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a540:	4615      	mov	r5, r2
 800a542:	f012 0203 	ands.w	r2, r2, #3
 800a546:	4606      	mov	r6, r0
 800a548:	460f      	mov	r7, r1
 800a54a:	d007      	beq.n	800a55c <__pow5mult+0x20>
 800a54c:	4c25      	ldr	r4, [pc, #148]	; (800a5e4 <__pow5mult+0xa8>)
 800a54e:	3a01      	subs	r2, #1
 800a550:	2300      	movs	r3, #0
 800a552:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a556:	f7ff fe9b 	bl	800a290 <__multadd>
 800a55a:	4607      	mov	r7, r0
 800a55c:	10ad      	asrs	r5, r5, #2
 800a55e:	d03d      	beq.n	800a5dc <__pow5mult+0xa0>
 800a560:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a562:	b97c      	cbnz	r4, 800a584 <__pow5mult+0x48>
 800a564:	2010      	movs	r0, #16
 800a566:	f7ff fe29 	bl	800a1bc <malloc>
 800a56a:	4602      	mov	r2, r0
 800a56c:	6270      	str	r0, [r6, #36]	; 0x24
 800a56e:	b928      	cbnz	r0, 800a57c <__pow5mult+0x40>
 800a570:	4b1d      	ldr	r3, [pc, #116]	; (800a5e8 <__pow5mult+0xac>)
 800a572:	481e      	ldr	r0, [pc, #120]	; (800a5ec <__pow5mult+0xb0>)
 800a574:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a578:	f000 fc62 	bl	800ae40 <__assert_func>
 800a57c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a580:	6004      	str	r4, [r0, #0]
 800a582:	60c4      	str	r4, [r0, #12]
 800a584:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a588:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a58c:	b94c      	cbnz	r4, 800a5a2 <__pow5mult+0x66>
 800a58e:	f240 2171 	movw	r1, #625	; 0x271
 800a592:	4630      	mov	r0, r6
 800a594:	f7ff ff12 	bl	800a3bc <__i2b>
 800a598:	2300      	movs	r3, #0
 800a59a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a59e:	4604      	mov	r4, r0
 800a5a0:	6003      	str	r3, [r0, #0]
 800a5a2:	f04f 0900 	mov.w	r9, #0
 800a5a6:	07eb      	lsls	r3, r5, #31
 800a5a8:	d50a      	bpl.n	800a5c0 <__pow5mult+0x84>
 800a5aa:	4639      	mov	r1, r7
 800a5ac:	4622      	mov	r2, r4
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	f7ff ff1a 	bl	800a3e8 <__multiply>
 800a5b4:	4639      	mov	r1, r7
 800a5b6:	4680      	mov	r8, r0
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	f7ff fe47 	bl	800a24c <_Bfree>
 800a5be:	4647      	mov	r7, r8
 800a5c0:	106d      	asrs	r5, r5, #1
 800a5c2:	d00b      	beq.n	800a5dc <__pow5mult+0xa0>
 800a5c4:	6820      	ldr	r0, [r4, #0]
 800a5c6:	b938      	cbnz	r0, 800a5d8 <__pow5mult+0x9c>
 800a5c8:	4622      	mov	r2, r4
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f7ff ff0b 	bl	800a3e8 <__multiply>
 800a5d2:	6020      	str	r0, [r4, #0]
 800a5d4:	f8c0 9000 	str.w	r9, [r0]
 800a5d8:	4604      	mov	r4, r0
 800a5da:	e7e4      	b.n	800a5a6 <__pow5mult+0x6a>
 800a5dc:	4638      	mov	r0, r7
 800a5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5e2:	bf00      	nop
 800a5e4:	0800b440 	.word	0x0800b440
 800a5e8:	0800b211 	.word	0x0800b211
 800a5ec:	0800b2f4 	.word	0x0800b2f4

0800a5f0 <__lshift>:
 800a5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f4:	460c      	mov	r4, r1
 800a5f6:	6849      	ldr	r1, [r1, #4]
 800a5f8:	6923      	ldr	r3, [r4, #16]
 800a5fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5fe:	68a3      	ldr	r3, [r4, #8]
 800a600:	4607      	mov	r7, r0
 800a602:	4691      	mov	r9, r2
 800a604:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a608:	f108 0601 	add.w	r6, r8, #1
 800a60c:	42b3      	cmp	r3, r6
 800a60e:	db0b      	blt.n	800a628 <__lshift+0x38>
 800a610:	4638      	mov	r0, r7
 800a612:	f7ff fddb 	bl	800a1cc <_Balloc>
 800a616:	4605      	mov	r5, r0
 800a618:	b948      	cbnz	r0, 800a62e <__lshift+0x3e>
 800a61a:	4602      	mov	r2, r0
 800a61c:	4b2a      	ldr	r3, [pc, #168]	; (800a6c8 <__lshift+0xd8>)
 800a61e:	482b      	ldr	r0, [pc, #172]	; (800a6cc <__lshift+0xdc>)
 800a620:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a624:	f000 fc0c 	bl	800ae40 <__assert_func>
 800a628:	3101      	adds	r1, #1
 800a62a:	005b      	lsls	r3, r3, #1
 800a62c:	e7ee      	b.n	800a60c <__lshift+0x1c>
 800a62e:	2300      	movs	r3, #0
 800a630:	f100 0114 	add.w	r1, r0, #20
 800a634:	f100 0210 	add.w	r2, r0, #16
 800a638:	4618      	mov	r0, r3
 800a63a:	4553      	cmp	r3, sl
 800a63c:	db37      	blt.n	800a6ae <__lshift+0xbe>
 800a63e:	6920      	ldr	r0, [r4, #16]
 800a640:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a644:	f104 0314 	add.w	r3, r4, #20
 800a648:	f019 091f 	ands.w	r9, r9, #31
 800a64c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a650:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a654:	d02f      	beq.n	800a6b6 <__lshift+0xc6>
 800a656:	f1c9 0e20 	rsb	lr, r9, #32
 800a65a:	468a      	mov	sl, r1
 800a65c:	f04f 0c00 	mov.w	ip, #0
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	fa02 f209 	lsl.w	r2, r2, r9
 800a666:	ea42 020c 	orr.w	r2, r2, ip
 800a66a:	f84a 2b04 	str.w	r2, [sl], #4
 800a66e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a672:	4298      	cmp	r0, r3
 800a674:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a678:	d8f2      	bhi.n	800a660 <__lshift+0x70>
 800a67a:	1b03      	subs	r3, r0, r4
 800a67c:	3b15      	subs	r3, #21
 800a67e:	f023 0303 	bic.w	r3, r3, #3
 800a682:	3304      	adds	r3, #4
 800a684:	f104 0215 	add.w	r2, r4, #21
 800a688:	4290      	cmp	r0, r2
 800a68a:	bf38      	it	cc
 800a68c:	2304      	movcc	r3, #4
 800a68e:	f841 c003 	str.w	ip, [r1, r3]
 800a692:	f1bc 0f00 	cmp.w	ip, #0
 800a696:	d001      	beq.n	800a69c <__lshift+0xac>
 800a698:	f108 0602 	add.w	r6, r8, #2
 800a69c:	3e01      	subs	r6, #1
 800a69e:	4638      	mov	r0, r7
 800a6a0:	612e      	str	r6, [r5, #16]
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	f7ff fdd2 	bl	800a24c <_Bfree>
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	e7c1      	b.n	800a63a <__lshift+0x4a>
 800a6b6:	3904      	subs	r1, #4
 800a6b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6c0:	4298      	cmp	r0, r3
 800a6c2:	d8f9      	bhi.n	800a6b8 <__lshift+0xc8>
 800a6c4:	e7ea      	b.n	800a69c <__lshift+0xac>
 800a6c6:	bf00      	nop
 800a6c8:	0800b283 	.word	0x0800b283
 800a6cc:	0800b2f4 	.word	0x0800b2f4

0800a6d0 <__mcmp>:
 800a6d0:	b530      	push	{r4, r5, lr}
 800a6d2:	6902      	ldr	r2, [r0, #16]
 800a6d4:	690c      	ldr	r4, [r1, #16]
 800a6d6:	1b12      	subs	r2, r2, r4
 800a6d8:	d10e      	bne.n	800a6f8 <__mcmp+0x28>
 800a6da:	f100 0314 	add.w	r3, r0, #20
 800a6de:	3114      	adds	r1, #20
 800a6e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a6e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a6ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a6f0:	42a5      	cmp	r5, r4
 800a6f2:	d003      	beq.n	800a6fc <__mcmp+0x2c>
 800a6f4:	d305      	bcc.n	800a702 <__mcmp+0x32>
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	bd30      	pop	{r4, r5, pc}
 800a6fc:	4283      	cmp	r3, r0
 800a6fe:	d3f3      	bcc.n	800a6e8 <__mcmp+0x18>
 800a700:	e7fa      	b.n	800a6f8 <__mcmp+0x28>
 800a702:	f04f 32ff 	mov.w	r2, #4294967295
 800a706:	e7f7      	b.n	800a6f8 <__mcmp+0x28>

0800a708 <__mdiff>:
 800a708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70c:	460c      	mov	r4, r1
 800a70e:	4606      	mov	r6, r0
 800a710:	4611      	mov	r1, r2
 800a712:	4620      	mov	r0, r4
 800a714:	4690      	mov	r8, r2
 800a716:	f7ff ffdb 	bl	800a6d0 <__mcmp>
 800a71a:	1e05      	subs	r5, r0, #0
 800a71c:	d110      	bne.n	800a740 <__mdiff+0x38>
 800a71e:	4629      	mov	r1, r5
 800a720:	4630      	mov	r0, r6
 800a722:	f7ff fd53 	bl	800a1cc <_Balloc>
 800a726:	b930      	cbnz	r0, 800a736 <__mdiff+0x2e>
 800a728:	4b3a      	ldr	r3, [pc, #232]	; (800a814 <__mdiff+0x10c>)
 800a72a:	4602      	mov	r2, r0
 800a72c:	f240 2132 	movw	r1, #562	; 0x232
 800a730:	4839      	ldr	r0, [pc, #228]	; (800a818 <__mdiff+0x110>)
 800a732:	f000 fb85 	bl	800ae40 <__assert_func>
 800a736:	2301      	movs	r3, #1
 800a738:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a73c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a740:	bfa4      	itt	ge
 800a742:	4643      	movge	r3, r8
 800a744:	46a0      	movge	r8, r4
 800a746:	4630      	mov	r0, r6
 800a748:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a74c:	bfa6      	itte	ge
 800a74e:	461c      	movge	r4, r3
 800a750:	2500      	movge	r5, #0
 800a752:	2501      	movlt	r5, #1
 800a754:	f7ff fd3a 	bl	800a1cc <_Balloc>
 800a758:	b920      	cbnz	r0, 800a764 <__mdiff+0x5c>
 800a75a:	4b2e      	ldr	r3, [pc, #184]	; (800a814 <__mdiff+0x10c>)
 800a75c:	4602      	mov	r2, r0
 800a75e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a762:	e7e5      	b.n	800a730 <__mdiff+0x28>
 800a764:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a768:	6926      	ldr	r6, [r4, #16]
 800a76a:	60c5      	str	r5, [r0, #12]
 800a76c:	f104 0914 	add.w	r9, r4, #20
 800a770:	f108 0514 	add.w	r5, r8, #20
 800a774:	f100 0e14 	add.w	lr, r0, #20
 800a778:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a77c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a780:	f108 0210 	add.w	r2, r8, #16
 800a784:	46f2      	mov	sl, lr
 800a786:	2100      	movs	r1, #0
 800a788:	f859 3b04 	ldr.w	r3, [r9], #4
 800a78c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a790:	fa1f f883 	uxth.w	r8, r3
 800a794:	fa11 f18b 	uxtah	r1, r1, fp
 800a798:	0c1b      	lsrs	r3, r3, #16
 800a79a:	eba1 0808 	sub.w	r8, r1, r8
 800a79e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a7a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a7a6:	fa1f f888 	uxth.w	r8, r8
 800a7aa:	1419      	asrs	r1, r3, #16
 800a7ac:	454e      	cmp	r6, r9
 800a7ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a7b2:	f84a 3b04 	str.w	r3, [sl], #4
 800a7b6:	d8e7      	bhi.n	800a788 <__mdiff+0x80>
 800a7b8:	1b33      	subs	r3, r6, r4
 800a7ba:	3b15      	subs	r3, #21
 800a7bc:	f023 0303 	bic.w	r3, r3, #3
 800a7c0:	3304      	adds	r3, #4
 800a7c2:	3415      	adds	r4, #21
 800a7c4:	42a6      	cmp	r6, r4
 800a7c6:	bf38      	it	cc
 800a7c8:	2304      	movcc	r3, #4
 800a7ca:	441d      	add	r5, r3
 800a7cc:	4473      	add	r3, lr
 800a7ce:	469e      	mov	lr, r3
 800a7d0:	462e      	mov	r6, r5
 800a7d2:	4566      	cmp	r6, ip
 800a7d4:	d30e      	bcc.n	800a7f4 <__mdiff+0xec>
 800a7d6:	f10c 0203 	add.w	r2, ip, #3
 800a7da:	1b52      	subs	r2, r2, r5
 800a7dc:	f022 0203 	bic.w	r2, r2, #3
 800a7e0:	3d03      	subs	r5, #3
 800a7e2:	45ac      	cmp	ip, r5
 800a7e4:	bf38      	it	cc
 800a7e6:	2200      	movcc	r2, #0
 800a7e8:	441a      	add	r2, r3
 800a7ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a7ee:	b17b      	cbz	r3, 800a810 <__mdiff+0x108>
 800a7f0:	6107      	str	r7, [r0, #16]
 800a7f2:	e7a3      	b.n	800a73c <__mdiff+0x34>
 800a7f4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a7f8:	fa11 f288 	uxtah	r2, r1, r8
 800a7fc:	1414      	asrs	r4, r2, #16
 800a7fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a802:	b292      	uxth	r2, r2
 800a804:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a808:	f84e 2b04 	str.w	r2, [lr], #4
 800a80c:	1421      	asrs	r1, r4, #16
 800a80e:	e7e0      	b.n	800a7d2 <__mdiff+0xca>
 800a810:	3f01      	subs	r7, #1
 800a812:	e7ea      	b.n	800a7ea <__mdiff+0xe2>
 800a814:	0800b283 	.word	0x0800b283
 800a818:	0800b2f4 	.word	0x0800b2f4

0800a81c <__d2b>:
 800a81c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a820:	4689      	mov	r9, r1
 800a822:	2101      	movs	r1, #1
 800a824:	ec57 6b10 	vmov	r6, r7, d0
 800a828:	4690      	mov	r8, r2
 800a82a:	f7ff fccf 	bl	800a1cc <_Balloc>
 800a82e:	4604      	mov	r4, r0
 800a830:	b930      	cbnz	r0, 800a840 <__d2b+0x24>
 800a832:	4602      	mov	r2, r0
 800a834:	4b25      	ldr	r3, [pc, #148]	; (800a8cc <__d2b+0xb0>)
 800a836:	4826      	ldr	r0, [pc, #152]	; (800a8d0 <__d2b+0xb4>)
 800a838:	f240 310a 	movw	r1, #778	; 0x30a
 800a83c:	f000 fb00 	bl	800ae40 <__assert_func>
 800a840:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a844:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a848:	bb35      	cbnz	r5, 800a898 <__d2b+0x7c>
 800a84a:	2e00      	cmp	r6, #0
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	d028      	beq.n	800a8a2 <__d2b+0x86>
 800a850:	4668      	mov	r0, sp
 800a852:	9600      	str	r6, [sp, #0]
 800a854:	f7ff fd82 	bl	800a35c <__lo0bits>
 800a858:	9900      	ldr	r1, [sp, #0]
 800a85a:	b300      	cbz	r0, 800a89e <__d2b+0x82>
 800a85c:	9a01      	ldr	r2, [sp, #4]
 800a85e:	f1c0 0320 	rsb	r3, r0, #32
 800a862:	fa02 f303 	lsl.w	r3, r2, r3
 800a866:	430b      	orrs	r3, r1
 800a868:	40c2      	lsrs	r2, r0
 800a86a:	6163      	str	r3, [r4, #20]
 800a86c:	9201      	str	r2, [sp, #4]
 800a86e:	9b01      	ldr	r3, [sp, #4]
 800a870:	61a3      	str	r3, [r4, #24]
 800a872:	2b00      	cmp	r3, #0
 800a874:	bf14      	ite	ne
 800a876:	2202      	movne	r2, #2
 800a878:	2201      	moveq	r2, #1
 800a87a:	6122      	str	r2, [r4, #16]
 800a87c:	b1d5      	cbz	r5, 800a8b4 <__d2b+0x98>
 800a87e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a882:	4405      	add	r5, r0
 800a884:	f8c9 5000 	str.w	r5, [r9]
 800a888:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a88c:	f8c8 0000 	str.w	r0, [r8]
 800a890:	4620      	mov	r0, r4
 800a892:	b003      	add	sp, #12
 800a894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a898:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a89c:	e7d5      	b.n	800a84a <__d2b+0x2e>
 800a89e:	6161      	str	r1, [r4, #20]
 800a8a0:	e7e5      	b.n	800a86e <__d2b+0x52>
 800a8a2:	a801      	add	r0, sp, #4
 800a8a4:	f7ff fd5a 	bl	800a35c <__lo0bits>
 800a8a8:	9b01      	ldr	r3, [sp, #4]
 800a8aa:	6163      	str	r3, [r4, #20]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	6122      	str	r2, [r4, #16]
 800a8b0:	3020      	adds	r0, #32
 800a8b2:	e7e3      	b.n	800a87c <__d2b+0x60>
 800a8b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8bc:	f8c9 0000 	str.w	r0, [r9]
 800a8c0:	6918      	ldr	r0, [r3, #16]
 800a8c2:	f7ff fd2b 	bl	800a31c <__hi0bits>
 800a8c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8ca:	e7df      	b.n	800a88c <__d2b+0x70>
 800a8cc:	0800b283 	.word	0x0800b283
 800a8d0:	0800b2f4 	.word	0x0800b2f4

0800a8d4 <_calloc_r>:
 800a8d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8d6:	fba1 2402 	umull	r2, r4, r1, r2
 800a8da:	b94c      	cbnz	r4, 800a8f0 <_calloc_r+0x1c>
 800a8dc:	4611      	mov	r1, r2
 800a8de:	9201      	str	r2, [sp, #4]
 800a8e0:	f000 f87a 	bl	800a9d8 <_malloc_r>
 800a8e4:	9a01      	ldr	r2, [sp, #4]
 800a8e6:	4605      	mov	r5, r0
 800a8e8:	b930      	cbnz	r0, 800a8f8 <_calloc_r+0x24>
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	b003      	add	sp, #12
 800a8ee:	bd30      	pop	{r4, r5, pc}
 800a8f0:	220c      	movs	r2, #12
 800a8f2:	6002      	str	r2, [r0, #0]
 800a8f4:	2500      	movs	r5, #0
 800a8f6:	e7f8      	b.n	800a8ea <_calloc_r+0x16>
 800a8f8:	4621      	mov	r1, r4
 800a8fa:	f7fd fe91 	bl	8008620 <memset>
 800a8fe:	e7f4      	b.n	800a8ea <_calloc_r+0x16>

0800a900 <_free_r>:
 800a900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a902:	2900      	cmp	r1, #0
 800a904:	d044      	beq.n	800a990 <_free_r+0x90>
 800a906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a90a:	9001      	str	r0, [sp, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f1a1 0404 	sub.w	r4, r1, #4
 800a912:	bfb8      	it	lt
 800a914:	18e4      	addlt	r4, r4, r3
 800a916:	f000 fb19 	bl	800af4c <__malloc_lock>
 800a91a:	4a1e      	ldr	r2, [pc, #120]	; (800a994 <_free_r+0x94>)
 800a91c:	9801      	ldr	r0, [sp, #4]
 800a91e:	6813      	ldr	r3, [r2, #0]
 800a920:	b933      	cbnz	r3, 800a930 <_free_r+0x30>
 800a922:	6063      	str	r3, [r4, #4]
 800a924:	6014      	str	r4, [r2, #0]
 800a926:	b003      	add	sp, #12
 800a928:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a92c:	f000 bb14 	b.w	800af58 <__malloc_unlock>
 800a930:	42a3      	cmp	r3, r4
 800a932:	d908      	bls.n	800a946 <_free_r+0x46>
 800a934:	6825      	ldr	r5, [r4, #0]
 800a936:	1961      	adds	r1, r4, r5
 800a938:	428b      	cmp	r3, r1
 800a93a:	bf01      	itttt	eq
 800a93c:	6819      	ldreq	r1, [r3, #0]
 800a93e:	685b      	ldreq	r3, [r3, #4]
 800a940:	1949      	addeq	r1, r1, r5
 800a942:	6021      	streq	r1, [r4, #0]
 800a944:	e7ed      	b.n	800a922 <_free_r+0x22>
 800a946:	461a      	mov	r2, r3
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	b10b      	cbz	r3, 800a950 <_free_r+0x50>
 800a94c:	42a3      	cmp	r3, r4
 800a94e:	d9fa      	bls.n	800a946 <_free_r+0x46>
 800a950:	6811      	ldr	r1, [r2, #0]
 800a952:	1855      	adds	r5, r2, r1
 800a954:	42a5      	cmp	r5, r4
 800a956:	d10b      	bne.n	800a970 <_free_r+0x70>
 800a958:	6824      	ldr	r4, [r4, #0]
 800a95a:	4421      	add	r1, r4
 800a95c:	1854      	adds	r4, r2, r1
 800a95e:	42a3      	cmp	r3, r4
 800a960:	6011      	str	r1, [r2, #0]
 800a962:	d1e0      	bne.n	800a926 <_free_r+0x26>
 800a964:	681c      	ldr	r4, [r3, #0]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	6053      	str	r3, [r2, #4]
 800a96a:	4421      	add	r1, r4
 800a96c:	6011      	str	r1, [r2, #0]
 800a96e:	e7da      	b.n	800a926 <_free_r+0x26>
 800a970:	d902      	bls.n	800a978 <_free_r+0x78>
 800a972:	230c      	movs	r3, #12
 800a974:	6003      	str	r3, [r0, #0]
 800a976:	e7d6      	b.n	800a926 <_free_r+0x26>
 800a978:	6825      	ldr	r5, [r4, #0]
 800a97a:	1961      	adds	r1, r4, r5
 800a97c:	428b      	cmp	r3, r1
 800a97e:	bf04      	itt	eq
 800a980:	6819      	ldreq	r1, [r3, #0]
 800a982:	685b      	ldreq	r3, [r3, #4]
 800a984:	6063      	str	r3, [r4, #4]
 800a986:	bf04      	itt	eq
 800a988:	1949      	addeq	r1, r1, r5
 800a98a:	6021      	streq	r1, [r4, #0]
 800a98c:	6054      	str	r4, [r2, #4]
 800a98e:	e7ca      	b.n	800a926 <_free_r+0x26>
 800a990:	b003      	add	sp, #12
 800a992:	bd30      	pop	{r4, r5, pc}
 800a994:	24000434 	.word	0x24000434

0800a998 <sbrk_aligned>:
 800a998:	b570      	push	{r4, r5, r6, lr}
 800a99a:	4e0e      	ldr	r6, [pc, #56]	; (800a9d4 <sbrk_aligned+0x3c>)
 800a99c:	460c      	mov	r4, r1
 800a99e:	6831      	ldr	r1, [r6, #0]
 800a9a0:	4605      	mov	r5, r0
 800a9a2:	b911      	cbnz	r1, 800a9aa <sbrk_aligned+0x12>
 800a9a4:	f000 f9e6 	bl	800ad74 <_sbrk_r>
 800a9a8:	6030      	str	r0, [r6, #0]
 800a9aa:	4621      	mov	r1, r4
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	f000 f9e1 	bl	800ad74 <_sbrk_r>
 800a9b2:	1c43      	adds	r3, r0, #1
 800a9b4:	d00a      	beq.n	800a9cc <sbrk_aligned+0x34>
 800a9b6:	1cc4      	adds	r4, r0, #3
 800a9b8:	f024 0403 	bic.w	r4, r4, #3
 800a9bc:	42a0      	cmp	r0, r4
 800a9be:	d007      	beq.n	800a9d0 <sbrk_aligned+0x38>
 800a9c0:	1a21      	subs	r1, r4, r0
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	f000 f9d6 	bl	800ad74 <_sbrk_r>
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	d101      	bne.n	800a9d0 <sbrk_aligned+0x38>
 800a9cc:	f04f 34ff 	mov.w	r4, #4294967295
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	bd70      	pop	{r4, r5, r6, pc}
 800a9d4:	24000438 	.word	0x24000438

0800a9d8 <_malloc_r>:
 800a9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9dc:	1ccd      	adds	r5, r1, #3
 800a9de:	f025 0503 	bic.w	r5, r5, #3
 800a9e2:	3508      	adds	r5, #8
 800a9e4:	2d0c      	cmp	r5, #12
 800a9e6:	bf38      	it	cc
 800a9e8:	250c      	movcc	r5, #12
 800a9ea:	2d00      	cmp	r5, #0
 800a9ec:	4607      	mov	r7, r0
 800a9ee:	db01      	blt.n	800a9f4 <_malloc_r+0x1c>
 800a9f0:	42a9      	cmp	r1, r5
 800a9f2:	d905      	bls.n	800aa00 <_malloc_r+0x28>
 800a9f4:	230c      	movs	r3, #12
 800a9f6:	603b      	str	r3, [r7, #0]
 800a9f8:	2600      	movs	r6, #0
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa00:	4e2e      	ldr	r6, [pc, #184]	; (800aabc <_malloc_r+0xe4>)
 800aa02:	f000 faa3 	bl	800af4c <__malloc_lock>
 800aa06:	6833      	ldr	r3, [r6, #0]
 800aa08:	461c      	mov	r4, r3
 800aa0a:	bb34      	cbnz	r4, 800aa5a <_malloc_r+0x82>
 800aa0c:	4629      	mov	r1, r5
 800aa0e:	4638      	mov	r0, r7
 800aa10:	f7ff ffc2 	bl	800a998 <sbrk_aligned>
 800aa14:	1c43      	adds	r3, r0, #1
 800aa16:	4604      	mov	r4, r0
 800aa18:	d14d      	bne.n	800aab6 <_malloc_r+0xde>
 800aa1a:	6834      	ldr	r4, [r6, #0]
 800aa1c:	4626      	mov	r6, r4
 800aa1e:	2e00      	cmp	r6, #0
 800aa20:	d140      	bne.n	800aaa4 <_malloc_r+0xcc>
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	4631      	mov	r1, r6
 800aa26:	4638      	mov	r0, r7
 800aa28:	eb04 0803 	add.w	r8, r4, r3
 800aa2c:	f000 f9a2 	bl	800ad74 <_sbrk_r>
 800aa30:	4580      	cmp	r8, r0
 800aa32:	d13a      	bne.n	800aaaa <_malloc_r+0xd2>
 800aa34:	6821      	ldr	r1, [r4, #0]
 800aa36:	3503      	adds	r5, #3
 800aa38:	1a6d      	subs	r5, r5, r1
 800aa3a:	f025 0503 	bic.w	r5, r5, #3
 800aa3e:	3508      	adds	r5, #8
 800aa40:	2d0c      	cmp	r5, #12
 800aa42:	bf38      	it	cc
 800aa44:	250c      	movcc	r5, #12
 800aa46:	4629      	mov	r1, r5
 800aa48:	4638      	mov	r0, r7
 800aa4a:	f7ff ffa5 	bl	800a998 <sbrk_aligned>
 800aa4e:	3001      	adds	r0, #1
 800aa50:	d02b      	beq.n	800aaaa <_malloc_r+0xd2>
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	442b      	add	r3, r5
 800aa56:	6023      	str	r3, [r4, #0]
 800aa58:	e00e      	b.n	800aa78 <_malloc_r+0xa0>
 800aa5a:	6822      	ldr	r2, [r4, #0]
 800aa5c:	1b52      	subs	r2, r2, r5
 800aa5e:	d41e      	bmi.n	800aa9e <_malloc_r+0xc6>
 800aa60:	2a0b      	cmp	r2, #11
 800aa62:	d916      	bls.n	800aa92 <_malloc_r+0xba>
 800aa64:	1961      	adds	r1, r4, r5
 800aa66:	42a3      	cmp	r3, r4
 800aa68:	6025      	str	r5, [r4, #0]
 800aa6a:	bf18      	it	ne
 800aa6c:	6059      	strne	r1, [r3, #4]
 800aa6e:	6863      	ldr	r3, [r4, #4]
 800aa70:	bf08      	it	eq
 800aa72:	6031      	streq	r1, [r6, #0]
 800aa74:	5162      	str	r2, [r4, r5]
 800aa76:	604b      	str	r3, [r1, #4]
 800aa78:	4638      	mov	r0, r7
 800aa7a:	f104 060b 	add.w	r6, r4, #11
 800aa7e:	f000 fa6b 	bl	800af58 <__malloc_unlock>
 800aa82:	f026 0607 	bic.w	r6, r6, #7
 800aa86:	1d23      	adds	r3, r4, #4
 800aa88:	1af2      	subs	r2, r6, r3
 800aa8a:	d0b6      	beq.n	800a9fa <_malloc_r+0x22>
 800aa8c:	1b9b      	subs	r3, r3, r6
 800aa8e:	50a3      	str	r3, [r4, r2]
 800aa90:	e7b3      	b.n	800a9fa <_malloc_r+0x22>
 800aa92:	6862      	ldr	r2, [r4, #4]
 800aa94:	42a3      	cmp	r3, r4
 800aa96:	bf0c      	ite	eq
 800aa98:	6032      	streq	r2, [r6, #0]
 800aa9a:	605a      	strne	r2, [r3, #4]
 800aa9c:	e7ec      	b.n	800aa78 <_malloc_r+0xa0>
 800aa9e:	4623      	mov	r3, r4
 800aaa0:	6864      	ldr	r4, [r4, #4]
 800aaa2:	e7b2      	b.n	800aa0a <_malloc_r+0x32>
 800aaa4:	4634      	mov	r4, r6
 800aaa6:	6876      	ldr	r6, [r6, #4]
 800aaa8:	e7b9      	b.n	800aa1e <_malloc_r+0x46>
 800aaaa:	230c      	movs	r3, #12
 800aaac:	603b      	str	r3, [r7, #0]
 800aaae:	4638      	mov	r0, r7
 800aab0:	f000 fa52 	bl	800af58 <__malloc_unlock>
 800aab4:	e7a1      	b.n	800a9fa <_malloc_r+0x22>
 800aab6:	6025      	str	r5, [r4, #0]
 800aab8:	e7de      	b.n	800aa78 <_malloc_r+0xa0>
 800aaba:	bf00      	nop
 800aabc:	24000434 	.word	0x24000434

0800aac0 <__sfputc_r>:
 800aac0:	6893      	ldr	r3, [r2, #8]
 800aac2:	3b01      	subs	r3, #1
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	b410      	push	{r4}
 800aac8:	6093      	str	r3, [r2, #8]
 800aaca:	da08      	bge.n	800aade <__sfputc_r+0x1e>
 800aacc:	6994      	ldr	r4, [r2, #24]
 800aace:	42a3      	cmp	r3, r4
 800aad0:	db01      	blt.n	800aad6 <__sfputc_r+0x16>
 800aad2:	290a      	cmp	r1, #10
 800aad4:	d103      	bne.n	800aade <__sfputc_r+0x1e>
 800aad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aada:	f7fe ba91 	b.w	8009000 <__swbuf_r>
 800aade:	6813      	ldr	r3, [r2, #0]
 800aae0:	1c58      	adds	r0, r3, #1
 800aae2:	6010      	str	r0, [r2, #0]
 800aae4:	7019      	strb	r1, [r3, #0]
 800aae6:	4608      	mov	r0, r1
 800aae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <__sfputs_r>:
 800aaee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf0:	4606      	mov	r6, r0
 800aaf2:	460f      	mov	r7, r1
 800aaf4:	4614      	mov	r4, r2
 800aaf6:	18d5      	adds	r5, r2, r3
 800aaf8:	42ac      	cmp	r4, r5
 800aafa:	d101      	bne.n	800ab00 <__sfputs_r+0x12>
 800aafc:	2000      	movs	r0, #0
 800aafe:	e007      	b.n	800ab10 <__sfputs_r+0x22>
 800ab00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab04:	463a      	mov	r2, r7
 800ab06:	4630      	mov	r0, r6
 800ab08:	f7ff ffda 	bl	800aac0 <__sfputc_r>
 800ab0c:	1c43      	adds	r3, r0, #1
 800ab0e:	d1f3      	bne.n	800aaf8 <__sfputs_r+0xa>
 800ab10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab14 <_vfiprintf_r>:
 800ab14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab18:	460d      	mov	r5, r1
 800ab1a:	b09d      	sub	sp, #116	; 0x74
 800ab1c:	4614      	mov	r4, r2
 800ab1e:	4698      	mov	r8, r3
 800ab20:	4606      	mov	r6, r0
 800ab22:	b118      	cbz	r0, 800ab2c <_vfiprintf_r+0x18>
 800ab24:	6983      	ldr	r3, [r0, #24]
 800ab26:	b90b      	cbnz	r3, 800ab2c <_vfiprintf_r+0x18>
 800ab28:	f7ff fa3e 	bl	8009fa8 <__sinit>
 800ab2c:	4b89      	ldr	r3, [pc, #548]	; (800ad54 <_vfiprintf_r+0x240>)
 800ab2e:	429d      	cmp	r5, r3
 800ab30:	d11b      	bne.n	800ab6a <_vfiprintf_r+0x56>
 800ab32:	6875      	ldr	r5, [r6, #4]
 800ab34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab36:	07d9      	lsls	r1, r3, #31
 800ab38:	d405      	bmi.n	800ab46 <_vfiprintf_r+0x32>
 800ab3a:	89ab      	ldrh	r3, [r5, #12]
 800ab3c:	059a      	lsls	r2, r3, #22
 800ab3e:	d402      	bmi.n	800ab46 <_vfiprintf_r+0x32>
 800ab40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab42:	f7ff fad4 	bl	800a0ee <__retarget_lock_acquire_recursive>
 800ab46:	89ab      	ldrh	r3, [r5, #12]
 800ab48:	071b      	lsls	r3, r3, #28
 800ab4a:	d501      	bpl.n	800ab50 <_vfiprintf_r+0x3c>
 800ab4c:	692b      	ldr	r3, [r5, #16]
 800ab4e:	b9eb      	cbnz	r3, 800ab8c <_vfiprintf_r+0x78>
 800ab50:	4629      	mov	r1, r5
 800ab52:	4630      	mov	r0, r6
 800ab54:	f7fe faa6 	bl	80090a4 <__swsetup_r>
 800ab58:	b1c0      	cbz	r0, 800ab8c <_vfiprintf_r+0x78>
 800ab5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab5c:	07dc      	lsls	r4, r3, #31
 800ab5e:	d50e      	bpl.n	800ab7e <_vfiprintf_r+0x6a>
 800ab60:	f04f 30ff 	mov.w	r0, #4294967295
 800ab64:	b01d      	add	sp, #116	; 0x74
 800ab66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab6a:	4b7b      	ldr	r3, [pc, #492]	; (800ad58 <_vfiprintf_r+0x244>)
 800ab6c:	429d      	cmp	r5, r3
 800ab6e:	d101      	bne.n	800ab74 <_vfiprintf_r+0x60>
 800ab70:	68b5      	ldr	r5, [r6, #8]
 800ab72:	e7df      	b.n	800ab34 <_vfiprintf_r+0x20>
 800ab74:	4b79      	ldr	r3, [pc, #484]	; (800ad5c <_vfiprintf_r+0x248>)
 800ab76:	429d      	cmp	r5, r3
 800ab78:	bf08      	it	eq
 800ab7a:	68f5      	ldreq	r5, [r6, #12]
 800ab7c:	e7da      	b.n	800ab34 <_vfiprintf_r+0x20>
 800ab7e:	89ab      	ldrh	r3, [r5, #12]
 800ab80:	0598      	lsls	r0, r3, #22
 800ab82:	d4ed      	bmi.n	800ab60 <_vfiprintf_r+0x4c>
 800ab84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab86:	f7ff fab3 	bl	800a0f0 <__retarget_lock_release_recursive>
 800ab8a:	e7e9      	b.n	800ab60 <_vfiprintf_r+0x4c>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab90:	2320      	movs	r3, #32
 800ab92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab96:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab9a:	2330      	movs	r3, #48	; 0x30
 800ab9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad60 <_vfiprintf_r+0x24c>
 800aba0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aba4:	f04f 0901 	mov.w	r9, #1
 800aba8:	4623      	mov	r3, r4
 800abaa:	469a      	mov	sl, r3
 800abac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abb0:	b10a      	cbz	r2, 800abb6 <_vfiprintf_r+0xa2>
 800abb2:	2a25      	cmp	r2, #37	; 0x25
 800abb4:	d1f9      	bne.n	800abaa <_vfiprintf_r+0x96>
 800abb6:	ebba 0b04 	subs.w	fp, sl, r4
 800abba:	d00b      	beq.n	800abd4 <_vfiprintf_r+0xc0>
 800abbc:	465b      	mov	r3, fp
 800abbe:	4622      	mov	r2, r4
 800abc0:	4629      	mov	r1, r5
 800abc2:	4630      	mov	r0, r6
 800abc4:	f7ff ff93 	bl	800aaee <__sfputs_r>
 800abc8:	3001      	adds	r0, #1
 800abca:	f000 80aa 	beq.w	800ad22 <_vfiprintf_r+0x20e>
 800abce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abd0:	445a      	add	r2, fp
 800abd2:	9209      	str	r2, [sp, #36]	; 0x24
 800abd4:	f89a 3000 	ldrb.w	r3, [sl]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	f000 80a2 	beq.w	800ad22 <_vfiprintf_r+0x20e>
 800abde:	2300      	movs	r3, #0
 800abe0:	f04f 32ff 	mov.w	r2, #4294967295
 800abe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abe8:	f10a 0a01 	add.w	sl, sl, #1
 800abec:	9304      	str	r3, [sp, #16]
 800abee:	9307      	str	r3, [sp, #28]
 800abf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abf4:	931a      	str	r3, [sp, #104]	; 0x68
 800abf6:	4654      	mov	r4, sl
 800abf8:	2205      	movs	r2, #5
 800abfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abfe:	4858      	ldr	r0, [pc, #352]	; (800ad60 <_vfiprintf_r+0x24c>)
 800ac00:	f7f5 fb8e 	bl	8000320 <memchr>
 800ac04:	9a04      	ldr	r2, [sp, #16]
 800ac06:	b9d8      	cbnz	r0, 800ac40 <_vfiprintf_r+0x12c>
 800ac08:	06d1      	lsls	r1, r2, #27
 800ac0a:	bf44      	itt	mi
 800ac0c:	2320      	movmi	r3, #32
 800ac0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac12:	0713      	lsls	r3, r2, #28
 800ac14:	bf44      	itt	mi
 800ac16:	232b      	movmi	r3, #43	; 0x2b
 800ac18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac20:	2b2a      	cmp	r3, #42	; 0x2a
 800ac22:	d015      	beq.n	800ac50 <_vfiprintf_r+0x13c>
 800ac24:	9a07      	ldr	r2, [sp, #28]
 800ac26:	4654      	mov	r4, sl
 800ac28:	2000      	movs	r0, #0
 800ac2a:	f04f 0c0a 	mov.w	ip, #10
 800ac2e:	4621      	mov	r1, r4
 800ac30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac34:	3b30      	subs	r3, #48	; 0x30
 800ac36:	2b09      	cmp	r3, #9
 800ac38:	d94e      	bls.n	800acd8 <_vfiprintf_r+0x1c4>
 800ac3a:	b1b0      	cbz	r0, 800ac6a <_vfiprintf_r+0x156>
 800ac3c:	9207      	str	r2, [sp, #28]
 800ac3e:	e014      	b.n	800ac6a <_vfiprintf_r+0x156>
 800ac40:	eba0 0308 	sub.w	r3, r0, r8
 800ac44:	fa09 f303 	lsl.w	r3, r9, r3
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	9304      	str	r3, [sp, #16]
 800ac4c:	46a2      	mov	sl, r4
 800ac4e:	e7d2      	b.n	800abf6 <_vfiprintf_r+0xe2>
 800ac50:	9b03      	ldr	r3, [sp, #12]
 800ac52:	1d19      	adds	r1, r3, #4
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	9103      	str	r1, [sp, #12]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	bfbb      	ittet	lt
 800ac5c:	425b      	neglt	r3, r3
 800ac5e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac62:	9307      	strge	r3, [sp, #28]
 800ac64:	9307      	strlt	r3, [sp, #28]
 800ac66:	bfb8      	it	lt
 800ac68:	9204      	strlt	r2, [sp, #16]
 800ac6a:	7823      	ldrb	r3, [r4, #0]
 800ac6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ac6e:	d10c      	bne.n	800ac8a <_vfiprintf_r+0x176>
 800ac70:	7863      	ldrb	r3, [r4, #1]
 800ac72:	2b2a      	cmp	r3, #42	; 0x2a
 800ac74:	d135      	bne.n	800ace2 <_vfiprintf_r+0x1ce>
 800ac76:	9b03      	ldr	r3, [sp, #12]
 800ac78:	1d1a      	adds	r2, r3, #4
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	9203      	str	r2, [sp, #12]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	bfb8      	it	lt
 800ac82:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac86:	3402      	adds	r4, #2
 800ac88:	9305      	str	r3, [sp, #20]
 800ac8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad70 <_vfiprintf_r+0x25c>
 800ac8e:	7821      	ldrb	r1, [r4, #0]
 800ac90:	2203      	movs	r2, #3
 800ac92:	4650      	mov	r0, sl
 800ac94:	f7f5 fb44 	bl	8000320 <memchr>
 800ac98:	b140      	cbz	r0, 800acac <_vfiprintf_r+0x198>
 800ac9a:	2340      	movs	r3, #64	; 0x40
 800ac9c:	eba0 000a 	sub.w	r0, r0, sl
 800aca0:	fa03 f000 	lsl.w	r0, r3, r0
 800aca4:	9b04      	ldr	r3, [sp, #16]
 800aca6:	4303      	orrs	r3, r0
 800aca8:	3401      	adds	r4, #1
 800acaa:	9304      	str	r3, [sp, #16]
 800acac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acb0:	482c      	ldr	r0, [pc, #176]	; (800ad64 <_vfiprintf_r+0x250>)
 800acb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acb6:	2206      	movs	r2, #6
 800acb8:	f7f5 fb32 	bl	8000320 <memchr>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d03f      	beq.n	800ad40 <_vfiprintf_r+0x22c>
 800acc0:	4b29      	ldr	r3, [pc, #164]	; (800ad68 <_vfiprintf_r+0x254>)
 800acc2:	bb1b      	cbnz	r3, 800ad0c <_vfiprintf_r+0x1f8>
 800acc4:	9b03      	ldr	r3, [sp, #12]
 800acc6:	3307      	adds	r3, #7
 800acc8:	f023 0307 	bic.w	r3, r3, #7
 800accc:	3308      	adds	r3, #8
 800acce:	9303      	str	r3, [sp, #12]
 800acd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd2:	443b      	add	r3, r7
 800acd4:	9309      	str	r3, [sp, #36]	; 0x24
 800acd6:	e767      	b.n	800aba8 <_vfiprintf_r+0x94>
 800acd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800acdc:	460c      	mov	r4, r1
 800acde:	2001      	movs	r0, #1
 800ace0:	e7a5      	b.n	800ac2e <_vfiprintf_r+0x11a>
 800ace2:	2300      	movs	r3, #0
 800ace4:	3401      	adds	r4, #1
 800ace6:	9305      	str	r3, [sp, #20]
 800ace8:	4619      	mov	r1, r3
 800acea:	f04f 0c0a 	mov.w	ip, #10
 800acee:	4620      	mov	r0, r4
 800acf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acf4:	3a30      	subs	r2, #48	; 0x30
 800acf6:	2a09      	cmp	r2, #9
 800acf8:	d903      	bls.n	800ad02 <_vfiprintf_r+0x1ee>
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d0c5      	beq.n	800ac8a <_vfiprintf_r+0x176>
 800acfe:	9105      	str	r1, [sp, #20]
 800ad00:	e7c3      	b.n	800ac8a <_vfiprintf_r+0x176>
 800ad02:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad06:	4604      	mov	r4, r0
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e7f0      	b.n	800acee <_vfiprintf_r+0x1da>
 800ad0c:	ab03      	add	r3, sp, #12
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	462a      	mov	r2, r5
 800ad12:	4b16      	ldr	r3, [pc, #88]	; (800ad6c <_vfiprintf_r+0x258>)
 800ad14:	a904      	add	r1, sp, #16
 800ad16:	4630      	mov	r0, r6
 800ad18:	f7fd fd1a 	bl	8008750 <_printf_float>
 800ad1c:	4607      	mov	r7, r0
 800ad1e:	1c78      	adds	r0, r7, #1
 800ad20:	d1d6      	bne.n	800acd0 <_vfiprintf_r+0x1bc>
 800ad22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad24:	07d9      	lsls	r1, r3, #31
 800ad26:	d405      	bmi.n	800ad34 <_vfiprintf_r+0x220>
 800ad28:	89ab      	ldrh	r3, [r5, #12]
 800ad2a:	059a      	lsls	r2, r3, #22
 800ad2c:	d402      	bmi.n	800ad34 <_vfiprintf_r+0x220>
 800ad2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad30:	f7ff f9de 	bl	800a0f0 <__retarget_lock_release_recursive>
 800ad34:	89ab      	ldrh	r3, [r5, #12]
 800ad36:	065b      	lsls	r3, r3, #25
 800ad38:	f53f af12 	bmi.w	800ab60 <_vfiprintf_r+0x4c>
 800ad3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad3e:	e711      	b.n	800ab64 <_vfiprintf_r+0x50>
 800ad40:	ab03      	add	r3, sp, #12
 800ad42:	9300      	str	r3, [sp, #0]
 800ad44:	462a      	mov	r2, r5
 800ad46:	4b09      	ldr	r3, [pc, #36]	; (800ad6c <_vfiprintf_r+0x258>)
 800ad48:	a904      	add	r1, sp, #16
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	f7fd ff8c 	bl	8008c68 <_printf_i>
 800ad50:	e7e4      	b.n	800ad1c <_vfiprintf_r+0x208>
 800ad52:	bf00      	nop
 800ad54:	0800b2b4 	.word	0x0800b2b4
 800ad58:	0800b2d4 	.word	0x0800b2d4
 800ad5c:	0800b294 	.word	0x0800b294
 800ad60:	0800b44c 	.word	0x0800b44c
 800ad64:	0800b456 	.word	0x0800b456
 800ad68:	08008751 	.word	0x08008751
 800ad6c:	0800aaef 	.word	0x0800aaef
 800ad70:	0800b452 	.word	0x0800b452

0800ad74 <_sbrk_r>:
 800ad74:	b538      	push	{r3, r4, r5, lr}
 800ad76:	4d06      	ldr	r5, [pc, #24]	; (800ad90 <_sbrk_r+0x1c>)
 800ad78:	2300      	movs	r3, #0
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	4608      	mov	r0, r1
 800ad7e:	602b      	str	r3, [r5, #0]
 800ad80:	f7f6 fc76 	bl	8001670 <_sbrk>
 800ad84:	1c43      	adds	r3, r0, #1
 800ad86:	d102      	bne.n	800ad8e <_sbrk_r+0x1a>
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	b103      	cbz	r3, 800ad8e <_sbrk_r+0x1a>
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	bd38      	pop	{r3, r4, r5, pc}
 800ad90:	2400043c 	.word	0x2400043c

0800ad94 <__sread>:
 800ad94:	b510      	push	{r4, lr}
 800ad96:	460c      	mov	r4, r1
 800ad98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad9c:	f000 f8e2 	bl	800af64 <_read_r>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	bfab      	itete	ge
 800ada4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ada6:	89a3      	ldrhlt	r3, [r4, #12]
 800ada8:	181b      	addge	r3, r3, r0
 800adaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adae:	bfac      	ite	ge
 800adb0:	6563      	strge	r3, [r4, #84]	; 0x54
 800adb2:	81a3      	strhlt	r3, [r4, #12]
 800adb4:	bd10      	pop	{r4, pc}

0800adb6 <__swrite>:
 800adb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adba:	461f      	mov	r7, r3
 800adbc:	898b      	ldrh	r3, [r1, #12]
 800adbe:	05db      	lsls	r3, r3, #23
 800adc0:	4605      	mov	r5, r0
 800adc2:	460c      	mov	r4, r1
 800adc4:	4616      	mov	r6, r2
 800adc6:	d505      	bpl.n	800add4 <__swrite+0x1e>
 800adc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adcc:	2302      	movs	r3, #2
 800adce:	2200      	movs	r2, #0
 800add0:	f000 f898 	bl	800af04 <_lseek_r>
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adde:	81a3      	strh	r3, [r4, #12]
 800ade0:	4632      	mov	r2, r6
 800ade2:	463b      	mov	r3, r7
 800ade4:	4628      	mov	r0, r5
 800ade6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adea:	f000 b817 	b.w	800ae1c <_write_r>

0800adee <__sseek>:
 800adee:	b510      	push	{r4, lr}
 800adf0:	460c      	mov	r4, r1
 800adf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf6:	f000 f885 	bl	800af04 <_lseek_r>
 800adfa:	1c43      	adds	r3, r0, #1
 800adfc:	89a3      	ldrh	r3, [r4, #12]
 800adfe:	bf15      	itete	ne
 800ae00:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae0a:	81a3      	strheq	r3, [r4, #12]
 800ae0c:	bf18      	it	ne
 800ae0e:	81a3      	strhne	r3, [r4, #12]
 800ae10:	bd10      	pop	{r4, pc}

0800ae12 <__sclose>:
 800ae12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae16:	f000 b831 	b.w	800ae7c <_close_r>
	...

0800ae1c <_write_r>:
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	4d07      	ldr	r5, [pc, #28]	; (800ae3c <_write_r+0x20>)
 800ae20:	4604      	mov	r4, r0
 800ae22:	4608      	mov	r0, r1
 800ae24:	4611      	mov	r1, r2
 800ae26:	2200      	movs	r2, #0
 800ae28:	602a      	str	r2, [r5, #0]
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	f7f6 fbcf 	bl	80015ce <_write>
 800ae30:	1c43      	adds	r3, r0, #1
 800ae32:	d102      	bne.n	800ae3a <_write_r+0x1e>
 800ae34:	682b      	ldr	r3, [r5, #0]
 800ae36:	b103      	cbz	r3, 800ae3a <_write_r+0x1e>
 800ae38:	6023      	str	r3, [r4, #0]
 800ae3a:	bd38      	pop	{r3, r4, r5, pc}
 800ae3c:	2400043c 	.word	0x2400043c

0800ae40 <__assert_func>:
 800ae40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae42:	4614      	mov	r4, r2
 800ae44:	461a      	mov	r2, r3
 800ae46:	4b09      	ldr	r3, [pc, #36]	; (800ae6c <__assert_func+0x2c>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4605      	mov	r5, r0
 800ae4c:	68d8      	ldr	r0, [r3, #12]
 800ae4e:	b14c      	cbz	r4, 800ae64 <__assert_func+0x24>
 800ae50:	4b07      	ldr	r3, [pc, #28]	; (800ae70 <__assert_func+0x30>)
 800ae52:	9100      	str	r1, [sp, #0]
 800ae54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae58:	4906      	ldr	r1, [pc, #24]	; (800ae74 <__assert_func+0x34>)
 800ae5a:	462b      	mov	r3, r5
 800ae5c:	f000 f81e 	bl	800ae9c <fiprintf>
 800ae60:	f000 f89f 	bl	800afa2 <abort>
 800ae64:	4b04      	ldr	r3, [pc, #16]	; (800ae78 <__assert_func+0x38>)
 800ae66:	461c      	mov	r4, r3
 800ae68:	e7f3      	b.n	800ae52 <__assert_func+0x12>
 800ae6a:	bf00      	nop
 800ae6c:	24000010 	.word	0x24000010
 800ae70:	0800b45d 	.word	0x0800b45d
 800ae74:	0800b46a 	.word	0x0800b46a
 800ae78:	0800b498 	.word	0x0800b498

0800ae7c <_close_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	4d06      	ldr	r5, [pc, #24]	; (800ae98 <_close_r+0x1c>)
 800ae80:	2300      	movs	r3, #0
 800ae82:	4604      	mov	r4, r0
 800ae84:	4608      	mov	r0, r1
 800ae86:	602b      	str	r3, [r5, #0]
 800ae88:	f7f6 fbbd 	bl	8001606 <_close>
 800ae8c:	1c43      	adds	r3, r0, #1
 800ae8e:	d102      	bne.n	800ae96 <_close_r+0x1a>
 800ae90:	682b      	ldr	r3, [r5, #0]
 800ae92:	b103      	cbz	r3, 800ae96 <_close_r+0x1a>
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	bd38      	pop	{r3, r4, r5, pc}
 800ae98:	2400043c 	.word	0x2400043c

0800ae9c <fiprintf>:
 800ae9c:	b40e      	push	{r1, r2, r3}
 800ae9e:	b503      	push	{r0, r1, lr}
 800aea0:	4601      	mov	r1, r0
 800aea2:	ab03      	add	r3, sp, #12
 800aea4:	4805      	ldr	r0, [pc, #20]	; (800aebc <fiprintf+0x20>)
 800aea6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeaa:	6800      	ldr	r0, [r0, #0]
 800aeac:	9301      	str	r3, [sp, #4]
 800aeae:	f7ff fe31 	bl	800ab14 <_vfiprintf_r>
 800aeb2:	b002      	add	sp, #8
 800aeb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aeb8:	b003      	add	sp, #12
 800aeba:	4770      	bx	lr
 800aebc:	24000010 	.word	0x24000010

0800aec0 <_fstat_r>:
 800aec0:	b538      	push	{r3, r4, r5, lr}
 800aec2:	4d07      	ldr	r5, [pc, #28]	; (800aee0 <_fstat_r+0x20>)
 800aec4:	2300      	movs	r3, #0
 800aec6:	4604      	mov	r4, r0
 800aec8:	4608      	mov	r0, r1
 800aeca:	4611      	mov	r1, r2
 800aecc:	602b      	str	r3, [r5, #0]
 800aece:	f7f6 fba6 	bl	800161e <_fstat>
 800aed2:	1c43      	adds	r3, r0, #1
 800aed4:	d102      	bne.n	800aedc <_fstat_r+0x1c>
 800aed6:	682b      	ldr	r3, [r5, #0]
 800aed8:	b103      	cbz	r3, 800aedc <_fstat_r+0x1c>
 800aeda:	6023      	str	r3, [r4, #0]
 800aedc:	bd38      	pop	{r3, r4, r5, pc}
 800aede:	bf00      	nop
 800aee0:	2400043c 	.word	0x2400043c

0800aee4 <_isatty_r>:
 800aee4:	b538      	push	{r3, r4, r5, lr}
 800aee6:	4d06      	ldr	r5, [pc, #24]	; (800af00 <_isatty_r+0x1c>)
 800aee8:	2300      	movs	r3, #0
 800aeea:	4604      	mov	r4, r0
 800aeec:	4608      	mov	r0, r1
 800aeee:	602b      	str	r3, [r5, #0]
 800aef0:	f7f6 fba5 	bl	800163e <_isatty>
 800aef4:	1c43      	adds	r3, r0, #1
 800aef6:	d102      	bne.n	800aefe <_isatty_r+0x1a>
 800aef8:	682b      	ldr	r3, [r5, #0]
 800aefa:	b103      	cbz	r3, 800aefe <_isatty_r+0x1a>
 800aefc:	6023      	str	r3, [r4, #0]
 800aefe:	bd38      	pop	{r3, r4, r5, pc}
 800af00:	2400043c 	.word	0x2400043c

0800af04 <_lseek_r>:
 800af04:	b538      	push	{r3, r4, r5, lr}
 800af06:	4d07      	ldr	r5, [pc, #28]	; (800af24 <_lseek_r+0x20>)
 800af08:	4604      	mov	r4, r0
 800af0a:	4608      	mov	r0, r1
 800af0c:	4611      	mov	r1, r2
 800af0e:	2200      	movs	r2, #0
 800af10:	602a      	str	r2, [r5, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	f7f6 fb9e 	bl	8001654 <_lseek>
 800af18:	1c43      	adds	r3, r0, #1
 800af1a:	d102      	bne.n	800af22 <_lseek_r+0x1e>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	b103      	cbz	r3, 800af22 <_lseek_r+0x1e>
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	bd38      	pop	{r3, r4, r5, pc}
 800af24:	2400043c 	.word	0x2400043c

0800af28 <__ascii_mbtowc>:
 800af28:	b082      	sub	sp, #8
 800af2a:	b901      	cbnz	r1, 800af2e <__ascii_mbtowc+0x6>
 800af2c:	a901      	add	r1, sp, #4
 800af2e:	b142      	cbz	r2, 800af42 <__ascii_mbtowc+0x1a>
 800af30:	b14b      	cbz	r3, 800af46 <__ascii_mbtowc+0x1e>
 800af32:	7813      	ldrb	r3, [r2, #0]
 800af34:	600b      	str	r3, [r1, #0]
 800af36:	7812      	ldrb	r2, [r2, #0]
 800af38:	1e10      	subs	r0, r2, #0
 800af3a:	bf18      	it	ne
 800af3c:	2001      	movne	r0, #1
 800af3e:	b002      	add	sp, #8
 800af40:	4770      	bx	lr
 800af42:	4610      	mov	r0, r2
 800af44:	e7fb      	b.n	800af3e <__ascii_mbtowc+0x16>
 800af46:	f06f 0001 	mvn.w	r0, #1
 800af4a:	e7f8      	b.n	800af3e <__ascii_mbtowc+0x16>

0800af4c <__malloc_lock>:
 800af4c:	4801      	ldr	r0, [pc, #4]	; (800af54 <__malloc_lock+0x8>)
 800af4e:	f7ff b8ce 	b.w	800a0ee <__retarget_lock_acquire_recursive>
 800af52:	bf00      	nop
 800af54:	24000430 	.word	0x24000430

0800af58 <__malloc_unlock>:
 800af58:	4801      	ldr	r0, [pc, #4]	; (800af60 <__malloc_unlock+0x8>)
 800af5a:	f7ff b8c9 	b.w	800a0f0 <__retarget_lock_release_recursive>
 800af5e:	bf00      	nop
 800af60:	24000430 	.word	0x24000430

0800af64 <_read_r>:
 800af64:	b538      	push	{r3, r4, r5, lr}
 800af66:	4d07      	ldr	r5, [pc, #28]	; (800af84 <_read_r+0x20>)
 800af68:	4604      	mov	r4, r0
 800af6a:	4608      	mov	r0, r1
 800af6c:	4611      	mov	r1, r2
 800af6e:	2200      	movs	r2, #0
 800af70:	602a      	str	r2, [r5, #0]
 800af72:	461a      	mov	r2, r3
 800af74:	f7f6 fb0e 	bl	8001594 <_read>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d102      	bne.n	800af82 <_read_r+0x1e>
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	b103      	cbz	r3, 800af82 <_read_r+0x1e>
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	bd38      	pop	{r3, r4, r5, pc}
 800af84:	2400043c 	.word	0x2400043c

0800af88 <__ascii_wctomb>:
 800af88:	b149      	cbz	r1, 800af9e <__ascii_wctomb+0x16>
 800af8a:	2aff      	cmp	r2, #255	; 0xff
 800af8c:	bf85      	ittet	hi
 800af8e:	238a      	movhi	r3, #138	; 0x8a
 800af90:	6003      	strhi	r3, [r0, #0]
 800af92:	700a      	strbls	r2, [r1, #0]
 800af94:	f04f 30ff 	movhi.w	r0, #4294967295
 800af98:	bf98      	it	ls
 800af9a:	2001      	movls	r0, #1
 800af9c:	4770      	bx	lr
 800af9e:	4608      	mov	r0, r1
 800afa0:	4770      	bx	lr

0800afa2 <abort>:
 800afa2:	b508      	push	{r3, lr}
 800afa4:	2006      	movs	r0, #6
 800afa6:	f000 f82b 	bl	800b000 <raise>
 800afaa:	2001      	movs	r0, #1
 800afac:	f7f6 fae8 	bl	8001580 <_exit>

0800afb0 <_raise_r>:
 800afb0:	291f      	cmp	r1, #31
 800afb2:	b538      	push	{r3, r4, r5, lr}
 800afb4:	4604      	mov	r4, r0
 800afb6:	460d      	mov	r5, r1
 800afb8:	d904      	bls.n	800afc4 <_raise_r+0x14>
 800afba:	2316      	movs	r3, #22
 800afbc:	6003      	str	r3, [r0, #0]
 800afbe:	f04f 30ff 	mov.w	r0, #4294967295
 800afc2:	bd38      	pop	{r3, r4, r5, pc}
 800afc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800afc6:	b112      	cbz	r2, 800afce <_raise_r+0x1e>
 800afc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afcc:	b94b      	cbnz	r3, 800afe2 <_raise_r+0x32>
 800afce:	4620      	mov	r0, r4
 800afd0:	f000 f830 	bl	800b034 <_getpid_r>
 800afd4:	462a      	mov	r2, r5
 800afd6:	4601      	mov	r1, r0
 800afd8:	4620      	mov	r0, r4
 800afda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afde:	f000 b817 	b.w	800b010 <_kill_r>
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d00a      	beq.n	800affc <_raise_r+0x4c>
 800afe6:	1c59      	adds	r1, r3, #1
 800afe8:	d103      	bne.n	800aff2 <_raise_r+0x42>
 800afea:	2316      	movs	r3, #22
 800afec:	6003      	str	r3, [r0, #0]
 800afee:	2001      	movs	r0, #1
 800aff0:	e7e7      	b.n	800afc2 <_raise_r+0x12>
 800aff2:	2400      	movs	r4, #0
 800aff4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aff8:	4628      	mov	r0, r5
 800affa:	4798      	blx	r3
 800affc:	2000      	movs	r0, #0
 800affe:	e7e0      	b.n	800afc2 <_raise_r+0x12>

0800b000 <raise>:
 800b000:	4b02      	ldr	r3, [pc, #8]	; (800b00c <raise+0xc>)
 800b002:	4601      	mov	r1, r0
 800b004:	6818      	ldr	r0, [r3, #0]
 800b006:	f7ff bfd3 	b.w	800afb0 <_raise_r>
 800b00a:	bf00      	nop
 800b00c:	24000010 	.word	0x24000010

0800b010 <_kill_r>:
 800b010:	b538      	push	{r3, r4, r5, lr}
 800b012:	4d07      	ldr	r5, [pc, #28]	; (800b030 <_kill_r+0x20>)
 800b014:	2300      	movs	r3, #0
 800b016:	4604      	mov	r4, r0
 800b018:	4608      	mov	r0, r1
 800b01a:	4611      	mov	r1, r2
 800b01c:	602b      	str	r3, [r5, #0]
 800b01e:	f7f6 fa9f 	bl	8001560 <_kill>
 800b022:	1c43      	adds	r3, r0, #1
 800b024:	d102      	bne.n	800b02c <_kill_r+0x1c>
 800b026:	682b      	ldr	r3, [r5, #0]
 800b028:	b103      	cbz	r3, 800b02c <_kill_r+0x1c>
 800b02a:	6023      	str	r3, [r4, #0]
 800b02c:	bd38      	pop	{r3, r4, r5, pc}
 800b02e:	bf00      	nop
 800b030:	2400043c 	.word	0x2400043c

0800b034 <_getpid_r>:
 800b034:	f7f6 ba8c 	b.w	8001550 <_getpid>

0800b038 <_init>:
 800b038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03a:	bf00      	nop
 800b03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b03e:	bc08      	pop	{r3}
 800b040:	469e      	mov	lr, r3
 800b042:	4770      	bx	lr

0800b044 <_fini>:
 800b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b046:	bf00      	nop
 800b048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b04a:	bc08      	pop	{r3}
 800b04c:	469e      	mov	lr, r3
 800b04e:	4770      	bx	lr
