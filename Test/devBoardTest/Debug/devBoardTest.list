
devBoardTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb1c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  0800bdf0  0800bdf0  0001bdf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c4bc  0800c4bc  0001c4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c4c4  0800c4c4  0001c4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c4c8  0800c4c8  0001c4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002dc  24000000  0800c4cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000618  240002dc  0800c7a8  000202dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008f4  0800c7a8  000208f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002030a  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001e820  00000000  00000000  0002034d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003e5f  00000000  00000000  0003eb6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001330  00000000  00000000  000429d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000eb9  00000000  00000000  00043d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035af9  00000000  00000000  00044bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001dc74  00000000  00000000  0007a6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00149bbf  00000000  00000000  00098326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005d68  00000000  00000000  001e1ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000043  00000000  00000000  001e7c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002dc 	.word	0x240002dc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bdd4 	.word	0x0800bdd4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002e0 	.word	0x240002e0
 800030c:	0800bdd4 	.word	0x0800bdd4

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b970 	b.w	80006b8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9e08      	ldr	r6, [sp, #32]
 80003f6:	460d      	mov	r5, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	460f      	mov	r7, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4694      	mov	ip, r2
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0xe2>
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	b143      	cbz	r3, 800041e <__udivmoddi4+0x2e>
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	f1c3 0220 	rsb	r2, r3, #32
 8000414:	409f      	lsls	r7, r3
 8000416:	fa20 f202 	lsr.w	r2, r0, r2
 800041a:	4317      	orrs	r7, r2
 800041c:	409c      	lsls	r4, r3
 800041e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000422:	fa1f f58c 	uxth.w	r5, ip
 8000426:	fbb7 f1fe 	udiv	r1, r7, lr
 800042a:	0c22      	lsrs	r2, r4, #16
 800042c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000430:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000434:	fb01 f005 	mul.w	r0, r1, r5
 8000438:	4290      	cmp	r0, r2
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x62>
 800043c:	eb1c 0202 	adds.w	r2, ip, r2
 8000440:	f101 37ff 	add.w	r7, r1, #4294967295
 8000444:	f080 811c 	bcs.w	8000680 <__udivmoddi4+0x290>
 8000448:	4290      	cmp	r0, r2
 800044a:	f240 8119 	bls.w	8000680 <__udivmoddi4+0x290>
 800044e:	3902      	subs	r1, #2
 8000450:	4462      	add	r2, ip
 8000452:	1a12      	subs	r2, r2, r0
 8000454:	b2a4      	uxth	r4, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000462:	fb00 f505 	mul.w	r5, r0, r5
 8000466:	42a5      	cmp	r5, r4
 8000468:	d90a      	bls.n	8000480 <__udivmoddi4+0x90>
 800046a:	eb1c 0404 	adds.w	r4, ip, r4
 800046e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000472:	f080 8107 	bcs.w	8000684 <__udivmoddi4+0x294>
 8000476:	42a5      	cmp	r5, r4
 8000478:	f240 8104 	bls.w	8000684 <__udivmoddi4+0x294>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	2100      	movs	r1, #0
 8000488:	b11e      	cbz	r6, 8000492 <__udivmoddi4+0xa2>
 800048a:	40dc      	lsrs	r4, r3
 800048c:	2300      	movs	r3, #0
 800048e:	e9c6 4300 	strd	r4, r3, [r6]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0xbc>
 800049a:	2e00      	cmp	r6, #0
 800049c:	f000 80ed 	beq.w	800067a <__udivmoddi4+0x28a>
 80004a0:	2100      	movs	r1, #0
 80004a2:	e9c6 0500 	strd	r0, r5, [r6]
 80004a6:	4608      	mov	r0, r1
 80004a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ac:	fab3 f183 	clz	r1, r3
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d149      	bne.n	8000548 <__udivmoddi4+0x158>
 80004b4:	42ab      	cmp	r3, r5
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0xce>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	f200 80f8 	bhi.w	80006ae <__udivmoddi4+0x2be>
 80004be:	1a84      	subs	r4, r0, r2
 80004c0:	eb65 0203 	sbc.w	r2, r5, r3
 80004c4:	2001      	movs	r0, #1
 80004c6:	4617      	mov	r7, r2
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d0e2      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	e9c6 4700 	strd	r4, r7, [r6]
 80004d0:	e7df      	b.n	8000492 <__udivmoddi4+0xa2>
 80004d2:	b902      	cbnz	r2, 80004d6 <__udivmoddi4+0xe6>
 80004d4:	deff      	udf	#255	; 0xff
 80004d6:	fab2 f382 	clz	r3, r2
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f040 8090 	bne.w	8000600 <__udivmoddi4+0x210>
 80004e0:	1a8a      	subs	r2, r1, r2
 80004e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e6:	fa1f fe8c 	uxth.w	lr, ip
 80004ea:	2101      	movs	r1, #1
 80004ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80004f0:	fb07 2015 	mls	r0, r7, r5, r2
 80004f4:	0c22      	lsrs	r2, r4, #16
 80004f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004fa:	fb0e f005 	mul.w	r0, lr, r5
 80004fe:	4290      	cmp	r0, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x124>
 8000502:	eb1c 0202 	adds.w	r2, ip, r2
 8000506:	f105 38ff 	add.w	r8, r5, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x122>
 800050c:	4290      	cmp	r0, r2
 800050e:	f200 80cb 	bhi.w	80006a8 <__udivmoddi4+0x2b8>
 8000512:	4645      	mov	r5, r8
 8000514:	1a12      	subs	r2, r2, r0
 8000516:	b2a4      	uxth	r4, r4
 8000518:	fbb2 f0f7 	udiv	r0, r2, r7
 800051c:	fb07 2210 	mls	r2, r7, r0, r2
 8000520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000524:	fb0e fe00 	mul.w	lr, lr, r0
 8000528:	45a6      	cmp	lr, r4
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x14e>
 800052c:	eb1c 0404 	adds.w	r4, ip, r4
 8000530:	f100 32ff 	add.w	r2, r0, #4294967295
 8000534:	d202      	bcs.n	800053c <__udivmoddi4+0x14c>
 8000536:	45a6      	cmp	lr, r4
 8000538:	f200 80bb 	bhi.w	80006b2 <__udivmoddi4+0x2c2>
 800053c:	4610      	mov	r0, r2
 800053e:	eba4 040e 	sub.w	r4, r4, lr
 8000542:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000546:	e79f      	b.n	8000488 <__udivmoddi4+0x98>
 8000548:	f1c1 0720 	rsb	r7, r1, #32
 800054c:	408b      	lsls	r3, r1
 800054e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000552:	ea4c 0c03 	orr.w	ip, ip, r3
 8000556:	fa05 f401 	lsl.w	r4, r5, r1
 800055a:	fa20 f307 	lsr.w	r3, r0, r7
 800055e:	40fd      	lsrs	r5, r7
 8000560:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000564:	4323      	orrs	r3, r4
 8000566:	fbb5 f8f9 	udiv	r8, r5, r9
 800056a:	fa1f fe8c 	uxth.w	lr, ip
 800056e:	fb09 5518 	mls	r5, r9, r8, r5
 8000572:	0c1c      	lsrs	r4, r3, #16
 8000574:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000578:	fb08 f50e 	mul.w	r5, r8, lr
 800057c:	42a5      	cmp	r5, r4
 800057e:	fa02 f201 	lsl.w	r2, r2, r1
 8000582:	fa00 f001 	lsl.w	r0, r0, r1
 8000586:	d90b      	bls.n	80005a0 <__udivmoddi4+0x1b0>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000590:	f080 8088 	bcs.w	80006a4 <__udivmoddi4+0x2b4>
 8000594:	42a5      	cmp	r5, r4
 8000596:	f240 8085 	bls.w	80006a4 <__udivmoddi4+0x2b4>
 800059a:	f1a8 0802 	sub.w	r8, r8, #2
 800059e:	4464      	add	r4, ip
 80005a0:	1b64      	subs	r4, r4, r5
 80005a2:	b29d      	uxth	r5, r3
 80005a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005a8:	fb09 4413 	mls	r4, r9, r3, r4
 80005ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005b4:	45a6      	cmp	lr, r4
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x1da>
 80005b8:	eb1c 0404 	adds.w	r4, ip, r4
 80005bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005c0:	d26c      	bcs.n	800069c <__udivmoddi4+0x2ac>
 80005c2:	45a6      	cmp	lr, r4
 80005c4:	d96a      	bls.n	800069c <__udivmoddi4+0x2ac>
 80005c6:	3b02      	subs	r3, #2
 80005c8:	4464      	add	r4, ip
 80005ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ce:	fba3 9502 	umull	r9, r5, r3, r2
 80005d2:	eba4 040e 	sub.w	r4, r4, lr
 80005d6:	42ac      	cmp	r4, r5
 80005d8:	46c8      	mov	r8, r9
 80005da:	46ae      	mov	lr, r5
 80005dc:	d356      	bcc.n	800068c <__udivmoddi4+0x29c>
 80005de:	d053      	beq.n	8000688 <__udivmoddi4+0x298>
 80005e0:	b156      	cbz	r6, 80005f8 <__udivmoddi4+0x208>
 80005e2:	ebb0 0208 	subs.w	r2, r0, r8
 80005e6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ea:	fa04 f707 	lsl.w	r7, r4, r7
 80005ee:	40ca      	lsrs	r2, r1
 80005f0:	40cc      	lsrs	r4, r1
 80005f2:	4317      	orrs	r7, r2
 80005f4:	e9c6 7400 	strd	r7, r4, [r6]
 80005f8:	4618      	mov	r0, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000600:	f1c3 0120 	rsb	r1, r3, #32
 8000604:	fa02 fc03 	lsl.w	ip, r2, r3
 8000608:	fa20 f201 	lsr.w	r2, r0, r1
 800060c:	fa25 f101 	lsr.w	r1, r5, r1
 8000610:	409d      	lsls	r5, r3
 8000612:	432a      	orrs	r2, r5
 8000614:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000618:	fa1f fe8c 	uxth.w	lr, ip
 800061c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000620:	fb07 1510 	mls	r5, r7, r0, r1
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800062a:	fb00 f50e 	mul.w	r5, r0, lr
 800062e:	428d      	cmp	r5, r1
 8000630:	fa04 f403 	lsl.w	r4, r4, r3
 8000634:	d908      	bls.n	8000648 <__udivmoddi4+0x258>
 8000636:	eb1c 0101 	adds.w	r1, ip, r1
 800063a:	f100 38ff 	add.w	r8, r0, #4294967295
 800063e:	d22f      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000640:	428d      	cmp	r5, r1
 8000642:	d92d      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000644:	3802      	subs	r0, #2
 8000646:	4461      	add	r1, ip
 8000648:	1b49      	subs	r1, r1, r5
 800064a:	b292      	uxth	r2, r2
 800064c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000650:	fb07 1115 	mls	r1, r7, r5, r1
 8000654:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000658:	fb05 f10e 	mul.w	r1, r5, lr
 800065c:	4291      	cmp	r1, r2
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x282>
 8000660:	eb1c 0202 	adds.w	r2, ip, r2
 8000664:	f105 38ff 	add.w	r8, r5, #4294967295
 8000668:	d216      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 800066a:	4291      	cmp	r1, r2
 800066c:	d914      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800066e:	3d02      	subs	r5, #2
 8000670:	4462      	add	r2, ip
 8000672:	1a52      	subs	r2, r2, r1
 8000674:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000678:	e738      	b.n	80004ec <__udivmoddi4+0xfc>
 800067a:	4631      	mov	r1, r6
 800067c:	4630      	mov	r0, r6
 800067e:	e708      	b.n	8000492 <__udivmoddi4+0xa2>
 8000680:	4639      	mov	r1, r7
 8000682:	e6e6      	b.n	8000452 <__udivmoddi4+0x62>
 8000684:	4610      	mov	r0, r2
 8000686:	e6fb      	b.n	8000480 <__udivmoddi4+0x90>
 8000688:	4548      	cmp	r0, r9
 800068a:	d2a9      	bcs.n	80005e0 <__udivmoddi4+0x1f0>
 800068c:	ebb9 0802 	subs.w	r8, r9, r2
 8000690:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000694:	3b01      	subs	r3, #1
 8000696:	e7a3      	b.n	80005e0 <__udivmoddi4+0x1f0>
 8000698:	4645      	mov	r5, r8
 800069a:	e7ea      	b.n	8000672 <__udivmoddi4+0x282>
 800069c:	462b      	mov	r3, r5
 800069e:	e794      	b.n	80005ca <__udivmoddi4+0x1da>
 80006a0:	4640      	mov	r0, r8
 80006a2:	e7d1      	b.n	8000648 <__udivmoddi4+0x258>
 80006a4:	46d0      	mov	r8, sl
 80006a6:	e77b      	b.n	80005a0 <__udivmoddi4+0x1b0>
 80006a8:	3d02      	subs	r5, #2
 80006aa:	4462      	add	r2, ip
 80006ac:	e732      	b.n	8000514 <__udivmoddi4+0x124>
 80006ae:	4608      	mov	r0, r1
 80006b0:	e70a      	b.n	80004c8 <__udivmoddi4+0xd8>
 80006b2:	4464      	add	r4, ip
 80006b4:	3802      	subs	r0, #2
 80006b6:	e742      	b.n	800053e <__udivmoddi4+0x14e>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_DCMI_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	; (8000724 <MX_DCMI_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_DCMI_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_DCMI_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_DCMI_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_DCMI_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_DCMI_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_10B;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_DCMI_Init+0x64>)
 80006e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ea:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_DCMI_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_DCMI_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_DCMI_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_DCMI_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_DCMI_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_DCMI_Init+0x64>)
 800070c:	f001 fdcc 	bl	80022a8 <HAL_DCMI_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_DCMI_Init+0x5e>
  {
    Error_Handler();
 8000716:	f000 fea1 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	240002f8 	.word	0x240002f8
 8000724:	48020000 	.word	0x48020000

08000728 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08e      	sub	sp, #56	; 0x38
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a69      	ldr	r2, [pc, #420]	; (80008ec <HAL_DCMI_MspInit+0x1c4>)
 8000746:	4293      	cmp	r3, r2
 8000748:	f040 80cc 	bne.w	80008e4 <HAL_DCMI_MspInit+0x1bc>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800074c:	4b68      	ldr	r3, [pc, #416]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 800074e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000752:	4a67      	ldr	r2, [pc, #412]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800075c:	4b64      	ldr	r3, [pc, #400]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 800075e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	623b      	str	r3, [r7, #32]
 8000768:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800076a:	4b61      	ldr	r3, [pc, #388]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000770:	4a5f      	ldr	r2, [pc, #380]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800077a:	4b5d      	ldr	r3, [pc, #372]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000780:	f003 0310 	and.w	r3, r3, #16
 8000784:	61fb      	str	r3, [r7, #28]
 8000786:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	4b59      	ldr	r3, [pc, #356]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 800078a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078e:	4a58      	ldr	r2, [pc, #352]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000798:	4b55      	ldr	r3, [pc, #340]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 800079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b52      	ldr	r3, [pc, #328]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ac:	4a50      	ldr	r2, [pc, #320]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 80007ae:	f043 0302 	orr.w	r3, r3, #2
 80007b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b6:	4b4e      	ldr	r3, [pc, #312]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007bc:	f003 0302 	and.w	r3, r3, #2
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c4:	4b4a      	ldr	r3, [pc, #296]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 80007c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ca:	4a49      	ldr	r2, [pc, #292]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007d4:	4b46      	ldr	r3, [pc, #280]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 80007d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	4b43      	ldr	r3, [pc, #268]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e8:	4a41      	ldr	r2, [pc, #260]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 80007ea:	f043 0308 	orr.w	r3, r3, #8
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f2:	4b3f      	ldr	r3, [pc, #252]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f8:	f003 0308 	and.w	r3, r3, #8
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000800:	4b3b      	ldr	r3, [pc, #236]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000806:	4a3a      	ldr	r2, [pc, #232]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 8000808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800080c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000810:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <HAL_DCMI_MspInit+0x1c8>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> DCMI_D8
    PC12     ------> DCMI_D9
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800081e:	2370      	movs	r3, #112	; 0x70
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800082e:	230d      	movs	r3, #13
 8000830:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000836:	4619      	mov	r1, r3
 8000838:	482e      	ldr	r0, [pc, #184]	; (80008f4 <HAL_DCMI_MspInit+0x1cc>)
 800083a:	f001 fdaf 	bl	800239c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800083e:	2350      	movs	r3, #80	; 0x50
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800084e:	230d      	movs	r3, #13
 8000850:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	4619      	mov	r1, r3
 8000858:	4827      	ldr	r0, [pc, #156]	; (80008f8 <HAL_DCMI_MspInit+0x1d0>)
 800085a:	f001 fd9f 	bl	800239c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800085e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000870:	230d      	movs	r3, #13
 8000872:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000878:	4619      	mov	r1, r3
 800087a:	4820      	ldr	r0, [pc, #128]	; (80008fc <HAL_DCMI_MspInit+0x1d4>)
 800087c:	f001 fd8e 	bl	800239c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10
 8000880:	f44f 53b6 	mov.w	r3, #5824	; 0x16c0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000892:	230d      	movs	r3, #13
 8000894:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	4619      	mov	r1, r3
 800089c:	4818      	ldr	r0, [pc, #96]	; (8000900 <HAL_DCMI_MspInit+0x1d8>)
 800089e:	f001 fd7d 	bl	800239c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008a2:	2308      	movs	r3, #8
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008b2:	230d      	movs	r3, #13
 80008b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	4619      	mov	r1, r3
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <HAL_DCMI_MspInit+0x1dc>)
 80008be:	f001 fd6d 	bl	800239c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008d4:	230d      	movs	r3, #13
 80008d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008dc:	4619      	mov	r1, r3
 80008de:	480a      	ldr	r0, [pc, #40]	; (8000908 <HAL_DCMI_MspInit+0x1e0>)
 80008e0:	f001 fd5c 	bl	800239c <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80008e4:	bf00      	nop
 80008e6:	3738      	adds	r7, #56	; 0x38
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	48020000 	.word	0x48020000
 80008f0:	58024400 	.word	0x58024400
 80008f4:	58021000 	.word	0x58021000
 80008f8:	58020000 	.word	0x58020000
 80008fc:	58020400 	.word	0x58020400
 8000900:	58020800 	.word	0x58020800
 8000904:	58020c00 	.word	0x58020c00
 8000908:	58021800 	.word	0x58021800

0800090c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08e      	sub	sp, #56	; 0x38
 8000910:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000922:	4b58      	ldr	r3, [pc, #352]	; (8000a84 <MX_GPIO_Init+0x178>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000928:	4a56      	ldr	r2, [pc, #344]	; (8000a84 <MX_GPIO_Init+0x178>)
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000932:	4b54      	ldr	r3, [pc, #336]	; (8000a84 <MX_GPIO_Init+0x178>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000938:	f003 0310 	and.w	r3, r3, #16
 800093c:	623b      	str	r3, [r7, #32]
 800093e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000940:	4b50      	ldr	r3, [pc, #320]	; (8000a84 <MX_GPIO_Init+0x178>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000946:	4a4f      	ldr	r2, [pc, #316]	; (8000a84 <MX_GPIO_Init+0x178>)
 8000948:	f043 0320 	orr.w	r3, r3, #32
 800094c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000950:	4b4c      	ldr	r3, [pc, #304]	; (8000a84 <MX_GPIO_Init+0x178>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000956:	f003 0320 	and.w	r3, r3, #32
 800095a:	61fb      	str	r3, [r7, #28]
 800095c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095e:	4b49      	ldr	r3, [pc, #292]	; (8000a84 <MX_GPIO_Init+0x178>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000964:	4a47      	ldr	r2, [pc, #284]	; (8000a84 <MX_GPIO_Init+0x178>)
 8000966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096e:	4b45      	ldr	r3, [pc, #276]	; (8000a84 <MX_GPIO_Init+0x178>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097c:	4b41      	ldr	r3, [pc, #260]	; (8000a84 <MX_GPIO_Init+0x178>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000982:	4a40      	ldr	r2, [pc, #256]	; (8000a84 <MX_GPIO_Init+0x178>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098c:	4b3d      	ldr	r3, [pc, #244]	; (8000a84 <MX_GPIO_Init+0x178>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b3a      	ldr	r3, [pc, #232]	; (8000a84 <MX_GPIO_Init+0x178>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a0:	4a38      	ldr	r2, [pc, #224]	; (8000a84 <MX_GPIO_Init+0x178>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009aa:	4b36      	ldr	r3, [pc, #216]	; (8000a84 <MX_GPIO_Init+0x178>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b8:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <MX_GPIO_Init+0x178>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009be:	4a31      	ldr	r2, [pc, #196]	; (8000a84 <MX_GPIO_Init+0x178>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c8:	4b2e      	ldr	r3, [pc, #184]	; (8000a84 <MX_GPIO_Init+0x178>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d6:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <MX_GPIO_Init+0x178>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009dc:	4a29      	ldr	r2, [pc, #164]	; (8000a84 <MX_GPIO_Init+0x178>)
 80009de:	f043 0308 	orr.w	r3, r3, #8
 80009e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e6:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <MX_GPIO_Init+0x178>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009f4:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <MX_GPIO_Init+0x178>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fa:	4a22      	ldr	r2, [pc, #136]	; (8000a84 <MX_GPIO_Init+0x178>)
 80009fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a04:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_GPIO_Init+0x178>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a18:	481b      	ldr	r0, [pc, #108]	; (8000a88 <MX_GPIO_Init+0x17c>)
 8000a1a:	f001 fe67 	bl	80026ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	481a      	ldr	r0, [pc, #104]	; (8000a8c <MX_GPIO_Init+0x180>)
 8000a24:	f001 fe62 	bl	80026ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4815      	ldr	r0, [pc, #84]	; (8000a90 <MX_GPIO_Init+0x184>)
 8000a3c:	f001 fcae 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	480b      	ldr	r0, [pc, #44]	; (8000a88 <MX_GPIO_Init+0x17c>)
 8000a5a:	f001 fc9f 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a5e:	2320      	movs	r3, #32
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_GPIO_Init+0x180>)
 8000a76:	f001 fc91 	bl	800239c <HAL_GPIO_Init>

}
 8000a7a:	bf00      	nop
 8000a7c:	3738      	adds	r7, #56	; 0x38
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	58024400 	.word	0x58024400
 8000a88:	58020c00 	.word	0x58020c00
 8000a8c:	58021800 	.word	0x58021800
 8000a90:	58020000 	.word	0x58020000

08000a94 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_I2C1_Init+0x84>)
 8000a9a:	4a20      	ldr	r2, [pc, #128]	; (8000b1c <MX_I2C1_Init+0x88>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0B3FF;
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <MX_I2C1_Init+0x84>)
 8000aa0:	4a1f      	ldr	r2, [pc, #124]	; (8000b20 <MX_I2C1_Init+0x8c>)
 8000aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_I2C1_Init+0x84>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_I2C1_Init+0x84>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_I2C1_Init+0x84>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_I2C1_Init+0x84>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_I2C1_Init+0x84>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_I2C1_Init+0x84>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_I2C1_Init+0x84>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ace:	4812      	ldr	r0, [pc, #72]	; (8000b18 <MX_I2C1_Init+0x84>)
 8000ad0:	f001 fe26 	bl	8002720 <HAL_I2C_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ada:	f000 fcbf 	bl	800145c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_I2C1_Init+0x84>)
 8000ae2:	f002 fd8f 	bl	8003604 <HAL_I2CEx_ConfigAnalogFilter>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000aec:	f000 fcb6 	bl	800145c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	4809      	ldr	r0, [pc, #36]	; (8000b18 <MX_I2C1_Init+0x84>)
 8000af4:	f002 fdd1 	bl	800369a <HAL_I2CEx_ConfigDigitalFilter>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000afe:	f000 fcad 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  i2c_bus_1.I2C_Handle = &hi2c1;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_I2C1_Init+0x90>)
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <MX_I2C1_Init+0x84>)
 8000b06:	601a      	str	r2, [r3, #0]
  i2c_bus_1.read = &I2C1_ReadReg;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_I2C1_Init+0x90>)
 8000b0a:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <MX_I2C1_Init+0x94>)
 8000b0c:	611a      	str	r2, [r3, #16]
  i2c_bus_1.write = &I2C1_WriteReg;
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <MX_I2C1_Init+0x90>)
 8000b10:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <MX_I2C1_Init+0x98>)
 8000b12:	615a      	str	r2, [r3, #20]
  /* USER CODE END I2C1_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	24000380 	.word	0x24000380
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	20b0b3ff 	.word	0x20b0b3ff
 8000b24:	24000348 	.word	0x24000348
 8000b28:	08000da5 	.word	0x08000da5
 8000b2c:	08000d5d 	.word	0x08000d5d

08000b30 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_I2C2_Init+0x84>)
 8000b36:	4a20      	ldr	r2, [pc, #128]	; (8000bb8 <MX_I2C2_Init+0x88>)
 8000b38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0B3FF;
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <MX_I2C2_Init+0x84>)
 8000b3c:	4a1f      	ldr	r2, [pc, #124]	; (8000bbc <MX_I2C2_Init+0x8c>)
 8000b3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_I2C2_Init+0x84>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b46:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <MX_I2C2_Init+0x84>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b4c:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_I2C2_Init+0x84>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <MX_I2C2_Init+0x84>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_I2C2_Init+0x84>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_I2C2_Init+0x84>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_I2C2_Init+0x84>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b6a:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <MX_I2C2_Init+0x84>)
 8000b6c:	f001 fdd8 	bl	8002720 <HAL_I2C_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b76:	f000 fc71 	bl	800145c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <MX_I2C2_Init+0x84>)
 8000b7e:	f002 fd41 	bl	8003604 <HAL_I2CEx_ConfigAnalogFilter>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b88:	f000 fc68 	bl	800145c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <MX_I2C2_Init+0x84>)
 8000b90:	f002 fd83 	bl	800369a <HAL_I2CEx_ConfigDigitalFilter>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b9a:	f000 fc5f 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  i2c_bus_2.I2C_Handle = &hi2c2;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_I2C2_Init+0x90>)
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <MX_I2C2_Init+0x84>)
 8000ba2:	601a      	str	r2, [r3, #0]
  i2c_bus_2.read = &I2C2_ReadReg;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_I2C2_Init+0x90>)
 8000ba6:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <MX_I2C2_Init+0x94>)
 8000ba8:	611a      	str	r2, [r3, #16]
  i2c_bus_2.write = &I2C2_WriteReg;
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <MX_I2C2_Init+0x90>)
 8000bac:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <MX_I2C2_Init+0x98>)
 8000bae:	615a      	str	r2, [r3, #20]
  /* USER CODE END I2C2_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	240003d4 	.word	0x240003d4
 8000bb8:	40005800 	.word	0x40005800
 8000bbc:	20b0b3ff 	.word	0x20b0b3ff
 8000bc0:	24000364 	.word	0x24000364
 8000bc4:	08000e35 	.word	0x08000e35
 8000bc8:	08000ded 	.word	0x08000ded

08000bcc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b0ba      	sub	sp, #232	; 0xe8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be4:	f107 0318 	add.w	r3, r7, #24
 8000be8:	22b8      	movs	r2, #184	; 0xb8
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f009 f9f1 	bl	8009fd4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a51      	ldr	r2, [pc, #324]	; (8000d3c <HAL_I2C_MspInit+0x170>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d146      	bne.n	8000c8a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bfc:	f04f 0208 	mov.w	r2, #8
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0e:	f107 0318 	add.w	r3, r7, #24
 8000c12:	4618      	mov	r0, r3
 8000c14:	f005 f96c 	bl	8005ef0 <HAL_RCCEx_PeriphCLKConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000c1e:	f000 fc1d 	bl	800145c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b47      	ldr	r3, [pc, #284]	; (8000d40 <HAL_I2C_MspInit+0x174>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	4a45      	ldr	r2, [pc, #276]	; (8000d40 <HAL_I2C_MspInit+0x174>)
 8000c2a:	f043 0302 	orr.w	r3, r3, #2
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c32:	4b43      	ldr	r3, [pc, #268]	; (8000d40 <HAL_I2C_MspInit+0x174>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c40:	23c0      	movs	r3, #192	; 0xc0
 8000c42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c46:	2312      	movs	r3, #18
 8000c48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c62:	4619      	mov	r1, r3
 8000c64:	4837      	ldr	r0, [pc, #220]	; (8000d44 <HAL_I2C_MspInit+0x178>)
 8000c66:	f001 fb99 	bl	800239c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c6a:	4b35      	ldr	r3, [pc, #212]	; (8000d40 <HAL_I2C_MspInit+0x174>)
 8000c6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c70:	4a33      	ldr	r2, [pc, #204]	; (8000d40 <HAL_I2C_MspInit+0x174>)
 8000c72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c7a:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <HAL_I2C_MspInit+0x174>)
 8000c7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	693b      	ldr	r3, [r7, #16]
    i2c_bus_2.I2C_Handle = &hi2c2;
    i2c_bus_2.read = &I2C2_ReadReg;
    i2c_bus_2.write = &I2C2_WriteReg;
  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c88:	e054      	b.n	8000d34 <HAL_I2C_MspInit+0x168>
  else if(i2cHandle->Instance==I2C2)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a2e      	ldr	r2, [pc, #184]	; (8000d48 <HAL_I2C_MspInit+0x17c>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d14f      	bne.n	8000d34 <HAL_I2C_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c94:	f04f 0208 	mov.w	r2, #8
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca6:	f107 0318 	add.w	r3, r7, #24
 8000caa:	4618      	mov	r0, r3
 8000cac:	f005 f920 	bl	8005ef0 <HAL_RCCEx_PeriphCLKConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000cb6:	f000 fbd1 	bl	800145c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <HAL_I2C_MspInit+0x174>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc0:	4a1f      	ldr	r2, [pc, #124]	; (8000d40 <HAL_I2C_MspInit+0x174>)
 8000cc2:	f043 0302 	orr.w	r3, r3, #2
 8000cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cca:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <HAL_I2C_MspInit+0x174>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cd8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce0:	2312      	movs	r3, #18
 8000ce2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4811      	ldr	r0, [pc, #68]	; (8000d44 <HAL_I2C_MspInit+0x178>)
 8000d00:	f001 fb4c 	bl	800239c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_I2C_MspInit+0x174>)
 8000d06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d0a:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <HAL_I2C_MspInit+0x174>)
 8000d0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_I2C_MspInit+0x174>)
 8000d16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
    i2c_bus_2.I2C_Handle = &hi2c2;
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_I2C_MspInit+0x180>)
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <HAL_I2C_MspInit+0x184>)
 8000d26:	601a      	str	r2, [r3, #0]
    i2c_bus_2.read = &I2C2_ReadReg;
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_I2C_MspInit+0x180>)
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_I2C_MspInit+0x188>)
 8000d2c:	611a      	str	r2, [r3, #16]
    i2c_bus_2.write = &I2C2_WriteReg;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <HAL_I2C_MspInit+0x180>)
 8000d30:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <HAL_I2C_MspInit+0x18c>)
 8000d32:	615a      	str	r2, [r3, #20]
}
 8000d34:	bf00      	nop
 8000d36:	37e8      	adds	r7, #232	; 0xe8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40005400 	.word	0x40005400
 8000d40:	58024400 	.word	0x58024400
 8000d44:	58020400 	.word	0x58020400
 8000d48:	40005800 	.word	0x40005800
 8000d4c:	24000364 	.word	0x24000364
 8000d50:	240003d4 	.word	0x240003d4
 8000d54:	08000e35 	.word	0x08000e35
 8000d58:	08000ded 	.word	0x08000ded

08000d5c <I2C1_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af04      	add	r7, sp, #16
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	4603      	mov	r3, r0
 8000d66:	81fb      	strh	r3, [r7, #14]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	81bb      	strh	r3, [r7, #12]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8000d70:	8978      	ldrh	r0, [r7, #10]
 8000d72:	89ba      	ldrh	r2, [r7, #12]
 8000d74:	89f9      	ldrh	r1, [r7, #14]
 8000d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7a:	9302      	str	r3, [sp, #8]
 8000d7c:	8b3b      	ldrh	r3, [r7, #24]
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	4603      	mov	r3, r0
 8000d86:	4806      	ldr	r0, [pc, #24]	; (8000da0 <I2C1_WriteReg+0x44>)
 8000d88:	f001 fe4e 	bl	8002a28 <HAL_I2C_Mem_Write>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <I2C1_WriteReg+0x3a>
  {
    return HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e000      	b.n	8000d98 <I2C1_WriteReg+0x3c>
  }

  return HAL_I2C_STATE_ERROR;
 8000d96:	23e0      	movs	r3, #224	; 0xe0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	24000380 	.word	0x24000380

08000da4 <I2C1_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af04      	add	r7, sp, #16
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	4603      	mov	r3, r0
 8000dae:	81fb      	strh	r3, [r7, #14]
 8000db0:	460b      	mov	r3, r1
 8000db2:	81bb      	strh	r3, [r7, #12]
 8000db4:	4613      	mov	r3, r2
 8000db6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8000db8:	8978      	ldrh	r0, [r7, #10]
 8000dba:	89ba      	ldrh	r2, [r7, #12]
 8000dbc:	89f9      	ldrh	r1, [r7, #14]
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	9302      	str	r3, [sp, #8]
 8000dc4:	8b3b      	ldrh	r3, [r7, #24]
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4806      	ldr	r0, [pc, #24]	; (8000de8 <I2C1_ReadReg+0x44>)
 8000dd0:	f001 ff3e 	bl	8002c50 <HAL_I2C_Mem_Read>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <I2C1_ReadReg+0x3a>
  {
    return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <I2C1_ReadReg+0x3c>
  }

  return HAL_I2C_STATE_ERROR;
 8000dde:	23e0      	movs	r3, #224	; 0xe0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	24000380 	.word	0x24000380

08000dec <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af04      	add	r7, sp, #16
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	4603      	mov	r3, r0
 8000df6:	81fb      	strh	r3, [r7, #14]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	81bb      	strh	r3, [r7, #12]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hi2c2, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8000e00:	8978      	ldrh	r0, [r7, #10]
 8000e02:	89ba      	ldrh	r2, [r7, #12]
 8000e04:	89f9      	ldrh	r1, [r7, #14]
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	9302      	str	r3, [sp, #8]
 8000e0c:	8b3b      	ldrh	r3, [r7, #24]
 8000e0e:	9301      	str	r3, [sp, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	4603      	mov	r3, r0
 8000e16:	4806      	ldr	r0, [pc, #24]	; (8000e30 <I2C2_WriteReg+0x44>)
 8000e18:	f001 fe06 	bl	8002a28 <HAL_I2C_Mem_Write>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d101      	bne.n	8000e26 <I2C2_WriteReg+0x3a>
  {
    return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <I2C2_WriteReg+0x3c>
  }

  return HAL_I2C_STATE_ERROR;
 8000e26:	23e0      	movs	r3, #224	; 0xe0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	240003d4 	.word	0x240003d4

08000e34 <I2C2_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af04      	add	r7, sp, #16
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	81fb      	strh	r3, [r7, #14]
 8000e40:	460b      	mov	r3, r1
 8000e42:	81bb      	strh	r3, [r7, #12]
 8000e44:	4613      	mov	r3, r2
 8000e46:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8000e48:	8978      	ldrh	r0, [r7, #10]
 8000e4a:	89ba      	ldrh	r2, [r7, #12]
 8000e4c:	89f9      	ldrh	r1, [r7, #14]
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	9302      	str	r3, [sp, #8]
 8000e54:	8b3b      	ldrh	r3, [r7, #24]
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	4806      	ldr	r0, [pc, #24]	; (8000e78 <I2C2_ReadReg+0x44>)
 8000e60:	f001 fef6 	bl	8002c50 <HAL_I2C_Mem_Read>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <I2C2_ReadReg+0x3a>
  {
    return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <I2C2_ReadReg+0x3c>
  }

  return HAL_I2C_STATE_ERROR;
 8000e6e:	23e0      	movs	r3, #224	; 0xe0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	240003d4 	.word	0x240003d4

08000e7c <__io_putchar>:
#include "log.h"

PUTCHAR_PROTOTYPE
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e84:	1d39      	adds	r1, r7, #4
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4803      	ldr	r0, [pc, #12]	; (8000e9c <__io_putchar+0x20>)
 8000e8e:	f006 fe41 	bl	8007b14 <HAL_UART_Transmit>
  return ch;
 8000e92:	687b      	ldr	r3, [r7, #4]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	24000710 	.word	0x24000710

08000ea0 <log_format>:

void log_format(const char* tag, const char* message, va_list args)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
	uint32_t time = HAL_GetTick();
 8000eac:	f001 f8bc 	bl	8002028 <HAL_GetTick>
 8000eb0:	6178      	str	r0, [r7, #20]
	printf("%u [%s] ", (unsigned int)time, tag);
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	6979      	ldr	r1, [r7, #20]
 8000eb6:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <log_format+0x34>)
 8000eb8:	f009 f824 	bl	8009f04 <iprintf>
	vprintf(message, args);
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	68b8      	ldr	r0, [r7, #8]
 8000ec0:	f009 f87e 	bl	8009fc0 <viprintf>
	printf("\n");
 8000ec4:	200a      	movs	r0, #10
 8000ec6:	f009 f82f 	bl	8009f28 <putchar>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	0800bdf0 	.word	0x0800bdf0

08000ed8 <log_error>:

void log_error(const char* message, ...)
{
 8000ed8:	b40f      	push	{r0, r1, r2, r3}
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	607b      	str	r3, [r7, #4]
	log_format("error", message, args);
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	6939      	ldr	r1, [r7, #16]
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <log_error+0x28>)
 8000eec:	f7ff ffd8 	bl	8000ea0 <log_format>
	va_end(args);
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000efa:	b004      	add	sp, #16
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	0800bdfc 	.word	0x0800bdfc

08000f04 <log_info>:

void log_info(const char* message, ...)
{
 8000f04:	b40f      	push	{r0, r1, r2, r3}
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	607b      	str	r3, [r7, #4]
	log_format("info", message, args);
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	6939      	ldr	r1, [r7, #16]
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <log_info+0x28>)
 8000f18:	f7ff ffc2 	bl	8000ea0 <log_format>
	va_end(args);
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f26:	b004      	add	sp, #16
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	0800be04 	.word	0x0800be04

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f36:	4b71      	ldr	r3, [pc, #452]	; (80010fc <main+0x1cc>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d11b      	bne.n	8000f7a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f42:	f3bf 8f4f 	dsb	sy
}
 8000f46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f48:	f3bf 8f6f 	isb	sy
}
 8000f4c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f4e:	4b6b      	ldr	r3, [pc, #428]	; (80010fc <main+0x1cc>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f56:	f3bf 8f4f 	dsb	sy
}
 8000f5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f5c:	f3bf 8f6f 	isb	sy
}
 8000f60:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f62:	4b66      	ldr	r3, [pc, #408]	; (80010fc <main+0x1cc>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	4a65      	ldr	r2, [pc, #404]	; (80010fc <main+0x1cc>)
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f6e:	f3bf 8f4f 	dsb	sy
}
 8000f72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f74:	f3bf 8f6f 	isb	sy
}
 8000f78:	e000      	b.n	8000f7c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f7a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000f7c:	4b5f      	ldr	r3, [pc, #380]	; (80010fc <main+0x1cc>)
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d138      	bne.n	8000ffa <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000f88:	4b5c      	ldr	r3, [pc, #368]	; (80010fc <main+0x1cc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f90:	f3bf 8f4f 	dsb	sy
}
 8000f94:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f96:	4b59      	ldr	r3, [pc, #356]	; (80010fc <main+0x1cc>)
 8000f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f9c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	0b5b      	lsrs	r3, r3, #13
 8000fa2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000fa6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	08db      	lsrs	r3, r3, #3
 8000fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fb0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	015a      	lsls	r2, r3, #5
 8000fb6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000fba:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fc0:	494e      	ldr	r1, [pc, #312]	; (80010fc <main+0x1cc>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	1e5a      	subs	r2, r3, #1
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1ef      	bne.n	8000fb2 <main+0x82>
    } while(sets-- != 0U);
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1e5a      	subs	r2, r3, #1
 8000fd6:	60ba      	str	r2, [r7, #8]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1e5      	bne.n	8000fa8 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fdc:	f3bf 8f4f 	dsb	sy
}
 8000fe0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000fe2:	4b46      	ldr	r3, [pc, #280]	; (80010fc <main+0x1cc>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	4a45      	ldr	r2, [pc, #276]	; (80010fc <main+0x1cc>)
 8000fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fee:	f3bf 8f4f 	dsb	sy
}
 8000ff2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ff4:	f3bf 8f6f 	isb	sy
}
 8000ff8:	e000      	b.n	8000ffc <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ffa:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffc:	f000 ff8e 	bl	8001f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001000:	f000 f89e 	bl	8001140 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001004:	f000 f90e 	bl	8001224 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET); //Memory reset
 8001008:	2200      	movs	r2, #0
 800100a:	2120      	movs	r1, #32
 800100c:	483c      	ldr	r0, [pc, #240]	; (8001100 <main+0x1d0>)
 800100e:	f001 fb6d 	bl	80026ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	2140      	movs	r1, #64	; 0x40
 8001016:	483a      	ldr	r0, [pc, #232]	; (8001100 <main+0x1d0>)
 8001018:	f001 fb68 	bl	80026ec <HAL_GPIO_WritePin>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101c:	f7ff fc76 	bl	800090c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001020:	f000 fe54 	bl	8001ccc <MX_USART1_UART_Init>
  MX_DCMI_Init();
 8001024:	f7ff fb4a 	bl	80006bc <MX_DCMI_Init>
  MX_I2C1_Init();
 8001028:	f7ff fd34 	bl	8000a94 <MX_I2C1_Init>
  MX_I2C2_Init();
 800102c:	f7ff fd80 	bl	8000b30 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8001030:	f000 fa1e 	bl	8001470 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8001034:	f000 fa82 	bl	800153c <MX_OCTOSPI2_Init>
  /* USER CODE BEGIN 2 */


  log_info("Main Init");
 8001038:	4832      	ldr	r0, [pc, #200]	; (8001104 <main+0x1d4>)
 800103a:	f7ff ff63 	bl	8000f04 <log_info>

  //test_PSRAM();
  test_NAND();
 800103e:	f000 f90f 	bl	8001260 <test_NAND>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  INA236_setup(&INA33Bus, &i2c_bus_2, INA236_ADDR_1);
 8001042:	2240      	movs	r2, #64	; 0x40
 8001044:	4930      	ldr	r1, [pc, #192]	; (8001108 <main+0x1d8>)
 8001046:	4831      	ldr	r0, [pc, #196]	; (800110c <main+0x1dc>)
 8001048:	f000 ff1f 	bl	8001e8a <INA236_setup>
  INA236_setup(&INA18Bus, &i2c_bus_2, INA236_ADDR_1);
 800104c:	2240      	movs	r2, #64	; 0x40
 800104e:	492e      	ldr	r1, [pc, #184]	; (8001108 <main+0x1d8>)
 8001050:	482f      	ldr	r0, [pc, #188]	; (8001110 <main+0x1e0>)
 8001052:	f000 ff1a 	bl	8001e8a <INA236_setup>
  PCA9543_setup(&i2c_switch, &i2c_bus_2, PCA9543_ADDR_1);
 8001056:	2270      	movs	r2, #112	; 0x70
 8001058:	492b      	ldr	r1, [pc, #172]	; (8001108 <main+0x1d8>)
 800105a:	482e      	ldr	r0, [pc, #184]	; (8001114 <main+0x1e4>)
 800105c:	f000 ff28 	bl	8001eb0 <PCA9543_setup>
  TMP117_setup(&temp_A, &i2c_bus_2, TMP117_ADDR_1);
 8001060:	2248      	movs	r2, #72	; 0x48
 8001062:	4929      	ldr	r1, [pc, #164]	; (8001108 <main+0x1d8>)
 8001064:	482c      	ldr	r0, [pc, #176]	; (8001118 <main+0x1e8>)
 8001066:	f007 ff6d 	bl	8008f44 <TMP117_setup>

  if (PCA9543_set_channel(&i2c_switch, PCA9543_CHANNEL_1) != HAL_OK)
 800106a:	2102      	movs	r1, #2
 800106c:	4829      	ldr	r0, [pc, #164]	; (8001114 <main+0x1e4>)
 800106e:	f000 ff32 	bl	8001ed6 <PCA9543_set_channel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <main+0x14e>
  {
	  log_error("Unable to set i2c switch channel");
 8001078:	4828      	ldr	r0, [pc, #160]	; (800111c <main+0x1ec>)
 800107a:	f7ff ff2d 	bl	8000ed8 <log_error>
  if (HAL_I2C_IsDeviceReady(&hi2c2, PCA9543_ADDR_1, 2, 1000) != HAL_OK)
  {
	  log_error("Unable to communicate with i2c switch");
  } */

  if (HAL_I2C_IsDeviceReady(&hi2c2, TMP117_ADDR_1 << 1, 2, 1000) != HAL_OK)
 800107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001082:	2202      	movs	r2, #2
 8001084:	2190      	movs	r1, #144	; 0x90
 8001086:	4826      	ldr	r0, [pc, #152]	; (8001120 <main+0x1f0>)
 8001088:	f001 fefc 	bl	8002e84 <HAL_I2C_IsDeviceReady>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <main+0x16a>
  {
	  log_error("Unable to communicate with TMP117_A");
 8001092:	4824      	ldr	r0, [pc, #144]	; (8001124 <main+0x1f4>)
 8001094:	f7ff ff20 	bl	8000ed8 <log_error>
 8001098:	e002      	b.n	80010a0 <main+0x170>
  }
  else {
	  log_info("TMP117_A Ready");
 800109a:	4823      	ldr	r0, [pc, #140]	; (8001128 <main+0x1f8>)
 800109c:	f7ff ff32 	bl	8000f04 <log_info>
  }

  if (HAL_I2C_IsDeviceReady(&hi2c1, 0b11010000, 2, 1000) != HAL_OK)
 80010a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a4:	2202      	movs	r2, #2
 80010a6:	21d0      	movs	r1, #208	; 0xd0
 80010a8:	4820      	ldr	r0, [pc, #128]	; (800112c <main+0x1fc>)
 80010aa:	f001 feeb 	bl	8002e84 <HAL_I2C_IsDeviceReady>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <main+0x18c>
  {
	  log_error("Unable to communicate with ICM-20948");
 80010b4:	481e      	ldr	r0, [pc, #120]	; (8001130 <main+0x200>)
 80010b6:	f7ff ff0f 	bl	8000ed8 <log_error>
 80010ba:	e002      	b.n	80010c2 <main+0x192>
  }
  else {
	  log_info("ICM-20948 Ready");
 80010bc:	481d      	ldr	r0, [pc, #116]	; (8001134 <main+0x204>)
 80010be:	f7ff ff21 	bl	8000f04 <log_info>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	float temperature_A = 0;
 80010c2:	f04f 0300 	mov.w	r3, #0
 80010c6:	603b      	str	r3, [r7, #0]
	if (TMP117_read_temperature(&temp_A, &temperature_A) == HAL_OK) {
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4812      	ldr	r0, [pc, #72]	; (8001118 <main+0x1e8>)
 80010ce:	f007 ff4d 	bl	8008f6c <TMP117_read_temperature>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d109      	bne.n	80010ec <main+0x1bc>
		log_info("Temperature A:%f", temperature_A);
 80010d8:	edd7 7a00 	vldr	s15, [r7]
 80010dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010e0:	ec53 2b17 	vmov	r2, r3, d7
 80010e4:	4814      	ldr	r0, [pc, #80]	; (8001138 <main+0x208>)
 80010e6:	f7ff ff0d 	bl	8000f04 <log_info>
 80010ea:	e002      	b.n	80010f2 <main+0x1c2>
	}
	else {
		log_error("Unable to get temp A");
 80010ec:	4813      	ldr	r0, [pc, #76]	; (800113c <main+0x20c>)
 80010ee:	f7ff fef3 	bl	8000ed8 <log_error>
	}
	*/



	HAL_Delay(5000);
 80010f2:	f241 3088 	movw	r0, #5000	; 0x1388
 80010f6:	f000 ffa3 	bl	8002040 <HAL_Delay>
  {
 80010fa:	e7e2      	b.n	80010c2 <main+0x192>
 80010fc:	e000ed00 	.word	0xe000ed00
 8001100:	58021800 	.word	0x58021800
 8001104:	0800be14 	.word	0x0800be14
 8001108:	24000364 	.word	0x24000364
 800110c:	24000628 	.word	0x24000628
 8001110:	24000630 	.word	0x24000630
 8001114:	24000640 	.word	0x24000640
 8001118:	24000638 	.word	0x24000638
 800111c:	0800be20 	.word	0x0800be20
 8001120:	240003d4 	.word	0x240003d4
 8001124:	0800be44 	.word	0x0800be44
 8001128:	0800be68 	.word	0x0800be68
 800112c:	24000380 	.word	0x24000380
 8001130:	0800be78 	.word	0x0800be78
 8001134:	0800bea0 	.word	0x0800bea0
 8001138:	0800beb0 	.word	0x0800beb0
 800113c:	0800bec4 	.word	0x0800bec4

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b09c      	sub	sp, #112	; 0x70
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	224c      	movs	r2, #76	; 0x4c
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f008 ff40 	bl	8009fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2220      	movs	r2, #32
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f008 ff3a 	bl	8009fd4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001160:	2002      	movs	r0, #2
 8001162:	f003 ff25 	bl	8004fb0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <SystemClock_Config+0xe0>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	4a2c      	ldr	r2, [pc, #176]	; (8001220 <SystemClock_Config+0xe0>)
 8001170:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001174:	6193      	str	r3, [r2, #24]
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <SystemClock_Config+0xe0>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001182:	bf00      	nop
 8001184:	4b26      	ldr	r3, [pc, #152]	; (8001220 <SystemClock_Config+0xe0>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800118c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001190:	d1f8      	bne.n	8001184 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001192:	2303      	movs	r3, #3
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800119c:	2301      	movs	r3, #1
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80011a0:	2340      	movs	r3, #64	; 0x40
 80011a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a4:	2302      	movs	r3, #2
 80011a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a8:	2302      	movs	r3, #2
 80011aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011ac:	2304      	movs	r3, #4
 80011ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 80011b0:	232a      	movs	r3, #42	; 0x2a
 80011b2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011bc:	2302      	movs	r3, #2
 80011be:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011c0:	230c      	movs	r3, #12
 80011c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80011c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d2:	4618      	mov	r0, r3
 80011d4:	f003 ff26 	bl	8005024 <HAL_RCC_OscConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80011de:	f000 f93d 	bl	800145c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e2:	233f      	movs	r3, #63	; 0x3f
 80011e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e6:	2303      	movs	r3, #3
 80011e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80011ee:	2308      	movs	r3, #8
 80011f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011f2:	2340      	movs	r3, #64	; 0x40
 80011f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011f6:	2340      	movs	r3, #64	; 0x40
 80011f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011fe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001200:	2340      	movs	r3, #64	; 0x40
 8001202:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2103      	movs	r1, #3
 8001208:	4618      	mov	r0, r3
 800120a:	f004 fae5 	bl	80057d8 <HAL_RCC_ClockConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001214:	f000 f922 	bl	800145c <Error_Handler>
  }
}
 8001218:	bf00      	nop
 800121a:	3770      	adds	r7, #112	; 0x70
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	58024800 	.word	0x58024800

08001224 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b0ae      	sub	sp, #184	; 0xb8
 8001228:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800122a:	463b      	mov	r3, r7
 800122c:	22b8      	movs	r2, #184	; 0xb8
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f008 fecf 	bl	8009fd4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8001236:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001242:	2300      	movs	r3, #0
 8001244:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001246:	463b      	mov	r3, r7
 8001248:	4618      	mov	r0, r3
 800124a:	f004 fe51 	bl	8005ef0 <HAL_RCCEx_PeriphCLKConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8001254:	f000 f902 	bl	800145c <Error_Handler>
  }
}
 8001258:	bf00      	nop
 800125a:	37b8      	adds	r7, #184	; 0xb8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <test_NAND>:

/* USER CODE BEGIN 4 */

static void test_NAND(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	W25N_setup(&W25N, &hospi2, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	496b      	ldr	r1, [pc, #428]	; (8001418 <test_NAND+0x1b8>)
 800126a:	486c      	ldr	r0, [pc, #432]	; (800141c <test_NAND+0x1bc>)
 800126c:	f007 fece 	bl	800900c <W25N_setup>

	uint32_t nand_id = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
	uint8_t statReg = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	70fb      	strb	r3, [r7, #3]
	if (W25N_ReadJEDECID(&W25N, &nand_id) == W25N_OK) {
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4619      	mov	r1, r3
 800127c:	4867      	ldr	r0, [pc, #412]	; (800141c <test_NAND+0x1bc>)
 800127e:	f007 fed8 	bl	8009032 <W25N_ReadJEDECID>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d105      	bne.n	8001294 <test_NAND+0x34>
	  log_info("W25N ID: %X", nand_id);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4619      	mov	r1, r3
 800128c:	4864      	ldr	r0, [pc, #400]	; (8001420 <test_NAND+0x1c0>)
 800128e:	f7ff fe39 	bl	8000f04 <log_info>
 8001292:	e002      	b.n	800129a <test_NAND+0x3a>
	}
	else {
	  log_error("Unable to read from W25N");
 8001294:	4863      	ldr	r0, [pc, #396]	; (8001424 <test_NAND+0x1c4>)
 8001296:	f7ff fe1f 	bl	8000ed8 <log_error>
	}
	W25N_Write_Enable(&W25N);
 800129a:	4860      	ldr	r0, [pc, #384]	; (800141c <test_NAND+0x1bc>)
 800129c:	f007 ff07 	bl	80090ae <W25N_Write_Enable>

	W25N_Read_Status_Reg(&W25N, W25N_STATUS_REG, &statReg);
 80012a0:	1cfb      	adds	r3, r7, #3
 80012a2:	461a      	mov	r2, r3
 80012a4:	21c0      	movs	r1, #192	; 0xc0
 80012a6:	485d      	ldr	r0, [pc, #372]	; (800141c <test_NAND+0x1bc>)
 80012a8:	f007 ff65 	bl	8009176 <W25N_Read_Status_Reg>
	log_info("W25N status: %X", statReg);
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	4619      	mov	r1, r3
 80012b0:	485d      	ldr	r0, [pc, #372]	; (8001428 <test_NAND+0x1c8>)
 80012b2:	f7ff fe27 	bl	8000f04 <log_info>
	W25N_Read_Status_Reg(&W25N, W25N_CONFIG_REG, &statReg);
 80012b6:	1cfb      	adds	r3, r7, #3
 80012b8:	461a      	mov	r2, r3
 80012ba:	21b0      	movs	r1, #176	; 0xb0
 80012bc:	4857      	ldr	r0, [pc, #348]	; (800141c <test_NAND+0x1bc>)
 80012be:	f007 ff5a 	bl	8009176 <W25N_Read_Status_Reg>
	log_info("W25N config: %X", statReg);
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4859      	ldr	r0, [pc, #356]	; (800142c <test_NAND+0x1cc>)
 80012c8:	f7ff fe1c 	bl	8000f04 <log_info>
	W25N_Read_Status_Reg(&W25N, W25N_PROTECTION_REG, &statReg);
 80012cc:	1cfb      	adds	r3, r7, #3
 80012ce:	461a      	mov	r2, r3
 80012d0:	21a0      	movs	r1, #160	; 0xa0
 80012d2:	4852      	ldr	r0, [pc, #328]	; (800141c <test_NAND+0x1bc>)
 80012d4:	f007 ff4f 	bl	8009176 <W25N_Read_Status_Reg>
	log_info("W25N protection: %X", statReg);
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	4619      	mov	r1, r3
 80012dc:	4854      	ldr	r0, [pc, #336]	; (8001430 <test_NAND+0x1d0>)
 80012de:	f7ff fe11 	bl	8000f04 <log_info>
	W25N_Write_Status_Reg(&W25N, W25N_PROTECTION_REG, 0x00); //Disable memory protection
 80012e2:	2200      	movs	r2, #0
 80012e4:	21a0      	movs	r1, #160	; 0xa0
 80012e6:	484d      	ldr	r0, [pc, #308]	; (800141c <test_NAND+0x1bc>)
 80012e8:	f007 ff8a 	bl	8009200 <W25N_Write_Status_Reg>
	W25N_Write_Status_Reg(&W25N, W25N_CONFIG_REG, 0x18); //Enable ECC and buffer
 80012ec:	2218      	movs	r2, #24
 80012ee:	21b0      	movs	r1, #176	; 0xb0
 80012f0:	484a      	ldr	r0, [pc, #296]	; (800141c <test_NAND+0x1bc>)
 80012f2:	f007 ff85 	bl	8009200 <W25N_Write_Status_Reg>

	W25N_Block_Erase(&W25N, 0x0026);
 80012f6:	2126      	movs	r1, #38	; 0x26
 80012f8:	4848      	ldr	r0, [pc, #288]	; (800141c <test_NAND+0x1bc>)
 80012fa:	f007 feff 	bl	80090fc <W25N_Block_Erase>
	W25N_Read_Status_Reg(&W25N, W25N_STATUS_REG, &statReg);
 80012fe:	1cfb      	adds	r3, r7, #3
 8001300:	461a      	mov	r2, r3
 8001302:	21c0      	movs	r1, #192	; 0xc0
 8001304:	4845      	ldr	r0, [pc, #276]	; (800141c <test_NAND+0x1bc>)
 8001306:	f007 ff36 	bl	8009176 <W25N_Read_Status_Reg>
	log_info("W25N status: %X", statReg);
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	4619      	mov	r1, r3
 800130e:	4846      	ldr	r0, [pc, #280]	; (8001428 <test_NAND+0x1c8>)
 8001310:	f7ff fdf8 	bl	8000f04 <log_info>
	W25N_Read_Status_Reg(&W25N, W25N_PROTECTION_REG, &statReg);
 8001314:	1cfb      	adds	r3, r7, #3
 8001316:	461a      	mov	r2, r3
 8001318:	21a0      	movs	r1, #160	; 0xa0
 800131a:	4840      	ldr	r0, [pc, #256]	; (800141c <test_NAND+0x1bc>)
 800131c:	f007 ff2b 	bl	8009176 <W25N_Read_Status_Reg>
	log_info("W25N protection: %X", statReg);
 8001320:	78fb      	ldrb	r3, [r7, #3]
 8001322:	4619      	mov	r1, r3
 8001324:	4842      	ldr	r0, [pc, #264]	; (8001430 <test_NAND+0x1d0>)
 8001326:	f7ff fded 	bl	8000f04 <log_info>
	W25N_Wait_Until_Not_Busy(&W25N, 30000);
 800132a:	f247 5130 	movw	r1, #30000	; 0x7530
 800132e:	483b      	ldr	r0, [pc, #236]	; (800141c <test_NAND+0x1bc>)
 8001330:	f008 f8a8 	bl	8009484 <W25N_Wait_Until_Not_Busy>

	memset(aRxBuffer, 0xff, 512);
 8001334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001338:	21ff      	movs	r1, #255	; 0xff
 800133a:	483e      	ldr	r0, [pc, #248]	; (8001434 <test_NAND+0x1d4>)
 800133c:	f008 fe4a 	bl	8009fd4 <memset>

	W25N_Write_Enable(&W25N); //Must be called before Data load
 8001340:	4836      	ldr	r0, [pc, #216]	; (800141c <test_NAND+0x1bc>)
 8001342:	f007 feb4 	bl	80090ae <W25N_Write_Enable>

	if (W25N_Load_Data_Quad(&W25N, 0x00, aTxBuffer, 256) != W25N_OK) {
 8001346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800134a:	4a3b      	ldr	r2, [pc, #236]	; (8001438 <test_NAND+0x1d8>)
 800134c:	2100      	movs	r1, #0
 800134e:	4833      	ldr	r0, [pc, #204]	; (800141c <test_NAND+0x1bc>)
 8001350:	f007 ff8f 	bl	8009272 <W25N_Load_Data_Quad>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d002      	beq.n	8001360 <test_NAND+0x100>
	  log_error("W25N Unable to load data");
 800135a:	4838      	ldr	r0, [pc, #224]	; (800143c <test_NAND+0x1dc>)
 800135c:	f7ff fdbc 	bl	8000ed8 <log_error>
	}

	W25N_Program_Execute(&W25N, 0x0026);
 8001360:	2126      	movs	r1, #38	; 0x26
 8001362:	482e      	ldr	r0, [pc, #184]	; (800141c <test_NAND+0x1bc>)
 8001364:	f007 ffca 	bl	80092fc <W25N_Program_Execute>
	W25N_Read_Status_Reg(&W25N, W25N_STATUS_REG, &statReg);
 8001368:	1cfb      	adds	r3, r7, #3
 800136a:	461a      	mov	r2, r3
 800136c:	21c0      	movs	r1, #192	; 0xc0
 800136e:	482b      	ldr	r0, [pc, #172]	; (800141c <test_NAND+0x1bc>)
 8001370:	f007 ff01 	bl	8009176 <W25N_Read_Status_Reg>
	log_info("W25N status after execute: %X", statReg);
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	4619      	mov	r1, r3
 8001378:	4831      	ldr	r0, [pc, #196]	; (8001440 <test_NAND+0x1e0>)
 800137a:	f7ff fdc3 	bl	8000f04 <log_info>
	W25N_Wait_Until_Not_Busy(&W25N, 30000);
 800137e:	f247 5130 	movw	r1, #30000	; 0x7530
 8001382:	4826      	ldr	r0, [pc, #152]	; (800141c <test_NAND+0x1bc>)
 8001384:	f008 f87e 	bl	8009484 <W25N_Wait_Until_Not_Busy>

	W25N_Read_Status_Reg(&W25N, W25N_STATUS_REG, &statReg);
 8001388:	1cfb      	adds	r3, r7, #3
 800138a:	461a      	mov	r2, r3
 800138c:	21c0      	movs	r1, #192	; 0xc0
 800138e:	4823      	ldr	r0, [pc, #140]	; (800141c <test_NAND+0x1bc>)
 8001390:	f007 fef1 	bl	8009176 <W25N_Read_Status_Reg>
	log_info("W25N status after execute done: %X", statReg);
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	4619      	mov	r1, r3
 8001398:	482a      	ldr	r0, [pc, #168]	; (8001444 <test_NAND+0x1e4>)
 800139a:	f7ff fdb3 	bl	8000f04 <log_info>
	W25N_Page_Data_Read(&W25N, 0x0026);
 800139e:	2126      	movs	r1, #38	; 0x26
 80013a0:	481e      	ldr	r0, [pc, #120]	; (800141c <test_NAND+0x1bc>)
 80013a2:	f007 ffeb 	bl	800937c <W25N_Page_Data_Read>
	W25N_Read_Status_Reg(&W25N, W25N_STATUS_REG, &statReg);
 80013a6:	1cfb      	adds	r3, r7, #3
 80013a8:	461a      	mov	r2, r3
 80013aa:	21c0      	movs	r1, #192	; 0xc0
 80013ac:	481b      	ldr	r0, [pc, #108]	; (800141c <test_NAND+0x1bc>)
 80013ae:	f007 fee2 	bl	8009176 <W25N_Read_Status_Reg>
	log_info("W25N status after page load: %X", statReg);
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	4619      	mov	r1, r3
 80013b6:	4824      	ldr	r0, [pc, #144]	; (8001448 <test_NAND+0x1e8>)
 80013b8:	f7ff fda4 	bl	8000f04 <log_info>
	W25N_Wait_Until_Not_Busy(&W25N, 30000);
 80013bc:	f247 5130 	movw	r1, #30000	; 0x7530
 80013c0:	4816      	ldr	r0, [pc, #88]	; (800141c <test_NAND+0x1bc>)
 80013c2:	f008 f85f 	bl	8009484 <W25N_Wait_Until_Not_Busy>

	W25N_Read_Status_Reg(&W25N, W25N_STATUS_REG, &statReg);
 80013c6:	1cfb      	adds	r3, r7, #3
 80013c8:	461a      	mov	r2, r3
 80013ca:	21c0      	movs	r1, #192	; 0xc0
 80013cc:	4813      	ldr	r0, [pc, #76]	; (800141c <test_NAND+0x1bc>)
 80013ce:	f007 fed2 	bl	8009176 <W25N_Read_Status_Reg>
	log_info("W25N status after page load done: %X", statReg);
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	4619      	mov	r1, r3
 80013d6:	481d      	ldr	r0, [pc, #116]	; (800144c <test_NAND+0x1ec>)
 80013d8:	f7ff fd94 	bl	8000f04 <log_info>
	if (W25N_Read_Output_Quad(&W25N, 0x00, aRxBuffer, 256) != W25N_OK) {
 80013dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e0:	4a14      	ldr	r2, [pc, #80]	; (8001434 <test_NAND+0x1d4>)
 80013e2:	2100      	movs	r1, #0
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <test_NAND+0x1bc>)
 80013e6:	f008 f806 	bl	80093f6 <W25N_Read_Output_Quad>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <test_NAND+0x196>
	  log_error("W25N unable to read output");
 80013f0:	4817      	ldr	r0, [pc, #92]	; (8001450 <test_NAND+0x1f0>)
 80013f2:	f7ff fd71 	bl	8000ed8 <log_error>
	}

	if (aRxBuffer[0] == aTxBuffer[0]) {
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <test_NAND+0x1d4>)
 80013f8:	781a      	ldrb	r2, [r3, #0]
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <test_NAND+0x1d8>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d103      	bne.n	800140a <test_NAND+0x1aa>
	  log_info("----W25N R/W Success----");
 8001402:	4814      	ldr	r0, [pc, #80]	; (8001454 <test_NAND+0x1f4>)
 8001404:	f7ff fd7e 	bl	8000f04 <log_info>
	}
	else {
	  log_error("W25N R/W Failure");
	}
}
 8001408:	e002      	b.n	8001410 <test_NAND+0x1b0>
	  log_error("W25N R/W Failure");
 800140a:	4813      	ldr	r0, [pc, #76]	; (8001458 <test_NAND+0x1f8>)
 800140c:	f7ff fd64 	bl	8000ed8 <log_error>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	240006ac 	.word	0x240006ac
 800141c:	24000648 	.word	0x24000648
 8001420:	0800bedc 	.word	0x0800bedc
 8001424:	0800bee8 	.word	0x0800bee8
 8001428:	0800bf04 	.word	0x0800bf04
 800142c:	0800bf14 	.word	0x0800bf14
 8001430:	0800bf24 	.word	0x0800bf24
 8001434:	24000428 	.word	0x24000428
 8001438:	24000000 	.word	0x24000000
 800143c:	0800bf38 	.word	0x0800bf38
 8001440:	0800bf54 	.word	0x0800bf54
 8001444:	0800bf74 	.word	0x0800bf74
 8001448:	0800bf98 	.word	0x0800bf98
 800144c:	0800bfb8 	.word	0x0800bfb8
 8001450:	0800bfe0 	.word	0x0800bfe0
 8001454:	0800bffc 	.word	0x0800bffc
 8001458:	0800c018 	.word	0x0800c018

0800145c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	log_error("Unrecoverable Error");
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <Error_Handler+0x10>)
 8001462:	f7ff fd39 	bl	8000ed8 <log_error>
  __ASM volatile ("cpsid i" : : : "memory");
 8001466:	b672      	cpsid	i
}
 8001468:	bf00      	nop
  __disable_irq();
  while (1)
 800146a:	e7fe      	b.n	800146a <Error_Handler+0xe>
 800146c:	0800c100 	.word	0x0800c100

08001470 <MX_OCTOSPI1_Init>:
OSPI_HandleTypeDef hospi1;
OSPI_HandleTypeDef hospi2;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
 8001484:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */
  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8001486:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <MX_OCTOSPI1_Init+0xc0>)
 8001488:	4a2a      	ldr	r2, [pc, #168]	; (8001534 <MX_OCTOSPI1_Init+0xc4>)
 800148a:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800148c:	4b28      	ldr	r3, [pc, #160]	; (8001530 <MX_OCTOSPI1_Init+0xc0>)
 800148e:	2201      	movs	r2, #1
 8001490:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001492:	4b27      	ldr	r3, [pc, #156]	; (8001530 <MX_OCTOSPI1_Init+0xc0>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8001498:	4b25      	ldr	r3, [pc, #148]	; (8001530 <MX_OCTOSPI1_Init+0xc0>)
 800149a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800149e:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 27;
 80014a0:	4b23      	ldr	r3, [pc, #140]	; (8001530 <MX_OCTOSPI1_Init+0xc0>)
 80014a2:	221b      	movs	r2, #27
 80014a4:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <MX_OCTOSPI1_Init+0xc0>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <MX_OCTOSPI1_Init+0xc0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <MX_OCTOSPI1_Init+0xc0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <MX_OCTOSPI1_Init+0xc0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 4;
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <MX_OCTOSPI1_Init+0xc0>)
 80014c0:	2204      	movs	r2, #4
 80014c2:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_OCTOSPI1_Init+0xc0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <MX_OCTOSPI1_Init+0xc0>)
 80014cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MX_OCTOSPI1_Init+0xc0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_OCTOSPI1_Init+0xc0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_OCTOSPI1_Init+0xc0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MX_OCTOSPI1_Init+0xc0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80014ea:	4811      	ldr	r0, [pc, #68]	; (8001530 <MX_OCTOSPI1_Init+0xc0>)
 80014ec:	f002 f948 	bl	8003780 <HAL_OSPI_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_OCTOSPI1_Init+0x8a>
  {
    Error_Handler();
 80014f6:	f7ff ffb1 	bl	800145c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80014fa:	2301      	movs	r3, #1
 80014fc:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 80014fe:	2301      	movs	r3, #1
 8001500:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 8001502:	2301      	movs	r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001506:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800150a:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <MX_OCTOSPI1_Init+0xc8>)
 800150e:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001510:	463b      	mov	r3, r7
 8001512:	f241 3288 	movw	r2, #5000	; 0x1388
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_OCTOSPI1_Init+0xc0>)
 800151a:	f002 fdb9 	bl	8004090 <HAL_OSPIM_Config>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_OCTOSPI1_Init+0xb8>
  {
    Error_Handler();
 8001524:	f7ff ff9a 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	24000650 	.word	0x24000650
 8001534:	52005000 	.word	0x52005000
 8001538:	01000001 	.word	0x01000001

0800153c <MX_OCTOSPI2_Init>:
/* OCTOSPI2 init function */
void MX_OCTOSPI2_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
 8001550:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  hospi2.Instance = OCTOSPI2;
 8001552:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <MX_OCTOSPI2_Init+0xb4>)
 8001554:	4a27      	ldr	r2, [pc, #156]	; (80015f4 <MX_OCTOSPI2_Init+0xb8>)
 8001556:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8001558:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <MX_OCTOSPI2_Init+0xb4>)
 800155a:	2201      	movs	r2, #1
 800155c:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <MX_OCTOSPI2_Init+0xb4>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001564:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <MX_OCTOSPI2_Init+0xb4>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 30;
 800156a:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <MX_OCTOSPI2_Init+0xb4>)
 800156c:	221e      	movs	r2, #30
 800156e:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <MX_OCTOSPI2_Init+0xb4>)
 8001572:	2201      	movs	r2, #1
 8001574:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001576:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <MX_OCTOSPI2_Init+0xb4>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800157c:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <MX_OCTOSPI2_Init+0xb4>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_OCTOSPI2_Init+0xb4>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 8;
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <MX_OCTOSPI2_Init+0xb4>)
 800158a:	2208      	movs	r2, #8
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_OCTOSPI2_Init+0xb4>)
 8001590:	2200      	movs	r2, #0
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <MX_OCTOSPI2_Init+0xb4>)
 8001596:	2200      	movs	r2, #0
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_OCTOSPI2_Init+0xb4>)
 800159c:	2200      	movs	r2, #0
 800159e:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_OCTOSPI2_Init+0xb4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.MaxTran = 0;
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_OCTOSPI2_Init+0xb4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.Refresh = 0;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_OCTOSPI2_Init+0xb4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 80015b2:	480f      	ldr	r0, [pc, #60]	; (80015f0 <MX_OCTOSPI2_Init+0xb4>)
 80015b4:	f002 f8e4 	bl	8003780 <HAL_OSPI_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_OCTOSPI2_Init+0x86>
  {
    Error_Handler();
 80015be:	f7ff ff4d 	bl	800145c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 2;
 80015c6:	2302      	movs	r3, #2
 80015c8:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_OCTOSPI2_Init+0xbc>)
 80015cc:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015ce:	463b      	mov	r3, r7
 80015d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d4:	4619      	mov	r1, r3
 80015d6:	4806      	ldr	r0, [pc, #24]	; (80015f0 <MX_OCTOSPI2_Init+0xb4>)
 80015d8:	f002 fd5a 	bl	8004090 <HAL_OSPIM_Config>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_OCTOSPI2_Init+0xaa>
  {
    Error_Handler();
 80015e2:	f7ff ff3b 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	240006ac 	.word	0x240006ac
 80015f4:	5200a000 	.word	0x5200a000
 80015f8:	00010002 	.word	0x00010002

080015fc <HAL_OSPI_MspInit>:

static uint32_t HAL_RCC_OCTOSPIM_CLK_ENABLED=0;

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b0c2      	sub	sp, #264	; 0x108
 8001600:	af00      	add	r7, sp, #0
 8001602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800160a:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800161c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001620:	22b8      	movs	r2, #184	; 0xb8
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f008 fcd5 	bl	8009fd4 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 800162a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800162e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a85      	ldr	r2, [pc, #532]	; (800184c <HAL_OSPI_MspInit+0x250>)
 8001638:	4293      	cmp	r3, r2
 800163a:	f040 8117 	bne.w	800186c <HAL_OSPI_MspInit+0x270>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800163e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_CLKP;
 800164a:	2330      	movs	r3, #48	; 0x30
 800164c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001650:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001654:	4618      	mov	r0, r3
 8001656:	f004 fc4b 	bl	8005ef0 <HAL_RCCEx_PeriphCLKConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8001660:	f7ff fefc 	bl	800145c <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001664:	4b7a      	ldr	r3, [pc, #488]	; (8001850 <HAL_OSPI_MspInit+0x254>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	3301      	adds	r3, #1
 800166a:	4a79      	ldr	r2, [pc, #484]	; (8001850 <HAL_OSPI_MspInit+0x254>)
 800166c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800166e:	4b78      	ldr	r3, [pc, #480]	; (8001850 <HAL_OSPI_MspInit+0x254>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d10e      	bne.n	8001694 <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001676:	4b77      	ldr	r3, [pc, #476]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 8001678:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800167c:	4a75      	ldr	r2, [pc, #468]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 800167e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001682:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001686:	4b73      	ldr	r3, [pc, #460]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 8001688:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800168c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001690:	637b      	str	r3, [r7, #52]	; 0x34
 8001692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001694:	4b6f      	ldr	r3, [pc, #444]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 8001696:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800169a:	4a6e      	ldr	r2, [pc, #440]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 800169c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80016a4:	4b6b      	ldr	r3, [pc, #428]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 80016a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80016aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ae:	633b      	str	r3, [r7, #48]	; 0x30
 80016b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016b2:	4b68      	ldr	r3, [pc, #416]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b8:	4a66      	ldr	r2, [pc, #408]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 80016ba:	f043 0320 	orr.w	r3, r3, #32
 80016be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c2:	4b64      	ldr	r3, [pc, #400]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 80016c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d0:	4b60      	ldr	r3, [pc, #384]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d6:	4a5f      	ldr	r2, [pc, #380]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e0:	4b5c      	ldr	r3, [pc, #368]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	4b59      	ldr	r3, [pc, #356]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f4:	4a57      	ldr	r2, [pc, #348]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016fe:	4b55      	ldr	r3, [pc, #340]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800170c:	4b51      	ldr	r3, [pc, #324]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001712:	4a50      	ldr	r2, [pc, #320]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 8001714:	f043 0310 	orr.w	r3, r3, #16
 8001718:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171c:	4b4d      	ldr	r3, [pc, #308]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	623b      	str	r3, [r7, #32]
 8001728:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800172a:	4b4a      	ldr	r3, [pc, #296]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 800172c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001730:	4a48      	ldr	r2, [pc, #288]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 8001732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800173a:	4b46      	ldr	r3, [pc, #280]	; (8001854 <HAL_OSPI_MspInit+0x258>)
 800173c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	69fb      	ldr	r3, [r7, #28]
    PE7     ------> OCTOSPIM_P1_IO4
    PE8     ------> OCTOSPIM_P1_IO5
    PE10     ------> OCTOSPIM_P1_IO7
    PG6     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001748:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800174c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001762:	230a      	movs	r3, #10
 8001764:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001768:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800176c:	4619      	mov	r1, r3
 800176e:	483a      	ldr	r0, [pc, #232]	; (8001858 <HAL_OSPI_MspInit+0x25c>)
 8001770:	f000 fe14 	bl	800239c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001778:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800178e:	2309      	movs	r3, #9
 8001790:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001794:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001798:	4619      	mov	r1, r3
 800179a:	482f      	ldr	r0, [pc, #188]	; (8001858 <HAL_OSPI_MspInit+0x25c>)
 800179c:	f000 fdfe 	bl	800239c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017a0:	2308      	movs	r3, #8
 80017a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 80017b8:	2304      	movs	r3, #4
 80017ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017be:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017c2:	4619      	mov	r1, r3
 80017c4:	4825      	ldr	r0, [pc, #148]	; (800185c <HAL_OSPI_MspInit+0x260>)
 80017c6:	f000 fde9 	bl	800239c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017ca:	2302      	movs	r3, #2
 80017cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	2303      	movs	r3, #3
 80017de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF12_OCTOSPIM_P1;
 80017e2:	230c      	movs	r3, #12
 80017e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017ec:	4619      	mov	r1, r3
 80017ee:	481c      	ldr	r0, [pc, #112]	; (8001860 <HAL_OSPI_MspInit+0x264>)
 80017f0:	f000 fdd4 	bl	800239c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80017f4:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80017f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800180e:	230a      	movs	r3, #10
 8001810:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001814:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001818:	4619      	mov	r1, r3
 800181a:	4812      	ldr	r0, [pc, #72]	; (8001864 <HAL_OSPI_MspInit+0x268>)
 800181c:	f000 fdbe 	bl	800239c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001820:	2340      	movs	r3, #64	; 0x40
 8001822:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800182c:	2301      	movs	r3, #1
 800182e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001838:	230a      	movs	r3, #10
 800183a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800183e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001842:	4619      	mov	r1, r3
 8001844:	4808      	ldr	r0, [pc, #32]	; (8001868 <HAL_OSPI_MspInit+0x26c>)
 8001846:	f000 fda9 	bl	800239c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(OCTOSPI2_IRQn);
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }
}
 800184a:	e0a4      	b.n	8001996 <HAL_OSPI_MspInit+0x39a>
 800184c:	52005000 	.word	0x52005000
 8001850:	24000708 	.word	0x24000708
 8001854:	58024400 	.word	0x58024400
 8001858:	58021400 	.word	0x58021400
 800185c:	58020800 	.word	0x58020800
 8001860:	58020000 	.word	0x58020000
 8001864:	58021000 	.word	0x58021000
 8001868:	58021800 	.word	0x58021800
  else if(ospiHandle->Instance==OCTOSPI2)
 800186c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001870:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a49      	ldr	r2, [pc, #292]	; (80019a0 <HAL_OSPI_MspInit+0x3a4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	f040 808b 	bne.w	8001996 <HAL_OSPI_MspInit+0x39a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001880:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_CLKP;
 800188c:	2330      	movs	r3, #48	; 0x30
 800188e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001892:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001896:	4618      	mov	r0, r3
 8001898:	f004 fb2a 	bl	8005ef0 <HAL_RCCEx_PeriphCLKConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_OSPI_MspInit+0x2aa>
      Error_Handler();
 80018a2:	f7ff fddb 	bl	800145c <Error_Handler>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80018a6:	4b3f      	ldr	r3, [pc, #252]	; (80019a4 <HAL_OSPI_MspInit+0x3a8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	4a3d      	ldr	r2, [pc, #244]	; (80019a4 <HAL_OSPI_MspInit+0x3a8>)
 80018ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80018b0:	4b3c      	ldr	r3, [pc, #240]	; (80019a4 <HAL_OSPI_MspInit+0x3a8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d10e      	bne.n	80018d6 <HAL_OSPI_MspInit+0x2da>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80018b8:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <HAL_OSPI_MspInit+0x3ac>)
 80018ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018be:	4a3a      	ldr	r2, [pc, #232]	; (80019a8 <HAL_OSPI_MspInit+0x3ac>)
 80018c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018c4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80018c8:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <HAL_OSPI_MspInit+0x3ac>)
 80018ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80018d6:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <HAL_OSPI_MspInit+0x3ac>)
 80018d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018dc:	4a32      	ldr	r2, [pc, #200]	; (80019a8 <HAL_OSPI_MspInit+0x3ac>)
 80018de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018e2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80018e6:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <HAL_OSPI_MspInit+0x3ac>)
 80018e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018f4:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <HAL_OSPI_MspInit+0x3ac>)
 80018f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fa:	4a2b      	ldr	r2, [pc, #172]	; (80019a8 <HAL_OSPI_MspInit+0x3ac>)
 80018fc:	f043 0320 	orr.w	r3, r3, #32
 8001900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <HAL_OSPI_MspInit+0x3ac>)
 8001906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <HAL_OSPI_MspInit+0x3ac>)
 8001914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001918:	4a23      	ldr	r2, [pc, #140]	; (80019a8 <HAL_OSPI_MspInit+0x3ac>)
 800191a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800191e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <HAL_OSPI_MspInit+0x3ac>)
 8001924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001930:	231f      	movs	r3, #31
 8001932:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001942:	2303      	movs	r3, #3
 8001944:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001948:	2309      	movs	r3, #9
 800194a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800194e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001952:	4619      	mov	r1, r3
 8001954:	4815      	ldr	r0, [pc, #84]	; (80019ac <HAL_OSPI_MspInit+0x3b0>)
 8001956:	f000 fd21 	bl	800239c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800195a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800195e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8001974:	2303      	movs	r3, #3
 8001976:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800197a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800197e:	4619      	mov	r1, r3
 8001980:	480b      	ldr	r0, [pc, #44]	; (80019b0 <HAL_OSPI_MspInit+0x3b4>)
 8001982:	f000 fd0b 	bl	800239c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(OCTOSPI2_IRQn, 0, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2100      	movs	r1, #0
 800198a:	2096      	movs	r0, #150	; 0x96
 800198c:	f000 fc57 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI2_IRQn);
 8001990:	2096      	movs	r0, #150	; 0x96
 8001992:	f000 fc6e 	bl	8002272 <HAL_NVIC_EnableIRQ>
}
 8001996:	bf00      	nop
 8001998:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	5200a000 	.word	0x5200a000
 80019a4:	24000708 	.word	0x24000708
 80019a8:	58024400 	.word	0x58024400
 80019ac:	58021400 	.word	0x58021400
 80019b0:	58021800 	.word	0x58021800

080019b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_MspInit+0x30>)
 80019bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019c0:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_MspInit+0x30>)
 80019c2:	f043 0302 	orr.w	r3, r3, #2
 80019c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_MspInit+0x30>)
 80019cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	58024400 	.word	0x58024400

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <NMI_Handler+0x4>

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler+0x4>

080019fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f000 fae4 	bl	8002000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <OCTOSPI2_IRQHandler>:

/**
  * @brief This function handles OCTOSPI2 global interrupt.
  */
void OCTOSPI2_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI2_IRQn 0 */

  /* USER CODE END OCTOSPI2_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi2);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <OCTOSPI2_IRQHandler+0x10>)
 8001a42:	f001 ff59 	bl	80038f8 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI2_IRQn 1 */

  /* USER CODE END OCTOSPI2_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	240006ac 	.word	0x240006ac

08001a50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
	return 1;
 8001a54:	2301      	movs	r3, #1
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <_kill>:

int _kill(int pid, int sig)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a6a:	f008 fb05 	bl	800a078 <__errno>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2216      	movs	r2, #22
 8001a72:	601a      	str	r2, [r3, #0]
	return -1;
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_exit>:

void _exit (int status)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ffe7 	bl	8001a60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a92:	e7fe      	b.n	8001a92 <_exit+0x12>

08001a94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e00a      	b.n	8001abc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aa6:	f3af 8000 	nop.w
 8001aaa:	4601      	mov	r1, r0
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60ba      	str	r2, [r7, #8]
 8001ab2:	b2ca      	uxtb	r2, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf0      	blt.n	8001aa6 <_read+0x12>
	}

return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e009      	b.n	8001af4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	60ba      	str	r2, [r7, #8]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff f9c7 	bl	8000e7c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dbf1      	blt.n	8001ae0 <_write+0x12>
	}
	return len;
 8001afc:	687b      	ldr	r3, [r7, #4]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <_close>:

int _close(int file)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
	return -1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b2e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <_isatty>:

int _isatty(int file)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
	return 1;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b78:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <_sbrk+0x5c>)
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <_sbrk+0x60>)
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <_sbrk+0x64>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <_sbrk+0x68>)
 8001b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d207      	bcs.n	8001bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba0:	f008 fa6a 	bl	800a078 <__errno>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	e009      	b.n	8001bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <_sbrk+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <_sbrk+0x64>)
 8001bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	24050000 	.word	0x24050000
 8001bd0:	00000400 	.word	0x00000400
 8001bd4:	2400070c 	.word	0x2400070c
 8001bd8:	240008f8 	.word	0x240008f8

08001bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001be0:	4b32      	ldr	r3, [pc, #200]	; (8001cac <SystemInit+0xd0>)
 8001be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be6:	4a31      	ldr	r2, [pc, #196]	; (8001cac <SystemInit+0xd0>)
 8001be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bf0:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <SystemInit+0xd4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	2b06      	cmp	r3, #6
 8001bfa:	d807      	bhi.n	8001c0c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bfc:	4b2c      	ldr	r3, [pc, #176]	; (8001cb0 <SystemInit+0xd4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f023 030f 	bic.w	r3, r3, #15
 8001c04:	4a2a      	ldr	r2, [pc, #168]	; (8001cb0 <SystemInit+0xd4>)
 8001c06:	f043 0307 	orr.w	r3, r3, #7
 8001c0a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c0c:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <SystemInit+0xd8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a28      	ldr	r2, [pc, #160]	; (8001cb4 <SystemInit+0xd8>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c18:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <SystemInit+0xd8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c1e:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <SystemInit+0xd8>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4924      	ldr	r1, [pc, #144]	; (8001cb4 <SystemInit+0xd8>)
 8001c24:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <SystemInit+0xdc>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c2a:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <SystemInit+0xd4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d007      	beq.n	8001c46 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <SystemInit+0xd4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 030f 	bic.w	r3, r3, #15
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <SystemInit+0xd4>)
 8001c40:	f043 0307 	orr.w	r3, r3, #7
 8001c44:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <SystemInit+0xd8>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c4c:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <SystemInit+0xd8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <SystemInit+0xd8>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c58:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <SystemInit+0xd8>)
 8001c5a:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <SystemInit+0xe0>)
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <SystemInit+0xd8>)
 8001c60:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <SystemInit+0xe4>)
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <SystemInit+0xd8>)
 8001c66:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <SystemInit+0xe8>)
 8001c68:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c6a:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <SystemInit+0xd8>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <SystemInit+0xd8>)
 8001c72:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <SystemInit+0xe8>)
 8001c74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c76:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <SystemInit+0xd8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c7c:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <SystemInit+0xd8>)
 8001c7e:	4a11      	ldr	r2, [pc, #68]	; (8001cc4 <SystemInit+0xe8>)
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <SystemInit+0xd8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <SystemInit+0xd8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <SystemInit+0xd8>)
 8001c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c94:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <SystemInit+0xd8>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <SystemInit+0xec>)
 8001c9c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001ca0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000ed00 	.word	0xe000ed00
 8001cb0:	52002000 	.word	0x52002000
 8001cb4:	58024400 	.word	0x58024400
 8001cb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001cbc:	02020200 	.word	0x02020200
 8001cc0:	01ff0000 	.word	0x01ff0000
 8001cc4:	01010280 	.word	0x01010280
 8001cc8:	52004000 	.word	0x52004000

08001ccc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cd0:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001cd2:	4a23      	ldr	r2, [pc, #140]	; (8001d60 <MX_USART1_UART_Init+0x94>)
 8001cd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cd6:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cde:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d02:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d14:	4811      	ldr	r0, [pc, #68]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001d16:	f005 fead 	bl	8007a74 <HAL_UART_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d20:	f7ff fb9c 	bl	800145c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d24:	2100      	movs	r1, #0
 8001d26:	480d      	ldr	r0, [pc, #52]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001d28:	f007 f841 	bl	8008dae <HAL_UARTEx_SetTxFifoThreshold>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d32:	f7ff fb93 	bl	800145c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d36:	2100      	movs	r1, #0
 8001d38:	4808      	ldr	r0, [pc, #32]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001d3a:	f007 f876 	bl	8008e2a <HAL_UARTEx_SetRxFifoThreshold>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d44:	f7ff fb8a 	bl	800145c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d48:	4804      	ldr	r0, [pc, #16]	; (8001d5c <MX_USART1_UART_Init+0x90>)
 8001d4a:	f006 fff7 	bl	8008d3c <HAL_UARTEx_DisableFifoMode>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d54:	f7ff fb82 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	24000710 	.word	0x24000710
 8001d60:	40011000 	.word	0x40011000

08001d64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b0b8      	sub	sp, #224	; 0xe0
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	22b8      	movs	r2, #184	; 0xb8
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f008 f925 	bl	8009fd4 <memset>
  if(uartHandle->Instance==USART1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a27      	ldr	r2, [pc, #156]	; (8001e2c <HAL_UART_MspInit+0xc8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d146      	bne.n	8001e22 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d94:	f04f 0201 	mov.w	r2, #1
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da6:	f107 0310 	add.w	r3, r7, #16
 8001daa:	4618      	mov	r0, r3
 8001dac:	f004 f8a0 	bl	8005ef0 <HAL_RCCEx_PeriphCLKConfig>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001db6:	f7ff fb51 	bl	800145c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dba:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <HAL_UART_MspInit+0xcc>)
 8001dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dc0:	4a1b      	ldr	r2, [pc, #108]	; (8001e30 <HAL_UART_MspInit+0xcc>)
 8001dc2:	f043 0310 	orr.w	r3, r3, #16
 8001dc6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_UART_MspInit+0xcc>)
 8001dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd8:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_UART_MspInit+0xcc>)
 8001dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dde:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <HAL_UART_MspInit+0xcc>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_UART_MspInit+0xcc>)
 8001dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001df6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001dfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001e10:	2304      	movs	r3, #4
 8001e12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e16:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4805      	ldr	r0, [pc, #20]	; (8001e34 <HAL_UART_MspInit+0xd0>)
 8001e1e:	f000 fabd 	bl	800239c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e22:	bf00      	nop
 8001e24:	37e0      	adds	r7, #224	; 0xe0
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40011000 	.word	0x40011000
 8001e30:	58024400 	.word	0x58024400
 8001e34:	58020400 	.word	0x58020400

08001e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e3c:	f7ff fece 	bl	8001bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e40:	480c      	ldr	r0, [pc, #48]	; (8001e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e42:	490d      	ldr	r1, [pc, #52]	; (8001e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e44:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e48:	e002      	b.n	8001e50 <LoopCopyDataInit>

08001e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4e:	3304      	adds	r3, #4

08001e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e54:	d3f9      	bcc.n	8001e4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e58:	4c0a      	ldr	r4, [pc, #40]	; (8001e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e5c:	e001      	b.n	8001e62 <LoopFillZerobss>

08001e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e60:	3204      	adds	r2, #4

08001e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e64:	d3fb      	bcc.n	8001e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e66:	f008 f90d 	bl	800a084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e6a:	f7ff f861 	bl	8000f30 <main>
  bx  lr
 8001e6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e70:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001e74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e78:	240002dc 	.word	0x240002dc
  ldr r2, =_sidata
 8001e7c:	0800c4cc 	.word	0x0800c4cc
  ldr r2, =_sbss
 8001e80:	240002dc 	.word	0x240002dc
  ldr r4, =_ebss
 8001e84:	240008f4 	.word	0x240008f4

08001e88 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e88:	e7fe      	b.n	8001e88 <ADC3_IRQHandler>

08001e8a <INA236_setup>:
 *      Author: Kieran Shanley
 */
#include "INA236.h"

void INA236_setup(INA236_dev * dev, I2C_Bus * bus, uint8_t addr)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b085      	sub	sp, #20
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	4613      	mov	r3, r2
 8001e96:	71fb      	strb	r3, [r7, #7]
	dev->addr = addr;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	79fa      	ldrb	r2, [r7, #7]
 8001e9c:	711a      	strb	r2, [r3, #4]
	dev->bus = bus;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	601a      	str	r2, [r3, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <PCA9543_setup>:
 *      Author: Kieran Shanley
 */
#include "PCA9543.h"

void PCA9543_setup(PCA9543_dev * dev, I2C_Bus * bus, uint8_t addr)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	71fb      	strb	r3, [r7, #7]
	dev->addr = addr;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	79fa      	ldrb	r2, [r7, #7]
 8001ec2:	711a      	strb	r2, [r3, #4]
	dev->bus = bus;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	601a      	str	r2, [r3, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <PCA9543_set_channel>:

int32_t PCA9543_set_channel(PCA9543_dev * dev, uint8_t channel)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af02      	add	r7, sp, #8
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	70fb      	strb	r3, [r7, #3]
	uint8_t data = channel;
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	73bb      	strb	r3, [r7, #14]
	uint8_t addr = dev->addr << 1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	791b      	ldrb	r3, [r3, #4]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Master_Transmit(dev->bus->I2C_Handle, addr, &data, 1, 1000) == HAL_OK) {
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	b299      	uxth	r1, r3
 8001ef8:	f107 020e 	add.w	r2, r7, #14
 8001efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2301      	movs	r3, #1
 8001f04:	f000 fc9c 	bl	8002840 <HAL_I2C_Master_Transmit>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <PCA9543_set_channel+0x3c>
		return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e000      	b.n	8001f14 <PCA9543_set_channel+0x3e>
	}

	return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f22:	2003      	movs	r0, #3
 8001f24:	f000 f980 	bl	8002228 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f28:	f003 fe0c 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_Init+0x68>)
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	0a1b      	lsrs	r3, r3, #8
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	4913      	ldr	r1, [pc, #76]	; (8001f88 <HAL_Init+0x6c>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
 8001f44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_Init+0x68>)
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <HAL_Init+0x6c>)
 8001f50:	5cd3      	ldrb	r3, [r2, r3]
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <HAL_Init+0x70>)
 8001f5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f60:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <HAL_Init+0x74>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f66:	200f      	movs	r0, #15
 8001f68:	f000 f814 	bl	8001f94 <HAL_InitTick>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e002      	b.n	8001f7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f76:	f7ff fd1d 	bl	80019b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	58024400 	.word	0x58024400
 8001f88:	0800c114 	.word	0x0800c114
 8001f8c:	24000108 	.word	0x24000108
 8001f90:	24000104 	.word	0x24000104

08001f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f9c:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <HAL_InitTick+0x60>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e021      	b.n	8001fec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001fa8:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <HAL_InitTick+0x64>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_InitTick+0x60>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f965 	bl	800228e <HAL_SYSTICK_Config>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00e      	b.n	8001fec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b0f      	cmp	r3, #15
 8001fd2:	d80a      	bhi.n	8001fea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fdc:	f000 f92f 	bl	800223e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe0:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <HAL_InitTick+0x68>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	24000110 	.word	0x24000110
 8001ff8:	24000104 	.word	0x24000104
 8001ffc:	2400010c 	.word	0x2400010c

08002000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_IncTick+0x20>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_IncTick+0x24>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4413      	add	r3, r2
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_IncTick+0x24>)
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	24000110 	.word	0x24000110
 8002024:	240007a4 	.word	0x240007a4

08002028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return uwTick;
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <HAL_GetTick+0x14>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	240007a4 	.word	0x240007a4

08002040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff ffee 	bl	8002028 <HAL_GetTick>
 800204c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002058:	d005      	beq.n	8002066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_Delay+0x44>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002066:	bf00      	nop
 8002068:	f7ff ffde 	bl	8002028 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	429a      	cmp	r2, r3
 8002076:	d8f7      	bhi.n	8002068 <HAL_Delay+0x28>
  {
  }
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	24000110 	.word	0x24000110

08002088 <__NVIC_SetPriorityGrouping>:
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <__NVIC_SetPriorityGrouping+0x40>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a4:	4013      	ands	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b6:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <__NVIC_SetPriorityGrouping+0x40>)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	60d3      	str	r3, [r2, #12]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000ed00 	.word	0xe000ed00
 80020cc:	05fa0000 	.word	0x05fa0000

080020d0 <__NVIC_GetPriorityGrouping>:
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <__NVIC_GetPriorityGrouping+0x18>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	f003 0307 	and.w	r3, r3, #7
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_EnableIRQ>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	db0b      	blt.n	8002116 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	4907      	ldr	r1, [pc, #28]	; (8002124 <__NVIC_EnableIRQ+0x38>)
 8002106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	2001      	movs	r0, #1
 800210e:	fa00 f202 	lsl.w	r2, r0, r2
 8002112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000e100 	.word	0xe000e100

08002128 <__NVIC_SetPriority>:
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002134:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002138:	2b00      	cmp	r3, #0
 800213a:	db0a      	blt.n	8002152 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	490c      	ldr	r1, [pc, #48]	; (8002174 <__NVIC_SetPriority+0x4c>)
 8002142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	440b      	add	r3, r1
 800214c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002150:	e00a      	b.n	8002168 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4908      	ldr	r1, [pc, #32]	; (8002178 <__NVIC_SetPriority+0x50>)
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	3b04      	subs	r3, #4
 8002160:	0112      	lsls	r2, r2, #4
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	440b      	add	r3, r1
 8002166:	761a      	strb	r2, [r3, #24]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000e100 	.word	0xe000e100
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <NVIC_EncodePriority>:
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	; 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f1c3 0307 	rsb	r3, r3, #7
 8002196:	2b04      	cmp	r3, #4
 8002198:	bf28      	it	cs
 800219a:	2304      	movcs	r3, #4
 800219c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d902      	bls.n	80021ac <NVIC_EncodePriority+0x30>
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3b03      	subs	r3, #3
 80021aa:	e000      	b.n	80021ae <NVIC_EncodePriority+0x32>
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	f04f 32ff 	mov.w	r2, #4294967295
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	401a      	ands	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c4:	f04f 31ff 	mov.w	r1, #4294967295
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	43d9      	mvns	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	4313      	orrs	r3, r2
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3724      	adds	r7, #36	; 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f4:	d301      	bcc.n	80021fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00f      	b.n	800221a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <SysTick_Config+0x40>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002202:	210f      	movs	r1, #15
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	f7ff ff8e 	bl	8002128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <SysTick_Config+0x40>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002212:	4b04      	ldr	r3, [pc, #16]	; (8002224 <SysTick_Config+0x40>)
 8002214:	2207      	movs	r2, #7
 8002216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	e000e010 	.word	0xe000e010

08002228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff29 	bl	8002088 <__NVIC_SetPriorityGrouping>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b086      	sub	sp, #24
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800224c:	f7ff ff40 	bl	80020d0 <__NVIC_GetPriorityGrouping>
 8002250:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	6978      	ldr	r0, [r7, #20]
 8002258:	f7ff ff90 	bl	800217c <NVIC_EncodePriority>
 800225c:	4602      	mov	r2, r0
 800225e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff5f 	bl	8002128 <__NVIC_SetPriority>
}
 800226a:	bf00      	nop
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800227c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff33 	bl	80020ec <__NVIC_EnableIRQ>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ffa4 	bl	80021e4 <SysTick_Config>
 800229c:	4603      	mov	r3, r0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e069      	b.n	800238e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d102      	bne.n	80022cc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe fa2e 	bl	8000728 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6819      	ldr	r1, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_DCMI_Init+0xf0>)
 80022ee:	400b      	ands	r3, r1
 80022f0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6819      	ldr	r1, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002306:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002312:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800231e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800232a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002336:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b10      	cmp	r3, #16
 8002346:	d112      	bne.n	800236e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7f1b      	ldrb	r3, [r3, #28]
 800234c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7f5b      	ldrb	r3, [r3, #29]
 8002352:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002354:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	7f9b      	ldrb	r3, [r3, #30]
 800235a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800235c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7fdb      	ldrb	r3, [r3, #31]
 8002364:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800236a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800236c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 021e 	orr.w	r2, r2, #30
 800237c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	ffe0f007 	.word	0xffe0f007

0800239c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80023aa:	4b86      	ldr	r3, [pc, #536]	; (80025c4 <HAL_GPIO_Init+0x228>)
 80023ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023ae:	e18c      	b.n	80026ca <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2101      	movs	r1, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 817e 	beq.w	80026c4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d005      	beq.n	80023e0 <HAL_GPIO_Init+0x44>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d130      	bne.n	8002442 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002416:	2201      	movs	r2, #1
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	091b      	lsrs	r3, r3, #4
 800242c:	f003 0201 	and.w	r2, r3, #1
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b03      	cmp	r3, #3
 800244c:	d017      	beq.n	800247e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d123      	bne.n	80024d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	08da      	lsrs	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3208      	adds	r2, #8
 8002492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	220f      	movs	r2, #15
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	08da      	lsrs	r2, r3, #3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3208      	adds	r2, #8
 80024cc:	69b9      	ldr	r1, [r7, #24]
 80024ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2203      	movs	r2, #3
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0203 	and.w	r2, r3, #3
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 80d8 	beq.w	80026c4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002514:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <HAL_GPIO_Init+0x22c>)
 8002516:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800251a:	4a2b      	ldr	r2, [pc, #172]	; (80025c8 <HAL_GPIO_Init+0x22c>)
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002524:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <HAL_GPIO_Init+0x22c>)
 8002526:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002532:	4a26      	ldr	r2, [pc, #152]	; (80025cc <HAL_GPIO_Init+0x230>)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	089b      	lsrs	r3, r3, #2
 8002538:	3302      	adds	r3, #2
 800253a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	220f      	movs	r2, #15
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <HAL_GPIO_Init+0x234>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d04a      	beq.n	80025f4 <HAL_GPIO_Init+0x258>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a1c      	ldr	r2, [pc, #112]	; (80025d4 <HAL_GPIO_Init+0x238>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d02b      	beq.n	80025be <HAL_GPIO_Init+0x222>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <HAL_GPIO_Init+0x23c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d025      	beq.n	80025ba <HAL_GPIO_Init+0x21e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a1a      	ldr	r2, [pc, #104]	; (80025dc <HAL_GPIO_Init+0x240>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d01f      	beq.n	80025b6 <HAL_GPIO_Init+0x21a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <HAL_GPIO_Init+0x244>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d019      	beq.n	80025b2 <HAL_GPIO_Init+0x216>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <HAL_GPIO_Init+0x248>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d013      	beq.n	80025ae <HAL_GPIO_Init+0x212>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a17      	ldr	r2, [pc, #92]	; (80025e8 <HAL_GPIO_Init+0x24c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00d      	beq.n	80025aa <HAL_GPIO_Init+0x20e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a16      	ldr	r2, [pc, #88]	; (80025ec <HAL_GPIO_Init+0x250>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d007      	beq.n	80025a6 <HAL_GPIO_Init+0x20a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a15      	ldr	r2, [pc, #84]	; (80025f0 <HAL_GPIO_Init+0x254>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d101      	bne.n	80025a2 <HAL_GPIO_Init+0x206>
 800259e:	2309      	movs	r3, #9
 80025a0:	e029      	b.n	80025f6 <HAL_GPIO_Init+0x25a>
 80025a2:	230a      	movs	r3, #10
 80025a4:	e027      	b.n	80025f6 <HAL_GPIO_Init+0x25a>
 80025a6:	2307      	movs	r3, #7
 80025a8:	e025      	b.n	80025f6 <HAL_GPIO_Init+0x25a>
 80025aa:	2306      	movs	r3, #6
 80025ac:	e023      	b.n	80025f6 <HAL_GPIO_Init+0x25a>
 80025ae:	2305      	movs	r3, #5
 80025b0:	e021      	b.n	80025f6 <HAL_GPIO_Init+0x25a>
 80025b2:	2304      	movs	r3, #4
 80025b4:	e01f      	b.n	80025f6 <HAL_GPIO_Init+0x25a>
 80025b6:	2303      	movs	r3, #3
 80025b8:	e01d      	b.n	80025f6 <HAL_GPIO_Init+0x25a>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e01b      	b.n	80025f6 <HAL_GPIO_Init+0x25a>
 80025be:	2301      	movs	r3, #1
 80025c0:	e019      	b.n	80025f6 <HAL_GPIO_Init+0x25a>
 80025c2:	bf00      	nop
 80025c4:	58000080 	.word	0x58000080
 80025c8:	58024400 	.word	0x58024400
 80025cc:	58000400 	.word	0x58000400
 80025d0:	58020000 	.word	0x58020000
 80025d4:	58020400 	.word	0x58020400
 80025d8:	58020800 	.word	0x58020800
 80025dc:	58020c00 	.word	0x58020c00
 80025e0:	58021000 	.word	0x58021000
 80025e4:	58021400 	.word	0x58021400
 80025e8:	58021800 	.word	0x58021800
 80025ec:	58021c00 	.word	0x58021c00
 80025f0:	58022400 	.word	0x58022400
 80025f4:	2300      	movs	r3, #0
 80025f6:	69fa      	ldr	r2, [r7, #28]
 80025f8:	f002 0203 	and.w	r2, r2, #3
 80025fc:	0092      	lsls	r2, r2, #2
 80025fe:	4093      	lsls	r3, r2
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002606:	4938      	ldr	r1, [pc, #224]	; (80026e8 <HAL_GPIO_Init+0x34c>)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800263a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	3301      	adds	r3, #1
 80026c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f47f ae6b 	bne.w	80023b0 <HAL_GPIO_Init+0x14>
  }
}
 80026da:	bf00      	nop
 80026dc:	bf00      	nop
 80026de:	3724      	adds	r7, #36	; 0x24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	58000400 	.word	0x58000400

080026ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	807b      	strh	r3, [r7, #2]
 80026f8:	4613      	mov	r3, r2
 80026fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026fc:	787b      	ldrb	r3, [r7, #1]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002702:	887a      	ldrh	r2, [r7, #2]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002708:	e003      	b.n	8002712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800270a:	887b      	ldrh	r3, [r7, #2]
 800270c:	041a      	lsls	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	619a      	str	r2, [r3, #24]
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e07f      	b.n	8002832 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe fa40 	bl	8000bcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2224      	movs	r2, #36	; 0x24
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002770:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002780:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d107      	bne.n	800279a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	e006      	b.n	80027a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d104      	bne.n	80027ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b1d      	ldr	r3, [pc, #116]	; (800283c <HAL_I2C_Init+0x11c>)
 80027c6:	430b      	orrs	r3, r1
 80027c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69d9      	ldr	r1, [r3, #28]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1a      	ldr	r2, [r3, #32]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	02008000 	.word	0x02008000

08002840 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	461a      	mov	r2, r3
 800284c:	460b      	mov	r3, r1
 800284e:	817b      	strh	r3, [r7, #10]
 8002850:	4613      	mov	r3, r2
 8002852:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b20      	cmp	r3, #32
 800285e:	f040 80da 	bne.w	8002a16 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_I2C_Master_Transmit+0x30>
 800286c:	2302      	movs	r3, #2
 800286e:	e0d3      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1d8>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002878:	f7ff fbd6 	bl	8002028 <HAL_GetTick>
 800287c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2319      	movs	r3, #25
 8002884:	2201      	movs	r2, #1
 8002886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 fcce 	bl	800322c <I2C_WaitOnFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0be      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2221      	movs	r2, #33	; 0x21
 800289e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2210      	movs	r2, #16
 80028a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	893a      	ldrh	r2, [r7, #8]
 80028ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2bff      	cmp	r3, #255	; 0xff
 80028ca:	d90e      	bls.n	80028ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	22ff      	movs	r2, #255	; 0xff
 80028d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	8979      	ldrh	r1, [r7, #10]
 80028da:	4b51      	ldr	r3, [pc, #324]	; (8002a20 <HAL_I2C_Master_Transmit+0x1e0>)
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fe5c 	bl	80035a0 <I2C_TransferConfig>
 80028e8:	e06c      	b.n	80029c4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	8979      	ldrh	r1, [r7, #10]
 80028fc:	4b48      	ldr	r3, [pc, #288]	; (8002a20 <HAL_I2C_Master_Transmit+0x1e0>)
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 fe4b 	bl	80035a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800290a:	e05b      	b.n	80029c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	6a39      	ldr	r1, [r7, #32]
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 fcda 	bl	80032ca <I2C_WaitOnTXISFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e07b      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d034      	beq.n	80029c4 <HAL_I2C_Master_Transmit+0x184>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295e:	2b00      	cmp	r3, #0
 8002960:	d130      	bne.n	80029c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	2200      	movs	r2, #0
 800296a:	2180      	movs	r1, #128	; 0x80
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fc5d 	bl	800322c <I2C_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e04d      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2bff      	cmp	r3, #255	; 0xff
 8002984:	d90e      	bls.n	80029a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	22ff      	movs	r2, #255	; 0xff
 800298a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	b2da      	uxtb	r2, r3
 8002992:	8979      	ldrh	r1, [r7, #10]
 8002994:	2300      	movs	r3, #0
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 fdff 	bl	80035a0 <I2C_TransferConfig>
 80029a2:	e00f      	b.n	80029c4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	8979      	ldrh	r1, [r7, #10]
 80029b6:	2300      	movs	r3, #0
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fdee 	bl	80035a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d19e      	bne.n	800290c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	6a39      	ldr	r1, [r7, #32]
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 fcc0 	bl	8003358 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e01a      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2220      	movs	r2, #32
 80029e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_I2C_Master_Transmit+0x1e4>)
 80029f6:	400b      	ands	r3, r1
 80029f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e000      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002a16:	2302      	movs	r3, #2
  }
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	80002000 	.word	0x80002000
 8002a24:	fe00e800 	.word	0xfe00e800

08002a28 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	4608      	mov	r0, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	461a      	mov	r2, r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	817b      	strh	r3, [r7, #10]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	813b      	strh	r3, [r7, #8]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	f040 80f9 	bne.w	8002c42 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <HAL_I2C_Mem_Write+0x34>
 8002a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d105      	bne.n	8002a68 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a62:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0ed      	b.n	8002c44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_I2C_Mem_Write+0x4e>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e0e6      	b.n	8002c44 <HAL_I2C_Mem_Write+0x21c>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a7e:	f7ff fad3 	bl	8002028 <HAL_GetTick>
 8002a82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	2319      	movs	r3, #25
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fbcb 	bl	800322c <I2C_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0d1      	b.n	8002c44 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2221      	movs	r2, #33	; 0x21
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2240      	movs	r2, #64	; 0x40
 8002aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a3a      	ldr	r2, [r7, #32]
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ac8:	88f8      	ldrh	r0, [r7, #6]
 8002aca:	893a      	ldrh	r2, [r7, #8]
 8002acc:	8979      	ldrh	r1, [r7, #10]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fadb 	bl	8003094 <I2C_RequestMemoryWrite>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0a9      	b.n	8002c44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2bff      	cmp	r3, #255	; 0xff
 8002af8:	d90e      	bls.n	8002b18 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	22ff      	movs	r2, #255	; 0xff
 8002afe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	8979      	ldrh	r1, [r7, #10]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fd45 	bl	80035a0 <I2C_TransferConfig>
 8002b16:	e00f      	b.n	8002b38 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	8979      	ldrh	r1, [r7, #10]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fd34 	bl	80035a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 fbc4 	bl	80032ca <I2C_WaitOnTXISFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e07b      	b.n	8002c44 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	781a      	ldrb	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d034      	beq.n	8002bf0 <HAL_I2C_Mem_Write+0x1c8>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d130      	bne.n	8002bf0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b94:	2200      	movs	r2, #0
 8002b96:	2180      	movs	r1, #128	; 0x80
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fb47 	bl	800322c <I2C_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e04d      	b.n	8002c44 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2bff      	cmp	r3, #255	; 0xff
 8002bb0:	d90e      	bls.n	8002bd0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	22ff      	movs	r2, #255	; 0xff
 8002bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	8979      	ldrh	r1, [r7, #10]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fce9 	bl	80035a0 <I2C_TransferConfig>
 8002bce:	e00f      	b.n	8002bf0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	8979      	ldrh	r1, [r7, #10]
 8002be2:	2300      	movs	r3, #0
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 fcd8 	bl	80035a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d19e      	bne.n	8002b38 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 fbaa 	bl	8003358 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e01a      	b.n	8002c44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2220      	movs	r2, #32
 8002c14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6859      	ldr	r1, [r3, #4]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_I2C_Mem_Write+0x224>)
 8002c22:	400b      	ands	r3, r1
 8002c24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e000      	b.n	8002c44 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c42:	2302      	movs	r3, #2
  }
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	fe00e800 	.word	0xfe00e800

08002c50 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	4608      	mov	r0, r1
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4603      	mov	r3, r0
 8002c60:	817b      	strh	r3, [r7, #10]
 8002c62:	460b      	mov	r3, r1
 8002c64:	813b      	strh	r3, [r7, #8]
 8002c66:	4613      	mov	r3, r2
 8002c68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	f040 80fd 	bne.w	8002e72 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <HAL_I2C_Mem_Read+0x34>
 8002c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0f1      	b.n	8002e74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_I2C_Mem_Read+0x4e>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e0ea      	b.n	8002e74 <HAL_I2C_Mem_Read+0x224>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ca6:	f7ff f9bf 	bl	8002028 <HAL_GetTick>
 8002caa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	2319      	movs	r3, #25
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fab7 	bl	800322c <I2C_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0d5      	b.n	8002e74 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2222      	movs	r2, #34	; 0x22
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2240      	movs	r2, #64	; 0x40
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a3a      	ldr	r2, [r7, #32]
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cf0:	88f8      	ldrh	r0, [r7, #6]
 8002cf2:	893a      	ldrh	r2, [r7, #8]
 8002cf4:	8979      	ldrh	r1, [r7, #10]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	4603      	mov	r3, r0
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fa1b 	bl	800313c <I2C_RequestMemoryRead>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0ad      	b.n	8002e74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2bff      	cmp	r3, #255	; 0xff
 8002d20:	d90e      	bls.n	8002d40 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	22ff      	movs	r2, #255	; 0xff
 8002d26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	8979      	ldrh	r1, [r7, #10]
 8002d30:	4b52      	ldr	r3, [pc, #328]	; (8002e7c <HAL_I2C_Mem_Read+0x22c>)
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 fc31 	bl	80035a0 <I2C_TransferConfig>
 8002d3e:	e00f      	b.n	8002d60 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	8979      	ldrh	r1, [r7, #10]
 8002d52:	4b4a      	ldr	r3, [pc, #296]	; (8002e7c <HAL_I2C_Mem_Read+0x22c>)
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fc20 	bl	80035a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	2200      	movs	r2, #0
 8002d68:	2104      	movs	r1, #4
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fa5e 	bl	800322c <I2C_WaitOnFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07c      	b.n	8002e74 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d034      	beq.n	8002e20 <HAL_I2C_Mem_Read+0x1d0>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d130      	bne.n	8002e20 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2180      	movs	r1, #128	; 0x80
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fa2f 	bl	800322c <I2C_WaitOnFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e04d      	b.n	8002e74 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2bff      	cmp	r3, #255	; 0xff
 8002de0:	d90e      	bls.n	8002e00 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	22ff      	movs	r2, #255	; 0xff
 8002de6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	8979      	ldrh	r1, [r7, #10]
 8002df0:	2300      	movs	r3, #0
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 fbd1 	bl	80035a0 <I2C_TransferConfig>
 8002dfe:	e00f      	b.n	8002e20 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	8979      	ldrh	r1, [r7, #10]
 8002e12:	2300      	movs	r3, #0
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 fbc0 	bl	80035a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d19a      	bne.n	8002d60 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 fa92 	bl	8003358 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e01a      	b.n	8002e74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2220      	movs	r2, #32
 8002e44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_I2C_Mem_Read+0x230>)
 8002e52:	400b      	ands	r3, r1
 8002e54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e000      	b.n	8002e74 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e72:	2302      	movs	r3, #2
  }
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	80002400 	.word	0x80002400
 8002e80:	fe00e800 	.word	0xfe00e800

08002e84 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	; 0x28
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	460b      	mov	r3, r1
 8002e92:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	f040 80ef 	bne.w	8003084 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb4:	d101      	bne.n	8002eba <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e0e5      	b.n	8003086 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_I2C_IsDeviceReady+0x44>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e0de      	b.n	8003086 <HAL_I2C_IsDeviceReady+0x202>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2224      	movs	r2, #36	; 0x24
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d105      	bne.n	8002ef2 <HAL_I2C_IsDeviceReady+0x6e>
 8002ee6:	897b      	ldrh	r3, [r7, #10]
 8002ee8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002eec:	4b68      	ldr	r3, [pc, #416]	; (8003090 <HAL_I2C_IsDeviceReady+0x20c>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	e004      	b.n	8002efc <HAL_I2C_IsDeviceReady+0x78>
 8002ef2:	897b      	ldrh	r3, [r7, #10]
 8002ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ef8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002f02:	f7ff f891 	bl	8002028 <HAL_GetTick>
 8002f06:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	bf0c      	ite	eq
 8002f16:	2301      	moveq	r3, #1
 8002f18:	2300      	movne	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b10      	cmp	r3, #16
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002f34:	e034      	b.n	8002fa0 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d01a      	beq.n	8002f74 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f3e:	f7ff f873 	bl	8002028 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d302      	bcc.n	8002f54 <HAL_I2C_IsDeviceReady+0xd0>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10f      	bne.n	8002f74 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	f043 0220 	orr.w	r2, r3, #32
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e088      	b.n	8003086 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	bf0c      	ite	eq
 8002f82:	2301      	moveq	r3, #1
 8002f84:	2300      	movne	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b10      	cmp	r3, #16
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002fa0:	7ffb      	ldrb	r3, [r7, #31]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d102      	bne.n	8002fac <HAL_I2C_IsDeviceReady+0x128>
 8002fa6:	7fbb      	ldrb	r3, [r7, #30]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0c4      	beq.n	8002f36 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	2b10      	cmp	r3, #16
 8002fb8:	d01a      	beq.n	8002ff0 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2120      	movs	r1, #32
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f931 	bl	800322c <I2C_WaitOnFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e058      	b.n	8003086 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	e04a      	b.n	8003086 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2120      	movs	r1, #32
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f916 	bl	800322c <I2C_WaitOnFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e03d      	b.n	8003086 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2210      	movs	r2, #16
 8003010:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2220      	movs	r2, #32
 8003018:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	429a      	cmp	r2, r3
 8003020:	d118      	bne.n	8003054 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003030:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2200      	movs	r2, #0
 800303a:	2120      	movs	r1, #32
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 f8f5 	bl	800322c <I2C_WaitOnFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e01c      	b.n	8003086 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2220      	movs	r2, #32
 8003052:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3301      	adds	r3, #1
 8003058:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	429a      	cmp	r2, r3
 8003060:	f63f af3d 	bhi.w	8002ede <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8003084:	2302      	movs	r3, #2
  }
}
 8003086:	4618      	mov	r0, r3
 8003088:	3720      	adds	r7, #32
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	02002000 	.word	0x02002000

08003094 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	4608      	mov	r0, r1
 800309e:	4611      	mov	r1, r2
 80030a0:	461a      	mov	r2, r3
 80030a2:	4603      	mov	r3, r0
 80030a4:	817b      	strh	r3, [r7, #10]
 80030a6:	460b      	mov	r3, r1
 80030a8:	813b      	strh	r3, [r7, #8]
 80030aa:	4613      	mov	r3, r2
 80030ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	8979      	ldrh	r1, [r7, #10]
 80030b4:	4b20      	ldr	r3, [pc, #128]	; (8003138 <I2C_RequestMemoryWrite+0xa4>)
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fa6f 	bl	80035a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	69b9      	ldr	r1, [r7, #24]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f8ff 	bl	80032ca <I2C_WaitOnTXISFlagUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e02c      	b.n	8003130 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d105      	bne.n	80030e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030dc:	893b      	ldrh	r3, [r7, #8]
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	629a      	str	r2, [r3, #40]	; 0x28
 80030e6:	e015      	b.n	8003114 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030e8:	893b      	ldrh	r3, [r7, #8]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	69b9      	ldr	r1, [r7, #24]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f8e5 	bl	80032ca <I2C_WaitOnTXISFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e012      	b.n	8003130 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800310a:	893b      	ldrh	r3, [r7, #8]
 800310c:	b2da      	uxtb	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	2200      	movs	r2, #0
 800311c:	2180      	movs	r1, #128	; 0x80
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f884 	bl	800322c <I2C_WaitOnFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	80002000 	.word	0x80002000

0800313c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af02      	add	r7, sp, #8
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	4608      	mov	r0, r1
 8003146:	4611      	mov	r1, r2
 8003148:	461a      	mov	r2, r3
 800314a:	4603      	mov	r3, r0
 800314c:	817b      	strh	r3, [r7, #10]
 800314e:	460b      	mov	r3, r1
 8003150:	813b      	strh	r3, [r7, #8]
 8003152:	4613      	mov	r3, r2
 8003154:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	8979      	ldrh	r1, [r7, #10]
 800315c:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <I2C_RequestMemoryRead+0xa4>)
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2300      	movs	r3, #0
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 fa1c 	bl	80035a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	69b9      	ldr	r1, [r7, #24]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f8ac 	bl	80032ca <I2C_WaitOnTXISFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e02c      	b.n	80031d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d105      	bne.n	800318e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003182:	893b      	ldrh	r3, [r7, #8]
 8003184:	b2da      	uxtb	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	629a      	str	r2, [r3, #40]	; 0x28
 800318c:	e015      	b.n	80031ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800318e:	893b      	ldrh	r3, [r7, #8]
 8003190:	0a1b      	lsrs	r3, r3, #8
 8003192:	b29b      	uxth	r3, r3
 8003194:	b2da      	uxtb	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	69b9      	ldr	r1, [r7, #24]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f892 	bl	80032ca <I2C_WaitOnTXISFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e012      	b.n	80031d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031b0:	893b      	ldrh	r3, [r7, #8]
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	2200      	movs	r2, #0
 80031c2:	2140      	movs	r1, #64	; 0x40
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f831 	bl	800322c <I2C_WaitOnFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	80002000 	.word	0x80002000

080031e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d103      	bne.n	8003202 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b01      	cmp	r3, #1
 800320e:	d007      	beq.n	8003220 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699a      	ldr	r2, [r3, #24]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	619a      	str	r2, [r3, #24]
  }
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	4613      	mov	r3, r2
 800323a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800323c:	e031      	b.n	80032a2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003244:	d02d      	beq.n	80032a2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003246:	f7fe feef 	bl	8002028 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d302      	bcc.n	800325c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d122      	bne.n	80032a2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	4013      	ands	r3, r2
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	429a      	cmp	r2, r3
 800326a:	bf0c      	ite	eq
 800326c:	2301      	moveq	r3, #1
 800326e:	2300      	movne	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	429a      	cmp	r2, r3
 8003278:	d113      	bne.n	80032a2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f043 0220 	orr.w	r2, r3, #32
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2220      	movs	r2, #32
 800328a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e00f      	b.n	80032c2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699a      	ldr	r2, [r3, #24]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4013      	ands	r3, r2
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	bf0c      	ite	eq
 80032b2:	2301      	moveq	r3, #1
 80032b4:	2300      	movne	r3, #0
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d0be      	beq.n	800323e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032d6:	e033      	b.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f87f 	bl	80033e0 <I2C_IsErrorOccurred>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e031      	b.n	8003350 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f2:	d025      	beq.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f4:	f7fe fe98 	bl	8002028 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	429a      	cmp	r2, r3
 8003302:	d302      	bcc.n	800330a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d11a      	bne.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b02      	cmp	r3, #2
 8003316:	d013      	beq.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e007      	b.n	8003350 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b02      	cmp	r3, #2
 800334c:	d1c4      	bne.n	80032d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003364:	e02f      	b.n	80033c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f838 	bl	80033e0 <I2C_IsErrorOccurred>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e02d      	b.n	80033d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337a:	f7fe fe55 	bl	8002028 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	429a      	cmp	r2, r3
 8003388:	d302      	bcc.n	8003390 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d11a      	bne.n	80033c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b20      	cmp	r3, #32
 800339c:	d013      	beq.n	80033c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	f043 0220 	orr.w	r2, r3, #32
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e007      	b.n	80033d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f003 0320 	and.w	r3, r3, #32
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	d1c8      	bne.n	8003366 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08a      	sub	sp, #40	; 0x28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b00      	cmp	r3, #0
 800340a:	d068      	beq.n	80034de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2210      	movs	r2, #16
 8003412:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003414:	e049      	b.n	80034aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341c:	d045      	beq.n	80034aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800341e:	f7fe fe03 	bl	8002028 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	429a      	cmp	r2, r3
 800342c:	d302      	bcc.n	8003434 <I2C_IsErrorOccurred+0x54>
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d13a      	bne.n	80034aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800343e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003446:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003456:	d121      	bne.n	800349c <I2C_IsErrorOccurred+0xbc>
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800345e:	d01d      	beq.n	800349c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	2b20      	cmp	r3, #32
 8003464:	d01a      	beq.n	800349c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003474:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003476:	f7fe fdd7 	bl	8002028 <HAL_GetTick>
 800347a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800347c:	e00e      	b.n	800349c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800347e:	f7fe fdd3 	bl	8002028 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b19      	cmp	r3, #25
 800348a:	d907      	bls.n	800349c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	f043 0320 	orr.w	r3, r3, #32
 8003492:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800349a:	e006      	b.n	80034aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d1e9      	bne.n	800347e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	d003      	beq.n	80034c0 <I2C_IsErrorOccurred+0xe0>
 80034b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0aa      	beq.n	8003416 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d103      	bne.n	80034d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2220      	movs	r2, #32
 80034ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	f043 0304 	orr.w	r3, r3, #4
 80034d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00b      	beq.n	8003508 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003500:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00b      	beq.n	800352a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	f043 0308 	orr.w	r3, r3, #8
 8003518:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003522:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00b      	beq.n	800354c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	f043 0302 	orr.w	r3, r3, #2
 800353a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003544:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800354c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003550:	2b00      	cmp	r3, #0
 8003552:	d01c      	beq.n	800358e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7ff fe45 	bl	80031e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6859      	ldr	r1, [r3, #4]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4b0d      	ldr	r3, [pc, #52]	; (800359c <I2C_IsErrorOccurred+0x1bc>)
 8003566:	400b      	ands	r3, r1
 8003568:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	431a      	orrs	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800358e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003592:	4618      	mov	r0, r3
 8003594:	3728      	adds	r7, #40	; 0x28
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	fe00e800 	.word	0xfe00e800

080035a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	460b      	mov	r3, r1
 80035ac:	817b      	strh	r3, [r7, #10]
 80035ae:	4613      	mov	r3, r2
 80035b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035b2:	897b      	ldrh	r3, [r7, #10]
 80035b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035b8:	7a7b      	ldrb	r3, [r7, #9]
 80035ba:	041b      	lsls	r3, r3, #16
 80035bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	0d5b      	lsrs	r3, r3, #21
 80035da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035de:	4b08      	ldr	r3, [pc, #32]	; (8003600 <I2C_TransferConfig+0x60>)
 80035e0:	430b      	orrs	r3, r1
 80035e2:	43db      	mvns	r3, r3
 80035e4:	ea02 0103 	and.w	r1, r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035f2:	bf00      	nop
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	03ff63ff 	.word	0x03ff63ff

08003604 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b20      	cmp	r3, #32
 8003618:	d138      	bne.n	800368c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003624:	2302      	movs	r3, #2
 8003626:	e032      	b.n	800368e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2224      	movs	r2, #36	; 0x24
 8003634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0201 	bic.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003656:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6819      	ldr	r1, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	e000      	b.n	800368e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800368c:	2302      	movs	r3, #2
  }
}
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800369a:	b480      	push	{r7}
 800369c:	b085      	sub	sp, #20
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d139      	bne.n	8003724 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e033      	b.n	8003726 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2224      	movs	r2, #36	; 0x24
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0201 	bic.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	021b      	lsls	r3, r3, #8
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	e000      	b.n	8003726 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003724:	2302      	movs	r3, #2
  }
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e017      	b.n	8003774 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d004      	beq.n	800375a <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2280      	movs	r2, #128	; 0x80
 8003754:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e00c      	b.n	8003774 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2204      	movs	r2, #4
 800375e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af02      	add	r7, sp, #8
 8003786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800378c:	f7fe fc4c 	bl	8002028 <HAL_GetTick>
 8003790:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d102      	bne.n	800379e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
 800379c:	e0a5      	b.n	80038ea <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f040 809e 	bne.w	80038ea <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd ff24 	bl	80015fc <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80037b4:	f241 3188 	movw	r1, #5000	; 0x1388
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fc59 	bl	8004070 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	4b4b      	ldr	r3, [pc, #300]	; (80038f4 <HAL_OSPI_Init+0x174>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	68d1      	ldr	r1, [r2, #12]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6912      	ldr	r2, [r2, #16]
 80037d0:	3a01      	subs	r2, #1
 80037d2:	0412      	lsls	r2, r2, #16
 80037d4:	4311      	orrs	r1, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6952      	ldr	r2, [r2, #20]
 80037da:	3a01      	subs	r2, #1
 80037dc:	0212      	lsls	r2, r2, #8
 80037de:	4311      	orrs	r1, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037e4:	4311      	orrs	r1, r2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	69d2      	ldr	r2, [r2, #28]
 80037ea:	4311      	orrs	r1, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	430b      	orrs	r3, r1
 80037f2:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1a      	ldr	r2, [r3, #32]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003824:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	3b01      	subs	r3, #1
 8003836:	021a      	lsls	r2, r3, #8
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2200      	movs	r2, #0
 800384a:	2120      	movs	r1, #32
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f001 f943 	bl	8004ad8 <OSPI_WaitFlagStateUntilTimeout>
 8003852:	4603      	mov	r3, r0
 8003854:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d146      	bne.n	80038ea <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	1e5a      	subs	r2, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003892:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0201 	orr.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d107      	bne.n	80038d2 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0202 	orr.w	r2, r2, #2
 80038d0:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038da:	d103      	bne.n	80038e4 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	651a      	str	r2, [r3, #80]	; 0x50
 80038e2:	e002      	b.n	80038ea <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	f8e0f8f4 	.word	0xf8e0f8f4

080038f8 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3350      	adds	r3, #80	; 0x50
 8003906:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391c:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d03a      	beq.n	800399e <HAL_OSPI_IRQHandler+0xa6>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d035      	beq.n	800399e <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b18      	cmp	r3, #24
 8003936:	d10f      	bne.n	8003958 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	781a      	ldrb	r2, [r3, #0]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003950:	1e5a      	subs	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	649a      	str	r2, [r3, #72]	; 0x48
 8003956:	e012      	b.n	800397e <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b28      	cmp	r3, #40	; 0x28
 800395c:	d10f      	bne.n	800397e <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	7812      	ldrb	r2, [r2, #0]
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003978:	1e5a      	subs	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003982:	2b00      	cmp	r3, #0
 8003984:	d107      	bne.n	8003996 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003994:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fb2e 	bl	8003ff8 <HAL_OSPI_FifoThresholdCallback>
 800399c:	e0e7      	b.n	8003b6e <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d067      	beq.n	8003a78 <HAL_OSPI_IRQHandler+0x180>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d062      	beq.n	8003a78 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b28      	cmp	r3, #40	; 0x28
 80039b6:	d131      	bne.n	8003a1c <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d015      	beq.n	80039ec <HAL_OSPI_IRQHandler+0xf4>
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d010      	beq.n	80039ec <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	7812      	ldrb	r2, [r2, #0]
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e4:	1e5a      	subs	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80039ea:	e0bd      	b.n	8003b68 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f040 80b9 	bne.w	8003b68 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2202      	movs	r2, #2
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8003a0c:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2202      	movs	r2, #2
 8003a12:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fb03 	bl	8004020 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003a1a:	e0a5      	b.n	8003b68 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2202      	movs	r2, #2
 8003a22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8003a32:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b18      	cmp	r3, #24
 8003a3e:	d103      	bne.n	8003a48 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 faf7 	bl	8004034 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003a46:	e08f      	b.n	8003b68 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d103      	bne.n	8003a56 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fadc 	bl	800400c <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003a54:	e088      	b.n	8003b68 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a5c:	f040 8084 	bne.w	8003b68 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d103      	bne.n	8003a70 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fabb 	bl	8003fe4 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003a6e:	e07b      	b.n	8003b68 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 faad 	bl	8003fd0 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003a76:	e077      	b.n	8003b68 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01e      	beq.n	8003ac0 <HAL_OSPI_IRQHandler+0x1c8>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d019      	beq.n	8003ac0 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2208      	movs	r2, #8
 8003a92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003ab0:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fac5 	bl	8004048 <HAL_OSPI_StatusMatchCallback>
 8003abe:	e056      	b.n	8003b6e <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d03c      	beq.n	8003b44 <HAL_OSPI_IRQHandler+0x24c>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d037      	beq.n	8003b44 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003aea:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01a      	beq.n	8003b36 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0204 	bic.w	r2, r2, #4
 8003b0e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b14:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <HAL_OSPI_IRQHandler+0x280>)
 8003b16:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff fe08 	bl	8003732 <HAL_MDMA_Abort_IT>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d021      	beq.n	8003b6c <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fa4e 	bl	8003fd0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003b34:	e01a      	b.n	8003b6c <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fa47 	bl	8003fd0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003b42:	e013      	b.n	8003b6c <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f003 0310 	and.w	r3, r3, #16
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00f      	beq.n	8003b6e <HAL_OSPI_IRQHandler+0x276>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fa7b 	bl	800405c <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003b66:	e002      	b.n	8003b6e <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003b68:	bf00      	nop
 8003b6a:	e000      	b.n	8003b6e <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003b6c:	bf00      	nop
}
 8003b6e:	bf00      	nop
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	08004a61 	.word	0x08004a61

08003b7c <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	; 0x28
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8003b88:	f7fe fa4e 	bl	8002028 <HAL_GetTick>
 8003b8c:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b98:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d104      	bne.n	8003baa <HAL_OSPI_Command+0x2e>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ba8:	d115      	bne.n	8003bd6 <HAL_OSPI_Command+0x5a>
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b14      	cmp	r3, #20
 8003bae:	d107      	bne.n	8003bc0 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_OSPI_Command+0x5a>
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b24      	cmp	r3, #36	; 0x24
 8003bc4:	d15b      	bne.n	8003c7e <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d003      	beq.n	8003bd6 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d153      	bne.n	8003c7e <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2120      	movs	r1, #32
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 ff79 	bl	8004ad8 <OSPI_WaitFlagStateUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8003bea:	7ffb      	ldrb	r3, [r7, #31]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d14c      	bne.n	8003c8a <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8003bf6:	68b9      	ldr	r1, [r7, #8]
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 ffa5 	bl	8004b48 <OSPI_ConfigCmd>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003c02:	7ffb      	ldrb	r3, [r7, #31]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d140      	bne.n	8003c8a <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10e      	bne.n	8003c2e <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2201      	movs	r2, #1
 8003c18:	2102      	movs	r1, #2
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 ff5c 	bl	8004ad8 <OSPI_WaitFlagStateUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8003c2c:	e02d      	b.n	8003c8a <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d103      	bne.n	8003c3e <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2204      	movs	r2, #4
 8003c3a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8003c3c:	e025      	b.n	8003c8a <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d10b      	bne.n	8003c5e <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4a:	2b24      	cmp	r3, #36	; 0x24
 8003c4c:	d103      	bne.n	8003c56 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2204      	movs	r2, #4
 8003c52:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8003c54:	e019      	b.n	8003c8a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2214      	movs	r2, #20
 8003c5a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8003c5c:	e015      	b.n	8003c8a <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d111      	bne.n	8003c8a <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6a:	2b14      	cmp	r3, #20
 8003c6c:	d103      	bne.n	8003c76 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2204      	movs	r2, #4
 8003c72:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8003c74:	e009      	b.n	8003c8a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2224      	movs	r2, #36	; 0x24
 8003c7a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8003c7c:	e005      	b.n	8003c8a <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2210      	movs	r2, #16
 8003c86:	655a      	str	r2, [r3, #84]	; 0x54
 8003c88:	e000      	b.n	8003c8c <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8003c8a:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003c8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3720      	adds	r7, #32
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b08a      	sub	sp, #40	; 0x28
 8003c9a:	af02      	add	r7, sp, #8
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003ca2:	f7fe f9c1 	bl	8002028 <HAL_GetTick>
 8003ca6:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3350      	adds	r3, #80	; 0x50
 8003cae:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d105      	bne.n	8003cc2 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2208      	movs	r2, #8
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54
 8003cc0:	e057      	b.n	8003d72 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d14e      	bne.n	8003d68 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cf2:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	2104      	movs	r1, #4
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 feea 	bl	8004ad8 <OSPI_WaitFlagStateUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003d08:	7ffb      	ldrb	r3, [r7, #31]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d113      	bne.n	8003d36 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	781a      	ldrb	r2, [r3, #0]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d26:	1e5a      	subs	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1df      	bne.n	8003cf4 <HAL_OSPI_Transmit+0x5e>
 8003d34:	e000      	b.n	8003d38 <HAL_OSPI_Transmit+0xa2>
          break;
 8003d36:	bf00      	nop

      if (status == HAL_OK)
 8003d38:	7ffb      	ldrb	r3, [r7, #31]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d119      	bne.n	8003d72 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2201      	movs	r2, #1
 8003d46:	2102      	movs	r1, #2
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 fec5 	bl	8004ad8 <OSPI_WaitFlagStateUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003d52:	7ffb      	ldrb	r3, [r7, #31]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10c      	bne.n	8003d72 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2202      	movs	r2, #2
 8003d64:	651a      	str	r2, [r3, #80]	; 0x50
 8003d66:	e004      	b.n	8003d72 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2210      	movs	r2, #16
 8003d70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8003d72:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08c      	sub	sp, #48	; 0x30
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003d88:	f7fe f94e 	bl	8002028 <HAL_GetTick>
 8003d8c:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3350      	adds	r3, #80	; 0x50
 8003d94:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9c:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003da6:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2208      	movs	r2, #8
 8003db8:	655a      	str	r2, [r3, #84]	; 0x54
 8003dba:	e07c      	b.n	8003eb6 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d172      	bne.n	8003eaa <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003df0:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dfa:	d104      	bne.n	8003e06 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	649a      	str	r2, [r3, #72]	; 0x48
 8003e04:	e011      	b.n	8003e2a <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d004      	beq.n	8003e20 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	649a      	str	r2, [r3, #72]	; 0x48
 8003e1e:	e004      	b.n	8003e2a <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	2201      	movs	r2, #1
 8003e32:	2106      	movs	r1, #6
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 fe4f 	bl	8004ad8 <OSPI_WaitFlagStateUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8003e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d114      	bne.n	8003e72 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	7812      	ldrb	r2, [r2, #0]
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e62:	1e5a      	subs	r2, r3, #1
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1dc      	bne.n	8003e2a <HAL_OSPI_Receive+0xae>
 8003e70:	e000      	b.n	8003e74 <HAL_OSPI_Receive+0xf8>
          break;
 8003e72:	bf00      	nop

      if (status == HAL_OK)
 8003e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d11c      	bne.n	8003eb6 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	2201      	movs	r2, #1
 8003e84:	2102      	movs	r1, #2
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 fe26 	bl	8004ad8 <OSPI_WaitFlagStateUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8003e92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10d      	bne.n	8003eb6 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	651a      	str	r2, [r3, #80]	; 0x50
 8003ea8:	e005      	b.n	8003eb6 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2210      	movs	r2, #16
 8003eb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8003eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3728      	adds	r7, #40	; 0x28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b08a      	sub	sp, #40	; 0x28
 8003ec6:	af02      	add	r7, sp, #8
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003ece:	f7fe f8ab 	bl	8002028 <HAL_GetTick>
 8003ed2:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eda:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003ee4:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d164      	bne.n	8003fb8 <HAL_OSPI_AutoPolling+0xf6>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef6:	d15f      	bne.n	8003fb8 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2200      	movs	r2, #0
 8003f00:	2120      	movs	r1, #32
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fde8 	bl	8004ad8 <OSPI_WaitFlagStateUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8003f0c:	7ffb      	ldrb	r3, [r7, #31]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d158      	bne.n	8003fc4 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	6852      	ldr	r2, [r2, #4]
 8003f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	6912      	ldr	r2, [r2, #16]
 8003f32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	6899      	ldr	r1, [r3, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003f54:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f5e:	d104      	bne.n	8003f6a <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	649a      	str	r2, [r3, #72]	; 0x48
 8003f68:	e011      	b.n	8003f8e <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	649a      	str	r2, [r3, #72]	; 0x48
 8003f82:	e004      	b.n	8003f8e <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2201      	movs	r2, #1
 8003f96:	2108      	movs	r1, #8
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fd9d 	bl	8004ad8 <OSPI_WaitFlagStateUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003fa2:	7ffb      	ldrb	r3, [r7, #31]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10d      	bne.n	8003fc4 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2208      	movs	r2, #8
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8003fb6:	e005      	b.n	8003fc4 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2210      	movs	r2, #16
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54
 8003fc2:	e000      	b.n	8003fc6 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8003fc4:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003fc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3720      	adds	r7, #32
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
	...

08004090 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b094      	sub	sp, #80	; 0x50
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a9d      	ldr	r2, [pc, #628]	; (8004324 <HAL_OSPIM_Config+0x294>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d105      	bne.n	80040be <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80040bc:	e004      	b.n	80040c8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80040be:	2301      	movs	r3, #1
 80040c0:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80040c8:	2300      	movs	r3, #0
 80040ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80040ce:	e01d      	b.n	800410c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80040d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80040d4:	3301      	adds	r3, #1
 80040d6:	b2d8      	uxtb	r0, r3
 80040d8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80040dc:	f107 0114 	add.w	r1, r7, #20
 80040e0:	4613      	mov	r3, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	4413      	add	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	440b      	add	r3, r1
 80040ea:	4619      	mov	r1, r3
 80040ec:	f000 fea6 	bl	8004e3c <OSPIM_GetConfig>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2208      	movs	r2, #8
 8004100:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004102:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004106:	3301      	adds	r3, #1
 8004108:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800410c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004110:	2b01      	cmp	r3, #1
 8004112:	d9dd      	bls.n	80040d0 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8004114:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004118:	2b00      	cmp	r3, #0
 800411a:	f040 8495 	bne.w	8004a48 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800411e:	4b81      	ldr	r3, [pc, #516]	; (8004324 <HAL_OSPIM_Config+0x294>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00b      	beq.n	8004142 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800412a:	4b7e      	ldr	r3, [pc, #504]	; (8004324 <HAL_OSPIM_Config+0x294>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a7d      	ldr	r2, [pc, #500]	; (8004324 <HAL_OSPIM_Config+0x294>)
 8004130:	f023 0301 	bic.w	r3, r3, #1
 8004134:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004136:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8004142:	4b79      	ldr	r3, [pc, #484]	; (8004328 <HAL_OSPIM_Config+0x298>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800414e:	4b76      	ldr	r3, [pc, #472]	; (8004328 <HAL_OSPIM_Config+0x298>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a75      	ldr	r2, [pc, #468]	; (8004328 <HAL_OSPIM_Config+0x298>)
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800415a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800415e:	f043 0302 	orr.w	r3, r3, #2
 8004162:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8004166:	4971      	ldr	r1, [pc, #452]	; (800432c <HAL_OSPIM_Config+0x29c>)
 8004168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800416a:	4613      	mov	r3, r2
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	4413      	add	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	3350      	adds	r3, #80	; 0x50
 8004174:	443b      	add	r3, r7
 8004176:	3b34      	subs	r3, #52	; 0x34
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3b01      	subs	r3, #1
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	6859      	ldr	r1, [r3, #4]
 8004182:	486a      	ldr	r0, [pc, #424]	; (800432c <HAL_OSPIM_Config+0x29c>)
 8004184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004186:	4613      	mov	r3, r2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	4413      	add	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	3350      	adds	r3, #80	; 0x50
 8004190:	443b      	add	r3, r7
 8004192:	3b34      	subs	r3, #52	; 0x34
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3b01      	subs	r3, #1
 8004198:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4403      	add	r3, r0
 80041a0:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80041a2:	4b62      	ldr	r3, [pc, #392]	; (800432c <HAL_OSPIM_Config+0x29c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 80c0 	beq.w	8004330 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80041b0:	4b5e      	ldr	r3, [pc, #376]	; (800432c <HAL_OSPIM_Config+0x29c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a5d      	ldr	r2, [pc, #372]	; (800432c <HAL_OSPIM_Config+0x29c>)
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80041bc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	f040 8162 	bne.w	800448a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 80041c6:	4959      	ldr	r1, [pc, #356]	; (800432c <HAL_OSPIM_Config+0x29c>)
 80041c8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80041cc:	4613      	mov	r3, r2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	4413      	add	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	3350      	adds	r3, #80	; 0x50
 80041d6:	443b      	add	r3, r7
 80041d8:	3b3c      	subs	r3, #60	; 0x3c
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3b01      	subs	r3, #1
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	6859      	ldr	r1, [r3, #4]
 80041e4:	4851      	ldr	r0, [pc, #324]	; (800432c <HAL_OSPIM_Config+0x29c>)
 80041e6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80041ea:	4613      	mov	r3, r2
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	4413      	add	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	3350      	adds	r3, #80	; 0x50
 80041f4:	443b      	add	r3, r7
 80041f6:	3b3c      	subs	r3, #60	; 0x3c
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	f041 0202 	orr.w	r2, r1, #2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4403      	add	r3, r0
 8004204:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004206:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800420a:	4613      	mov	r3, r2
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	4413      	add	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	3350      	adds	r3, #80	; 0x50
 8004214:	443b      	add	r3, r7
 8004216:	3b38      	subs	r3, #56	; 0x38
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01f      	beq.n	800425e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 800421e:	4943      	ldr	r1, [pc, #268]	; (800432c <HAL_OSPIM_Config+0x29c>)
 8004220:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004224:	4613      	mov	r3, r2
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	4413      	add	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	3350      	adds	r3, #80	; 0x50
 800422e:	443b      	add	r3, r7
 8004230:	3b38      	subs	r3, #56	; 0x38
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3b01      	subs	r3, #1
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	6859      	ldr	r1, [r3, #4]
 800423c:	483b      	ldr	r0, [pc, #236]	; (800432c <HAL_OSPIM_Config+0x29c>)
 800423e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004242:	4613      	mov	r3, r2
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	4413      	add	r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	3350      	adds	r3, #80	; 0x50
 800424c:	443b      	add	r3, r7
 800424e:	3b38      	subs	r3, #56	; 0x38
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3b01      	subs	r3, #1
 8004254:	f041 0220 	orr.w	r2, r1, #32
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4403      	add	r3, r0
 800425c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800425e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004262:	4613      	mov	r3, r2
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	4413      	add	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	3350      	adds	r3, #80	; 0x50
 800426c:	443b      	add	r3, r7
 800426e:	3b30      	subs	r3, #48	; 0x30
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d023      	beq.n	80042be <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8004276:	492d      	ldr	r1, [pc, #180]	; (800432c <HAL_OSPIM_Config+0x29c>)
 8004278:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800427c:	4613      	mov	r3, r2
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	4413      	add	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	3350      	adds	r3, #80	; 0x50
 8004286:	443b      	add	r3, r7
 8004288:	3b30      	subs	r3, #48	; 0x30
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3b01      	subs	r3, #1
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	6859      	ldr	r1, [r3, #4]
 8004298:	4824      	ldr	r0, [pc, #144]	; (800432c <HAL_OSPIM_Config+0x29c>)
 800429a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800429e:	4613      	mov	r3, r2
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	4413      	add	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	3350      	adds	r3, #80	; 0x50
 80042a8:	443b      	add	r3, r7
 80042aa:	3b30      	subs	r3, #48	; 0x30
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4403      	add	r3, r0
 80042bc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80042be:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80042c2:	4613      	mov	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4413      	add	r3, r2
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	3350      	adds	r3, #80	; 0x50
 80042cc:	443b      	add	r3, r7
 80042ce:	3b2c      	subs	r3, #44	; 0x2c
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 80d9 	beq.w	800448a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 80042d8:	4914      	ldr	r1, [pc, #80]	; (800432c <HAL_OSPIM_Config+0x29c>)
 80042da:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80042de:	4613      	mov	r3, r2
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	4413      	add	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	3350      	adds	r3, #80	; 0x50
 80042e8:	443b      	add	r3, r7
 80042ea:	3b2c      	subs	r3, #44	; 0x2c
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	6859      	ldr	r1, [r3, #4]
 80042fa:	480c      	ldr	r0, [pc, #48]	; (800432c <HAL_OSPIM_Config+0x29c>)
 80042fc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004300:	4613      	mov	r3, r2
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	4413      	add	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	3350      	adds	r3, #80	; 0x50
 800430a:	443b      	add	r3, r7
 800430c:	3b2c      	subs	r3, #44	; 0x2c
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3b01      	subs	r3, #1
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4403      	add	r3, r0
 800431e:	605a      	str	r2, [r3, #4]
 8004320:	e0b3      	b.n	800448a <HAL_OSPIM_Config+0x3fa>
 8004322:	bf00      	nop
 8004324:	52005000 	.word	0x52005000
 8004328:	5200a000 	.word	0x5200a000
 800432c:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8004330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004332:	4613      	mov	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4413      	add	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	3350      	adds	r3, #80	; 0x50
 800433c:	443b      	add	r3, r7
 800433e:	3b3c      	subs	r3, #60	; 0x3c
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 80a1 	beq.w	800448a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8004348:	4993      	ldr	r1, [pc, #588]	; (8004598 <HAL_OSPIM_Config+0x508>)
 800434a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800434c:	4613      	mov	r3, r2
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	4413      	add	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	3350      	adds	r3, #80	; 0x50
 8004356:	443b      	add	r3, r7
 8004358:	3b3c      	subs	r3, #60	; 0x3c
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3b01      	subs	r3, #1
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	6859      	ldr	r1, [r3, #4]
 8004364:	488c      	ldr	r0, [pc, #560]	; (8004598 <HAL_OSPIM_Config+0x508>)
 8004366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004368:	4613      	mov	r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4413      	add	r3, r2
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	3350      	adds	r3, #80	; 0x50
 8004372:	443b      	add	r3, r7
 8004374:	3b3c      	subs	r3, #60	; 0x3c
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3b01      	subs	r3, #1
 800437a:	f021 0201 	bic.w	r2, r1, #1
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4403      	add	r3, r0
 8004382:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004386:	4613      	mov	r3, r2
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	4413      	add	r3, r2
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	3350      	adds	r3, #80	; 0x50
 8004390:	443b      	add	r3, r7
 8004392:	3b38      	subs	r3, #56	; 0x38
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d01d      	beq.n	80043d6 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800439a:	497f      	ldr	r1, [pc, #508]	; (8004598 <HAL_OSPIM_Config+0x508>)
 800439c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800439e:	4613      	mov	r3, r2
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	4413      	add	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	3350      	adds	r3, #80	; 0x50
 80043a8:	443b      	add	r3, r7
 80043aa:	3b38      	subs	r3, #56	; 0x38
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	6859      	ldr	r1, [r3, #4]
 80043b6:	4878      	ldr	r0, [pc, #480]	; (8004598 <HAL_OSPIM_Config+0x508>)
 80043b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ba:	4613      	mov	r3, r2
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	4413      	add	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	3350      	adds	r3, #80	; 0x50
 80043c4:	443b      	add	r3, r7
 80043c6:	3b38      	subs	r3, #56	; 0x38
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	f021 0210 	bic.w	r2, r1, #16
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4403      	add	r3, r0
 80043d4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80043d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043d8:	4613      	mov	r3, r2
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	4413      	add	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	3350      	adds	r3, #80	; 0x50
 80043e2:	443b      	add	r3, r7
 80043e4:	3b30      	subs	r3, #48	; 0x30
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d021      	beq.n	8004430 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80043ec:	496a      	ldr	r1, [pc, #424]	; (8004598 <HAL_OSPIM_Config+0x508>)
 80043ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043f0:	4613      	mov	r3, r2
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	4413      	add	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	3350      	adds	r3, #80	; 0x50
 80043fa:	443b      	add	r3, r7
 80043fc:	3b30      	subs	r3, #48	; 0x30
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3b01      	subs	r3, #1
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	6859      	ldr	r1, [r3, #4]
 800440c:	4862      	ldr	r0, [pc, #392]	; (8004598 <HAL_OSPIM_Config+0x508>)
 800440e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004410:	4613      	mov	r3, r2
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	4413      	add	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	3350      	adds	r3, #80	; 0x50
 800441a:	443b      	add	r3, r7
 800441c:	3b30      	subs	r3, #48	; 0x30
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3b01      	subs	r3, #1
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4403      	add	r3, r0
 800442e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004432:	4613      	mov	r3, r2
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	4413      	add	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	3350      	adds	r3, #80	; 0x50
 800443c:	443b      	add	r3, r7
 800443e:	3b2c      	subs	r3, #44	; 0x2c
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d021      	beq.n	800448a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004446:	4954      	ldr	r1, [pc, #336]	; (8004598 <HAL_OSPIM_Config+0x508>)
 8004448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	3350      	adds	r3, #80	; 0x50
 8004454:	443b      	add	r3, r7
 8004456:	3b2c      	subs	r3, #44	; 0x2c
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3b01      	subs	r3, #1
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	6859      	ldr	r1, [r3, #4]
 8004466:	484c      	ldr	r0, [pc, #304]	; (8004598 <HAL_OSPIM_Config+0x508>)
 8004468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800446a:	4613      	mov	r3, r2
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	4413      	add	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	3350      	adds	r3, #80	; 0x50
 8004474:	443b      	add	r3, r7
 8004476:	3b2c      	subs	r3, #44	; 0x2c
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3b01      	subs	r3, #1
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4403      	add	r3, r0
 8004488:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	6819      	ldr	r1, [r3, #0]
 800448e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004492:	4613      	mov	r3, r2
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	4413      	add	r3, r2
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	3350      	adds	r3, #80	; 0x50
 800449c:	443b      	add	r3, r7
 800449e:	3b3c      	subs	r3, #60	; 0x3c
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4299      	cmp	r1, r3
 80044a4:	d038      	beq.n	8004518 <HAL_OSPIM_Config+0x488>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	6859      	ldr	r1, [r3, #4]
 80044aa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80044ae:	4613      	mov	r3, r2
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	4413      	add	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	3350      	adds	r3, #80	; 0x50
 80044b8:	443b      	add	r3, r7
 80044ba:	3b38      	subs	r3, #56	; 0x38
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4299      	cmp	r1, r3
 80044c0:	d02a      	beq.n	8004518 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	6899      	ldr	r1, [r3, #8]
 80044c6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80044ca:	4613      	mov	r3, r2
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	4413      	add	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	3350      	adds	r3, #80	; 0x50
 80044d4:	443b      	add	r3, r7
 80044d6:	3b34      	subs	r3, #52	; 0x34
 80044d8:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80044da:	4299      	cmp	r1, r3
 80044dc:	d01c      	beq.n	8004518 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	68d9      	ldr	r1, [r3, #12]
 80044e2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80044e6:	4613      	mov	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	4413      	add	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	3350      	adds	r3, #80	; 0x50
 80044f0:	443b      	add	r3, r7
 80044f2:	3b30      	subs	r3, #48	; 0x30
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4299      	cmp	r1, r3
 80044f8:	d00e      	beq.n	8004518 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	6919      	ldr	r1, [r3, #16]
 80044fe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004502:	4613      	mov	r3, r2
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	4413      	add	r3, r2
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	3350      	adds	r3, #80	; 0x50
 800450c:	443b      	add	r3, r7
 800450e:	3b2c      	subs	r3, #44	; 0x2c
 8004510:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004512:	4299      	cmp	r1, r3
 8004514:	f040 810e 	bne.w	8004734 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	6819      	ldr	r1, [r3, #0]
 800451c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004520:	4613      	mov	r3, r2
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	4413      	add	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	3350      	adds	r3, #80	; 0x50
 800452a:	443b      	add	r3, r7
 800452c:	3b3c      	subs	r3, #60	; 0x3c
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4299      	cmp	r1, r3
 8004532:	d133      	bne.n	800459c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	6859      	ldr	r1, [r3, #4]
 8004538:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800453c:	4613      	mov	r3, r2
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	4413      	add	r3, r2
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	3350      	adds	r3, #80	; 0x50
 8004546:	443b      	add	r3, r7
 8004548:	3b38      	subs	r3, #56	; 0x38
 800454a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800454c:	4299      	cmp	r1, r3
 800454e:	d125      	bne.n	800459c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	68d9      	ldr	r1, [r3, #12]
 8004554:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004558:	4613      	mov	r3, r2
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	4413      	add	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	3350      	adds	r3, #80	; 0x50
 8004562:	443b      	add	r3, r7
 8004564:	3b30      	subs	r3, #48	; 0x30
 8004566:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004568:	4299      	cmp	r1, r3
 800456a:	d117      	bne.n	800459c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	6919      	ldr	r1, [r3, #16]
 8004570:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004574:	4613      	mov	r3, r2
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	4413      	add	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	3350      	adds	r3, #80	; 0x50
 800457e:	443b      	add	r3, r7
 8004580:	3b2c      	subs	r3, #44	; 0x2c
 8004582:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004584:	4299      	cmp	r1, r3
 8004586:	d109      	bne.n	800459c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8004588:	4b03      	ldr	r3, [pc, #12]	; (8004598 <HAL_OSPIM_Config+0x508>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a02      	ldr	r2, [pc, #8]	; (8004598 <HAL_OSPIM_Config+0x508>)
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	e0ce      	b.n	8004734 <HAL_OSPIM_Config+0x6a4>
 8004596:	bf00      	nop
 8004598:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800459c:	49bb      	ldr	r1, [pc, #748]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 800459e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80045a2:	4613      	mov	r3, r2
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	4413      	add	r3, r2
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	3350      	adds	r3, #80	; 0x50
 80045ac:	443b      	add	r3, r7
 80045ae:	3b3c      	subs	r3, #60	; 0x3c
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	6859      	ldr	r1, [r3, #4]
 80045ba:	48b4      	ldr	r0, [pc, #720]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 80045bc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80045c0:	4613      	mov	r3, r2
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	4413      	add	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	3350      	adds	r3, #80	; 0x50
 80045ca:	443b      	add	r3, r7
 80045cc:	3b3c      	subs	r3, #60	; 0x3c
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	f021 0201 	bic.w	r2, r1, #1
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4403      	add	r3, r0
 80045da:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80045dc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80045e0:	4613      	mov	r3, r2
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	4413      	add	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	3350      	adds	r3, #80	; 0x50
 80045ea:	443b      	add	r3, r7
 80045ec:	3b38      	subs	r3, #56	; 0x38
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01f      	beq.n	8004634 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80045f4:	49a5      	ldr	r1, [pc, #660]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 80045f6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80045fa:	4613      	mov	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	4413      	add	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	3350      	adds	r3, #80	; 0x50
 8004604:	443b      	add	r3, r7
 8004606:	3b38      	subs	r3, #56	; 0x38
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3b01      	subs	r3, #1
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	440b      	add	r3, r1
 8004610:	6859      	ldr	r1, [r3, #4]
 8004612:	489e      	ldr	r0, [pc, #632]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 8004614:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004618:	4613      	mov	r3, r2
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	4413      	add	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	3350      	adds	r3, #80	; 0x50
 8004622:	443b      	add	r3, r7
 8004624:	3b38      	subs	r3, #56	; 0x38
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3b01      	subs	r3, #1
 800462a:	f021 0210 	bic.w	r2, r1, #16
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4403      	add	r3, r0
 8004632:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8004634:	4995      	ldr	r1, [pc, #596]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 8004636:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800463a:	4613      	mov	r3, r2
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	4413      	add	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	3350      	adds	r3, #80	; 0x50
 8004644:	443b      	add	r3, r7
 8004646:	3b34      	subs	r3, #52	; 0x34
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3b01      	subs	r3, #1
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	6859      	ldr	r1, [r3, #4]
 8004652:	488e      	ldr	r0, [pc, #568]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 8004654:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004658:	4613      	mov	r3, r2
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	4413      	add	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	3350      	adds	r3, #80	; 0x50
 8004662:	443b      	add	r3, r7
 8004664:	3b34      	subs	r3, #52	; 0x34
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3b01      	subs	r3, #1
 800466a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4403      	add	r3, r0
 8004672:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004674:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004678:	4613      	mov	r3, r2
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	4413      	add	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	3350      	adds	r3, #80	; 0x50
 8004682:	443b      	add	r3, r7
 8004684:	3b30      	subs	r3, #48	; 0x30
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d023      	beq.n	80046d4 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800468c:	497f      	ldr	r1, [pc, #508]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 800468e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004692:	4613      	mov	r3, r2
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	4413      	add	r3, r2
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	3350      	adds	r3, #80	; 0x50
 800469c:	443b      	add	r3, r7
 800469e:	3b30      	subs	r3, #48	; 0x30
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	6859      	ldr	r1, [r3, #4]
 80046ae:	4877      	ldr	r0, [pc, #476]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 80046b0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80046b4:	4613      	mov	r3, r2
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	4413      	add	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	3350      	adds	r3, #80	; 0x50
 80046be:	443b      	add	r3, r7
 80046c0:	3b30      	subs	r3, #48	; 0x30
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4403      	add	r3, r0
 80046d2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80046d4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80046d8:	4613      	mov	r3, r2
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	4413      	add	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	3350      	adds	r3, #80	; 0x50
 80046e2:	443b      	add	r3, r7
 80046e4:	3b2c      	subs	r3, #44	; 0x2c
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d023      	beq.n	8004734 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80046ec:	4967      	ldr	r1, [pc, #412]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 80046ee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80046f2:	4613      	mov	r3, r2
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	4413      	add	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	3350      	adds	r3, #80	; 0x50
 80046fc:	443b      	add	r3, r7
 80046fe:	3b2c      	subs	r3, #44	; 0x2c
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3b01      	subs	r3, #1
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	6859      	ldr	r1, [r3, #4]
 800470e:	485f      	ldr	r0, [pc, #380]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 8004710:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004714:	4613      	mov	r3, r2
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	4413      	add	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	3350      	adds	r3, #80	; 0x50
 800471e:	443b      	add	r3, r7
 8004720:	3b2c      	subs	r3, #44	; 0x2c
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3b01      	subs	r3, #1
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4403      	add	r3, r0
 8004732:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004734:	4a55      	ldr	r2, [pc, #340]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	3b01      	subs	r3, #1
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004748:	025b      	lsls	r3, r3, #9
 800474a:	431a      	orrs	r2, r3
 800474c:	494f      	ldr	r1, [pc, #316]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	3b01      	subs	r3, #1
 8004754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	1e5a      	subs	r2, r3, #1
 8004764:	4b49      	ldr	r3, [pc, #292]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	0c1b      	lsrs	r3, r3, #16
 800476a:	b2db      	uxtb	r3, r3
 800476c:	429a      	cmp	r2, r3
 800476e:	d90a      	bls.n	8004786 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8004770:	4b46      	ldr	r3, [pc, #280]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	3b01      	subs	r3, #1
 800477e:	041b      	lsls	r3, r3, #16
 8004780:	4942      	ldr	r1, [pc, #264]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 8004782:	4313      	orrs	r3, r2
 8004784:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8004786:	4b41      	ldr	r3, [pc, #260]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 809a 	beq.w	80048c8 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8004794:	4a3d      	ldr	r2, [pc, #244]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3b01      	subs	r3, #1
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f023 0203 	bic.w	r2, r3, #3
 80047a6:	4939      	ldr	r1, [pc, #228]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d011      	beq.n	80047e4 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80047c0:	4a32      	ldr	r2, [pc, #200]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047d2:	492e      	ldr	r1, [pc, #184]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	3b01      	subs	r3, #1
 80047da:	f042 0210 	orr.w	r2, r2, #16
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d016      	beq.n	800481e <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80047f0:	4a26      	ldr	r2, [pc, #152]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004806:	4921      	ldr	r1, [pc, #132]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	3b01      	subs	r3, #1
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	605a      	str	r2, [r3, #4]
 800481c:	e019      	b.n	8004852 <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d015      	beq.n	8004852 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004826:	4a19      	ldr	r2, [pc, #100]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	3b01      	subs	r3, #1
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800483c:	4913      	ldr	r1, [pc, #76]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	3b01      	subs	r3, #1
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d018      	beq.n	8004890 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800485e:	4a0b      	ldr	r2, [pc, #44]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	3b01      	subs	r3, #1
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004874:	4905      	ldr	r1, [pc, #20]	; (800488c <HAL_OSPIM_Config+0x7fc>)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	3b01      	subs	r3, #1
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	440b      	add	r3, r1
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	e0c5      	b.n	8004a18 <HAL_OSPIM_Config+0x988>
 800488c:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 80bf 	beq.w	8004a18 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800489a:	4a6e      	ldr	r2, [pc, #440]	; (8004a54 <HAL_OSPIM_Config+0x9c4>)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80048b0:	4968      	ldr	r1, [pc, #416]	; (8004a54 <HAL_OSPIM_Config+0x9c4>)
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	605a      	str	r2, [r3, #4]
 80048c6:	e0a7      	b.n	8004a18 <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80048c8:	4a62      	ldr	r2, [pc, #392]	; (8004a54 <HAL_OSPIM_Config+0x9c4>)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f023 0203 	bic.w	r2, r3, #3
 80048da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	431a      	orrs	r2, r3
 80048e0:	495c      	ldr	r1, [pc, #368]	; (8004a54 <HAL_OSPIM_Config+0x9c4>)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	f042 0201 	orr.w	r2, r2, #1
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	440b      	add	r3, r1
 80048f0:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d014      	beq.n	8004924 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80048fa:	4a56      	ldr	r2, [pc, #344]	; (8004a54 <HAL_OSPIM_Config+0x9c4>)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	3b01      	subs	r3, #1
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800490c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800490e:	015b      	lsls	r3, r3, #5
 8004910:	431a      	orrs	r2, r3
 8004912:	4950      	ldr	r1, [pc, #320]	; (8004a54 <HAL_OSPIM_Config+0x9c4>)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	3b01      	subs	r3, #1
 800491a:	f042 0210 	orr.w	r2, r2, #16
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d019      	beq.n	8004964 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004930:	4a48      	ldr	r2, [pc, #288]	; (8004a54 <HAL_OSPIM_Config+0x9c4>)
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	3b01      	subs	r3, #1
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004948:	049b      	lsls	r3, r3, #18
 800494a:	431a      	orrs	r2, r3
 800494c:	4941      	ldr	r1, [pc, #260]	; (8004a54 <HAL_OSPIM_Config+0x9c4>)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	3b01      	subs	r3, #1
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	e01c      	b.n	800499e <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d018      	beq.n	800499e <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800496c:	4a39      	ldr	r2, [pc, #228]	; (8004a54 <HAL_OSPIM_Config+0x9c4>)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	3b01      	subs	r3, #1
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004984:	069b      	lsls	r3, r3, #26
 8004986:	431a      	orrs	r2, r3
 8004988:	4932      	ldr	r1, [pc, #200]	; (8004a54 <HAL_OSPIM_Config+0x9c4>)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	3b01      	subs	r3, #1
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d019      	beq.n	80049de <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80049aa:	4a2a      	ldr	r2, [pc, #168]	; (8004a54 <HAL_OSPIM_Config+0x9c4>)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80049c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c2:	049b      	lsls	r3, r3, #18
 80049c4:	431a      	orrs	r2, r3
 80049c6:	4923      	ldr	r1, [pc, #140]	; (8004a54 <HAL_OSPIM_Config+0x9c4>)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	605a      	str	r2, [r3, #4]
 80049dc:	e01c      	b.n	8004a18 <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d018      	beq.n	8004a18 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80049e6:	4a1b      	ldr	r2, [pc, #108]	; (8004a54 <HAL_OSPIM_Config+0x9c4>)
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80049fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fe:	069b      	lsls	r3, r3, #26
 8004a00:	431a      	orrs	r2, r3
 8004a02:	4914      	ldr	r1, [pc, #80]	; (8004a54 <HAL_OSPIM_Config+0x9c4>)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004a18:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004a24:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <HAL_OSPIM_Config+0x9c8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a0b      	ldr	r2, [pc, #44]	; (8004a58 <HAL_OSPIM_Config+0x9c8>)
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004a30:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004a3c:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <HAL_OSPIM_Config+0x9cc>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a06      	ldr	r2, [pc, #24]	; (8004a5c <HAL_OSPIM_Config+0x9cc>)
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004a48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3750      	adds	r7, #80	; 0x50
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	5200b400 	.word	0x5200b400
 8004a58:	52005000 	.word	0x52005000
 8004a5c:	5200a000 	.word	0x5200a000

08004a60 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a7c:	d122      	bne.n	8004ac4 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d014      	beq.n	8004ab6 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2202      	movs	r2, #2
 8004a92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004aa2:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0202 	orr.w	r2, r2, #2
 8004ab2:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 8004ab4:	e00c      	b.n	8004ad0 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f7ff fa91 	bl	8003fe4 <HAL_OSPI_AbortCpltCallback>
}
 8004ac2:	e005      	b.n	8004ad0 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7ff fa80 	bl	8003fd0 <HAL_OSPI_ErrorCallback>
}
 8004ad0:	bf00      	nop
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004ae8:	e01a      	b.n	8004b20 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d016      	beq.n	8004b20 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af2:	f7fd fa99 	bl	8002028 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d302      	bcc.n	8004b08 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10b      	bne.n	8004b20 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b0e:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b14:	f043 0201 	orr.w	r2, r3, #1
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e00e      	b.n	8004b3e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6a1a      	ldr	r2, [r3, #32]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	bf14      	ite	ne
 8004b2e:	2301      	movne	r3, #1
 8004b30:	2300      	moveq	r3, #0
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	461a      	mov	r2, r3
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d1d6      	bne.n	8004aea <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b089      	sub	sp, #36	; 0x24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b64:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d114      	bne.n	8004bb6 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004b94:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004b9e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8004ba8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	e02c      	b.n	8004c10 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d114      	bne.n	8004be8 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004bc6:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004bd0:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004bda:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	e013      	b.n	8004c10 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004bf0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004bfa:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004c04:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d012      	beq.n	8004c4c <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3e:	4319      	orrs	r1, r3
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	430b      	orrs	r3, r1
 8004c46:	431a      	orrs	r2, r3
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f023 021f 	bic.w	r2, r3, #31
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d009      	beq.n	8004c7a <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d105      	bne.n	8004c7a <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3a01      	subs	r2, #1
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 8095 	beq.w	8004dae <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d053      	beq.n	8004d34 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01e      	beq.n	8004cd2 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	4b64      	ldr	r3, [pc, #400]	; (8004e2c <OSPI_ConfigCmd+0x2e4>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	68d1      	ldr	r1, [r2, #12]
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	6952      	ldr	r2, [r2, #20]
 8004ca4:	4311      	orrs	r1, r2
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	6912      	ldr	r2, [r2, #16]
 8004caa:	4311      	orrs	r1, r2
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	69d2      	ldr	r2, [r2, #28]
 8004cb0:	4311      	orrs	r1, r2
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cb6:	4311      	orrs	r1, r2
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	6a12      	ldr	r2, [r2, #32]
 8004cbc:	4311      	orrs	r1, r2
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cc2:	4311      	orrs	r1, r2
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	e026      	b.n	8004d20 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4b56      	ldr	r3, [pc, #344]	; (8004e30 <OSPI_ConfigCmd+0x2e8>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	68d1      	ldr	r1, [r2, #12]
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	6952      	ldr	r2, [r2, #20]
 8004ce2:	4311      	orrs	r1, r2
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	6912      	ldr	r2, [r2, #16]
 8004ce8:	4311      	orrs	r1, r2
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	69d2      	ldr	r2, [r2, #28]
 8004cee:	4311      	orrs	r1, r2
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cf4:	4311      	orrs	r1, r2
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	6a12      	ldr	r2, [r2, #32]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d0a:	d109      	bne.n	8004d20 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d105      	bne.n	8004d20 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	6992      	ldr	r2, [r2, #24]
 8004d30:	649a      	str	r2, [r3, #72]	; 0x48
 8004d32:	e074      	b.n	8004e1e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d015      	beq.n	8004d68 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	4b3c      	ldr	r3, [pc, #240]	; (8004e34 <OSPI_ConfigCmd+0x2ec>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	68d1      	ldr	r1, [r2, #12]
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	6952      	ldr	r2, [r2, #20]
 8004d4c:	4311      	orrs	r1, r2
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	6912      	ldr	r2, [r2, #16]
 8004d52:	4311      	orrs	r1, r2
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d58:	4311      	orrs	r1, r2
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	431a      	orrs	r2, r3
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e01d      	b.n	8004da4 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	68d9      	ldr	r1, [r3, #12]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	4319      	orrs	r1, r3
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	431a      	orrs	r2, r3
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d8e:	d109      	bne.n	8004da4 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d105      	bne.n	8004da4 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	e037      	b.n	8004e1e <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d02e      	beq.n	8004e14 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d015      	beq.n	8004dea <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <OSPI_ConfigCmd+0x2f0>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	69d1      	ldr	r1, [r2, #28]
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dce:	4311      	orrs	r1, r2
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	6a12      	ldr	r2, [r2, #32]
 8004dd4:	4311      	orrs	r1, r2
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dda:	4311      	orrs	r1, r2
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004de0:	430a      	orrs	r2, r1
 8004de2:	431a      	orrs	r2, r3
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e00e      	b.n	8004e08 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	69d9      	ldr	r1, [r3, #28]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	4319      	orrs	r1, r3
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	430b      	orrs	r3, r1
 8004e02:	431a      	orrs	r2, r3
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	6992      	ldr	r2, [r2, #24]
 8004e10:	649a      	str	r2, [r3, #72]	; 0x48
 8004e12:	e004      	b.n	8004e1e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2208      	movs	r2, #8
 8004e1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8004e1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3724      	adds	r7, #36	; 0x24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	f0ffc0c0 	.word	0xf0ffc0c0
 8004e30:	ffffc0c0 	.word	0xffffc0c0
 8004e34:	f0ffffc0 	.word	0xf0ffffc0
 8004e38:	f0ffc0ff 	.word	0xf0ffc0ff

08004e3c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	6039      	str	r1, [r7, #0]
 8004e46:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <OSPIM_GetConfig+0x26>
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d802      	bhi.n	8004e62 <OSPIM_GetConfig+0x26>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d102      	bne.n	8004e68 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	75fb      	strb	r3, [r7, #23]
 8004e66:	e098      	b.n	8004f9a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2200      	movs	r2, #0
 8004e72:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2200      	movs	r2, #0
 8004e78:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2200      	movs	r2, #0
 8004e84:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004e86:	79fb      	ldrb	r3, [r7, #7]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d10b      	bne.n	8004ea4 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8004e8c:	4b46      	ldr	r3, [pc, #280]	; (8004fa8 <OSPIM_GetConfig+0x16c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d102      	bne.n	8004e9e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004e98:	4b44      	ldr	r3, [pc, #272]	; (8004fac <OSPIM_GetConfig+0x170>)
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	e002      	b.n	8004ea4 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8004e9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ea2:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	e074      	b.n	8004f94 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8004eaa:	4a3f      	ldr	r2, [pc, #252]	; (8004fa8 <OSPIM_GetConfig+0x16c>)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	4053      	eors	r3, r2
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d103      	bne.n	8004ed6 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	4053      	eors	r3, r2
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d103      	bne.n	8004ef6 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4053      	eors	r3, r2
 8004f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d103      	bne.n	8004f16 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d018      	beq.n	8004f52 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	4053      	eors	r3, r2
 8004f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d111      	bne.n	8004f52 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d106      	bne.n	8004f46 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	60da      	str	r2, [r3, #12]
 8004f44:	e005      	b.n	8004f52 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d018      	beq.n	8004f8e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4053      	eors	r3, r2
 8004f62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d111      	bne.n	8004f8e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3301      	adds	r3, #1
 8004f78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	611a      	str	r2, [r3, #16]
 8004f80:	e005      	b.n	8004f8e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3301      	adds	r3, #1
 8004f86:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3301      	adds	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d987      	bls.n	8004eaa <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8004f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	371c      	adds	r7, #28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	5200b400 	.word	0x5200b400
 8004fac:	04040222 	.word	0x04040222

08004fb0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004fb8:	4b19      	ldr	r3, [pc, #100]	; (8005020 <HAL_PWREx_ConfigSupply+0x70>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d00a      	beq.n	8004fda <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004fc4:	4b16      	ldr	r3, [pc, #88]	; (8005020 <HAL_PWREx_ConfigSupply+0x70>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d001      	beq.n	8004fd6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e01f      	b.n	8005016 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e01d      	b.n	8005016 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004fda:	4b11      	ldr	r3, [pc, #68]	; (8005020 <HAL_PWREx_ConfigSupply+0x70>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f023 0207 	bic.w	r2, r3, #7
 8004fe2:	490f      	ldr	r1, [pc, #60]	; (8005020 <HAL_PWREx_ConfigSupply+0x70>)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004fea:	f7fd f81d 	bl	8002028 <HAL_GetTick>
 8004fee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ff0:	e009      	b.n	8005006 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ff2:	f7fd f819 	bl	8002028 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005000:	d901      	bls.n	8005006 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e007      	b.n	8005016 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005006:	4b06      	ldr	r3, [pc, #24]	; (8005020 <HAL_PWREx_ConfigSupply+0x70>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800500e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005012:	d1ee      	bne.n	8004ff2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	58024800 	.word	0x58024800

08005024 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08c      	sub	sp, #48	; 0x30
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e3c8      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 8087 	beq.w	8005152 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005044:	4b88      	ldr	r3, [pc, #544]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800504c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800504e:	4b86      	ldr	r3, [pc, #536]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 8005050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005052:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005056:	2b10      	cmp	r3, #16
 8005058:	d007      	beq.n	800506a <HAL_RCC_OscConfig+0x46>
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	2b18      	cmp	r3, #24
 800505e:	d110      	bne.n	8005082 <HAL_RCC_OscConfig+0x5e>
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d10b      	bne.n	8005082 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800506a:	4b7f      	ldr	r3, [pc, #508]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d06c      	beq.n	8005150 <HAL_RCC_OscConfig+0x12c>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d168      	bne.n	8005150 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e3a2      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508a:	d106      	bne.n	800509a <HAL_RCC_OscConfig+0x76>
 800508c:	4b76      	ldr	r3, [pc, #472]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a75      	ldr	r2, [pc, #468]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 8005092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	e02e      	b.n	80050f8 <HAL_RCC_OscConfig+0xd4>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10c      	bne.n	80050bc <HAL_RCC_OscConfig+0x98>
 80050a2:	4b71      	ldr	r3, [pc, #452]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a70      	ldr	r2, [pc, #448]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80050a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	4b6e      	ldr	r3, [pc, #440]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a6d      	ldr	r2, [pc, #436]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80050b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	e01d      	b.n	80050f8 <HAL_RCC_OscConfig+0xd4>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050c4:	d10c      	bne.n	80050e0 <HAL_RCC_OscConfig+0xbc>
 80050c6:	4b68      	ldr	r3, [pc, #416]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a67      	ldr	r2, [pc, #412]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80050cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	4b65      	ldr	r3, [pc, #404]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a64      	ldr	r2, [pc, #400]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80050d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	e00b      	b.n	80050f8 <HAL_RCC_OscConfig+0xd4>
 80050e0:	4b61      	ldr	r3, [pc, #388]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a60      	ldr	r2, [pc, #384]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80050e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	4b5e      	ldr	r3, [pc, #376]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a5d      	ldr	r2, [pc, #372]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80050f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d013      	beq.n	8005128 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005100:	f7fc ff92 	bl	8002028 <HAL_GetTick>
 8005104:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005108:	f7fc ff8e 	bl	8002028 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b64      	cmp	r3, #100	; 0x64
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e356      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800511a:	4b53      	ldr	r3, [pc, #332]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0f0      	beq.n	8005108 <HAL_RCC_OscConfig+0xe4>
 8005126:	e014      	b.n	8005152 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fc ff7e 	bl	8002028 <HAL_GetTick>
 800512c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005130:	f7fc ff7a 	bl	8002028 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b64      	cmp	r3, #100	; 0x64
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e342      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005142:	4b49      	ldr	r3, [pc, #292]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f0      	bne.n	8005130 <HAL_RCC_OscConfig+0x10c>
 800514e:	e000      	b.n	8005152 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 808c 	beq.w	8005278 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005160:	4b41      	ldr	r3, [pc, #260]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005168:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800516a:	4b3f      	ldr	r3, [pc, #252]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d007      	beq.n	8005186 <HAL_RCC_OscConfig+0x162>
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	2b18      	cmp	r3, #24
 800517a:	d137      	bne.n	80051ec <HAL_RCC_OscConfig+0x1c8>
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d132      	bne.n	80051ec <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005186:	4b38      	ldr	r3, [pc, #224]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	d005      	beq.n	800519e <HAL_RCC_OscConfig+0x17a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e314      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800519e:	4b32      	ldr	r3, [pc, #200]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f023 0219 	bic.w	r2, r3, #25
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	492f      	ldr	r1, [pc, #188]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b0:	f7fc ff3a 	bl	8002028 <HAL_GetTick>
 80051b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b8:	f7fc ff36 	bl	8002028 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e2fe      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051ca:	4b27      	ldr	r3, [pc, #156]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0f0      	beq.n	80051b8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d6:	4b24      	ldr	r3, [pc, #144]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	061b      	lsls	r3, r3, #24
 80051e4:	4920      	ldr	r1, [pc, #128]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051ea:	e045      	b.n	8005278 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d026      	beq.n	8005242 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051f4:	4b1c      	ldr	r3, [pc, #112]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f023 0219 	bic.w	r2, r3, #25
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	4919      	ldr	r1, [pc, #100]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 8005202:	4313      	orrs	r3, r2
 8005204:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005206:	f7fc ff0f 	bl	8002028 <HAL_GetTick>
 800520a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800520e:	f7fc ff0b 	bl	8002028 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e2d3      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005220:	4b11      	ldr	r3, [pc, #68]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0f0      	beq.n	800520e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800522c:	4b0e      	ldr	r3, [pc, #56]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	061b      	lsls	r3, r3, #24
 800523a:	490b      	ldr	r1, [pc, #44]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 800523c:	4313      	orrs	r3, r2
 800523e:	604b      	str	r3, [r1, #4]
 8005240:	e01a      	b.n	8005278 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005242:	4b09      	ldr	r3, [pc, #36]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a08      	ldr	r2, [pc, #32]	; (8005268 <HAL_RCC_OscConfig+0x244>)
 8005248:	f023 0301 	bic.w	r3, r3, #1
 800524c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524e:	f7fc feeb 	bl	8002028 <HAL_GetTick>
 8005252:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005254:	e00a      	b.n	800526c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005256:	f7fc fee7 	bl	8002028 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d903      	bls.n	800526c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e2af      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
 8005268:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800526c:	4b96      	ldr	r3, [pc, #600]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1ee      	bne.n	8005256 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	2b00      	cmp	r3, #0
 8005282:	d06a      	beq.n	800535a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005284:	4b90      	ldr	r3, [pc, #576]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800528c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800528e:	4b8e      	ldr	r3, [pc, #568]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 8005290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005292:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	2b08      	cmp	r3, #8
 8005298:	d007      	beq.n	80052aa <HAL_RCC_OscConfig+0x286>
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b18      	cmp	r3, #24
 800529e:	d11b      	bne.n	80052d8 <HAL_RCC_OscConfig+0x2b4>
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d116      	bne.n	80052d8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052aa:	4b87      	ldr	r3, [pc, #540]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <HAL_RCC_OscConfig+0x29e>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	2b80      	cmp	r3, #128	; 0x80
 80052bc:	d001      	beq.n	80052c2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e282      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052c2:	4b81      	ldr	r3, [pc, #516]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	061b      	lsls	r3, r3, #24
 80052d0:	497d      	ldr	r1, [pc, #500]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052d6:	e040      	b.n	800535a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d023      	beq.n	8005328 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80052e0:	4b79      	ldr	r3, [pc, #484]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a78      	ldr	r2, [pc, #480]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 80052e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ec:	f7fc fe9c 	bl	8002028 <HAL_GetTick>
 80052f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80052f4:	f7fc fe98 	bl	8002028 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e260      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005306:	4b70      	ldr	r3, [pc, #448]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0f0      	beq.n	80052f4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005312:	4b6d      	ldr	r3, [pc, #436]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	061b      	lsls	r3, r3, #24
 8005320:	4969      	ldr	r1, [pc, #420]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 8005322:	4313      	orrs	r3, r2
 8005324:	60cb      	str	r3, [r1, #12]
 8005326:	e018      	b.n	800535a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005328:	4b67      	ldr	r3, [pc, #412]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a66      	ldr	r2, [pc, #408]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 800532e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005334:	f7fc fe78 	bl	8002028 <HAL_GetTick>
 8005338:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800533c:	f7fc fe74 	bl	8002028 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e23c      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800534e:	4b5e      	ldr	r3, [pc, #376]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1f0      	bne.n	800533c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	2b00      	cmp	r3, #0
 8005364:	d036      	beq.n	80053d4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d019      	beq.n	80053a2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800536e:	4b56      	ldr	r3, [pc, #344]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 8005370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005372:	4a55      	ldr	r2, [pc, #340]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 8005374:	f043 0301 	orr.w	r3, r3, #1
 8005378:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537a:	f7fc fe55 	bl	8002028 <HAL_GetTick>
 800537e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005382:	f7fc fe51 	bl	8002028 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e219      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005394:	4b4c      	ldr	r3, [pc, #304]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 8005396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0f0      	beq.n	8005382 <HAL_RCC_OscConfig+0x35e>
 80053a0:	e018      	b.n	80053d4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053a2:	4b49      	ldr	r3, [pc, #292]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 80053a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a6:	4a48      	ldr	r2, [pc, #288]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 80053a8:	f023 0301 	bic.w	r3, r3, #1
 80053ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ae:	f7fc fe3b 	bl	8002028 <HAL_GetTick>
 80053b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053b6:	f7fc fe37 	bl	8002028 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e1ff      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053c8:	4b3f      	ldr	r3, [pc, #252]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 80053ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1f0      	bne.n	80053b6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d036      	beq.n	800544e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d019      	beq.n	800541c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053e8:	4b37      	ldr	r3, [pc, #220]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a36      	ldr	r2, [pc, #216]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 80053ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053f4:	f7fc fe18 	bl	8002028 <HAL_GetTick>
 80053f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053fc:	f7fc fe14 	bl	8002028 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e1dc      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800540e:	4b2e      	ldr	r3, [pc, #184]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0f0      	beq.n	80053fc <HAL_RCC_OscConfig+0x3d8>
 800541a:	e018      	b.n	800544e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800541c:	4b2a      	ldr	r3, [pc, #168]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a29      	ldr	r2, [pc, #164]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 8005422:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005426:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005428:	f7fc fdfe 	bl	8002028 <HAL_GetTick>
 800542c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005430:	f7fc fdfa 	bl	8002028 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e1c2      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005442:	4b21      	ldr	r3, [pc, #132]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 8086 	beq.w	8005568 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800545c:	4b1b      	ldr	r3, [pc, #108]	; (80054cc <HAL_RCC_OscConfig+0x4a8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1a      	ldr	r2, [pc, #104]	; (80054cc <HAL_RCC_OscConfig+0x4a8>)
 8005462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005466:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005468:	f7fc fdde 	bl	8002028 <HAL_GetTick>
 800546c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005470:	f7fc fdda 	bl	8002028 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b64      	cmp	r3, #100	; 0x64
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e1a2      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005482:	4b12      	ldr	r3, [pc, #72]	; (80054cc <HAL_RCC_OscConfig+0x4a8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0f0      	beq.n	8005470 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d106      	bne.n	80054a4 <HAL_RCC_OscConfig+0x480>
 8005496:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 8005498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549a:	4a0b      	ldr	r2, [pc, #44]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	6713      	str	r3, [r2, #112]	; 0x70
 80054a2:	e032      	b.n	800550a <HAL_RCC_OscConfig+0x4e6>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d111      	bne.n	80054d0 <HAL_RCC_OscConfig+0x4ac>
 80054ac:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 80054ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b0:	4a05      	ldr	r2, [pc, #20]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 80054b2:	f023 0301 	bic.w	r3, r3, #1
 80054b6:	6713      	str	r3, [r2, #112]	; 0x70
 80054b8:	4b03      	ldr	r3, [pc, #12]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 80054ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054bc:	4a02      	ldr	r2, [pc, #8]	; (80054c8 <HAL_RCC_OscConfig+0x4a4>)
 80054be:	f023 0304 	bic.w	r3, r3, #4
 80054c2:	6713      	str	r3, [r2, #112]	; 0x70
 80054c4:	e021      	b.n	800550a <HAL_RCC_OscConfig+0x4e6>
 80054c6:	bf00      	nop
 80054c8:	58024400 	.word	0x58024400
 80054cc:	58024800 	.word	0x58024800
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	2b05      	cmp	r3, #5
 80054d6:	d10c      	bne.n	80054f2 <HAL_RCC_OscConfig+0x4ce>
 80054d8:	4b83      	ldr	r3, [pc, #524]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 80054da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054dc:	4a82      	ldr	r2, [pc, #520]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 80054de:	f043 0304 	orr.w	r3, r3, #4
 80054e2:	6713      	str	r3, [r2, #112]	; 0x70
 80054e4:	4b80      	ldr	r3, [pc, #512]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 80054e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e8:	4a7f      	ldr	r2, [pc, #508]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 80054ea:	f043 0301 	orr.w	r3, r3, #1
 80054ee:	6713      	str	r3, [r2, #112]	; 0x70
 80054f0:	e00b      	b.n	800550a <HAL_RCC_OscConfig+0x4e6>
 80054f2:	4b7d      	ldr	r3, [pc, #500]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 80054f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f6:	4a7c      	ldr	r2, [pc, #496]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 80054f8:	f023 0301 	bic.w	r3, r3, #1
 80054fc:	6713      	str	r3, [r2, #112]	; 0x70
 80054fe:	4b7a      	ldr	r3, [pc, #488]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 8005500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005502:	4a79      	ldr	r2, [pc, #484]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 8005504:	f023 0304 	bic.w	r3, r3, #4
 8005508:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d015      	beq.n	800553e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005512:	f7fc fd89 	bl	8002028 <HAL_GetTick>
 8005516:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005518:	e00a      	b.n	8005530 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800551a:	f7fc fd85 	bl	8002028 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	f241 3288 	movw	r2, #5000	; 0x1388
 8005528:	4293      	cmp	r3, r2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e14b      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005530:	4b6d      	ldr	r3, [pc, #436]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 8005532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0ee      	beq.n	800551a <HAL_RCC_OscConfig+0x4f6>
 800553c:	e014      	b.n	8005568 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553e:	f7fc fd73 	bl	8002028 <HAL_GetTick>
 8005542:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005544:	e00a      	b.n	800555c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005546:	f7fc fd6f 	bl	8002028 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	f241 3288 	movw	r2, #5000	; 0x1388
 8005554:	4293      	cmp	r3, r2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e135      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800555c:	4b62      	ldr	r3, [pc, #392]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 800555e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1ee      	bne.n	8005546 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 812a 	beq.w	80057c6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005572:	4b5d      	ldr	r3, [pc, #372]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800557a:	2b18      	cmp	r3, #24
 800557c:	f000 80ba 	beq.w	80056f4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	2b02      	cmp	r3, #2
 8005586:	f040 8095 	bne.w	80056b4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800558a:	4b57      	ldr	r3, [pc, #348]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a56      	ldr	r2, [pc, #344]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 8005590:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005596:	f7fc fd47 	bl	8002028 <HAL_GetTick>
 800559a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800559c:	e008      	b.n	80055b0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800559e:	f7fc fd43 	bl	8002028 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e10b      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055b0:	4b4d      	ldr	r3, [pc, #308]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f0      	bne.n	800559e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055bc:	4b4a      	ldr	r3, [pc, #296]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 80055be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055c0:	4b4a      	ldr	r3, [pc, #296]	; (80056ec <HAL_RCC_OscConfig+0x6c8>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80055cc:	0112      	lsls	r2, r2, #4
 80055ce:	430a      	orrs	r2, r1
 80055d0:	4945      	ldr	r1, [pc, #276]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	628b      	str	r3, [r1, #40]	; 0x28
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	3b01      	subs	r3, #1
 80055dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e4:	3b01      	subs	r3, #1
 80055e6:	025b      	lsls	r3, r3, #9
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	3b01      	subs	r3, #1
 80055f2:	041b      	lsls	r3, r3, #16
 80055f4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fe:	3b01      	subs	r3, #1
 8005600:	061b      	lsls	r3, r3, #24
 8005602:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005606:	4938      	ldr	r1, [pc, #224]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 8005608:	4313      	orrs	r3, r2
 800560a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800560c:	4b36      	ldr	r3, [pc, #216]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	4a35      	ldr	r2, [pc, #212]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 8005612:	f023 0301 	bic.w	r3, r3, #1
 8005616:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005618:	4b33      	ldr	r3, [pc, #204]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 800561a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800561c:	4b34      	ldr	r3, [pc, #208]	; (80056f0 <HAL_RCC_OscConfig+0x6cc>)
 800561e:	4013      	ands	r3, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005624:	00d2      	lsls	r2, r2, #3
 8005626:	4930      	ldr	r1, [pc, #192]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 8005628:	4313      	orrs	r3, r2
 800562a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800562c:	4b2e      	ldr	r3, [pc, #184]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	f023 020c 	bic.w	r2, r3, #12
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	492b      	ldr	r1, [pc, #172]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 800563a:	4313      	orrs	r3, r2
 800563c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800563e:	4b2a      	ldr	r3, [pc, #168]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	f023 0202 	bic.w	r2, r3, #2
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564a:	4927      	ldr	r1, [pc, #156]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 800564c:	4313      	orrs	r3, r2
 800564e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005650:	4b25      	ldr	r3, [pc, #148]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	4a24      	ldr	r2, [pc, #144]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 8005656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800565a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800565c:	4b22      	ldr	r3, [pc, #136]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	4a21      	ldr	r2, [pc, #132]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 8005662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005666:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005668:	4b1f      	ldr	r3, [pc, #124]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	4a1e      	ldr	r2, [pc, #120]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 800566e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005672:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005674:	4b1c      	ldr	r3, [pc, #112]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	4a1b      	ldr	r2, [pc, #108]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005680:	4b19      	ldr	r3, [pc, #100]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a18      	ldr	r2, [pc, #96]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 8005686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800568a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568c:	f7fc fccc 	bl	8002028 <HAL_GetTick>
 8005690:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005694:	f7fc fcc8 	bl	8002028 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e090      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056a6:	4b10      	ldr	r3, [pc, #64]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0f0      	beq.n	8005694 <HAL_RCC_OscConfig+0x670>
 80056b2:	e088      	b.n	80057c6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b4:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a0b      	ldr	r2, [pc, #44]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 80056ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c0:	f7fc fcb2 	bl	8002028 <HAL_GetTick>
 80056c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c8:	f7fc fcae 	bl	8002028 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e076      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056da:	4b03      	ldr	r3, [pc, #12]	; (80056e8 <HAL_RCC_OscConfig+0x6c4>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1f0      	bne.n	80056c8 <HAL_RCC_OscConfig+0x6a4>
 80056e6:	e06e      	b.n	80057c6 <HAL_RCC_OscConfig+0x7a2>
 80056e8:	58024400 	.word	0x58024400
 80056ec:	fffffc0c 	.word	0xfffffc0c
 80056f0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80056f4:	4b36      	ldr	r3, [pc, #216]	; (80057d0 <HAL_RCC_OscConfig+0x7ac>)
 80056f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80056fa:	4b35      	ldr	r3, [pc, #212]	; (80057d0 <HAL_RCC_OscConfig+0x7ac>)
 80056fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	2b01      	cmp	r3, #1
 8005706:	d031      	beq.n	800576c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f003 0203 	and.w	r2, r3, #3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005712:	429a      	cmp	r2, r3
 8005714:	d12a      	bne.n	800576c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	091b      	lsrs	r3, r3, #4
 800571a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005722:	429a      	cmp	r2, r3
 8005724:	d122      	bne.n	800576c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005732:	429a      	cmp	r2, r3
 8005734:	d11a      	bne.n	800576c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	0a5b      	lsrs	r3, r3, #9
 800573a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005742:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005744:	429a      	cmp	r2, r3
 8005746:	d111      	bne.n	800576c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	0c1b      	lsrs	r3, r3, #16
 800574c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005756:	429a      	cmp	r2, r3
 8005758:	d108      	bne.n	800576c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	0e1b      	lsrs	r3, r3, #24
 800575e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005766:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005768:	429a      	cmp	r2, r3
 800576a:	d001      	beq.n	8005770 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e02b      	b.n	80057c8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005770:	4b17      	ldr	r3, [pc, #92]	; (80057d0 <HAL_RCC_OscConfig+0x7ac>)
 8005772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005774:	08db      	lsrs	r3, r3, #3
 8005776:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800577a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	429a      	cmp	r2, r3
 8005784:	d01f      	beq.n	80057c6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005786:	4b12      	ldr	r3, [pc, #72]	; (80057d0 <HAL_RCC_OscConfig+0x7ac>)
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	4a11      	ldr	r2, [pc, #68]	; (80057d0 <HAL_RCC_OscConfig+0x7ac>)
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005792:	f7fc fc49 	bl	8002028 <HAL_GetTick>
 8005796:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005798:	bf00      	nop
 800579a:	f7fc fc45 	bl	8002028 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d0f9      	beq.n	800579a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057a6:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <HAL_RCC_OscConfig+0x7ac>)
 80057a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057aa:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <HAL_RCC_OscConfig+0x7b0>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80057b2:	00d2      	lsls	r2, r2, #3
 80057b4:	4906      	ldr	r1, [pc, #24]	; (80057d0 <HAL_RCC_OscConfig+0x7ac>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80057ba:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <HAL_RCC_OscConfig+0x7ac>)
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	4a04      	ldr	r2, [pc, #16]	; (80057d0 <HAL_RCC_OscConfig+0x7ac>)
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3730      	adds	r7, #48	; 0x30
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	58024400 	.word	0x58024400
 80057d4:	ffff0007 	.word	0xffff0007

080057d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e19c      	b.n	8005b26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057ec:	4b8a      	ldr	r3, [pc, #552]	; (8005a18 <HAL_RCC_ClockConfig+0x240>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d910      	bls.n	800581c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057fa:	4b87      	ldr	r3, [pc, #540]	; (8005a18 <HAL_RCC_ClockConfig+0x240>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f023 020f 	bic.w	r2, r3, #15
 8005802:	4985      	ldr	r1, [pc, #532]	; (8005a18 <HAL_RCC_ClockConfig+0x240>)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	4313      	orrs	r3, r2
 8005808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800580a:	4b83      	ldr	r3, [pc, #524]	; (8005a18 <HAL_RCC_ClockConfig+0x240>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 030f 	and.w	r3, r3, #15
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d001      	beq.n	800581c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e184      	b.n	8005b26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d010      	beq.n	800584a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	4b7b      	ldr	r3, [pc, #492]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005834:	429a      	cmp	r2, r3
 8005836:	d908      	bls.n	800584a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005838:	4b78      	ldr	r3, [pc, #480]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	4975      	ldr	r1, [pc, #468]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 8005846:	4313      	orrs	r3, r2
 8005848:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d010      	beq.n	8005878 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695a      	ldr	r2, [r3, #20]
 800585a:	4b70      	ldr	r3, [pc, #448]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005862:	429a      	cmp	r2, r3
 8005864:	d908      	bls.n	8005878 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005866:	4b6d      	ldr	r3, [pc, #436]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	496a      	ldr	r1, [pc, #424]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 8005874:	4313      	orrs	r3, r2
 8005876:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b00      	cmp	r3, #0
 8005882:	d010      	beq.n	80058a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	699a      	ldr	r2, [r3, #24]
 8005888:	4b64      	ldr	r3, [pc, #400]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005890:	429a      	cmp	r2, r3
 8005892:	d908      	bls.n	80058a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005894:	4b61      	ldr	r3, [pc, #388]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	495e      	ldr	r1, [pc, #376]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d010      	beq.n	80058d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69da      	ldr	r2, [r3, #28]
 80058b6:	4b59      	ldr	r3, [pc, #356]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058be:	429a      	cmp	r2, r3
 80058c0:	d908      	bls.n	80058d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80058c2:	4b56      	ldr	r3, [pc, #344]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	4953      	ldr	r1, [pc, #332]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d010      	beq.n	8005902 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68da      	ldr	r2, [r3, #12]
 80058e4:	4b4d      	ldr	r3, [pc, #308]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d908      	bls.n	8005902 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058f0:	4b4a      	ldr	r3, [pc, #296]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	f023 020f 	bic.w	r2, r3, #15
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4947      	ldr	r1, [pc, #284]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d055      	beq.n	80059ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800590e:	4b43      	ldr	r3, [pc, #268]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	4940      	ldr	r1, [pc, #256]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 800591c:	4313      	orrs	r3, r2
 800591e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d107      	bne.n	8005938 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005928:	4b3c      	ldr	r3, [pc, #240]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d121      	bne.n	8005978 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e0f6      	b.n	8005b26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b03      	cmp	r3, #3
 800593e:	d107      	bne.n	8005950 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005940:	4b36      	ldr	r3, [pc, #216]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d115      	bne.n	8005978 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e0ea      	b.n	8005b26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d107      	bne.n	8005968 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005958:	4b30      	ldr	r3, [pc, #192]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005960:	2b00      	cmp	r3, #0
 8005962:	d109      	bne.n	8005978 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0de      	b.n	8005b26 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005968:	4b2c      	ldr	r3, [pc, #176]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e0d6      	b.n	8005b26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005978:	4b28      	ldr	r3, [pc, #160]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	f023 0207 	bic.w	r2, r3, #7
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	4925      	ldr	r1, [pc, #148]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 8005986:	4313      	orrs	r3, r2
 8005988:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800598a:	f7fc fb4d 	bl	8002028 <HAL_GetTick>
 800598e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005990:	e00a      	b.n	80059a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005992:	f7fc fb49 	bl	8002028 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e0be      	b.n	8005b26 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a8:	4b1c      	ldr	r3, [pc, #112]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d1eb      	bne.n	8005992 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d010      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	4b14      	ldr	r3, [pc, #80]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d208      	bcs.n	80059e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059d6:	4b11      	ldr	r3, [pc, #68]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f023 020f 	bic.w	r2, r3, #15
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	490e      	ldr	r1, [pc, #56]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059e8:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <HAL_RCC_ClockConfig+0x240>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d214      	bcs.n	8005a20 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059f6:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <HAL_RCC_ClockConfig+0x240>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f023 020f 	bic.w	r2, r3, #15
 80059fe:	4906      	ldr	r1, [pc, #24]	; (8005a18 <HAL_RCC_ClockConfig+0x240>)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a06:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <HAL_RCC_ClockConfig+0x240>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d005      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e086      	b.n	8005b26 <HAL_RCC_ClockConfig+0x34e>
 8005a18:	52002000 	.word	0x52002000
 8005a1c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d010      	beq.n	8005a4e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	4b3f      	ldr	r3, [pc, #252]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d208      	bcs.n	8005a4e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a3c:	4b3c      	ldr	r3, [pc, #240]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	4939      	ldr	r1, [pc, #228]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0308 	and.w	r3, r3, #8
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d010      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	695a      	ldr	r2, [r3, #20]
 8005a5e:	4b34      	ldr	r3, [pc, #208]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d208      	bcs.n	8005a7c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a6a:	4b31      	ldr	r3, [pc, #196]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	492e      	ldr	r1, [pc, #184]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0310 	and.w	r3, r3, #16
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d010      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699a      	ldr	r2, [r3, #24]
 8005a8c:	4b28      	ldr	r3, [pc, #160]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d208      	bcs.n	8005aaa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a98:	4b25      	ldr	r3, [pc, #148]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	4922      	ldr	r1, [pc, #136]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d010      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69da      	ldr	r2, [r3, #28]
 8005aba:	4b1d      	ldr	r3, [pc, #116]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d208      	bcs.n	8005ad8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005ac6:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	4917      	ldr	r1, [pc, #92]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ad8:	f000 f834 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 8005adc:	4602      	mov	r2, r0
 8005ade:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	f003 030f 	and.w	r3, r3, #15
 8005ae8:	4912      	ldr	r1, [pc, #72]	; (8005b34 <HAL_RCC_ClockConfig+0x35c>)
 8005aea:	5ccb      	ldrb	r3, [r1, r3]
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	fa22 f303 	lsr.w	r3, r2, r3
 8005af4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005af6:	4b0e      	ldr	r3, [pc, #56]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	4a0d      	ldr	r2, [pc, #52]	; (8005b34 <HAL_RCC_ClockConfig+0x35c>)
 8005b00:	5cd3      	ldrb	r3, [r2, r3]
 8005b02:	f003 031f 	and.w	r3, r3, #31
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0c:	4a0a      	ldr	r2, [pc, #40]	; (8005b38 <HAL_RCC_ClockConfig+0x360>)
 8005b0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b10:	4a0a      	ldr	r2, [pc, #40]	; (8005b3c <HAL_RCC_ClockConfig+0x364>)
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005b16:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <HAL_RCC_ClockConfig+0x368>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fc fa3a 	bl	8001f94 <HAL_InitTick>
 8005b20:	4603      	mov	r3, r0
 8005b22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	58024400 	.word	0x58024400
 8005b34:	0800c114 	.word	0x0800c114
 8005b38:	24000108 	.word	0x24000108
 8005b3c:	24000104 	.word	0x24000104
 8005b40:	2400010c 	.word	0x2400010c

08005b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b089      	sub	sp, #36	; 0x24
 8005b48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b4a:	4bb3      	ldr	r3, [pc, #716]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b52:	2b18      	cmp	r3, #24
 8005b54:	f200 8155 	bhi.w	8005e02 <HAL_RCC_GetSysClockFreq+0x2be>
 8005b58:	a201      	add	r2, pc, #4	; (adr r2, 8005b60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5e:	bf00      	nop
 8005b60:	08005bc5 	.word	0x08005bc5
 8005b64:	08005e03 	.word	0x08005e03
 8005b68:	08005e03 	.word	0x08005e03
 8005b6c:	08005e03 	.word	0x08005e03
 8005b70:	08005e03 	.word	0x08005e03
 8005b74:	08005e03 	.word	0x08005e03
 8005b78:	08005e03 	.word	0x08005e03
 8005b7c:	08005e03 	.word	0x08005e03
 8005b80:	08005beb 	.word	0x08005beb
 8005b84:	08005e03 	.word	0x08005e03
 8005b88:	08005e03 	.word	0x08005e03
 8005b8c:	08005e03 	.word	0x08005e03
 8005b90:	08005e03 	.word	0x08005e03
 8005b94:	08005e03 	.word	0x08005e03
 8005b98:	08005e03 	.word	0x08005e03
 8005b9c:	08005e03 	.word	0x08005e03
 8005ba0:	08005bf1 	.word	0x08005bf1
 8005ba4:	08005e03 	.word	0x08005e03
 8005ba8:	08005e03 	.word	0x08005e03
 8005bac:	08005e03 	.word	0x08005e03
 8005bb0:	08005e03 	.word	0x08005e03
 8005bb4:	08005e03 	.word	0x08005e03
 8005bb8:	08005e03 	.word	0x08005e03
 8005bbc:	08005e03 	.word	0x08005e03
 8005bc0:	08005bf7 	.word	0x08005bf7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bc4:	4b94      	ldr	r3, [pc, #592]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d009      	beq.n	8005be4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bd0:	4b91      	ldr	r3, [pc, #580]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	08db      	lsrs	r3, r3, #3
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	4a90      	ldr	r2, [pc, #576]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005be0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005be2:	e111      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005be4:	4b8d      	ldr	r3, [pc, #564]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005be6:	61bb      	str	r3, [r7, #24]
      break;
 8005be8:	e10e      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005bea:	4b8d      	ldr	r3, [pc, #564]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005bec:	61bb      	str	r3, [r7, #24]
      break;
 8005bee:	e10b      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005bf0:	4b8c      	ldr	r3, [pc, #560]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005bf2:	61bb      	str	r3, [r7, #24]
      break;
 8005bf4:	e108      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bf6:	4b88      	ldr	r3, [pc, #544]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005c00:	4b85      	ldr	r3, [pc, #532]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	091b      	lsrs	r3, r3, #4
 8005c06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c0a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005c0c:	4b82      	ldr	r3, [pc, #520]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005c16:	4b80      	ldr	r3, [pc, #512]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1a:	08db      	lsrs	r3, r3, #3
 8005c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	fb02 f303 	mul.w	r3, r2, r3
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 80e1 	beq.w	8005dfc <HAL_RCC_GetSysClockFreq+0x2b8>
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	f000 8083 	beq.w	8005d48 <HAL_RCC_GetSysClockFreq+0x204>
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	f200 80a1 	bhi.w	8005d8c <HAL_RCC_GetSysClockFreq+0x248>
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_RCC_GetSysClockFreq+0x114>
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d056      	beq.n	8005d04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005c56:	e099      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c58:	4b6f      	ldr	r3, [pc, #444]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0320 	and.w	r3, r3, #32
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d02d      	beq.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c64:	4b6c      	ldr	r3, [pc, #432]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	08db      	lsrs	r3, r3, #3
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	4a6b      	ldr	r2, [pc, #428]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c70:	fa22 f303 	lsr.w	r3, r2, r3
 8005c74:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	ee07 3a90 	vmov	s15, r3
 8005c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8e:	4b62      	ldr	r3, [pc, #392]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c96:	ee07 3a90 	vmov	s15, r3
 8005c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ca2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005cbe:	e087      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005e2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd2:	4b51      	ldr	r3, [pc, #324]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ce6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d02:	e065      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005e30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d16:	4b40      	ldr	r3, [pc, #256]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d2a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d46:	e043      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005e34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5a:	4b2f      	ldr	r3, [pc, #188]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d6e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d8a:	e021      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d96:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005e30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9e:	4b1e      	ldr	r3, [pc, #120]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8005db2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005dce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005dd0:	4b11      	ldr	r3, [pc, #68]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	0a5b      	lsrs	r3, r3, #9
 8005dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dda:	3301      	adds	r3, #1
 8005ddc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	ee07 3a90 	vmov	s15, r3
 8005de4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005de8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df4:	ee17 3a90 	vmov	r3, s15
 8005df8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005dfa:	e005      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61bb      	str	r3, [r7, #24]
      break;
 8005e00:	e002      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005e02:	4b07      	ldr	r3, [pc, #28]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e04:	61bb      	str	r3, [r7, #24]
      break;
 8005e06:	bf00      	nop
  }

  return sysclockfreq;
 8005e08:	69bb      	ldr	r3, [r7, #24]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3724      	adds	r7, #36	; 0x24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	58024400 	.word	0x58024400
 8005e1c:	03d09000 	.word	0x03d09000
 8005e20:	003d0900 	.word	0x003d0900
 8005e24:	02faf080 	.word	0x02faf080
 8005e28:	46000000 	.word	0x46000000
 8005e2c:	4c742400 	.word	0x4c742400
 8005e30:	4a742400 	.word	0x4a742400
 8005e34:	4c3ebc20 	.word	0x4c3ebc20

08005e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005e3e:	f7ff fe81 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 8005e42:	4602      	mov	r2, r0
 8005e44:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <HAL_RCC_GetHCLKFreq+0x50>)
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	0a1b      	lsrs	r3, r3, #8
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	490f      	ldr	r1, [pc, #60]	; (8005e8c <HAL_RCC_GetHCLKFreq+0x54>)
 8005e50:	5ccb      	ldrb	r3, [r1, r3]
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e5c:	4b0a      	ldr	r3, [pc, #40]	; (8005e88 <HAL_RCC_GetHCLKFreq+0x50>)
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <HAL_RCC_GetHCLKFreq+0x54>)
 8005e66:	5cd3      	ldrb	r3, [r2, r3]
 8005e68:	f003 031f 	and.w	r3, r3, #31
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e72:	4a07      	ldr	r2, [pc, #28]	; (8005e90 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e76:	4a07      	ldr	r2, [pc, #28]	; (8005e94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005e7c:	4b04      	ldr	r3, [pc, #16]	; (8005e90 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	58024400 	.word	0x58024400
 8005e8c:	0800c114 	.word	0x0800c114
 8005e90:	24000108 	.word	0x24000108
 8005e94:	24000104 	.word	0x24000104

08005e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005e9c:	f7ff ffcc 	bl	8005e38 <HAL_RCC_GetHCLKFreq>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	091b      	lsrs	r3, r3, #4
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	4904      	ldr	r1, [pc, #16]	; (8005ec0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005eae:	5ccb      	ldrb	r3, [r1, r3]
 8005eb0:	f003 031f 	and.w	r3, r3, #31
 8005eb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	58024400 	.word	0x58024400
 8005ec0:	0800c114 	.word	0x0800c114

08005ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005ec8:	f7ff ffb6 	bl	8005e38 <HAL_RCC_GetHCLKFreq>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	0a1b      	lsrs	r3, r3, #8
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	4904      	ldr	r1, [pc, #16]	; (8005eec <HAL_RCC_GetPCLK2Freq+0x28>)
 8005eda:	5ccb      	ldrb	r3, [r1, r3]
 8005edc:	f003 031f 	and.w	r3, r3, #31
 8005ee0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	58024400 	.word	0x58024400
 8005eec:	0800c114 	.word	0x0800c114

08005ef0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ef4:	b0c6      	sub	sp, #280	; 0x118
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005efc:	2300      	movs	r3, #0
 8005efe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f02:	2300      	movs	r3, #0
 8005f04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f10:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005f14:	2500      	movs	r5, #0
 8005f16:	ea54 0305 	orrs.w	r3, r4, r5
 8005f1a:	d049      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f26:	d02f      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005f28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f2c:	d828      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005f2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f32:	d01a      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f38:	d822      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f42:	d007      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f44:	e01c      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f46:	4bab      	ldr	r3, [pc, #684]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4a:	4aaa      	ldr	r2, [pc, #680]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f52:	e01a      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f58:	3308      	adds	r3, #8
 8005f5a:	2102      	movs	r1, #2
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f001 fc25 	bl	80077ac <RCCEx_PLL2_Config>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f68:	e00f      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f6e:	3328      	adds	r3, #40	; 0x28
 8005f70:	2102      	movs	r1, #2
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 fccc 	bl	8007910 <RCCEx_PLL3_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f7e:	e004      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f86:	e000      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10a      	bne.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005f92:	4b98      	ldr	r3, [pc, #608]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f96:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fa0:	4a94      	ldr	r2, [pc, #592]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	6513      	str	r3, [r2, #80]	; 0x50
 8005fa6:	e003      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005fbc:	f04f 0900 	mov.w	r9, #0
 8005fc0:	ea58 0309 	orrs.w	r3, r8, r9
 8005fc4:	d047      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d82a      	bhi.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005fd0:	a201      	add	r2, pc, #4	; (adr r2, 8005fd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd6:	bf00      	nop
 8005fd8:	08005fed 	.word	0x08005fed
 8005fdc:	08005ffb 	.word	0x08005ffb
 8005fe0:	08006011 	.word	0x08006011
 8005fe4:	0800602f 	.word	0x0800602f
 8005fe8:	0800602f 	.word	0x0800602f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fec:	4b81      	ldr	r3, [pc, #516]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff0:	4a80      	ldr	r2, [pc, #512]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ff8:	e01a      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ffe:	3308      	adds	r3, #8
 8006000:	2100      	movs	r1, #0
 8006002:	4618      	mov	r0, r3
 8006004:	f001 fbd2 	bl	80077ac <RCCEx_PLL2_Config>
 8006008:	4603      	mov	r3, r0
 800600a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800600e:	e00f      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006014:	3328      	adds	r3, #40	; 0x28
 8006016:	2100      	movs	r1, #0
 8006018:	4618      	mov	r0, r3
 800601a:	f001 fc79 	bl	8007910 <RCCEx_PLL3_Config>
 800601e:	4603      	mov	r3, r0
 8006020:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006024:	e004      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800602c:	e000      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800602e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006030:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006038:	4b6e      	ldr	r3, [pc, #440]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800603a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603c:	f023 0107 	bic.w	r1, r3, #7
 8006040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006046:	4a6b      	ldr	r2, [pc, #428]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006048:	430b      	orrs	r3, r1
 800604a:	6513      	str	r3, [r2, #80]	; 0x50
 800604c:	e003      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800604e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006052:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800605a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8006062:	f04f 0b00 	mov.w	fp, #0
 8006066:	ea5a 030b 	orrs.w	r3, sl, fp
 800606a:	d05b      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800606c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006070:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006074:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006078:	d03b      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800607a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800607e:	d834      	bhi.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006080:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006084:	d037      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006086:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800608a:	d82e      	bhi.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800608c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006090:	d033      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006092:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006096:	d828      	bhi.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800609c:	d01a      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800609e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060a2:	d822      	bhi.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80060a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060ac:	d007      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80060ae:	e01c      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060b0:	4b50      	ldr	r3, [pc, #320]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	4a4f      	ldr	r2, [pc, #316]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060bc:	e01e      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c2:	3308      	adds	r3, #8
 80060c4:	2100      	movs	r1, #0
 80060c6:	4618      	mov	r0, r3
 80060c8:	f001 fb70 	bl	80077ac <RCCEx_PLL2_Config>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80060d2:	e013      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d8:	3328      	adds	r3, #40	; 0x28
 80060da:	2100      	movs	r1, #0
 80060dc:	4618      	mov	r0, r3
 80060de:	f001 fc17 	bl	8007910 <RCCEx_PLL3_Config>
 80060e2:	4603      	mov	r3, r0
 80060e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060e8:	e008      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80060f0:	e004      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80060f2:	bf00      	nop
 80060f4:	e002      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80060f6:	bf00      	nop
 80060f8:	e000      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80060fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10b      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006104:	4b3b      	ldr	r3, [pc, #236]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006108:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800610c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006110:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006114:	4a37      	ldr	r2, [pc, #220]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006116:	430b      	orrs	r3, r1
 8006118:	6593      	str	r3, [r2, #88]	; 0x58
 800611a:	e003      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006120:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006130:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006134:	2300      	movs	r3, #0
 8006136:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800613a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800613e:	460b      	mov	r3, r1
 8006140:	4313      	orrs	r3, r2
 8006142:	d05d      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006148:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800614c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006150:	d03b      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006152:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006156:	d834      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006158:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800615c:	d037      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800615e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006162:	d82e      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006164:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006168:	d033      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800616a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800616e:	d828      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006170:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006174:	d01a      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006176:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800617a:	d822      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006184:	d007      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006186:	e01c      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006188:	4b1a      	ldr	r3, [pc, #104]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618c:	4a19      	ldr	r2, [pc, #100]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800618e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006192:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006194:	e01e      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800619a:	3308      	adds	r3, #8
 800619c:	2100      	movs	r1, #0
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 fb04 	bl	80077ac <RCCEx_PLL2_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80061aa:	e013      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061b0:	3328      	adds	r3, #40	; 0x28
 80061b2:	2100      	movs	r1, #0
 80061b4:	4618      	mov	r0, r3
 80061b6:	f001 fbab 	bl	8007910 <RCCEx_PLL3_Config>
 80061ba:	4603      	mov	r3, r0
 80061bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061c0:	e008      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80061c8:	e004      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80061ca:	bf00      	nop
 80061cc:	e002      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80061ce:	bf00      	nop
 80061d0:	e000      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80061d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10d      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80061dc:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80061e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061ec:	4a01      	ldr	r2, [pc, #4]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061ee:	430b      	orrs	r3, r1
 80061f0:	6593      	str	r3, [r2, #88]	; 0x58
 80061f2:	e005      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80061f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800620c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006210:	2300      	movs	r3, #0
 8006212:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006216:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800621a:	460b      	mov	r3, r1
 800621c:	4313      	orrs	r3, r2
 800621e:	d03a      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006226:	2b30      	cmp	r3, #48	; 0x30
 8006228:	d01f      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800622a:	2b30      	cmp	r3, #48	; 0x30
 800622c:	d819      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800622e:	2b20      	cmp	r3, #32
 8006230:	d00c      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006232:	2b20      	cmp	r3, #32
 8006234:	d815      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d019      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800623a:	2b10      	cmp	r3, #16
 800623c:	d111      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800623e:	4baa      	ldr	r3, [pc, #680]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006242:	4aa9      	ldr	r2, [pc, #676]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006248:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800624a:	e011      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800624c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006250:	3308      	adds	r3, #8
 8006252:	2102      	movs	r1, #2
 8006254:	4618      	mov	r0, r3
 8006256:	f001 faa9 	bl	80077ac <RCCEx_PLL2_Config>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006260:	e006      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006268:	e002      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800626a:	bf00      	nop
 800626c:	e000      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800626e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006270:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10a      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006278:	4b9b      	ldr	r3, [pc, #620]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800627a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800627c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006286:	4a98      	ldr	r2, [pc, #608]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006288:	430b      	orrs	r3, r1
 800628a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800628c:	e003      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006292:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80062a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062a6:	2300      	movs	r3, #0
 80062a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062ac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80062b0:	460b      	mov	r3, r1
 80062b2:	4313      	orrs	r3, r2
 80062b4:	d051      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80062b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062c0:	d035      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80062c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062c6:	d82e      	bhi.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80062c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062cc:	d031      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80062ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062d2:	d828      	bhi.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80062d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d8:	d01a      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80062da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062de:	d822      	bhi.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80062e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e8:	d007      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80062ea:	e01c      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062ec:	4b7e      	ldr	r3, [pc, #504]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f0:	4a7d      	ldr	r2, [pc, #500]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062f8:	e01c      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062fe:	3308      	adds	r3, #8
 8006300:	2100      	movs	r1, #0
 8006302:	4618      	mov	r0, r3
 8006304:	f001 fa52 	bl	80077ac <RCCEx_PLL2_Config>
 8006308:	4603      	mov	r3, r0
 800630a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800630e:	e011      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006314:	3328      	adds	r3, #40	; 0x28
 8006316:	2100      	movs	r1, #0
 8006318:	4618      	mov	r0, r3
 800631a:	f001 faf9 	bl	8007910 <RCCEx_PLL3_Config>
 800631e:	4603      	mov	r3, r0
 8006320:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006324:	e006      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800632c:	e002      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800632e:	bf00      	nop
 8006330:	e000      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006334:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10a      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800633c:	4b6a      	ldr	r3, [pc, #424]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800633e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006340:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800634a:	4a67      	ldr	r2, [pc, #412]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800634c:	430b      	orrs	r3, r1
 800634e:	6513      	str	r3, [r2, #80]	; 0x50
 8006350:	e003      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006352:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006356:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800635a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006366:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800636a:	2300      	movs	r3, #0
 800636c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006370:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006374:	460b      	mov	r3, r1
 8006376:	4313      	orrs	r3, r2
 8006378:	d053      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800637a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800637e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006384:	d033      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006386:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800638a:	d82c      	bhi.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800638c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006390:	d02f      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006392:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006396:	d826      	bhi.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006398:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800639c:	d02b      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800639e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063a2:	d820      	bhi.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80063a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063a8:	d012      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80063aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ae:	d81a      	bhi.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d022      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80063b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063b8:	d115      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063be:	3308      	adds	r3, #8
 80063c0:	2101      	movs	r1, #1
 80063c2:	4618      	mov	r0, r3
 80063c4:	f001 f9f2 	bl	80077ac <RCCEx_PLL2_Config>
 80063c8:	4603      	mov	r3, r0
 80063ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063ce:	e015      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d4:	3328      	adds	r3, #40	; 0x28
 80063d6:	2101      	movs	r1, #1
 80063d8:	4618      	mov	r0, r3
 80063da:	f001 fa99 	bl	8007910 <RCCEx_PLL3_Config>
 80063de:	4603      	mov	r3, r0
 80063e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063e4:	e00a      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80063ec:	e006      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80063ee:	bf00      	nop
 80063f0:	e004      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80063f2:	bf00      	nop
 80063f4:	e002      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80063f6:	bf00      	nop
 80063f8:	e000      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80063fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10a      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006404:	4b38      	ldr	r3, [pc, #224]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006408:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800640c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006412:	4a35      	ldr	r2, [pc, #212]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006414:	430b      	orrs	r3, r1
 8006416:	6513      	str	r3, [r2, #80]	; 0x50
 8006418:	e003      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800641e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800642e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006432:	2300      	movs	r3, #0
 8006434:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006438:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800643c:	460b      	mov	r3, r1
 800643e:	4313      	orrs	r3, r2
 8006440:	d058      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006446:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800644a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800644e:	d033      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006454:	d82c      	bhi.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645a:	d02f      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800645c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006460:	d826      	bhi.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006462:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006466:	d02b      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006468:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800646c:	d820      	bhi.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800646e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006472:	d012      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006478:	d81a      	bhi.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800647a:	2b00      	cmp	r3, #0
 800647c:	d022      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800647e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006482:	d115      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006488:	3308      	adds	r3, #8
 800648a:	2101      	movs	r1, #1
 800648c:	4618      	mov	r0, r3
 800648e:	f001 f98d 	bl	80077ac <RCCEx_PLL2_Config>
 8006492:	4603      	mov	r3, r0
 8006494:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006498:	e015      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800649a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800649e:	3328      	adds	r3, #40	; 0x28
 80064a0:	2101      	movs	r1, #1
 80064a2:	4618      	mov	r0, r3
 80064a4:	f001 fa34 	bl	8007910 <RCCEx_PLL3_Config>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80064ae:	e00a      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80064b6:	e006      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064b8:	bf00      	nop
 80064ba:	e004      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064bc:	bf00      	nop
 80064be:	e002      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064c0:	bf00      	nop
 80064c2:	e000      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10e      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80064ce:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80064d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80064de:	4a02      	ldr	r2, [pc, #8]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064e0:	430b      	orrs	r3, r1
 80064e2:	6593      	str	r3, [r2, #88]	; 0x58
 80064e4:	e006      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80064e6:	bf00      	nop
 80064e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80064f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006500:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006504:	2300      	movs	r3, #0
 8006506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800650a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800650e:	460b      	mov	r3, r1
 8006510:	4313      	orrs	r3, r2
 8006512:	d037      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800651a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800651e:	d00e      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006524:	d816      	bhi.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006526:	2b00      	cmp	r3, #0
 8006528:	d018      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800652a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800652e:	d111      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006530:	4bc4      	ldr	r3, [pc, #784]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	4ac3      	ldr	r2, [pc, #780]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800653a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800653c:	e00f      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800653e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006542:	3308      	adds	r3, #8
 8006544:	2101      	movs	r1, #1
 8006546:	4618      	mov	r0, r3
 8006548:	f001 f930 	bl	80077ac <RCCEx_PLL2_Config>
 800654c:	4603      	mov	r3, r0
 800654e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006552:	e004      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800655a:	e000      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800655c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800655e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006566:	4bb7      	ldr	r3, [pc, #732]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800656a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800656e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006574:	4ab3      	ldr	r2, [pc, #716]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006576:	430b      	orrs	r3, r1
 8006578:	6513      	str	r3, [r2, #80]	; 0x50
 800657a:	e003      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006580:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006590:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006594:	2300      	movs	r3, #0
 8006596:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800659a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800659e:	460b      	mov	r3, r1
 80065a0:	4313      	orrs	r3, r2
 80065a2:	d039      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80065a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d81c      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80065ae:	a201      	add	r2, pc, #4	; (adr r2, 80065b4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80065b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b4:	080065f1 	.word	0x080065f1
 80065b8:	080065c5 	.word	0x080065c5
 80065bc:	080065d3 	.word	0x080065d3
 80065c0:	080065f1 	.word	0x080065f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065c4:	4b9f      	ldr	r3, [pc, #636]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	4a9e      	ldr	r2, [pc, #632]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80065d0:	e00f      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d6:	3308      	adds	r3, #8
 80065d8:	2102      	movs	r1, #2
 80065da:	4618      	mov	r0, r3
 80065dc:	f001 f8e6 	bl	80077ac <RCCEx_PLL2_Config>
 80065e0:	4603      	mov	r3, r0
 80065e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80065e6:	e004      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80065ee:	e000      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80065f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10a      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80065fa:	4b92      	ldr	r3, [pc, #584]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065fe:	f023 0103 	bic.w	r1, r3, #3
 8006602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006608:	4a8e      	ldr	r2, [pc, #568]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800660a:	430b      	orrs	r3, r1
 800660c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800660e:	e003      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006610:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006614:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006624:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006628:	2300      	movs	r3, #0
 800662a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800662e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006632:	460b      	mov	r3, r1
 8006634:	4313      	orrs	r3, r2
 8006636:	f000 8099 	beq.w	800676c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800663a:	4b83      	ldr	r3, [pc, #524]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a82      	ldr	r2, [pc, #520]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006644:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006646:	f7fb fcef 	bl	8002028 <HAL_GetTick>
 800664a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800664e:	e00b      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006650:	f7fb fcea 	bl	8002028 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b64      	cmp	r3, #100	; 0x64
 800665e:	d903      	bls.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006666:	e005      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006668:	4b77      	ldr	r3, [pc, #476]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0ed      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006674:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006678:	2b00      	cmp	r3, #0
 800667a:	d173      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800667c:	4b71      	ldr	r3, [pc, #452]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800667e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006684:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006688:	4053      	eors	r3, r2
 800668a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668e:	2b00      	cmp	r3, #0
 8006690:	d015      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006692:	4b6c      	ldr	r3, [pc, #432]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800669a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800669e:	4b69      	ldr	r3, [pc, #420]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a2:	4a68      	ldr	r2, [pc, #416]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066a8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066aa:	4b66      	ldr	r3, [pc, #408]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	4a65      	ldr	r2, [pc, #404]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066b4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80066b6:	4a63      	ldr	r2, [pc, #396]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066bc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80066be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ca:	d118      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066cc:	f7fb fcac 	bl	8002028 <HAL_GetTick>
 80066d0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066d4:	e00d      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066d6:	f7fb fca7 	bl	8002028 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80066e0:	1ad2      	subs	r2, r2, r3
 80066e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d903      	bls.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80066f0:	e005      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066f2:	4b54      	ldr	r3, [pc, #336]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0eb      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80066fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006702:	2b00      	cmp	r3, #0
 8006704:	d129      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800670e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006716:	d10e      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006718:	4b4a      	ldr	r3, [pc, #296]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006724:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006728:	091a      	lsrs	r2, r3, #4
 800672a:	4b48      	ldr	r3, [pc, #288]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800672c:	4013      	ands	r3, r2
 800672e:	4a45      	ldr	r2, [pc, #276]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006730:	430b      	orrs	r3, r1
 8006732:	6113      	str	r3, [r2, #16]
 8006734:	e005      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006736:	4b43      	ldr	r3, [pc, #268]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	4a42      	ldr	r2, [pc, #264]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800673c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006740:	6113      	str	r3, [r2, #16]
 8006742:	4b40      	ldr	r3, [pc, #256]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006744:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800674a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800674e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006752:	4a3c      	ldr	r2, [pc, #240]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006754:	430b      	orrs	r3, r1
 8006756:	6713      	str	r3, [r2, #112]	; 0x70
 8006758:	e008      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800675a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800675e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8006762:	e003      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006764:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006768:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800676c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	f002 0301 	and.w	r3, r2, #1
 8006778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800677c:	2300      	movs	r3, #0
 800677e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006782:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006786:	460b      	mov	r3, r1
 8006788:	4313      	orrs	r3, r2
 800678a:	f000 808f 	beq.w	80068ac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800678e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006794:	2b28      	cmp	r3, #40	; 0x28
 8006796:	d871      	bhi.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006798:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	08006885 	.word	0x08006885
 80067a4:	0800687d 	.word	0x0800687d
 80067a8:	0800687d 	.word	0x0800687d
 80067ac:	0800687d 	.word	0x0800687d
 80067b0:	0800687d 	.word	0x0800687d
 80067b4:	0800687d 	.word	0x0800687d
 80067b8:	0800687d 	.word	0x0800687d
 80067bc:	0800687d 	.word	0x0800687d
 80067c0:	08006851 	.word	0x08006851
 80067c4:	0800687d 	.word	0x0800687d
 80067c8:	0800687d 	.word	0x0800687d
 80067cc:	0800687d 	.word	0x0800687d
 80067d0:	0800687d 	.word	0x0800687d
 80067d4:	0800687d 	.word	0x0800687d
 80067d8:	0800687d 	.word	0x0800687d
 80067dc:	0800687d 	.word	0x0800687d
 80067e0:	08006867 	.word	0x08006867
 80067e4:	0800687d 	.word	0x0800687d
 80067e8:	0800687d 	.word	0x0800687d
 80067ec:	0800687d 	.word	0x0800687d
 80067f0:	0800687d 	.word	0x0800687d
 80067f4:	0800687d 	.word	0x0800687d
 80067f8:	0800687d 	.word	0x0800687d
 80067fc:	0800687d 	.word	0x0800687d
 8006800:	08006885 	.word	0x08006885
 8006804:	0800687d 	.word	0x0800687d
 8006808:	0800687d 	.word	0x0800687d
 800680c:	0800687d 	.word	0x0800687d
 8006810:	0800687d 	.word	0x0800687d
 8006814:	0800687d 	.word	0x0800687d
 8006818:	0800687d 	.word	0x0800687d
 800681c:	0800687d 	.word	0x0800687d
 8006820:	08006885 	.word	0x08006885
 8006824:	0800687d 	.word	0x0800687d
 8006828:	0800687d 	.word	0x0800687d
 800682c:	0800687d 	.word	0x0800687d
 8006830:	0800687d 	.word	0x0800687d
 8006834:	0800687d 	.word	0x0800687d
 8006838:	0800687d 	.word	0x0800687d
 800683c:	0800687d 	.word	0x0800687d
 8006840:	08006885 	.word	0x08006885
 8006844:	58024400 	.word	0x58024400
 8006848:	58024800 	.word	0x58024800
 800684c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006854:	3308      	adds	r3, #8
 8006856:	2101      	movs	r1, #1
 8006858:	4618      	mov	r0, r3
 800685a:	f000 ffa7 	bl	80077ac <RCCEx_PLL2_Config>
 800685e:	4603      	mov	r3, r0
 8006860:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006864:	e00f      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800686a:	3328      	adds	r3, #40	; 0x28
 800686c:	2101      	movs	r1, #1
 800686e:	4618      	mov	r0, r3
 8006870:	f001 f84e 	bl	8007910 <RCCEx_PLL3_Config>
 8006874:	4603      	mov	r3, r0
 8006876:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800687a:	e004      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006882:	e000      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006886:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800688e:	4bbf      	ldr	r3, [pc, #764]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006892:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800689c:	4abb      	ldr	r2, [pc, #748]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800689e:	430b      	orrs	r3, r1
 80068a0:	6553      	str	r3, [r2, #84]	; 0x54
 80068a2:	e003      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80068ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b4:	f002 0302 	and.w	r3, r2, #2
 80068b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068bc:	2300      	movs	r3, #0
 80068be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4313      	orrs	r3, r2
 80068ca:	d041      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80068cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d2:	2b05      	cmp	r3, #5
 80068d4:	d824      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80068d6:	a201      	add	r2, pc, #4	; (adr r2, 80068dc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80068d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068dc:	08006929 	.word	0x08006929
 80068e0:	080068f5 	.word	0x080068f5
 80068e4:	0800690b 	.word	0x0800690b
 80068e8:	08006929 	.word	0x08006929
 80068ec:	08006929 	.word	0x08006929
 80068f0:	08006929 	.word	0x08006929
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f8:	3308      	adds	r3, #8
 80068fa:	2101      	movs	r1, #1
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 ff55 	bl	80077ac <RCCEx_PLL2_Config>
 8006902:	4603      	mov	r3, r0
 8006904:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006908:	e00f      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800690a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690e:	3328      	adds	r3, #40	; 0x28
 8006910:	2101      	movs	r1, #1
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fffc 	bl	8007910 <RCCEx_PLL3_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800691e:	e004      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006926:	e000      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800692a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006932:	4b96      	ldr	r3, [pc, #600]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006936:	f023 0107 	bic.w	r1, r3, #7
 800693a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800693e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006940:	4a92      	ldr	r2, [pc, #584]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006942:	430b      	orrs	r3, r1
 8006944:	6553      	str	r3, [r2, #84]	; 0x54
 8006946:	e003      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006948:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800694c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006958:	f002 0304 	and.w	r3, r2, #4
 800695c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006960:	2300      	movs	r3, #0
 8006962:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006966:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800696a:	460b      	mov	r3, r1
 800696c:	4313      	orrs	r3, r2
 800696e:	d044      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006978:	2b05      	cmp	r3, #5
 800697a:	d825      	bhi.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800697c:	a201      	add	r2, pc, #4	; (adr r2, 8006984 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800697e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006982:	bf00      	nop
 8006984:	080069d1 	.word	0x080069d1
 8006988:	0800699d 	.word	0x0800699d
 800698c:	080069b3 	.word	0x080069b3
 8006990:	080069d1 	.word	0x080069d1
 8006994:	080069d1 	.word	0x080069d1
 8006998:	080069d1 	.word	0x080069d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800699c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a0:	3308      	adds	r3, #8
 80069a2:	2101      	movs	r1, #1
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 ff01 	bl	80077ac <RCCEx_PLL2_Config>
 80069aa:	4603      	mov	r3, r0
 80069ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80069b0:	e00f      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b6:	3328      	adds	r3, #40	; 0x28
 80069b8:	2101      	movs	r1, #1
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 ffa8 	bl	8007910 <RCCEx_PLL3_Config>
 80069c0:	4603      	mov	r3, r0
 80069c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80069c6:	e004      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80069ce:	e000      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80069d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10b      	bne.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069da:	4b6c      	ldr	r3, [pc, #432]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069de:	f023 0107 	bic.w	r1, r3, #7
 80069e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ea:	4a68      	ldr	r2, [pc, #416]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069ec:	430b      	orrs	r3, r1
 80069ee:	6593      	str	r3, [r2, #88]	; 0x58
 80069f0:	e003      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	f002 0320 	and.w	r3, r2, #32
 8006a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a10:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006a14:	460b      	mov	r3, r1
 8006a16:	4313      	orrs	r3, r2
 8006a18:	d055      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a26:	d033      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a2c:	d82c      	bhi.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a32:	d02f      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a38:	d826      	bhi.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006a3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a3e:	d02b      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006a40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a44:	d820      	bhi.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a4a:	d012      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a50:	d81a      	bhi.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d022      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006a56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a5a:	d115      	bne.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a60:	3308      	adds	r3, #8
 8006a62:	2100      	movs	r1, #0
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fea1 	bl	80077ac <RCCEx_PLL2_Config>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006a70:	e015      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a76:	3328      	adds	r3, #40	; 0x28
 8006a78:	2102      	movs	r1, #2
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 ff48 	bl	8007910 <RCCEx_PLL3_Config>
 8006a80:	4603      	mov	r3, r0
 8006a82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006a86:	e00a      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a8e:	e006      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a90:	bf00      	nop
 8006a92:	e004      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a94:	bf00      	nop
 8006a96:	e002      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a98:	bf00      	nop
 8006a9a:	e000      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10b      	bne.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006aa6:	4b39      	ldr	r3, [pc, #228]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aaa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ab6:	4a35      	ldr	r2, [pc, #212]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ab8:	430b      	orrs	r3, r1
 8006aba:	6553      	str	r3, [r2, #84]	; 0x54
 8006abc:	e003      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006abe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ac2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006ad2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006adc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	d058      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006aee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006af2:	d033      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006af4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006af8:	d82c      	bhi.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afe:	d02f      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b04:	d826      	bhi.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006b06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b0a:	d02b      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006b0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b10:	d820      	bhi.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b16:	d012      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b1c:	d81a      	bhi.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d022      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b26:	d115      	bne.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	2100      	movs	r1, #0
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 fe3b 	bl	80077ac <RCCEx_PLL2_Config>
 8006b36:	4603      	mov	r3, r0
 8006b38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b3c:	e015      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b42:	3328      	adds	r3, #40	; 0x28
 8006b44:	2102      	movs	r1, #2
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fee2 	bl	8007910 <RCCEx_PLL3_Config>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b52:	e00a      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b5a:	e006      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b5c:	bf00      	nop
 8006b5e:	e004      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b60:	bf00      	nop
 8006b62:	e002      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b64:	bf00      	nop
 8006b66:	e000      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10e      	bne.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b72:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b76:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b82:	4a02      	ldr	r2, [pc, #8]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b84:	430b      	orrs	r3, r1
 8006b86:	6593      	str	r3, [r2, #88]	; 0x58
 8006b88:	e006      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006b8a:	bf00      	nop
 8006b8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006ba4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006bae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	d055      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bc0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006bc4:	d033      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006bc6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006bca:	d82c      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd0:	d02f      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd6:	d826      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006bd8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006bdc:	d02b      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006bde:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006be2:	d820      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006be8:	d012      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006bea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bee:	d81a      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d022      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bf8:	d115      	bne.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bfe:	3308      	adds	r3, #8
 8006c00:	2100      	movs	r1, #0
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 fdd2 	bl	80077ac <RCCEx_PLL2_Config>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c0e:	e015      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c14:	3328      	adds	r3, #40	; 0x28
 8006c16:	2102      	movs	r1, #2
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 fe79 	bl	8007910 <RCCEx_PLL3_Config>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c24:	e00a      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c2c:	e006      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006c2e:	bf00      	nop
 8006c30:	e004      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006c32:	bf00      	nop
 8006c34:	e002      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006c36:	bf00      	nop
 8006c38:	e000      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10b      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c44:	4ba0      	ldr	r3, [pc, #640]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c48:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c54:	4a9c      	ldr	r2, [pc, #624]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c56:	430b      	orrs	r3, r1
 8006c58:	6593      	str	r3, [r2, #88]	; 0x58
 8006c5a:	e003      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6c:	f002 0308 	and.w	r3, r2, #8
 8006c70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c74:	2300      	movs	r3, #0
 8006c76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006c7a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4313      	orrs	r3, r2
 8006c82:	d01e      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c90:	d10c      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c96:	3328      	adds	r3, #40	; 0x28
 8006c98:	2102      	movs	r1, #2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fe38 	bl	8007910 <RCCEx_PLL3_Config>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006cac:	4b86      	ldr	r3, [pc, #536]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cbc:	4a82      	ldr	r2, [pc, #520]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cbe:	430b      	orrs	r3, r1
 8006cc0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	f002 0310 	and.w	r3, r2, #16
 8006cce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cd8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	d01e      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cee:	d10c      	bne.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf4:	3328      	adds	r3, #40	; 0x28
 8006cf6:	2102      	movs	r1, #2
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 fe09 	bl	8007910 <RCCEx_PLL3_Config>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d0a:	4b6f      	ldr	r3, [pc, #444]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d1a:	4a6b      	ldr	r2, [pc, #428]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006d2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d2e:	2300      	movs	r3, #0
 8006d30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d32:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006d36:	460b      	mov	r3, r1
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	d03e      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d48:	d022      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006d4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d4e:	d81b      	bhi.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d58:	d00b      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006d5a:	e015      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d60:	3308      	adds	r3, #8
 8006d62:	2100      	movs	r1, #0
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fd21 	bl	80077ac <RCCEx_PLL2_Config>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006d70:	e00f      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d76:	3328      	adds	r3, #40	; 0x28
 8006d78:	2102      	movs	r1, #2
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fdc8 	bl	8007910 <RCCEx_PLL3_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006d86:	e004      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006d8e:	e000      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10b      	bne.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d9a:	4b4b      	ldr	r3, [pc, #300]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d9e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006daa:	4a47      	ldr	r2, [pc, #284]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dac:	430b      	orrs	r3, r1
 8006dae:	6593      	str	r3, [r2, #88]	; 0x58
 8006db0:	e003      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006db6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006dc6:	673b      	str	r3, [r7, #112]	; 0x70
 8006dc8:	2300      	movs	r3, #0
 8006dca:	677b      	str	r3, [r7, #116]	; 0x74
 8006dcc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	d03b      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006de2:	d01f      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006de4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006de8:	d818      	bhi.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dee:	d003      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006df0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006df4:	d007      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006df6:	e011      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006df8:	4b33      	ldr	r3, [pc, #204]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	4a32      	ldr	r2, [pc, #200]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e04:	e00f      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e0a:	3328      	adds	r3, #40	; 0x28
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fd7e 	bl	8007910 <RCCEx_PLL3_Config>
 8006e14:	4603      	mov	r3, r0
 8006e16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e1a:	e004      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006e22:	e000      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10b      	bne.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e2e:	4b26      	ldr	r3, [pc, #152]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e32:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e3e:	4a22      	ldr	r2, [pc, #136]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e40:	430b      	orrs	r3, r1
 8006e42:	6553      	str	r3, [r2, #84]	; 0x54
 8006e44:	e003      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e4a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006e5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e60:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006e64:	460b      	mov	r3, r1
 8006e66:	4313      	orrs	r3, r2
 8006e68:	d034      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e78:	d007      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006e7a:	e011      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e7c:	4b12      	ldr	r3, [pc, #72]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	4a11      	ldr	r2, [pc, #68]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006e88:	e00e      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e8e:	3308      	adds	r3, #8
 8006e90:	2102      	movs	r1, #2
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fc8a 	bl	80077ac <RCCEx_PLL2_Config>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006e9e:	e003      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ea8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10d      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006eb0:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ebe:	4a02      	ldr	r2, [pc, #8]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ec4:	e006      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006ec6:	bf00      	nop
 8006ec8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ed0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006edc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006ee0:	663b      	str	r3, [r7, #96]	; 0x60
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	667b      	str	r3, [r7, #100]	; 0x64
 8006ee6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006eea:	460b      	mov	r3, r1
 8006eec:	4313      	orrs	r3, r2
 8006eee:	d00c      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef4:	3328      	adds	r3, #40	; 0x28
 8006ef6:	2102      	movs	r1, #2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 fd09 	bl	8007910 <RCCEx_PLL3_Config>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f12:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006f16:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f18:	2300      	movs	r3, #0
 8006f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f1c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006f20:	460b      	mov	r3, r1
 8006f22:	4313      	orrs	r3, r2
 8006f24:	d036      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f30:	d018      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f36:	d811      	bhi.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f3c:	d014      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f42:	d80b      	bhi.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d011      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f4c:	d106      	bne.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f4e:	4bb7      	ldr	r3, [pc, #732]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f52:	4ab6      	ldr	r2, [pc, #728]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006f5a:	e008      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006f62:	e004      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006f64:	bf00      	nop
 8006f66:	e002      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006f68:	bf00      	nop
 8006f6a:	e000      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10a      	bne.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f76:	4bad      	ldr	r3, [pc, #692]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f84:	4aa9      	ldr	r2, [pc, #676]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f86:	430b      	orrs	r3, r1
 8006f88:	6553      	str	r3, [r2, #84]	; 0x54
 8006f8a:	e003      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006fa0:	653b      	str	r3, [r7, #80]	; 0x50
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	657b      	str	r3, [r7, #84]	; 0x54
 8006fa6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006faa:	460b      	mov	r3, r1
 8006fac:	4313      	orrs	r3, r2
 8006fae:	d009      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006fb0:	4b9e      	ldr	r3, [pc, #632]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fbe:	4a9b      	ldr	r2, [pc, #620]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fc0:	430b      	orrs	r3, r1
 8006fc2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fcc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006fd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fd6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	d009      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006fe0:	4b92      	ldr	r3, [pc, #584]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fee:	4a8f      	ldr	r2, [pc, #572]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ff0:	430b      	orrs	r3, r1
 8006ff2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007000:	643b      	str	r3, [r7, #64]	; 0x40
 8007002:	2300      	movs	r3, #0
 8007004:	647b      	str	r3, [r7, #68]	; 0x44
 8007006:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800700a:	460b      	mov	r3, r1
 800700c:	4313      	orrs	r3, r2
 800700e:	d00e      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007010:	4b86      	ldr	r3, [pc, #536]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	4a85      	ldr	r2, [pc, #532]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007016:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800701a:	6113      	str	r3, [r2, #16]
 800701c:	4b83      	ldr	r3, [pc, #524]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800701e:	6919      	ldr	r1, [r3, #16]
 8007020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007024:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007028:	4a80      	ldr	r2, [pc, #512]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800702a:	430b      	orrs	r3, r1
 800702c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800702e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007036:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800703a:	63bb      	str	r3, [r7, #56]	; 0x38
 800703c:	2300      	movs	r3, #0
 800703e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007040:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007044:	460b      	mov	r3, r1
 8007046:	4313      	orrs	r3, r2
 8007048:	d009      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800704a:	4b78      	ldr	r3, [pc, #480]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800704c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800704e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007058:	4a74      	ldr	r2, [pc, #464]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800705a:	430b      	orrs	r3, r1
 800705c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800705e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800706a:	633b      	str	r3, [r7, #48]	; 0x30
 800706c:	2300      	movs	r3, #0
 800706e:	637b      	str	r3, [r7, #52]	; 0x34
 8007070:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007074:	460b      	mov	r3, r1
 8007076:	4313      	orrs	r3, r2
 8007078:	d00a      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800707a:	4b6c      	ldr	r3, [pc, #432]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800707c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800708a:	4a68      	ldr	r2, [pc, #416]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800708c:	430b      	orrs	r3, r1
 800708e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	2100      	movs	r1, #0
 800709a:	62b9      	str	r1, [r7, #40]	; 0x28
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070a2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80070a6:	460b      	mov	r3, r1
 80070a8:	4313      	orrs	r3, r2
 80070aa:	d011      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b0:	3308      	adds	r3, #8
 80070b2:	2100      	movs	r1, #0
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 fb79 	bl	80077ac <RCCEx_PLL2_Config>
 80070ba:	4603      	mov	r3, r0
 80070bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80070c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80070d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d8:	2100      	movs	r1, #0
 80070da:	6239      	str	r1, [r7, #32]
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	627b      	str	r3, [r7, #36]	; 0x24
 80070e2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80070e6:	460b      	mov	r3, r1
 80070e8:	4313      	orrs	r3, r2
 80070ea:	d011      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f0:	3308      	adds	r3, #8
 80070f2:	2101      	movs	r1, #1
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 fb59 	bl	80077ac <RCCEx_PLL2_Config>
 80070fa:	4603      	mov	r3, r0
 80070fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007100:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007108:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800710c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	2100      	movs	r1, #0
 800711a:	61b9      	str	r1, [r7, #24]
 800711c:	f003 0304 	and.w	r3, r3, #4
 8007120:	61fb      	str	r3, [r7, #28]
 8007122:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007126:	460b      	mov	r3, r1
 8007128:	4313      	orrs	r3, r2
 800712a:	d011      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800712c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007130:	3308      	adds	r3, #8
 8007132:	2102      	movs	r1, #2
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fb39 	bl	80077ac <RCCEx_PLL2_Config>
 800713a:	4603      	mov	r3, r0
 800713c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007140:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007144:	2b00      	cmp	r3, #0
 8007146:	d003      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007148:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800714c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	2100      	movs	r1, #0
 800715a:	6139      	str	r1, [r7, #16]
 800715c:	f003 0308 	and.w	r3, r3, #8
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007166:	460b      	mov	r3, r1
 8007168:	4313      	orrs	r3, r2
 800716a:	d011      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800716c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007170:	3328      	adds	r3, #40	; 0x28
 8007172:	2100      	movs	r1, #0
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fbcb 	bl	8007910 <RCCEx_PLL3_Config>
 800717a:	4603      	mov	r3, r0
 800717c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8007180:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007188:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800718c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	2100      	movs	r1, #0
 800719a:	60b9      	str	r1, [r7, #8]
 800719c:	f003 0310 	and.w	r3, r3, #16
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80071a6:	460b      	mov	r3, r1
 80071a8:	4313      	orrs	r3, r2
 80071aa:	d011      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b0:	3328      	adds	r3, #40	; 0x28
 80071b2:	2101      	movs	r1, #1
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 fbab 	bl	8007910 <RCCEx_PLL3_Config>
 80071ba:	4603      	mov	r3, r0
 80071bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80071c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d003      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80071d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d8:	2100      	movs	r1, #0
 80071da:	6039      	str	r1, [r7, #0]
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	607b      	str	r3, [r7, #4]
 80071e2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80071e6:	460b      	mov	r3, r1
 80071e8:	4313      	orrs	r3, r2
 80071ea:	d011      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f0:	3328      	adds	r3, #40	; 0x28
 80071f2:	2102      	movs	r1, #2
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 fb8b 	bl	8007910 <RCCEx_PLL3_Config>
 80071fa:	4603      	mov	r3, r0
 80071fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007208:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800720c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8007210:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	e000      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
}
 800721e:	4618      	mov	r0, r3
 8007220:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007224:	46bd      	mov	sp, r7
 8007226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800722a:	bf00      	nop
 800722c:	58024400 	.word	0x58024400

08007230 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007234:	f7fe fe00 	bl	8005e38 <HAL_RCC_GetHCLKFreq>
 8007238:	4602      	mov	r2, r0
 800723a:	4b06      	ldr	r3, [pc, #24]	; (8007254 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	091b      	lsrs	r3, r3, #4
 8007240:	f003 0307 	and.w	r3, r3, #7
 8007244:	4904      	ldr	r1, [pc, #16]	; (8007258 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007246:	5ccb      	ldrb	r3, [r1, r3]
 8007248:	f003 031f 	and.w	r3, r3, #31
 800724c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007250:	4618      	mov	r0, r3
 8007252:	bd80      	pop	{r7, pc}
 8007254:	58024400 	.word	0x58024400
 8007258:	0800c114 	.word	0x0800c114

0800725c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800725c:	b480      	push	{r7}
 800725e:	b089      	sub	sp, #36	; 0x24
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007264:	4ba1      	ldr	r3, [pc, #644]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007268:	f003 0303 	and.w	r3, r3, #3
 800726c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800726e:	4b9f      	ldr	r3, [pc, #636]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007272:	0b1b      	lsrs	r3, r3, #12
 8007274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007278:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800727a:	4b9c      	ldr	r3, [pc, #624]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800727c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727e:	091b      	lsrs	r3, r3, #4
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007286:	4b99      	ldr	r3, [pc, #612]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728a:	08db      	lsrs	r3, r3, #3
 800728c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	fb02 f303 	mul.w	r3, r2, r3
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 8111 	beq.w	80074cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	f000 8083 	beq.w	80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	f200 80a1 	bhi.w	80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d056      	beq.n	8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80072c6:	e099      	b.n	80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072c8:	4b88      	ldr	r3, [pc, #544]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0320 	and.w	r3, r3, #32
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d02d      	beq.n	8007330 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072d4:	4b85      	ldr	r3, [pc, #532]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	08db      	lsrs	r3, r3, #3
 80072da:	f003 0303 	and.w	r3, r3, #3
 80072de:	4a84      	ldr	r2, [pc, #528]	; (80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80072e0:	fa22 f303 	lsr.w	r3, r2, r3
 80072e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	ee07 3a90 	vmov	s15, r3
 80072ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072fe:	4b7b      	ldr	r3, [pc, #492]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800730e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007312:	eddf 5a78 	vldr	s11, [pc, #480]	; 80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800731a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800731e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800732e:	e087      	b.n	8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800733e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007342:	4b6a      	ldr	r3, [pc, #424]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007352:	ed97 6a03 	vldr	s12, [r7, #12]
 8007356:	eddf 5a67 	vldr	s11, [pc, #412]	; 80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800735a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800736a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007372:	e065      	b.n	8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007386:	4b59      	ldr	r3, [pc, #356]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007396:	ed97 6a03 	vldr	s12, [r7, #12]
 800739a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800739e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073b6:	e043      	b.n	8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	ee07 3a90 	vmov	s15, r3
 80073be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007500 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80073c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ca:	4b48      	ldr	r3, [pc, #288]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073da:	ed97 6a03 	vldr	s12, [r7, #12]
 80073de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073fa:	e021      	b.n	8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007406:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800740a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800740e:	4b37      	ldr	r3, [pc, #220]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007422:	eddf 5a34 	vldr	s11, [pc, #208]	; 80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800742a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800742e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800743a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800743e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007440:	4b2a      	ldr	r3, [pc, #168]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007444:	0a5b      	lsrs	r3, r3, #9
 8007446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007456:	ee37 7a87 	vadd.f32	s14, s15, s14
 800745a:	edd7 6a07 	vldr	s13, [r7, #28]
 800745e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007466:	ee17 2a90 	vmov	r2, s15
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800746e:	4b1f      	ldr	r3, [pc, #124]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	0c1b      	lsrs	r3, r3, #16
 8007474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007478:	ee07 3a90 	vmov	s15, r3
 800747c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007480:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007484:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007488:	edd7 6a07 	vldr	s13, [r7, #28]
 800748c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007494:	ee17 2a90 	vmov	r2, s15
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800749c:	4b13      	ldr	r3, [pc, #76]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a0:	0e1b      	lsrs	r3, r3, #24
 80074a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80074ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074c2:	ee17 2a90 	vmov	r2, s15
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80074ca:	e008      	b.n	80074de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	609a      	str	r2, [r3, #8]
}
 80074de:	bf00      	nop
 80074e0:	3724      	adds	r7, #36	; 0x24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	58024400 	.word	0x58024400
 80074f0:	03d09000 	.word	0x03d09000
 80074f4:	46000000 	.word	0x46000000
 80074f8:	4c742400 	.word	0x4c742400
 80074fc:	4a742400 	.word	0x4a742400
 8007500:	4c3ebc20 	.word	0x4c3ebc20

08007504 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007504:	b480      	push	{r7}
 8007506:	b089      	sub	sp, #36	; 0x24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800750c:	4ba1      	ldr	r3, [pc, #644]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800750e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007510:	f003 0303 	and.w	r3, r3, #3
 8007514:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007516:	4b9f      	ldr	r3, [pc, #636]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751a:	0d1b      	lsrs	r3, r3, #20
 800751c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007520:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007522:	4b9c      	ldr	r3, [pc, #624]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007526:	0a1b      	lsrs	r3, r3, #8
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800752e:	4b99      	ldr	r3, [pc, #612]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007532:	08db      	lsrs	r3, r3, #3
 8007534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	fb02 f303 	mul.w	r3, r2, r3
 800753e:	ee07 3a90 	vmov	s15, r3
 8007542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007546:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 8111 	beq.w	8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	2b02      	cmp	r3, #2
 8007556:	f000 8083 	beq.w	8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	2b02      	cmp	r3, #2
 800755e:	f200 80a1 	bhi.w	80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d003      	beq.n	8007570 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d056      	beq.n	800761c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800756e:	e099      	b.n	80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007570:	4b88      	ldr	r3, [pc, #544]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0320 	and.w	r3, r3, #32
 8007578:	2b00      	cmp	r3, #0
 800757a:	d02d      	beq.n	80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800757c:	4b85      	ldr	r3, [pc, #532]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	08db      	lsrs	r3, r3, #3
 8007582:	f003 0303 	and.w	r3, r3, #3
 8007586:	4a84      	ldr	r2, [pc, #528]	; (8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007588:	fa22 f303 	lsr.w	r3, r2, r3
 800758c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	ee07 3a90 	vmov	s15, r3
 8007594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a6:	4b7b      	ldr	r3, [pc, #492]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800779c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075d6:	e087      	b.n	80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80075e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ea:	4b6a      	ldr	r3, [pc, #424]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80075fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800779c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800760e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800761a:	e065      	b.n	80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	ee07 3a90 	vmov	s15, r3
 8007622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007626:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800762a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800762e:	4b59      	ldr	r3, [pc, #356]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800763e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007642:	eddf 5a56 	vldr	s11, [pc, #344]	; 800779c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800764a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800764e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800765e:	e043      	b.n	80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80077a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800766e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007672:	4b48      	ldr	r3, [pc, #288]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007682:	ed97 6a03 	vldr	s12, [r7, #12]
 8007686:	eddf 5a45 	vldr	s11, [pc, #276]	; 800779c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800768a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076a2:	e021      	b.n	80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b6:	4b37      	ldr	r3, [pc, #220]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800779c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80076e8:	4b2a      	ldr	r3, [pc, #168]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ec:	0a5b      	lsrs	r3, r3, #9
 80076ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007702:	edd7 6a07 	vldr	s13, [r7, #28]
 8007706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800770a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800770e:	ee17 2a90 	vmov	r2, s15
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007716:	4b1f      	ldr	r3, [pc, #124]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	0c1b      	lsrs	r3, r3, #16
 800771c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800772c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007730:	edd7 6a07 	vldr	s13, [r7, #28]
 8007734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800773c:	ee17 2a90 	vmov	r2, s15
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007744:	4b13      	ldr	r3, [pc, #76]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007748:	0e1b      	lsrs	r3, r3, #24
 800774a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800775a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800775e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800776a:	ee17 2a90 	vmov	r2, s15
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007772:	e008      	b.n	8007786 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	609a      	str	r2, [r3, #8]
}
 8007786:	bf00      	nop
 8007788:	3724      	adds	r7, #36	; 0x24
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	58024400 	.word	0x58024400
 8007798:	03d09000 	.word	0x03d09000
 800779c:	46000000 	.word	0x46000000
 80077a0:	4c742400 	.word	0x4c742400
 80077a4:	4a742400 	.word	0x4a742400
 80077a8:	4c3ebc20 	.word	0x4c3ebc20

080077ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077ba:	4b53      	ldr	r3, [pc, #332]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80077bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d101      	bne.n	80077ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e099      	b.n	80078fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80077ca:	4b4f      	ldr	r3, [pc, #316]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a4e      	ldr	r2, [pc, #312]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80077d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077d6:	f7fa fc27 	bl	8002028 <HAL_GetTick>
 80077da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077dc:	e008      	b.n	80077f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077de:	f7fa fc23 	bl	8002028 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d901      	bls.n	80077f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e086      	b.n	80078fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077f0:	4b45      	ldr	r3, [pc, #276]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1f0      	bne.n	80077de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80077fc:	4b42      	ldr	r3, [pc, #264]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80077fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007800:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	031b      	lsls	r3, r3, #12
 800780a:	493f      	ldr	r1, [pc, #252]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 800780c:	4313      	orrs	r3, r2
 800780e:	628b      	str	r3, [r1, #40]	; 0x28
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	3b01      	subs	r3, #1
 8007816:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	3b01      	subs	r3, #1
 8007820:	025b      	lsls	r3, r3, #9
 8007822:	b29b      	uxth	r3, r3
 8007824:	431a      	orrs	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	3b01      	subs	r3, #1
 800782c:	041b      	lsls	r3, r3, #16
 800782e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007832:	431a      	orrs	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	3b01      	subs	r3, #1
 800783a:	061b      	lsls	r3, r3, #24
 800783c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007840:	4931      	ldr	r1, [pc, #196]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007842:	4313      	orrs	r3, r2
 8007844:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007846:	4b30      	ldr	r3, [pc, #192]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	492d      	ldr	r1, [pc, #180]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007854:	4313      	orrs	r3, r2
 8007856:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007858:	4b2b      	ldr	r3, [pc, #172]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 800785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785c:	f023 0220 	bic.w	r2, r3, #32
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	4928      	ldr	r1, [pc, #160]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007866:	4313      	orrs	r3, r2
 8007868:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800786a:	4b27      	ldr	r3, [pc, #156]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 800786c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786e:	4a26      	ldr	r2, [pc, #152]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007870:	f023 0310 	bic.w	r3, r3, #16
 8007874:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007876:	4b24      	ldr	r3, [pc, #144]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800787a:	4b24      	ldr	r3, [pc, #144]	; (800790c <RCCEx_PLL2_Config+0x160>)
 800787c:	4013      	ands	r3, r2
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	69d2      	ldr	r2, [r2, #28]
 8007882:	00d2      	lsls	r2, r2, #3
 8007884:	4920      	ldr	r1, [pc, #128]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007886:	4313      	orrs	r3, r2
 8007888:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800788a:	4b1f      	ldr	r3, [pc, #124]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 800788c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788e:	4a1e      	ldr	r2, [pc, #120]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007890:	f043 0310 	orr.w	r3, r3, #16
 8007894:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d106      	bne.n	80078aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800789c:	4b1a      	ldr	r3, [pc, #104]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	4a19      	ldr	r2, [pc, #100]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078a8:	e00f      	b.n	80078ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d106      	bne.n	80078be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80078b0:	4b15      	ldr	r3, [pc, #84]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	4a14      	ldr	r2, [pc, #80]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078bc:	e005      	b.n	80078ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80078be:	4b12      	ldr	r3, [pc, #72]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c2:	4a11      	ldr	r2, [pc, #68]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80078ca:	4b0f      	ldr	r3, [pc, #60]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a0e      	ldr	r2, [pc, #56]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078d6:	f7fa fba7 	bl	8002028 <HAL_GetTick>
 80078da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078dc:	e008      	b.n	80078f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078de:	f7fa fba3 	bl	8002028 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d901      	bls.n	80078f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e006      	b.n	80078fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078f0:	4b05      	ldr	r3, [pc, #20]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d0f0      	beq.n	80078de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	58024400 	.word	0x58024400
 800790c:	ffff0007 	.word	0xffff0007

08007910 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800791e:	4b53      	ldr	r3, [pc, #332]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007922:	f003 0303 	and.w	r3, r3, #3
 8007926:	2b03      	cmp	r3, #3
 8007928:	d101      	bne.n	800792e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e099      	b.n	8007a62 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800792e:	4b4f      	ldr	r3, [pc, #316]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a4e      	ldr	r2, [pc, #312]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800793a:	f7fa fb75 	bl	8002028 <HAL_GetTick>
 800793e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007940:	e008      	b.n	8007954 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007942:	f7fa fb71 	bl	8002028 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b02      	cmp	r3, #2
 800794e:	d901      	bls.n	8007954 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e086      	b.n	8007a62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007954:	4b45      	ldr	r3, [pc, #276]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1f0      	bne.n	8007942 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007960:	4b42      	ldr	r3, [pc, #264]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007964:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	051b      	lsls	r3, r3, #20
 800796e:	493f      	ldr	r1, [pc, #252]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007970:	4313      	orrs	r3, r2
 8007972:	628b      	str	r3, [r1, #40]	; 0x28
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	3b01      	subs	r3, #1
 800797a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	3b01      	subs	r3, #1
 8007984:	025b      	lsls	r3, r3, #9
 8007986:	b29b      	uxth	r3, r3
 8007988:	431a      	orrs	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	3b01      	subs	r3, #1
 8007990:	041b      	lsls	r3, r3, #16
 8007992:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	3b01      	subs	r3, #1
 800799e:	061b      	lsls	r3, r3, #24
 80079a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079a4:	4931      	ldr	r1, [pc, #196]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80079aa:	4b30      	ldr	r3, [pc, #192]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	492d      	ldr	r1, [pc, #180]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80079bc:	4b2b      	ldr	r3, [pc, #172]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	4928      	ldr	r1, [pc, #160]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80079ce:	4b27      	ldr	r3, [pc, #156]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d2:	4a26      	ldr	r2, [pc, #152]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80079da:	4b24      	ldr	r3, [pc, #144]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079de:	4b24      	ldr	r3, [pc, #144]	; (8007a70 <RCCEx_PLL3_Config+0x160>)
 80079e0:	4013      	ands	r3, r2
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	69d2      	ldr	r2, [r2, #28]
 80079e6:	00d2      	lsls	r2, r2, #3
 80079e8:	4920      	ldr	r1, [pc, #128]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80079ee:	4b1f      	ldr	r3, [pc, #124]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f2:	4a1e      	ldr	r2, [pc, #120]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d106      	bne.n	8007a0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007a00:	4b1a      	ldr	r3, [pc, #104]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a04:	4a19      	ldr	r2, [pc, #100]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007a0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a0c:	e00f      	b.n	8007a2e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d106      	bne.n	8007a22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a14:	4b15      	ldr	r3, [pc, #84]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	4a14      	ldr	r2, [pc, #80]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a20:	e005      	b.n	8007a2e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a22:	4b12      	ldr	r3, [pc, #72]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a26:	4a11      	ldr	r2, [pc, #68]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a2e:	4b0f      	ldr	r3, [pc, #60]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a0e      	ldr	r2, [pc, #56]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a3a:	f7fa faf5 	bl	8002028 <HAL_GetTick>
 8007a3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a40:	e008      	b.n	8007a54 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a42:	f7fa faf1 	bl	8002028 <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d901      	bls.n	8007a54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e006      	b.n	8007a62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a54:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d0f0      	beq.n	8007a42 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	58024400 	.word	0x58024400
 8007a70:	ffff0007 	.word	0xffff0007

08007a74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e042      	b.n	8007b0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d106      	bne.n	8007a9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7fa f963 	bl	8001d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2224      	movs	r2, #36	; 0x24
 8007aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0201 	bic.w	r2, r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f8ba 	bl	8007c30 <UART_SetConfig>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d101      	bne.n	8007ac6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e022      	b.n	8007b0c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 ff1a 	bl	8008908 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ae2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689a      	ldr	r2, [r3, #8]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007af2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f042 0201 	orr.w	r2, r2, #1
 8007b02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 ffa1 	bl	8008a4c <UART_CheckIdleState>
 8007b0a:	4603      	mov	r3, r0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08a      	sub	sp, #40	; 0x28
 8007b18:	af02      	add	r7, sp, #8
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	603b      	str	r3, [r7, #0]
 8007b20:	4613      	mov	r3, r2
 8007b22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b2a:	2b20      	cmp	r3, #32
 8007b2c:	d17b      	bne.n	8007c26 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <HAL_UART_Transmit+0x26>
 8007b34:	88fb      	ldrh	r3, [r7, #6]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e074      	b.n	8007c28 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2221      	movs	r2, #33	; 0x21
 8007b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b4e:	f7fa fa6b 	bl	8002028 <HAL_GetTick>
 8007b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	88fa      	ldrh	r2, [r7, #6]
 8007b58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	88fa      	ldrh	r2, [r7, #6]
 8007b60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b6c:	d108      	bne.n	8007b80 <HAL_UART_Transmit+0x6c>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d104      	bne.n	8007b80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	61bb      	str	r3, [r7, #24]
 8007b7e:	e003      	b.n	8007b88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b84:	2300      	movs	r3, #0
 8007b86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b88:	e030      	b.n	8007bec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2200      	movs	r2, #0
 8007b92:	2180      	movs	r1, #128	; 0x80
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f001 f803 	bl	8008ba0 <UART_WaitOnFlagUntilTimeout>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d005      	beq.n	8007bac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e03d      	b.n	8007c28 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10b      	bne.n	8007bca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	3302      	adds	r3, #2
 8007bc6:	61bb      	str	r3, [r7, #24]
 8007bc8:	e007      	b.n	8007bda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	781a      	ldrb	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	3b01      	subs	r3, #1
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1c8      	bne.n	8007b8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	2140      	movs	r1, #64	; 0x40
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 ffcc 	bl	8008ba0 <UART_WaitOnFlagUntilTimeout>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d005      	beq.n	8007c1a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e006      	b.n	8007c28 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	e000      	b.n	8007c28 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007c26:	2302      	movs	r3, #2
  }
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3720      	adds	r7, #32
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c34:	b092      	sub	sp, #72	; 0x48
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	4bbe      	ldr	r3, [pc, #760]	; (8007f58 <UART_SetConfig+0x328>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	6812      	ldr	r2, [r2, #0]
 8007c66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c68:	430b      	orrs	r3, r1
 8007c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4ab3      	ldr	r2, [pc, #716]	; (8007f5c <UART_SetConfig+0x32c>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d004      	beq.n	8007c9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689a      	ldr	r2, [r3, #8]
 8007ca2:	4baf      	ldr	r3, [pc, #700]	; (8007f60 <UART_SetConfig+0x330>)
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	6812      	ldr	r2, [r2, #0]
 8007caa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cac:	430b      	orrs	r3, r1
 8007cae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb6:	f023 010f 	bic.w	r1, r3, #15
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4aa6      	ldr	r2, [pc, #664]	; (8007f64 <UART_SetConfig+0x334>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d177      	bne.n	8007dc0 <UART_SetConfig+0x190>
 8007cd0:	4ba5      	ldr	r3, [pc, #660]	; (8007f68 <UART_SetConfig+0x338>)
 8007cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cd8:	2b28      	cmp	r3, #40	; 0x28
 8007cda:	d86d      	bhi.n	8007db8 <UART_SetConfig+0x188>
 8007cdc:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <UART_SetConfig+0xb4>)
 8007cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce2:	bf00      	nop
 8007ce4:	08007d89 	.word	0x08007d89
 8007ce8:	08007db9 	.word	0x08007db9
 8007cec:	08007db9 	.word	0x08007db9
 8007cf0:	08007db9 	.word	0x08007db9
 8007cf4:	08007db9 	.word	0x08007db9
 8007cf8:	08007db9 	.word	0x08007db9
 8007cfc:	08007db9 	.word	0x08007db9
 8007d00:	08007db9 	.word	0x08007db9
 8007d04:	08007d91 	.word	0x08007d91
 8007d08:	08007db9 	.word	0x08007db9
 8007d0c:	08007db9 	.word	0x08007db9
 8007d10:	08007db9 	.word	0x08007db9
 8007d14:	08007db9 	.word	0x08007db9
 8007d18:	08007db9 	.word	0x08007db9
 8007d1c:	08007db9 	.word	0x08007db9
 8007d20:	08007db9 	.word	0x08007db9
 8007d24:	08007d99 	.word	0x08007d99
 8007d28:	08007db9 	.word	0x08007db9
 8007d2c:	08007db9 	.word	0x08007db9
 8007d30:	08007db9 	.word	0x08007db9
 8007d34:	08007db9 	.word	0x08007db9
 8007d38:	08007db9 	.word	0x08007db9
 8007d3c:	08007db9 	.word	0x08007db9
 8007d40:	08007db9 	.word	0x08007db9
 8007d44:	08007da1 	.word	0x08007da1
 8007d48:	08007db9 	.word	0x08007db9
 8007d4c:	08007db9 	.word	0x08007db9
 8007d50:	08007db9 	.word	0x08007db9
 8007d54:	08007db9 	.word	0x08007db9
 8007d58:	08007db9 	.word	0x08007db9
 8007d5c:	08007db9 	.word	0x08007db9
 8007d60:	08007db9 	.word	0x08007db9
 8007d64:	08007da9 	.word	0x08007da9
 8007d68:	08007db9 	.word	0x08007db9
 8007d6c:	08007db9 	.word	0x08007db9
 8007d70:	08007db9 	.word	0x08007db9
 8007d74:	08007db9 	.word	0x08007db9
 8007d78:	08007db9 	.word	0x08007db9
 8007d7c:	08007db9 	.word	0x08007db9
 8007d80:	08007db9 	.word	0x08007db9
 8007d84:	08007db1 	.word	0x08007db1
 8007d88:	2301      	movs	r3, #1
 8007d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d8e:	e326      	b.n	80083de <UART_SetConfig+0x7ae>
 8007d90:	2304      	movs	r3, #4
 8007d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d96:	e322      	b.n	80083de <UART_SetConfig+0x7ae>
 8007d98:	2308      	movs	r3, #8
 8007d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d9e:	e31e      	b.n	80083de <UART_SetConfig+0x7ae>
 8007da0:	2310      	movs	r3, #16
 8007da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007da6:	e31a      	b.n	80083de <UART_SetConfig+0x7ae>
 8007da8:	2320      	movs	r3, #32
 8007daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dae:	e316      	b.n	80083de <UART_SetConfig+0x7ae>
 8007db0:	2340      	movs	r3, #64	; 0x40
 8007db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007db6:	e312      	b.n	80083de <UART_SetConfig+0x7ae>
 8007db8:	2380      	movs	r3, #128	; 0x80
 8007dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dbe:	e30e      	b.n	80083de <UART_SetConfig+0x7ae>
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a69      	ldr	r2, [pc, #420]	; (8007f6c <UART_SetConfig+0x33c>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d130      	bne.n	8007e2c <UART_SetConfig+0x1fc>
 8007dca:	4b67      	ldr	r3, [pc, #412]	; (8007f68 <UART_SetConfig+0x338>)
 8007dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dce:	f003 0307 	and.w	r3, r3, #7
 8007dd2:	2b05      	cmp	r3, #5
 8007dd4:	d826      	bhi.n	8007e24 <UART_SetConfig+0x1f4>
 8007dd6:	a201      	add	r2, pc, #4	; (adr r2, 8007ddc <UART_SetConfig+0x1ac>)
 8007dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ddc:	08007df5 	.word	0x08007df5
 8007de0:	08007dfd 	.word	0x08007dfd
 8007de4:	08007e05 	.word	0x08007e05
 8007de8:	08007e0d 	.word	0x08007e0d
 8007dec:	08007e15 	.word	0x08007e15
 8007df0:	08007e1d 	.word	0x08007e1d
 8007df4:	2300      	movs	r3, #0
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfa:	e2f0      	b.n	80083de <UART_SetConfig+0x7ae>
 8007dfc:	2304      	movs	r3, #4
 8007dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e02:	e2ec      	b.n	80083de <UART_SetConfig+0x7ae>
 8007e04:	2308      	movs	r3, #8
 8007e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0a:	e2e8      	b.n	80083de <UART_SetConfig+0x7ae>
 8007e0c:	2310      	movs	r3, #16
 8007e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e12:	e2e4      	b.n	80083de <UART_SetConfig+0x7ae>
 8007e14:	2320      	movs	r3, #32
 8007e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e1a:	e2e0      	b.n	80083de <UART_SetConfig+0x7ae>
 8007e1c:	2340      	movs	r3, #64	; 0x40
 8007e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e22:	e2dc      	b.n	80083de <UART_SetConfig+0x7ae>
 8007e24:	2380      	movs	r3, #128	; 0x80
 8007e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e2a:	e2d8      	b.n	80083de <UART_SetConfig+0x7ae>
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a4f      	ldr	r2, [pc, #316]	; (8007f70 <UART_SetConfig+0x340>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d130      	bne.n	8007e98 <UART_SetConfig+0x268>
 8007e36:	4b4c      	ldr	r3, [pc, #304]	; (8007f68 <UART_SetConfig+0x338>)
 8007e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e3a:	f003 0307 	and.w	r3, r3, #7
 8007e3e:	2b05      	cmp	r3, #5
 8007e40:	d826      	bhi.n	8007e90 <UART_SetConfig+0x260>
 8007e42:	a201      	add	r2, pc, #4	; (adr r2, 8007e48 <UART_SetConfig+0x218>)
 8007e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e48:	08007e61 	.word	0x08007e61
 8007e4c:	08007e69 	.word	0x08007e69
 8007e50:	08007e71 	.word	0x08007e71
 8007e54:	08007e79 	.word	0x08007e79
 8007e58:	08007e81 	.word	0x08007e81
 8007e5c:	08007e89 	.word	0x08007e89
 8007e60:	2300      	movs	r3, #0
 8007e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e66:	e2ba      	b.n	80083de <UART_SetConfig+0x7ae>
 8007e68:	2304      	movs	r3, #4
 8007e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e6e:	e2b6      	b.n	80083de <UART_SetConfig+0x7ae>
 8007e70:	2308      	movs	r3, #8
 8007e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e76:	e2b2      	b.n	80083de <UART_SetConfig+0x7ae>
 8007e78:	2310      	movs	r3, #16
 8007e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e7e:	e2ae      	b.n	80083de <UART_SetConfig+0x7ae>
 8007e80:	2320      	movs	r3, #32
 8007e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e86:	e2aa      	b.n	80083de <UART_SetConfig+0x7ae>
 8007e88:	2340      	movs	r3, #64	; 0x40
 8007e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e8e:	e2a6      	b.n	80083de <UART_SetConfig+0x7ae>
 8007e90:	2380      	movs	r3, #128	; 0x80
 8007e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e96:	e2a2      	b.n	80083de <UART_SetConfig+0x7ae>
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a35      	ldr	r2, [pc, #212]	; (8007f74 <UART_SetConfig+0x344>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d130      	bne.n	8007f04 <UART_SetConfig+0x2d4>
 8007ea2:	4b31      	ldr	r3, [pc, #196]	; (8007f68 <UART_SetConfig+0x338>)
 8007ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea6:	f003 0307 	and.w	r3, r3, #7
 8007eaa:	2b05      	cmp	r3, #5
 8007eac:	d826      	bhi.n	8007efc <UART_SetConfig+0x2cc>
 8007eae:	a201      	add	r2, pc, #4	; (adr r2, 8007eb4 <UART_SetConfig+0x284>)
 8007eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb4:	08007ecd 	.word	0x08007ecd
 8007eb8:	08007ed5 	.word	0x08007ed5
 8007ebc:	08007edd 	.word	0x08007edd
 8007ec0:	08007ee5 	.word	0x08007ee5
 8007ec4:	08007eed 	.word	0x08007eed
 8007ec8:	08007ef5 	.word	0x08007ef5
 8007ecc:	2300      	movs	r3, #0
 8007ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ed2:	e284      	b.n	80083de <UART_SetConfig+0x7ae>
 8007ed4:	2304      	movs	r3, #4
 8007ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eda:	e280      	b.n	80083de <UART_SetConfig+0x7ae>
 8007edc:	2308      	movs	r3, #8
 8007ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ee2:	e27c      	b.n	80083de <UART_SetConfig+0x7ae>
 8007ee4:	2310      	movs	r3, #16
 8007ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eea:	e278      	b.n	80083de <UART_SetConfig+0x7ae>
 8007eec:	2320      	movs	r3, #32
 8007eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ef2:	e274      	b.n	80083de <UART_SetConfig+0x7ae>
 8007ef4:	2340      	movs	r3, #64	; 0x40
 8007ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007efa:	e270      	b.n	80083de <UART_SetConfig+0x7ae>
 8007efc:	2380      	movs	r3, #128	; 0x80
 8007efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f02:	e26c      	b.n	80083de <UART_SetConfig+0x7ae>
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a1b      	ldr	r2, [pc, #108]	; (8007f78 <UART_SetConfig+0x348>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d142      	bne.n	8007f94 <UART_SetConfig+0x364>
 8007f0e:	4b16      	ldr	r3, [pc, #88]	; (8007f68 <UART_SetConfig+0x338>)
 8007f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f12:	f003 0307 	and.w	r3, r3, #7
 8007f16:	2b05      	cmp	r3, #5
 8007f18:	d838      	bhi.n	8007f8c <UART_SetConfig+0x35c>
 8007f1a:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <UART_SetConfig+0x2f0>)
 8007f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f20:	08007f39 	.word	0x08007f39
 8007f24:	08007f41 	.word	0x08007f41
 8007f28:	08007f49 	.word	0x08007f49
 8007f2c:	08007f51 	.word	0x08007f51
 8007f30:	08007f7d 	.word	0x08007f7d
 8007f34:	08007f85 	.word	0x08007f85
 8007f38:	2300      	movs	r3, #0
 8007f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f3e:	e24e      	b.n	80083de <UART_SetConfig+0x7ae>
 8007f40:	2304      	movs	r3, #4
 8007f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f46:	e24a      	b.n	80083de <UART_SetConfig+0x7ae>
 8007f48:	2308      	movs	r3, #8
 8007f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f4e:	e246      	b.n	80083de <UART_SetConfig+0x7ae>
 8007f50:	2310      	movs	r3, #16
 8007f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f56:	e242      	b.n	80083de <UART_SetConfig+0x7ae>
 8007f58:	cfff69f3 	.word	0xcfff69f3
 8007f5c:	58000c00 	.word	0x58000c00
 8007f60:	11fff4ff 	.word	0x11fff4ff
 8007f64:	40011000 	.word	0x40011000
 8007f68:	58024400 	.word	0x58024400
 8007f6c:	40004400 	.word	0x40004400
 8007f70:	40004800 	.word	0x40004800
 8007f74:	40004c00 	.word	0x40004c00
 8007f78:	40005000 	.word	0x40005000
 8007f7c:	2320      	movs	r3, #32
 8007f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f82:	e22c      	b.n	80083de <UART_SetConfig+0x7ae>
 8007f84:	2340      	movs	r3, #64	; 0x40
 8007f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f8a:	e228      	b.n	80083de <UART_SetConfig+0x7ae>
 8007f8c:	2380      	movs	r3, #128	; 0x80
 8007f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f92:	e224      	b.n	80083de <UART_SetConfig+0x7ae>
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4ab1      	ldr	r2, [pc, #708]	; (8008260 <UART_SetConfig+0x630>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d176      	bne.n	800808c <UART_SetConfig+0x45c>
 8007f9e:	4bb1      	ldr	r3, [pc, #708]	; (8008264 <UART_SetConfig+0x634>)
 8007fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fa6:	2b28      	cmp	r3, #40	; 0x28
 8007fa8:	d86c      	bhi.n	8008084 <UART_SetConfig+0x454>
 8007faa:	a201      	add	r2, pc, #4	; (adr r2, 8007fb0 <UART_SetConfig+0x380>)
 8007fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb0:	08008055 	.word	0x08008055
 8007fb4:	08008085 	.word	0x08008085
 8007fb8:	08008085 	.word	0x08008085
 8007fbc:	08008085 	.word	0x08008085
 8007fc0:	08008085 	.word	0x08008085
 8007fc4:	08008085 	.word	0x08008085
 8007fc8:	08008085 	.word	0x08008085
 8007fcc:	08008085 	.word	0x08008085
 8007fd0:	0800805d 	.word	0x0800805d
 8007fd4:	08008085 	.word	0x08008085
 8007fd8:	08008085 	.word	0x08008085
 8007fdc:	08008085 	.word	0x08008085
 8007fe0:	08008085 	.word	0x08008085
 8007fe4:	08008085 	.word	0x08008085
 8007fe8:	08008085 	.word	0x08008085
 8007fec:	08008085 	.word	0x08008085
 8007ff0:	08008065 	.word	0x08008065
 8007ff4:	08008085 	.word	0x08008085
 8007ff8:	08008085 	.word	0x08008085
 8007ffc:	08008085 	.word	0x08008085
 8008000:	08008085 	.word	0x08008085
 8008004:	08008085 	.word	0x08008085
 8008008:	08008085 	.word	0x08008085
 800800c:	08008085 	.word	0x08008085
 8008010:	0800806d 	.word	0x0800806d
 8008014:	08008085 	.word	0x08008085
 8008018:	08008085 	.word	0x08008085
 800801c:	08008085 	.word	0x08008085
 8008020:	08008085 	.word	0x08008085
 8008024:	08008085 	.word	0x08008085
 8008028:	08008085 	.word	0x08008085
 800802c:	08008085 	.word	0x08008085
 8008030:	08008075 	.word	0x08008075
 8008034:	08008085 	.word	0x08008085
 8008038:	08008085 	.word	0x08008085
 800803c:	08008085 	.word	0x08008085
 8008040:	08008085 	.word	0x08008085
 8008044:	08008085 	.word	0x08008085
 8008048:	08008085 	.word	0x08008085
 800804c:	08008085 	.word	0x08008085
 8008050:	0800807d 	.word	0x0800807d
 8008054:	2301      	movs	r3, #1
 8008056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800805a:	e1c0      	b.n	80083de <UART_SetConfig+0x7ae>
 800805c:	2304      	movs	r3, #4
 800805e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008062:	e1bc      	b.n	80083de <UART_SetConfig+0x7ae>
 8008064:	2308      	movs	r3, #8
 8008066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800806a:	e1b8      	b.n	80083de <UART_SetConfig+0x7ae>
 800806c:	2310      	movs	r3, #16
 800806e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008072:	e1b4      	b.n	80083de <UART_SetConfig+0x7ae>
 8008074:	2320      	movs	r3, #32
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807a:	e1b0      	b.n	80083de <UART_SetConfig+0x7ae>
 800807c:	2340      	movs	r3, #64	; 0x40
 800807e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008082:	e1ac      	b.n	80083de <UART_SetConfig+0x7ae>
 8008084:	2380      	movs	r3, #128	; 0x80
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808a:	e1a8      	b.n	80083de <UART_SetConfig+0x7ae>
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a75      	ldr	r2, [pc, #468]	; (8008268 <UART_SetConfig+0x638>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d130      	bne.n	80080f8 <UART_SetConfig+0x4c8>
 8008096:	4b73      	ldr	r3, [pc, #460]	; (8008264 <UART_SetConfig+0x634>)
 8008098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809a:	f003 0307 	and.w	r3, r3, #7
 800809e:	2b05      	cmp	r3, #5
 80080a0:	d826      	bhi.n	80080f0 <UART_SetConfig+0x4c0>
 80080a2:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <UART_SetConfig+0x478>)
 80080a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a8:	080080c1 	.word	0x080080c1
 80080ac:	080080c9 	.word	0x080080c9
 80080b0:	080080d1 	.word	0x080080d1
 80080b4:	080080d9 	.word	0x080080d9
 80080b8:	080080e1 	.word	0x080080e1
 80080bc:	080080e9 	.word	0x080080e9
 80080c0:	2300      	movs	r3, #0
 80080c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080c6:	e18a      	b.n	80083de <UART_SetConfig+0x7ae>
 80080c8:	2304      	movs	r3, #4
 80080ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ce:	e186      	b.n	80083de <UART_SetConfig+0x7ae>
 80080d0:	2308      	movs	r3, #8
 80080d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080d6:	e182      	b.n	80083de <UART_SetConfig+0x7ae>
 80080d8:	2310      	movs	r3, #16
 80080da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080de:	e17e      	b.n	80083de <UART_SetConfig+0x7ae>
 80080e0:	2320      	movs	r3, #32
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e6:	e17a      	b.n	80083de <UART_SetConfig+0x7ae>
 80080e8:	2340      	movs	r3, #64	; 0x40
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ee:	e176      	b.n	80083de <UART_SetConfig+0x7ae>
 80080f0:	2380      	movs	r3, #128	; 0x80
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f6:	e172      	b.n	80083de <UART_SetConfig+0x7ae>
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a5b      	ldr	r2, [pc, #364]	; (800826c <UART_SetConfig+0x63c>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d130      	bne.n	8008164 <UART_SetConfig+0x534>
 8008102:	4b58      	ldr	r3, [pc, #352]	; (8008264 <UART_SetConfig+0x634>)
 8008104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008106:	f003 0307 	and.w	r3, r3, #7
 800810a:	2b05      	cmp	r3, #5
 800810c:	d826      	bhi.n	800815c <UART_SetConfig+0x52c>
 800810e:	a201      	add	r2, pc, #4	; (adr r2, 8008114 <UART_SetConfig+0x4e4>)
 8008110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008114:	0800812d 	.word	0x0800812d
 8008118:	08008135 	.word	0x08008135
 800811c:	0800813d 	.word	0x0800813d
 8008120:	08008145 	.word	0x08008145
 8008124:	0800814d 	.word	0x0800814d
 8008128:	08008155 	.word	0x08008155
 800812c:	2300      	movs	r3, #0
 800812e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008132:	e154      	b.n	80083de <UART_SetConfig+0x7ae>
 8008134:	2304      	movs	r3, #4
 8008136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800813a:	e150      	b.n	80083de <UART_SetConfig+0x7ae>
 800813c:	2308      	movs	r3, #8
 800813e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008142:	e14c      	b.n	80083de <UART_SetConfig+0x7ae>
 8008144:	2310      	movs	r3, #16
 8008146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800814a:	e148      	b.n	80083de <UART_SetConfig+0x7ae>
 800814c:	2320      	movs	r3, #32
 800814e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008152:	e144      	b.n	80083de <UART_SetConfig+0x7ae>
 8008154:	2340      	movs	r3, #64	; 0x40
 8008156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800815a:	e140      	b.n	80083de <UART_SetConfig+0x7ae>
 800815c:	2380      	movs	r3, #128	; 0x80
 800815e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008162:	e13c      	b.n	80083de <UART_SetConfig+0x7ae>
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a41      	ldr	r2, [pc, #260]	; (8008270 <UART_SetConfig+0x640>)
 800816a:	4293      	cmp	r3, r2
 800816c:	f040 8082 	bne.w	8008274 <UART_SetConfig+0x644>
 8008170:	4b3c      	ldr	r3, [pc, #240]	; (8008264 <UART_SetConfig+0x634>)
 8008172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008174:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008178:	2b28      	cmp	r3, #40	; 0x28
 800817a:	d86d      	bhi.n	8008258 <UART_SetConfig+0x628>
 800817c:	a201      	add	r2, pc, #4	; (adr r2, 8008184 <UART_SetConfig+0x554>)
 800817e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008182:	bf00      	nop
 8008184:	08008229 	.word	0x08008229
 8008188:	08008259 	.word	0x08008259
 800818c:	08008259 	.word	0x08008259
 8008190:	08008259 	.word	0x08008259
 8008194:	08008259 	.word	0x08008259
 8008198:	08008259 	.word	0x08008259
 800819c:	08008259 	.word	0x08008259
 80081a0:	08008259 	.word	0x08008259
 80081a4:	08008231 	.word	0x08008231
 80081a8:	08008259 	.word	0x08008259
 80081ac:	08008259 	.word	0x08008259
 80081b0:	08008259 	.word	0x08008259
 80081b4:	08008259 	.word	0x08008259
 80081b8:	08008259 	.word	0x08008259
 80081bc:	08008259 	.word	0x08008259
 80081c0:	08008259 	.word	0x08008259
 80081c4:	08008239 	.word	0x08008239
 80081c8:	08008259 	.word	0x08008259
 80081cc:	08008259 	.word	0x08008259
 80081d0:	08008259 	.word	0x08008259
 80081d4:	08008259 	.word	0x08008259
 80081d8:	08008259 	.word	0x08008259
 80081dc:	08008259 	.word	0x08008259
 80081e0:	08008259 	.word	0x08008259
 80081e4:	08008241 	.word	0x08008241
 80081e8:	08008259 	.word	0x08008259
 80081ec:	08008259 	.word	0x08008259
 80081f0:	08008259 	.word	0x08008259
 80081f4:	08008259 	.word	0x08008259
 80081f8:	08008259 	.word	0x08008259
 80081fc:	08008259 	.word	0x08008259
 8008200:	08008259 	.word	0x08008259
 8008204:	08008249 	.word	0x08008249
 8008208:	08008259 	.word	0x08008259
 800820c:	08008259 	.word	0x08008259
 8008210:	08008259 	.word	0x08008259
 8008214:	08008259 	.word	0x08008259
 8008218:	08008259 	.word	0x08008259
 800821c:	08008259 	.word	0x08008259
 8008220:	08008259 	.word	0x08008259
 8008224:	08008251 	.word	0x08008251
 8008228:	2301      	movs	r3, #1
 800822a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800822e:	e0d6      	b.n	80083de <UART_SetConfig+0x7ae>
 8008230:	2304      	movs	r3, #4
 8008232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008236:	e0d2      	b.n	80083de <UART_SetConfig+0x7ae>
 8008238:	2308      	movs	r3, #8
 800823a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800823e:	e0ce      	b.n	80083de <UART_SetConfig+0x7ae>
 8008240:	2310      	movs	r3, #16
 8008242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008246:	e0ca      	b.n	80083de <UART_SetConfig+0x7ae>
 8008248:	2320      	movs	r3, #32
 800824a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800824e:	e0c6      	b.n	80083de <UART_SetConfig+0x7ae>
 8008250:	2340      	movs	r3, #64	; 0x40
 8008252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008256:	e0c2      	b.n	80083de <UART_SetConfig+0x7ae>
 8008258:	2380      	movs	r3, #128	; 0x80
 800825a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800825e:	e0be      	b.n	80083de <UART_SetConfig+0x7ae>
 8008260:	40011400 	.word	0x40011400
 8008264:	58024400 	.word	0x58024400
 8008268:	40007800 	.word	0x40007800
 800826c:	40007c00 	.word	0x40007c00
 8008270:	40011800 	.word	0x40011800
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4aad      	ldr	r2, [pc, #692]	; (8008530 <UART_SetConfig+0x900>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d176      	bne.n	800836c <UART_SetConfig+0x73c>
 800827e:	4bad      	ldr	r3, [pc, #692]	; (8008534 <UART_SetConfig+0x904>)
 8008280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008286:	2b28      	cmp	r3, #40	; 0x28
 8008288:	d86c      	bhi.n	8008364 <UART_SetConfig+0x734>
 800828a:	a201      	add	r2, pc, #4	; (adr r2, 8008290 <UART_SetConfig+0x660>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	08008335 	.word	0x08008335
 8008294:	08008365 	.word	0x08008365
 8008298:	08008365 	.word	0x08008365
 800829c:	08008365 	.word	0x08008365
 80082a0:	08008365 	.word	0x08008365
 80082a4:	08008365 	.word	0x08008365
 80082a8:	08008365 	.word	0x08008365
 80082ac:	08008365 	.word	0x08008365
 80082b0:	0800833d 	.word	0x0800833d
 80082b4:	08008365 	.word	0x08008365
 80082b8:	08008365 	.word	0x08008365
 80082bc:	08008365 	.word	0x08008365
 80082c0:	08008365 	.word	0x08008365
 80082c4:	08008365 	.word	0x08008365
 80082c8:	08008365 	.word	0x08008365
 80082cc:	08008365 	.word	0x08008365
 80082d0:	08008345 	.word	0x08008345
 80082d4:	08008365 	.word	0x08008365
 80082d8:	08008365 	.word	0x08008365
 80082dc:	08008365 	.word	0x08008365
 80082e0:	08008365 	.word	0x08008365
 80082e4:	08008365 	.word	0x08008365
 80082e8:	08008365 	.word	0x08008365
 80082ec:	08008365 	.word	0x08008365
 80082f0:	0800834d 	.word	0x0800834d
 80082f4:	08008365 	.word	0x08008365
 80082f8:	08008365 	.word	0x08008365
 80082fc:	08008365 	.word	0x08008365
 8008300:	08008365 	.word	0x08008365
 8008304:	08008365 	.word	0x08008365
 8008308:	08008365 	.word	0x08008365
 800830c:	08008365 	.word	0x08008365
 8008310:	08008355 	.word	0x08008355
 8008314:	08008365 	.word	0x08008365
 8008318:	08008365 	.word	0x08008365
 800831c:	08008365 	.word	0x08008365
 8008320:	08008365 	.word	0x08008365
 8008324:	08008365 	.word	0x08008365
 8008328:	08008365 	.word	0x08008365
 800832c:	08008365 	.word	0x08008365
 8008330:	0800835d 	.word	0x0800835d
 8008334:	2301      	movs	r3, #1
 8008336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833a:	e050      	b.n	80083de <UART_SetConfig+0x7ae>
 800833c:	2304      	movs	r3, #4
 800833e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008342:	e04c      	b.n	80083de <UART_SetConfig+0x7ae>
 8008344:	2308      	movs	r3, #8
 8008346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834a:	e048      	b.n	80083de <UART_SetConfig+0x7ae>
 800834c:	2310      	movs	r3, #16
 800834e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008352:	e044      	b.n	80083de <UART_SetConfig+0x7ae>
 8008354:	2320      	movs	r3, #32
 8008356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835a:	e040      	b.n	80083de <UART_SetConfig+0x7ae>
 800835c:	2340      	movs	r3, #64	; 0x40
 800835e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008362:	e03c      	b.n	80083de <UART_SetConfig+0x7ae>
 8008364:	2380      	movs	r3, #128	; 0x80
 8008366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836a:	e038      	b.n	80083de <UART_SetConfig+0x7ae>
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a71      	ldr	r2, [pc, #452]	; (8008538 <UART_SetConfig+0x908>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d130      	bne.n	80083d8 <UART_SetConfig+0x7a8>
 8008376:	4b6f      	ldr	r3, [pc, #444]	; (8008534 <UART_SetConfig+0x904>)
 8008378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837a:	f003 0307 	and.w	r3, r3, #7
 800837e:	2b05      	cmp	r3, #5
 8008380:	d826      	bhi.n	80083d0 <UART_SetConfig+0x7a0>
 8008382:	a201      	add	r2, pc, #4	; (adr r2, 8008388 <UART_SetConfig+0x758>)
 8008384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008388:	080083a1 	.word	0x080083a1
 800838c:	080083a9 	.word	0x080083a9
 8008390:	080083b1 	.word	0x080083b1
 8008394:	080083b9 	.word	0x080083b9
 8008398:	080083c1 	.word	0x080083c1
 800839c:	080083c9 	.word	0x080083c9
 80083a0:	2302      	movs	r3, #2
 80083a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083a6:	e01a      	b.n	80083de <UART_SetConfig+0x7ae>
 80083a8:	2304      	movs	r3, #4
 80083aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ae:	e016      	b.n	80083de <UART_SetConfig+0x7ae>
 80083b0:	2308      	movs	r3, #8
 80083b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b6:	e012      	b.n	80083de <UART_SetConfig+0x7ae>
 80083b8:	2310      	movs	r3, #16
 80083ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083be:	e00e      	b.n	80083de <UART_SetConfig+0x7ae>
 80083c0:	2320      	movs	r3, #32
 80083c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c6:	e00a      	b.n	80083de <UART_SetConfig+0x7ae>
 80083c8:	2340      	movs	r3, #64	; 0x40
 80083ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ce:	e006      	b.n	80083de <UART_SetConfig+0x7ae>
 80083d0:	2380      	movs	r3, #128	; 0x80
 80083d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d6:	e002      	b.n	80083de <UART_SetConfig+0x7ae>
 80083d8:	2380      	movs	r3, #128	; 0x80
 80083da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a55      	ldr	r2, [pc, #340]	; (8008538 <UART_SetConfig+0x908>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	f040 80f8 	bne.w	80085da <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80083ee:	2b20      	cmp	r3, #32
 80083f0:	dc46      	bgt.n	8008480 <UART_SetConfig+0x850>
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	db75      	blt.n	80084e2 <UART_SetConfig+0x8b2>
 80083f6:	3b02      	subs	r3, #2
 80083f8:	2b1e      	cmp	r3, #30
 80083fa:	d872      	bhi.n	80084e2 <UART_SetConfig+0x8b2>
 80083fc:	a201      	add	r2, pc, #4	; (adr r2, 8008404 <UART_SetConfig+0x7d4>)
 80083fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008402:	bf00      	nop
 8008404:	08008487 	.word	0x08008487
 8008408:	080084e3 	.word	0x080084e3
 800840c:	0800848f 	.word	0x0800848f
 8008410:	080084e3 	.word	0x080084e3
 8008414:	080084e3 	.word	0x080084e3
 8008418:	080084e3 	.word	0x080084e3
 800841c:	0800849f 	.word	0x0800849f
 8008420:	080084e3 	.word	0x080084e3
 8008424:	080084e3 	.word	0x080084e3
 8008428:	080084e3 	.word	0x080084e3
 800842c:	080084e3 	.word	0x080084e3
 8008430:	080084e3 	.word	0x080084e3
 8008434:	080084e3 	.word	0x080084e3
 8008438:	080084e3 	.word	0x080084e3
 800843c:	080084af 	.word	0x080084af
 8008440:	080084e3 	.word	0x080084e3
 8008444:	080084e3 	.word	0x080084e3
 8008448:	080084e3 	.word	0x080084e3
 800844c:	080084e3 	.word	0x080084e3
 8008450:	080084e3 	.word	0x080084e3
 8008454:	080084e3 	.word	0x080084e3
 8008458:	080084e3 	.word	0x080084e3
 800845c:	080084e3 	.word	0x080084e3
 8008460:	080084e3 	.word	0x080084e3
 8008464:	080084e3 	.word	0x080084e3
 8008468:	080084e3 	.word	0x080084e3
 800846c:	080084e3 	.word	0x080084e3
 8008470:	080084e3 	.word	0x080084e3
 8008474:	080084e3 	.word	0x080084e3
 8008478:	080084e3 	.word	0x080084e3
 800847c:	080084d5 	.word	0x080084d5
 8008480:	2b40      	cmp	r3, #64	; 0x40
 8008482:	d02a      	beq.n	80084da <UART_SetConfig+0x8aa>
 8008484:	e02d      	b.n	80084e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008486:	f7fe fed3 	bl	8007230 <HAL_RCCEx_GetD3PCLK1Freq>
 800848a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800848c:	e02f      	b.n	80084ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800848e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe fee2 	bl	800725c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800849c:	e027      	b.n	80084ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800849e:	f107 0318 	add.w	r3, r7, #24
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7ff f82e 	bl	8007504 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084ac:	e01f      	b.n	80084ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084ae:	4b21      	ldr	r3, [pc, #132]	; (8008534 <UART_SetConfig+0x904>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 0320 	and.w	r3, r3, #32
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d009      	beq.n	80084ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80084ba:	4b1e      	ldr	r3, [pc, #120]	; (8008534 <UART_SetConfig+0x904>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	08db      	lsrs	r3, r3, #3
 80084c0:	f003 0303 	and.w	r3, r3, #3
 80084c4:	4a1d      	ldr	r2, [pc, #116]	; (800853c <UART_SetConfig+0x90c>)
 80084c6:	fa22 f303 	lsr.w	r3, r2, r3
 80084ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80084cc:	e00f      	b.n	80084ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80084ce:	4b1b      	ldr	r3, [pc, #108]	; (800853c <UART_SetConfig+0x90c>)
 80084d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084d2:	e00c      	b.n	80084ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80084d4:	4b1a      	ldr	r3, [pc, #104]	; (8008540 <UART_SetConfig+0x910>)
 80084d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084d8:	e009      	b.n	80084ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084e0:	e005      	b.n	80084ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80084e2:	2300      	movs	r3, #0
 80084e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80084ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f000 81ee 	beq.w	80088d2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fa:	4a12      	ldr	r2, [pc, #72]	; (8008544 <UART_SetConfig+0x914>)
 80084fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008500:	461a      	mov	r2, r3
 8008502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008504:	fbb3 f3f2 	udiv	r3, r3, r2
 8008508:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	4613      	mov	r3, r2
 8008510:	005b      	lsls	r3, r3, #1
 8008512:	4413      	add	r3, r2
 8008514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008516:	429a      	cmp	r2, r3
 8008518:	d305      	bcc.n	8008526 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008522:	429a      	cmp	r2, r3
 8008524:	d910      	bls.n	8008548 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800852c:	e1d1      	b.n	80088d2 <UART_SetConfig+0xca2>
 800852e:	bf00      	nop
 8008530:	40011c00 	.word	0x40011c00
 8008534:	58024400 	.word	0x58024400
 8008538:	58000c00 	.word	0x58000c00
 800853c:	03d09000 	.word	0x03d09000
 8008540:	003d0900 	.word	0x003d0900
 8008544:	0800c124 	.word	0x0800c124
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854a:	2200      	movs	r2, #0
 800854c:	60bb      	str	r3, [r7, #8]
 800854e:	60fa      	str	r2, [r7, #12]
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008554:	4ac0      	ldr	r2, [pc, #768]	; (8008858 <UART_SetConfig+0xc28>)
 8008556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800855a:	b29b      	uxth	r3, r3
 800855c:	2200      	movs	r2, #0
 800855e:	603b      	str	r3, [r7, #0]
 8008560:	607a      	str	r2, [r7, #4]
 8008562:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008566:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800856a:	f7f7 ff29 	bl	80003c0 <__aeabi_uldivmod>
 800856e:	4602      	mov	r2, r0
 8008570:	460b      	mov	r3, r1
 8008572:	4610      	mov	r0, r2
 8008574:	4619      	mov	r1, r3
 8008576:	f04f 0200 	mov.w	r2, #0
 800857a:	f04f 0300 	mov.w	r3, #0
 800857e:	020b      	lsls	r3, r1, #8
 8008580:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008584:	0202      	lsls	r2, r0, #8
 8008586:	6979      	ldr	r1, [r7, #20]
 8008588:	6849      	ldr	r1, [r1, #4]
 800858a:	0849      	lsrs	r1, r1, #1
 800858c:	2000      	movs	r0, #0
 800858e:	460c      	mov	r4, r1
 8008590:	4605      	mov	r5, r0
 8008592:	eb12 0804 	adds.w	r8, r2, r4
 8008596:	eb43 0905 	adc.w	r9, r3, r5
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	469a      	mov	sl, r3
 80085a2:	4693      	mov	fp, r2
 80085a4:	4652      	mov	r2, sl
 80085a6:	465b      	mov	r3, fp
 80085a8:	4640      	mov	r0, r8
 80085aa:	4649      	mov	r1, r9
 80085ac:	f7f7 ff08 	bl	80003c0 <__aeabi_uldivmod>
 80085b0:	4602      	mov	r2, r0
 80085b2:	460b      	mov	r3, r1
 80085b4:	4613      	mov	r3, r2
 80085b6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085be:	d308      	bcc.n	80085d2 <UART_SetConfig+0x9a2>
 80085c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085c6:	d204      	bcs.n	80085d2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085ce:	60da      	str	r2, [r3, #12]
 80085d0:	e17f      	b.n	80088d2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80085d8:	e17b      	b.n	80088d2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085e2:	f040 80bd 	bne.w	8008760 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80085e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80085ea:	2b20      	cmp	r3, #32
 80085ec:	dc48      	bgt.n	8008680 <UART_SetConfig+0xa50>
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	db7b      	blt.n	80086ea <UART_SetConfig+0xaba>
 80085f2:	2b20      	cmp	r3, #32
 80085f4:	d879      	bhi.n	80086ea <UART_SetConfig+0xaba>
 80085f6:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <UART_SetConfig+0x9cc>)
 80085f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fc:	08008687 	.word	0x08008687
 8008600:	0800868f 	.word	0x0800868f
 8008604:	080086eb 	.word	0x080086eb
 8008608:	080086eb 	.word	0x080086eb
 800860c:	08008697 	.word	0x08008697
 8008610:	080086eb 	.word	0x080086eb
 8008614:	080086eb 	.word	0x080086eb
 8008618:	080086eb 	.word	0x080086eb
 800861c:	080086a7 	.word	0x080086a7
 8008620:	080086eb 	.word	0x080086eb
 8008624:	080086eb 	.word	0x080086eb
 8008628:	080086eb 	.word	0x080086eb
 800862c:	080086eb 	.word	0x080086eb
 8008630:	080086eb 	.word	0x080086eb
 8008634:	080086eb 	.word	0x080086eb
 8008638:	080086eb 	.word	0x080086eb
 800863c:	080086b7 	.word	0x080086b7
 8008640:	080086eb 	.word	0x080086eb
 8008644:	080086eb 	.word	0x080086eb
 8008648:	080086eb 	.word	0x080086eb
 800864c:	080086eb 	.word	0x080086eb
 8008650:	080086eb 	.word	0x080086eb
 8008654:	080086eb 	.word	0x080086eb
 8008658:	080086eb 	.word	0x080086eb
 800865c:	080086eb 	.word	0x080086eb
 8008660:	080086eb 	.word	0x080086eb
 8008664:	080086eb 	.word	0x080086eb
 8008668:	080086eb 	.word	0x080086eb
 800866c:	080086eb 	.word	0x080086eb
 8008670:	080086eb 	.word	0x080086eb
 8008674:	080086eb 	.word	0x080086eb
 8008678:	080086eb 	.word	0x080086eb
 800867c:	080086dd 	.word	0x080086dd
 8008680:	2b40      	cmp	r3, #64	; 0x40
 8008682:	d02e      	beq.n	80086e2 <UART_SetConfig+0xab2>
 8008684:	e031      	b.n	80086ea <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008686:	f7fd fc07 	bl	8005e98 <HAL_RCC_GetPCLK1Freq>
 800868a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800868c:	e033      	b.n	80086f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800868e:	f7fd fc19 	bl	8005ec4 <HAL_RCC_GetPCLK2Freq>
 8008692:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008694:	e02f      	b.n	80086f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800869a:	4618      	mov	r0, r3
 800869c:	f7fe fdde 	bl	800725c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086a4:	e027      	b.n	80086f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086a6:	f107 0318 	add.w	r3, r7, #24
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fe ff2a 	bl	8007504 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086b4:	e01f      	b.n	80086f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086b6:	4b69      	ldr	r3, [pc, #420]	; (800885c <UART_SetConfig+0xc2c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0320 	and.w	r3, r3, #32
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d009      	beq.n	80086d6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80086c2:	4b66      	ldr	r3, [pc, #408]	; (800885c <UART_SetConfig+0xc2c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	08db      	lsrs	r3, r3, #3
 80086c8:	f003 0303 	and.w	r3, r3, #3
 80086cc:	4a64      	ldr	r2, [pc, #400]	; (8008860 <UART_SetConfig+0xc30>)
 80086ce:	fa22 f303 	lsr.w	r3, r2, r3
 80086d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086d4:	e00f      	b.n	80086f6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80086d6:	4b62      	ldr	r3, [pc, #392]	; (8008860 <UART_SetConfig+0xc30>)
 80086d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086da:	e00c      	b.n	80086f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086dc:	4b61      	ldr	r3, [pc, #388]	; (8008864 <UART_SetConfig+0xc34>)
 80086de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086e0:	e009      	b.n	80086f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086e8:	e005      	b.n	80086f6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80086ea:	2300      	movs	r3, #0
 80086ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80086f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 80ea 	beq.w	80088d2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008702:	4a55      	ldr	r2, [pc, #340]	; (8008858 <UART_SetConfig+0xc28>)
 8008704:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008708:	461a      	mov	r2, r3
 800870a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008710:	005a      	lsls	r2, r3, #1
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	085b      	lsrs	r3, r3, #1
 8008718:	441a      	add	r2, r3
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008722:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008726:	2b0f      	cmp	r3, #15
 8008728:	d916      	bls.n	8008758 <UART_SetConfig+0xb28>
 800872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008730:	d212      	bcs.n	8008758 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008734:	b29b      	uxth	r3, r3
 8008736:	f023 030f 	bic.w	r3, r3, #15
 800873a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800873c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873e:	085b      	lsrs	r3, r3, #1
 8008740:	b29b      	uxth	r3, r3
 8008742:	f003 0307 	and.w	r3, r3, #7
 8008746:	b29a      	uxth	r2, r3
 8008748:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800874a:	4313      	orrs	r3, r2
 800874c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008754:	60da      	str	r2, [r3, #12]
 8008756:	e0bc      	b.n	80088d2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800875e:	e0b8      	b.n	80088d2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008760:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008764:	2b20      	cmp	r3, #32
 8008766:	dc4b      	bgt.n	8008800 <UART_SetConfig+0xbd0>
 8008768:	2b00      	cmp	r3, #0
 800876a:	f2c0 8087 	blt.w	800887c <UART_SetConfig+0xc4c>
 800876e:	2b20      	cmp	r3, #32
 8008770:	f200 8084 	bhi.w	800887c <UART_SetConfig+0xc4c>
 8008774:	a201      	add	r2, pc, #4	; (adr r2, 800877c <UART_SetConfig+0xb4c>)
 8008776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877a:	bf00      	nop
 800877c:	08008807 	.word	0x08008807
 8008780:	0800880f 	.word	0x0800880f
 8008784:	0800887d 	.word	0x0800887d
 8008788:	0800887d 	.word	0x0800887d
 800878c:	08008817 	.word	0x08008817
 8008790:	0800887d 	.word	0x0800887d
 8008794:	0800887d 	.word	0x0800887d
 8008798:	0800887d 	.word	0x0800887d
 800879c:	08008827 	.word	0x08008827
 80087a0:	0800887d 	.word	0x0800887d
 80087a4:	0800887d 	.word	0x0800887d
 80087a8:	0800887d 	.word	0x0800887d
 80087ac:	0800887d 	.word	0x0800887d
 80087b0:	0800887d 	.word	0x0800887d
 80087b4:	0800887d 	.word	0x0800887d
 80087b8:	0800887d 	.word	0x0800887d
 80087bc:	08008837 	.word	0x08008837
 80087c0:	0800887d 	.word	0x0800887d
 80087c4:	0800887d 	.word	0x0800887d
 80087c8:	0800887d 	.word	0x0800887d
 80087cc:	0800887d 	.word	0x0800887d
 80087d0:	0800887d 	.word	0x0800887d
 80087d4:	0800887d 	.word	0x0800887d
 80087d8:	0800887d 	.word	0x0800887d
 80087dc:	0800887d 	.word	0x0800887d
 80087e0:	0800887d 	.word	0x0800887d
 80087e4:	0800887d 	.word	0x0800887d
 80087e8:	0800887d 	.word	0x0800887d
 80087ec:	0800887d 	.word	0x0800887d
 80087f0:	0800887d 	.word	0x0800887d
 80087f4:	0800887d 	.word	0x0800887d
 80087f8:	0800887d 	.word	0x0800887d
 80087fc:	0800886f 	.word	0x0800886f
 8008800:	2b40      	cmp	r3, #64	; 0x40
 8008802:	d037      	beq.n	8008874 <UART_SetConfig+0xc44>
 8008804:	e03a      	b.n	800887c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008806:	f7fd fb47 	bl	8005e98 <HAL_RCC_GetPCLK1Freq>
 800880a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800880c:	e03c      	b.n	8008888 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800880e:	f7fd fb59 	bl	8005ec4 <HAL_RCC_GetPCLK2Freq>
 8008812:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008814:	e038      	b.n	8008888 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe fd1e 	bl	800725c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008824:	e030      	b.n	8008888 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008826:	f107 0318 	add.w	r3, r7, #24
 800882a:	4618      	mov	r0, r3
 800882c:	f7fe fe6a 	bl	8007504 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008834:	e028      	b.n	8008888 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008836:	4b09      	ldr	r3, [pc, #36]	; (800885c <UART_SetConfig+0xc2c>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0320 	and.w	r3, r3, #32
 800883e:	2b00      	cmp	r3, #0
 8008840:	d012      	beq.n	8008868 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008842:	4b06      	ldr	r3, [pc, #24]	; (800885c <UART_SetConfig+0xc2c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	08db      	lsrs	r3, r3, #3
 8008848:	f003 0303 	and.w	r3, r3, #3
 800884c:	4a04      	ldr	r2, [pc, #16]	; (8008860 <UART_SetConfig+0xc30>)
 800884e:	fa22 f303 	lsr.w	r3, r2, r3
 8008852:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008854:	e018      	b.n	8008888 <UART_SetConfig+0xc58>
 8008856:	bf00      	nop
 8008858:	0800c124 	.word	0x0800c124
 800885c:	58024400 	.word	0x58024400
 8008860:	03d09000 	.word	0x03d09000
 8008864:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008868:	4b24      	ldr	r3, [pc, #144]	; (80088fc <UART_SetConfig+0xccc>)
 800886a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800886c:	e00c      	b.n	8008888 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800886e:	4b24      	ldr	r3, [pc, #144]	; (8008900 <UART_SetConfig+0xcd0>)
 8008870:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008872:	e009      	b.n	8008888 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008874:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800887a:	e005      	b.n	8008888 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800887c:	2300      	movs	r3, #0
 800887e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008886:	bf00      	nop
    }

    if (pclk != 0U)
 8008888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800888a:	2b00      	cmp	r3, #0
 800888c:	d021      	beq.n	80088d2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	4a1c      	ldr	r2, [pc, #112]	; (8008904 <UART_SetConfig+0xcd4>)
 8008894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008898:	461a      	mov	r2, r3
 800889a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800889c:	fbb3 f2f2 	udiv	r2, r3, r2
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	085b      	lsrs	r3, r3, #1
 80088a6:	441a      	add	r2, r3
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b4:	2b0f      	cmp	r3, #15
 80088b6:	d909      	bls.n	80088cc <UART_SetConfig+0xc9c>
 80088b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088be:	d205      	bcs.n	80088cc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	60da      	str	r2, [r3, #12]
 80088ca:	e002      	b.n	80088d2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2201      	movs	r2, #1
 80088de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	2200      	movs	r2, #0
 80088e6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	2200      	movs	r2, #0
 80088ec:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80088ee:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3748      	adds	r7, #72	; 0x48
 80088f6:	46bd      	mov	sp, r7
 80088f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088fc:	03d09000 	.word	0x03d09000
 8008900:	003d0900 	.word	0x003d0900
 8008904:	0800c124 	.word	0x0800c124

08008908 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00a      	beq.n	8008932 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00a      	beq.n	8008954 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	430a      	orrs	r2, r1
 8008952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008958:	f003 0304 	and.w	r3, r3, #4
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00a      	beq.n	8008976 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897a:	f003 0308 	and.w	r3, r3, #8
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00a      	beq.n	8008998 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	430a      	orrs	r2, r1
 8008996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899c:	f003 0310 	and.w	r3, r3, #16
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00a      	beq.n	80089ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	430a      	orrs	r2, r1
 80089b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089be:	f003 0320 	and.w	r3, r3, #32
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00a      	beq.n	80089dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	430a      	orrs	r2, r1
 80089da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d01a      	beq.n	8008a1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a06:	d10a      	bne.n	8008a1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00a      	beq.n	8008a40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	605a      	str	r2, [r3, #4]
  }
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b098      	sub	sp, #96	; 0x60
 8008a50:	af02      	add	r7, sp, #8
 8008a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a5c:	f7f9 fae4 	bl	8002028 <HAL_GetTick>
 8008a60:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0308 	and.w	r3, r3, #8
 8008a6c:	2b08      	cmp	r3, #8
 8008a6e:	d12f      	bne.n	8008ad0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f88e 	bl	8008ba0 <UART_WaitOnFlagUntilTimeout>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d022      	beq.n	8008ad0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a92:	e853 3f00 	ldrex	r3, [r3]
 8008a96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a9e:	653b      	str	r3, [r7, #80]	; 0x50
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8008aaa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008aae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ab0:	e841 2300 	strex	r3, r2, [r1]
 8008ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1e6      	bne.n	8008a8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2220      	movs	r2, #32
 8008ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e063      	b.n	8008b98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0304 	and.w	r3, r3, #4
 8008ada:	2b04      	cmp	r3, #4
 8008adc:	d149      	bne.n	8008b72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ade:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f857 	bl	8008ba0 <UART_WaitOnFlagUntilTimeout>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d03c      	beq.n	8008b72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b00:	e853 3f00 	ldrex	r3, [r3]
 8008b04:	623b      	str	r3, [r7, #32]
   return(result);
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	461a      	mov	r2, r3
 8008b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b16:	633b      	str	r3, [r7, #48]	; 0x30
 8008b18:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b1e:	e841 2300 	strex	r3, r2, [r1]
 8008b22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1e6      	bne.n	8008af8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3308      	adds	r3, #8
 8008b30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	e853 3f00 	ldrex	r3, [r3]
 8008b38:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f023 0301 	bic.w	r3, r3, #1
 8008b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3308      	adds	r3, #8
 8008b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b4a:	61fa      	str	r2, [r7, #28]
 8008b4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4e:	69b9      	ldr	r1, [r7, #24]
 8008b50:	69fa      	ldr	r2, [r7, #28]
 8008b52:	e841 2300 	strex	r3, r2, [r1]
 8008b56:	617b      	str	r3, [r7, #20]
   return(result);
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1e5      	bne.n	8008b2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2220      	movs	r2, #32
 8008b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e012      	b.n	8008b98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2220      	movs	r2, #32
 8008b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2220      	movs	r2, #32
 8008b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3758      	adds	r7, #88	; 0x58
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	603b      	str	r3, [r7, #0]
 8008bac:	4613      	mov	r3, r2
 8008bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bb0:	e049      	b.n	8008c46 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb8:	d045      	beq.n	8008c46 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bba:	f7f9 fa35 	bl	8002028 <HAL_GetTick>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d302      	bcc.n	8008bd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d101      	bne.n	8008bd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e048      	b.n	8008c66 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0304 	and.w	r3, r3, #4
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d031      	beq.n	8008c46 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	69db      	ldr	r3, [r3, #28]
 8008be8:	f003 0308 	and.w	r3, r3, #8
 8008bec:	2b08      	cmp	r3, #8
 8008bee:	d110      	bne.n	8008c12 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2208      	movs	r2, #8
 8008bf6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f000 f839 	bl	8008c70 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2208      	movs	r2, #8
 8008c02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e029      	b.n	8008c66 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	69db      	ldr	r3, [r3, #28]
 8008c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c20:	d111      	bne.n	8008c46 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f000 f81f 	bl	8008c70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2220      	movs	r2, #32
 8008c36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e00f      	b.n	8008c66 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	69da      	ldr	r2, [r3, #28]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	4013      	ands	r3, r2
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	bf0c      	ite	eq
 8008c56:	2301      	moveq	r3, #1
 8008c58:	2300      	movne	r3, #0
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	79fb      	ldrb	r3, [r7, #7]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d0a6      	beq.n	8008bb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
	...

08008c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b095      	sub	sp, #84	; 0x54
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c96:	643b      	str	r3, [r7, #64]	; 0x40
 8008c98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c9e:	e841 2300 	strex	r3, r2, [r1]
 8008ca2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1e6      	bne.n	8008c78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3308      	adds	r3, #8
 8008cb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb2:	6a3b      	ldr	r3, [r7, #32]
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cba:	69fa      	ldr	r2, [r7, #28]
 8008cbc:	4b1e      	ldr	r3, [pc, #120]	; (8008d38 <UART_EndRxTransfer+0xc8>)
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3308      	adds	r3, #8
 8008cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ccc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cd2:	e841 2300 	strex	r3, r2, [r1]
 8008cd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e5      	bne.n	8008caa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d118      	bne.n	8008d18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	e853 3f00 	ldrex	r3, [r3]
 8008cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	f023 0310 	bic.w	r3, r3, #16
 8008cfa:	647b      	str	r3, [r7, #68]	; 0x44
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	461a      	mov	r2, r3
 8008d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d04:	61bb      	str	r3, [r7, #24]
 8008d06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d08:	6979      	ldr	r1, [r7, #20]
 8008d0a:	69ba      	ldr	r2, [r7, #24]
 8008d0c:	e841 2300 	strex	r3, r2, [r1]
 8008d10:	613b      	str	r3, [r7, #16]
   return(result);
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1e6      	bne.n	8008ce6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2220      	movs	r2, #32
 8008d1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008d2c:	bf00      	nop
 8008d2e:	3754      	adds	r7, #84	; 0x54
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr
 8008d38:	effffffe 	.word	0xeffffffe

08008d3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d101      	bne.n	8008d52 <HAL_UARTEx_DisableFifoMode+0x16>
 8008d4e:	2302      	movs	r3, #2
 8008d50:	e027      	b.n	8008da2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2224      	movs	r2, #36	; 0x24
 8008d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f022 0201 	bic.w	r2, r2, #1
 8008d78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2220      	movs	r2, #32
 8008d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d101      	bne.n	8008dc6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	e02d      	b.n	8008e22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2224      	movs	r2, #36	; 0x24
 8008dd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f022 0201 	bic.w	r2, r2, #1
 8008dec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	683a      	ldr	r2, [r7, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f850 	bl	8008ea8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2220      	movs	r2, #32
 8008e14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b084      	sub	sp, #16
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d101      	bne.n	8008e42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e3e:	2302      	movs	r3, #2
 8008e40:	e02d      	b.n	8008e9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2224      	movs	r2, #36	; 0x24
 8008e4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f022 0201 	bic.w	r2, r2, #1
 8008e68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f812 	bl	8008ea8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d108      	bne.n	8008eca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ec8:	e031      	b.n	8008f2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008eca:	2310      	movs	r3, #16
 8008ecc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ece:	2310      	movs	r3, #16
 8008ed0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	0e5b      	lsrs	r3, r3, #25
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	f003 0307 	and.w	r3, r3, #7
 8008ee0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	0f5b      	lsrs	r3, r3, #29
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	f003 0307 	and.w	r3, r3, #7
 8008ef0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ef2:	7bbb      	ldrb	r3, [r7, #14]
 8008ef4:	7b3a      	ldrb	r2, [r7, #12]
 8008ef6:	4911      	ldr	r1, [pc, #68]	; (8008f3c <UARTEx_SetNbDataToProcess+0x94>)
 8008ef8:	5c8a      	ldrb	r2, [r1, r2]
 8008efa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008efe:	7b3a      	ldrb	r2, [r7, #12]
 8008f00:	490f      	ldr	r1, [pc, #60]	; (8008f40 <UARTEx_SetNbDataToProcess+0x98>)
 8008f02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f04:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	7b7a      	ldrb	r2, [r7, #13]
 8008f14:	4909      	ldr	r1, [pc, #36]	; (8008f3c <UARTEx_SetNbDataToProcess+0x94>)
 8008f16:	5c8a      	ldrb	r2, [r1, r2]
 8008f18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f1c:	7b7a      	ldrb	r2, [r7, #13]
 8008f1e:	4908      	ldr	r1, [pc, #32]	; (8008f40 <UARTEx_SetNbDataToProcess+0x98>)
 8008f20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f22:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f2e:	bf00      	nop
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	0800c13c 	.word	0x0800c13c
 8008f40:	0800c144 	.word	0x0800c144

08008f44 <TMP117_setup>:
#include "TMP117.h"

#define REV16_A(X) (((X) << 8) | ((X)>>8))

void TMP117_setup(TMP117_dev * dev, I2C_Bus * bus, uint8_t addr)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	71fb      	strb	r3, [r7, #7]
	dev->addr = addr;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	79fa      	ldrb	r2, [r7, #7]
 8008f56:	711a      	strb	r2, [r3, #4]
	dev->bus = bus;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	601a      	str	r2, [r3, #0]
}
 8008f5e:	bf00      	nop
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
	...

08008f6c <TMP117_read_temperature>:

int32_t TMP117_read_temperature(TMP117_dev * dev, float * temperature) {
 8008f6c:	b590      	push	{r4, r7, lr}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af02      	add	r7, sp, #8
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
	int16_t data = 0;
 8008f76:	2300      	movs	r3, #0
 8008f78:	81bb      	strh	r3, [r7, #12]
	uint16_t addr = (dev->addr << 1) | 0x01;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	791b      	ldrb	r3, [r3, #4]
 8008f7e:	005b      	lsls	r3, r3, #1
 8008f80:	b21b      	sxth	r3, r3
 8008f82:	f043 0301 	orr.w	r3, r3, #1
 8008f86:	b21b      	sxth	r3, r3
 8008f88:	81fb      	strh	r3, [r7, #14]
	if(dev->bus->read(addr, TMP117_REG_TEMP_RESULT, 2, (uint8_t *)&data, 2) == HAL_OK)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	691c      	ldr	r4, [r3, #16]
 8008f90:	f107 030c 	add.w	r3, r7, #12
 8008f94:	89f8      	ldrh	r0, [r7, #14]
 8008f96:	2202      	movs	r2, #2
 8008f98:	9200      	str	r2, [sp, #0]
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	47a0      	blx	r4
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d124      	bne.n	8008ff0 <TMP117_read_temperature+0x84>
	{
		if (data == -256) {
 8008fa6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008faa:	f513 7f80 	cmn.w	r3, #256	; 0x100
 8008fae:	d101      	bne.n	8008fb4 <TMP117_read_temperature+0x48>
			//Invalid Data, TMP117 has not done a conversion yet
			return HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e021      	b.n	8008ff8 <TMP117_read_temperature+0x8c>
		}
		data = REV16_A(data); //switch byte order
 8008fb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008fb8:	021b      	lsls	r3, r3, #8
 8008fba:	b21a      	sxth	r2, r3
 8008fbc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008fc0:	121b      	asrs	r3, r3, #8
 8008fc2:	b21b      	sxth	r3, r3
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	b21b      	sxth	r3, r3
 8008fc8:	81bb      	strh	r3, [r7, #12]
		*temperature = (((float)data) * TMP117_LSB_TEMP) / 1000;
 8008fca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008fce:	ee07 3a90 	vmov	s15, r3
 8008fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fd6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8009000 <TMP117_read_temperature+0x94>
 8008fda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008fde:	eddf 6a09 	vldr	s13, [pc, #36]	; 8009004 <TMP117_read_temperature+0x98>
 8008fe2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	edc3 7a00 	vstr	s15, [r3]
		return HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	e003      	b.n	8008ff8 <TMP117_read_temperature+0x8c>
	}
	else
	{
		*temperature = -1;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	4a05      	ldr	r2, [pc, #20]	; (8009008 <TMP117_read_temperature+0x9c>)
 8008ff4:	601a      	str	r2, [r3, #0]
		return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
	}
	return HAL_ERROR;
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd90      	pop	{r4, r7, pc}
 8009000:	40fa0000 	.word	0x40fa0000
 8009004:	447a0000 	.word	0x447a0000
 8009008:	bf800000 	.word	0xbf800000

0800900c <W25N_setup>:
 *******************************************
 */

#include "W25Nxx.h"

void W25N_setup(W25Nxx_dev * dev, OSPI_HandleTypeDef * ospi, uint8_t flashID) {
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	4613      	mov	r3, r2
 8009018:	71fb      	strb	r3, [r7, #7]
	dev->ospi = ospi;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	68ba      	ldr	r2, [r7, #8]
 800901e:	601a      	str	r2, [r3, #0]
	dev->flashID = flashID;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	79fa      	ldrb	r2, [r7, #7]
 8009024:	711a      	strb	r2, [r3, #4]
}
 8009026:	bf00      	nop
 8009028:	3714      	adds	r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr

08009032 <W25N_ReadJEDECID>:
 *
 * @param[in] device struct
 * @param[out] buf Pointer to output data (3 bytes)
 * @return W25N_STATE enum
 */
W25N_STATE W25N_ReadJEDECID(W25Nxx_dev * dev, uint32_t * buf) {
 8009032:	b580      	push	{r7, lr}
 8009034:	b096      	sub	sp, #88	; 0x58
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	6039      	str	r1, [r7, #0]
	OSPI_RegularCmdTypeDef com = {0};
 800903c:	f107 0308 	add.w	r3, r7, #8
 8009040:	2250      	movs	r2, #80	; 0x50
 8009042:	2100      	movs	r1, #0
 8009044:	4618      	mov	r0, r3
 8009046:	f000 ffc5 	bl	8009fd4 <memset>

	com.FlashId = dev->flashID;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	791b      	ldrb	r3, [r3, #4]
 800904e:	60fb      	str	r3, [r7, #12]

	com.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE; // QSPI_INSTRUCTION_...
 8009050:	2301      	movs	r3, #1
 8009052:	617b      	str	r3, [r7, #20]
	com.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8009054:	2300      	movs	r3, #0
 8009056:	61bb      	str	r3, [r7, #24]
	com.Instruction = W25N_DEVID;	 // Command
 8009058:	239f      	movs	r3, #159	; 0x9f
 800905a:	613b      	str	r3, [r7, #16]

	com.DummyCycles = 8;
 800905c:	2308      	movs	r3, #8
 800905e:	64fb      	str	r3, [r7, #76]	; 0x4c
	com.DataMode = HAL_OSPI_DATA_1_LINE;
 8009060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009064:	643b      	str	r3, [r7, #64]	; 0x40
	com.NbData = 3;
 8009066:	2303      	movs	r3, #3
 8009068:	647b      	str	r3, [r7, #68]	; 0x44

	com.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800906a:	2300      	movs	r3, #0
 800906c:	657b      	str	r3, [r7, #84]	; 0x54

	if (HAL_OSPI_Command(dev->ospi, &com, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f107 0108 	add.w	r1, r7, #8
 8009076:	f241 3288 	movw	r2, #5000	; 0x1388
 800907a:	4618      	mov	r0, r3
 800907c:	f7fa fd7e 	bl	8003b7c <HAL_OSPI_Command>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <W25N_ReadJEDECID+0x58>
	{
		return W25N_SPI_ERR;
 8009086:	2304      	movs	r3, #4
 8009088:	e00d      	b.n	80090a6 <W25N_ReadJEDECID+0x74>
	}
	if (HAL_OSPI_Receive(dev->ospi, (uint8_t *)buf, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	4618      	mov	r0, r3
 8009096:	f7fa fe71 	bl	8003d7c <HAL_OSPI_Receive>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d001      	beq.n	80090a4 <W25N_ReadJEDECID+0x72>
	{
		return W25N_SPI_ERR;
 80090a0:	2304      	movs	r3, #4
 80090a2:	e000      	b.n	80090a6 <W25N_ReadJEDECID+0x74>
	}
	return W25N_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3758      	adds	r7, #88	; 0x58
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <W25N_Write_Enable>:
 * @brief W25Q Write Enable
 *
 * @param[in] device struct
 * @return W25N_STATE enum
 */
W25N_STATE W25N_Write_Enable(W25Nxx_dev * dev) {
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b096      	sub	sp, #88	; 0x58
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
	OSPI_RegularCmdTypeDef com = {0};
 80090b6:	f107 0308 	add.w	r3, r7, #8
 80090ba:	2250      	movs	r2, #80	; 0x50
 80090bc:	2100      	movs	r1, #0
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 ff88 	bl	8009fd4 <memset>

	com.FlashId = dev->flashID;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	791b      	ldrb	r3, [r3, #4]
 80090c8:	60fb      	str	r3, [r7, #12]

	com.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE; // QSPI_INSTRUCTION_...
 80090ca:	2301      	movs	r3, #1
 80090cc:	617b      	str	r3, [r7, #20]
	com.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 80090ce:	2300      	movs	r3, #0
 80090d0:	61bb      	str	r3, [r7, #24]
	com.Instruction = W25N_WRITE_ENABLE;	 // Command
 80090d2:	2306      	movs	r3, #6
 80090d4:	613b      	str	r3, [r7, #16]

	if (HAL_OSPI_Command(dev->ospi, &com, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f107 0108 	add.w	r1, r7, #8
 80090de:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fa fd4a 	bl	8003b7c <HAL_OSPI_Command>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <W25N_Write_Enable+0x44>
	{
		return W25N_SPI_ERR;
 80090ee:	2304      	movs	r3, #4
 80090f0:	e000      	b.n	80090f4 <W25N_Write_Enable+0x46>
	}
	return W25N_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3758      	adds	r7, #88	; 0x58
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <W25N_Block_Erase>:
 * @param[in] device struct
 * @param[in] address of the page to erase
 * @return W25N_STATE enum
 */
W25N_STATE W25N_Block_Erase(W25Nxx_dev * dev, uint16_t pageAddress)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b096      	sub	sp, #88	; 0x58
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	460b      	mov	r3, r1
 8009106:	807b      	strh	r3, [r7, #2]
	OSPI_RegularCmdTypeDef com = {0};
 8009108:	f107 0308 	add.w	r3, r7, #8
 800910c:	2250      	movs	r2, #80	; 0x50
 800910e:	2100      	movs	r1, #0
 8009110:	4618      	mov	r0, r3
 8009112:	f000 ff5f 	bl	8009fd4 <memset>

	com.FlashId = dev->flashID;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	791b      	ldrb	r3, [r3, #4]
 800911a:	60fb      	str	r3, [r7, #12]

	com.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE; // QSPI_INSTRUCTION_...
 800911c:	2301      	movs	r3, #1
 800911e:	617b      	str	r3, [r7, #20]
	com.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8009120:	2300      	movs	r3, #0
 8009122:	61bb      	str	r3, [r7, #24]
	com.Instruction = W25N_BLOCK_ERASE;	 // Command
 8009124:	23d8      	movs	r3, #216	; 0xd8
 8009126:	613b      	str	r3, [r7, #16]

	com.NbData = 2;
 8009128:	2302      	movs	r3, #2
 800912a:	647b      	str	r3, [r7, #68]	; 0x44
	com.DummyCycles = 8;
 800912c:	2308      	movs	r3, #8
 800912e:	64fb      	str	r3, [r7, #76]	; 0x4c
	com.DataMode = HAL_OSPI_DATA_1_LINE;
 8009130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009134:	643b      	str	r3, [r7, #64]	; 0x40

	if (HAL_OSPI_Command(dev->ospi, &com, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f107 0108 	add.w	r1, r7, #8
 800913e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009142:	4618      	mov	r0, r3
 8009144:	f7fa fd1a 	bl	8003b7c <HAL_OSPI_Command>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <W25N_Block_Erase+0x56>
	{
		return W25N_SPI_ERR;
 800914e:	2304      	movs	r3, #4
 8009150:	e00d      	b.n	800916e <W25N_Block_Erase+0x72>
	}

	if (HAL_OSPI_Transmit(dev->ospi, (uint8_t *)&pageAddress, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	1cb9      	adds	r1, r7, #2
 8009158:	f241 3288 	movw	r2, #5000	; 0x1388
 800915c:	4618      	mov	r0, r3
 800915e:	f7fa fd9a 	bl	8003c96 <HAL_OSPI_Transmit>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d001      	beq.n	800916c <W25N_Block_Erase+0x70>
		return W25N_SPI_ERR;
 8009168:	2304      	movs	r3, #4
 800916a:	e000      	b.n	800916e <W25N_Block_Erase+0x72>
	}
	return W25N_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3758      	adds	r7, #88	; 0x58
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <W25N_Read_Status_Reg>:
 * @param[in] address of register to read
 * @param[out] contents of register
 * @return W25N_STATE enum
 */
W25N_STATE W25N_Read_Status_Reg(W25Nxx_dev * dev, uint8_t SRAddress, uint8_t * reg)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b098      	sub	sp, #96	; 0x60
 800917a:	af00      	add	r7, sp, #0
 800917c:	60f8      	str	r0, [r7, #12]
 800917e:	460b      	mov	r3, r1
 8009180:	607a      	str	r2, [r7, #4]
 8009182:	72fb      	strb	r3, [r7, #11]
	OSPI_RegularCmdTypeDef com = {0};
 8009184:	f107 0310 	add.w	r3, r7, #16
 8009188:	2250      	movs	r2, #80	; 0x50
 800918a:	2100      	movs	r1, #0
 800918c:	4618      	mov	r0, r3
 800918e:	f000 ff21 	bl	8009fd4 <memset>

	com.FlashId = dev->flashID;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	791b      	ldrb	r3, [r3, #4]
 8009196:	617b      	str	r3, [r7, #20]

	com.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE; // QSPI_INSTRUCTION_...
 8009198:	2301      	movs	r3, #1
 800919a:	61fb      	str	r3, [r7, #28]
	com.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 800919c:	2300      	movs	r3, #0
 800919e:	623b      	str	r3, [r7, #32]
	com.Instruction = W25N_READ_SR1;	 // Command
 80091a0:	230f      	movs	r3, #15
 80091a2:	61bb      	str	r3, [r7, #24]

	com.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80091a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	com.AddressSize = HAL_OSPI_ADDRESS_8_BITS;
 80091aa:	2300      	movs	r3, #0
 80091ac:	633b      	str	r3, [r7, #48]	; 0x30
	com.Address = SRAddress;
 80091ae:	7afb      	ldrb	r3, [r7, #11]
 80091b0:	62bb      	str	r3, [r7, #40]	; 0x28

	com.DummyCycles = 0;
 80091b2:	2300      	movs	r3, #0
 80091b4:	657b      	str	r3, [r7, #84]	; 0x54
	com.DataMode = HAL_OSPI_DATA_1_LINE;
 80091b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091ba:	64bb      	str	r3, [r7, #72]	; 0x48
	com.NbData = 1;
 80091bc:	2301      	movs	r3, #1
 80091be:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_OSPI_Command(dev->ospi, &com, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f107 0110 	add.w	r1, r7, #16
 80091c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fa fcd5 	bl	8003b7c <HAL_OSPI_Command>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <W25N_Read_Status_Reg+0x66>
	{
		return W25N_SPI_ERR;
 80091d8:	2304      	movs	r3, #4
 80091da:	e00d      	b.n	80091f8 <W25N_Read_Status_Reg+0x82>
	}
	if (HAL_OSPI_Receive(dev->ospi, (uint8_t *)reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e4:	6879      	ldr	r1, [r7, #4]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fa fdc8 	bl	8003d7c <HAL_OSPI_Receive>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <W25N_Read_Status_Reg+0x80>
	{
		return W25N_SPI_ERR;
 80091f2:	2304      	movs	r3, #4
 80091f4:	e000      	b.n	80091f8 <W25N_Read_Status_Reg+0x82>
	}
	return W25N_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3760      	adds	r7, #96	; 0x60
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <W25N_Write_Status_Reg>:
 * @param[in] device struct
 * @param[in] address of register to write
 * @param[in] contents of register
 * @return W25N_STATE enum
 */
W25N_STATE W25N_Write_Status_Reg(W25Nxx_dev * dev, uint8_t SRAddress, uint8_t reg) {
 8009200:	b580      	push	{r7, lr}
 8009202:	b096      	sub	sp, #88	; 0x58
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	70fb      	strb	r3, [r7, #3]
 800920c:	4613      	mov	r3, r2
 800920e:	70bb      	strb	r3, [r7, #2]
	OSPI_RegularCmdTypeDef com = {0};
 8009210:	f107 0308 	add.w	r3, r7, #8
 8009214:	2250      	movs	r2, #80	; 0x50
 8009216:	2100      	movs	r1, #0
 8009218:	4618      	mov	r0, r3
 800921a:	f000 fedb 	bl	8009fd4 <memset>

	com.FlashId = dev->flashID;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	791b      	ldrb	r3, [r3, #4]
 8009222:	60fb      	str	r3, [r7, #12]

	com.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE; // QSPI_INSTRUCTION_...
 8009224:	2301      	movs	r3, #1
 8009226:	617b      	str	r3, [r7, #20]
	com.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8009228:	2300      	movs	r3, #0
 800922a:	61bb      	str	r3, [r7, #24]
	com.Instruction = W25N_WRITE_SR1;	 // Command
 800922c:	231f      	movs	r3, #31
 800922e:	613b      	str	r3, [r7, #16]

	com.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8009230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009234:	627b      	str	r3, [r7, #36]	; 0x24
	com.AddressSize = HAL_OSPI_ADDRESS_8_BITS;
 8009236:	2300      	movs	r3, #0
 8009238:	62bb      	str	r3, [r7, #40]	; 0x28
	com.Address = SRAddress;
 800923a:	78fb      	ldrb	r3, [r7, #3]
 800923c:	623b      	str	r3, [r7, #32]

	com.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_1_LINE;
 800923e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009242:	637b      	str	r3, [r7, #52]	; 0x34
	com.AlternateBytes = reg;
 8009244:	78bb      	ldrb	r3, [r7, #2]
 8009246:	633b      	str	r3, [r7, #48]	; 0x30
	com.AlternateBytesSize = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 8009248:	2300      	movs	r3, #0
 800924a:	63bb      	str	r3, [r7, #56]	; 0x38

	if (HAL_OSPI_Command(dev->ospi, &com, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f107 0108 	add.w	r1, r7, #8
 8009254:	f241 3288 	movw	r2, #5000	; 0x1388
 8009258:	4618      	mov	r0, r3
 800925a:	f7fa fc8f 	bl	8003b7c <HAL_OSPI_Command>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d001      	beq.n	8009268 <W25N_Write_Status_Reg+0x68>
	{
		return W25N_SPI_ERR;
 8009264:	2304      	movs	r3, #4
 8009266:	e000      	b.n	800926a <W25N_Write_Status_Reg+0x6a>
	}
	return W25N_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3758      	adds	r7, #88	; 0x58
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <W25N_Load_Data_Quad>:
 * @param[in] Column Address
 * @param[in] Address of the buffer to write
 * @param[in] Size of the buffer in bytes, max of 2112 bytes
 * @return W25N_STATE enum
 */
W25N_STATE W25N_Load_Data_Quad(W25Nxx_dev * dev, uint16_t columnAddress, uint8_t * buffer, uint32_t bufferSize) {
 8009272:	b580      	push	{r7, lr}
 8009274:	b098      	sub	sp, #96	; 0x60
 8009276:	af00      	add	r7, sp, #0
 8009278:	60f8      	str	r0, [r7, #12]
 800927a:	607a      	str	r2, [r7, #4]
 800927c:	603b      	str	r3, [r7, #0]
 800927e:	460b      	mov	r3, r1
 8009280:	817b      	strh	r3, [r7, #10]
	OSPI_RegularCmdTypeDef com = {0};
 8009282:	f107 0310 	add.w	r3, r7, #16
 8009286:	2250      	movs	r2, #80	; 0x50
 8009288:	2100      	movs	r1, #0
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fea2 	bl	8009fd4 <memset>

	com.FlashId = dev->flashID;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	791b      	ldrb	r3, [r3, #4]
 8009294:	617b      	str	r3, [r7, #20]

	com.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE; // QSPI_INSTRUCTION_...
 8009296:	2301      	movs	r3, #1
 8009298:	61fb      	str	r3, [r7, #28]
	com.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 800929a:	2300      	movs	r3, #0
 800929c:	623b      	str	r3, [r7, #32]
	com.Instruction = W25N_QUAD_PROGRAM_DATA_LOAD;	 // Command
 800929e:	2332      	movs	r3, #50	; 0x32
 80092a0:	61bb      	str	r3, [r7, #24]

	com.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80092a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	com.AddressSize = HAL_OSPI_ADDRESS_16_BITS;
 80092a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092ac:	633b      	str	r3, [r7, #48]	; 0x30
	com.Address = columnAddress;
 80092ae:	897b      	ldrh	r3, [r7, #10]
 80092b0:	62bb      	str	r3, [r7, #40]	; 0x28

	com.DataMode = HAL_OSPI_DATA_4_LINES; //QSPI
 80092b2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80092b6:	64bb      	str	r3, [r7, #72]	; 0x48
	com.NbData = bufferSize;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_OSPI_Command(dev->ospi, &com, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f107 0110 	add.w	r1, r7, #16
 80092c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fa fc57 	bl	8003b7c <HAL_OSPI_Command>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <W25N_Load_Data_Quad+0x66>
	{
		return W25N_SPI_ERR;
 80092d4:	2304      	movs	r3, #4
 80092d6:	e00d      	b.n	80092f4 <W25N_Load_Data_Quad+0x82>
	}

	//Transmit the data
	if (HAL_OSPI_Transmit(dev->ospi, buffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80092e0:	6879      	ldr	r1, [r7, #4]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fa fcd7 	bl	8003c96 <HAL_OSPI_Transmit>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <W25N_Load_Data_Quad+0x80>
		return W25N_SPI_ERR;
 80092ee:	2304      	movs	r3, #4
 80092f0:	e000      	b.n	80092f4 <W25N_Load_Data_Quad+0x82>
	}
	return W25N_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3760      	adds	r7, #96	; 0x60
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <W25N_Program_Execute>:
 *
 * @param[in] device struct
 * @param[in] address of page to write to
 * @return W25N_STATE enum
 */
W25N_STATE W25N_Program_Execute(W25Nxx_dev * dev, uint16_t pageAddress) {
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b098      	sub	sp, #96	; 0x60
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	460b      	mov	r3, r1
 8009306:	807b      	strh	r3, [r7, #2]
	OSPI_RegularCmdTypeDef com = {0};
 8009308:	f107 0310 	add.w	r3, r7, #16
 800930c:	2250      	movs	r2, #80	; 0x50
 800930e:	2100      	movs	r1, #0
 8009310:	4618      	mov	r0, r3
 8009312:	f000 fe5f 	bl	8009fd4 <memset>

	com.FlashId = dev->flashID;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	791b      	ldrb	r3, [r3, #4]
 800931a:	617b      	str	r3, [r7, #20]

	com.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE; // QSPI_INSTRUCTION_...
 800931c:	2301      	movs	r3, #1
 800931e:	61fb      	str	r3, [r7, #28]
	com.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8009320:	2300      	movs	r3, #0
 8009322:	623b      	str	r3, [r7, #32]
	com.Instruction = W25N_PROGRAM_EXECUTE;	 // Command
 8009324:	2310      	movs	r3, #16
 8009326:	61bb      	str	r3, [r7, #24]

	com.NbData = 2; //We will be transmitting 2 bytes for page address
 8009328:	2302      	movs	r3, #2
 800932a:	64fb      	str	r3, [r7, #76]	; 0x4c
	com.DummyCycles = 8;
 800932c:	2308      	movs	r3, #8
 800932e:	657b      	str	r3, [r7, #84]	; 0x54
	com.DataMode = HAL_OSPI_DATA_1_LINE;
 8009330:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009334:	64bb      	str	r3, [r7, #72]	; 0x48

	if (HAL_OSPI_Command(dev->ospi, &com, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f107 0110 	add.w	r1, r7, #16
 800933e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009342:	4618      	mov	r0, r3
 8009344:	f7fa fc1a 	bl	8003b7c <HAL_OSPI_Command>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d001      	beq.n	8009352 <W25N_Program_Execute+0x56>
	{
		return W25N_SPI_ERR;
 800934e:	2304      	movs	r3, #4
 8009350:	e010      	b.n	8009374 <W25N_Program_Execute+0x78>
	}
	uint16_t addr = pageAddress;
 8009352:	887b      	ldrh	r3, [r7, #2]
 8009354:	81fb      	strh	r3, [r7, #14]
	//Transmit the page address
	if (HAL_OSPI_Transmit(dev->ospi, (uint8_t *)&addr, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f107 010e 	add.w	r1, r7, #14
 800935e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009362:	4618      	mov	r0, r3
 8009364:	f7fa fc97 	bl	8003c96 <HAL_OSPI_Transmit>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <W25N_Program_Execute+0x76>
		return W25N_SPI_ERR;
 800936e:	2304      	movs	r3, #4
 8009370:	e000      	b.n	8009374 <W25N_Program_Execute+0x78>
	}

	return W25N_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3760      	adds	r7, #96	; 0x60
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <W25N_Page_Data_Read>:
 * @param[in] device struct
 * @param[in] address of page to read
 * @return W25N_STATE enum
 */
W25N_STATE W25N_Page_Data_Read(W25Nxx_dev * dev, uint16_t pageAddress)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b096      	sub	sp, #88	; 0x58
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	460b      	mov	r3, r1
 8009386:	807b      	strh	r3, [r7, #2]
	OSPI_RegularCmdTypeDef com = {0};
 8009388:	f107 0308 	add.w	r3, r7, #8
 800938c:	2250      	movs	r2, #80	; 0x50
 800938e:	2100      	movs	r1, #0
 8009390:	4618      	mov	r0, r3
 8009392:	f000 fe1f 	bl	8009fd4 <memset>

	com.FlashId = dev->flashID;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	791b      	ldrb	r3, [r3, #4]
 800939a:	60fb      	str	r3, [r7, #12]

	com.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE; // QSPI_INSTRUCTION_...
 800939c:	2301      	movs	r3, #1
 800939e:	617b      	str	r3, [r7, #20]
	com.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 80093a0:	2300      	movs	r3, #0
 80093a2:	61bb      	str	r3, [r7, #24]
	com.Instruction = W25N_PAGE_DATA_READ;	 // Command
 80093a4:	2313      	movs	r3, #19
 80093a6:	613b      	str	r3, [r7, #16]

	com.NbData = 2; //We will be transmitting 2 bytes for page address
 80093a8:	2302      	movs	r3, #2
 80093aa:	647b      	str	r3, [r7, #68]	; 0x44
	com.DummyCycles = 8;
 80093ac:	2308      	movs	r3, #8
 80093ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	com.DataMode = HAL_OSPI_DATA_1_LINE;
 80093b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093b4:	643b      	str	r3, [r7, #64]	; 0x40

	if (HAL_OSPI_Command(dev->ospi, &com, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f107 0108 	add.w	r1, r7, #8
 80093be:	f241 3288 	movw	r2, #5000	; 0x1388
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fa fbda 	bl	8003b7c <HAL_OSPI_Command>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <W25N_Page_Data_Read+0x56>
	{
		return W25N_SPI_ERR;
 80093ce:	2304      	movs	r3, #4
 80093d0:	e00d      	b.n	80093ee <W25N_Page_Data_Read+0x72>
	}

	//Transmit the page address
	if (HAL_OSPI_Transmit(dev->ospi, (uint8_t *)&pageAddress, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	1cb9      	adds	r1, r7, #2
 80093d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fa fc5a 	bl	8003c96 <HAL_OSPI_Transmit>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <W25N_Page_Data_Read+0x70>
		return W25N_SPI_ERR;
 80093e8:	2304      	movs	r3, #4
 80093ea:	e000      	b.n	80093ee <W25N_Page_Data_Read+0x72>
	}

	return W25N_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3758      	adds	r7, #88	; 0x58
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <W25N_Read_Output_Quad>:
 * @param[out] buffer to output to
 * @param[in] size of buffer
 * @return W25N_STATE enum
 */
W25N_STATE W25N_Read_Output_Quad(W25Nxx_dev * dev, uint16_t columnAddress, uint8_t * buffer, uint32_t bufferSize)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b098      	sub	sp, #96	; 0x60
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	60f8      	str	r0, [r7, #12]
 80093fe:	607a      	str	r2, [r7, #4]
 8009400:	603b      	str	r3, [r7, #0]
 8009402:	460b      	mov	r3, r1
 8009404:	817b      	strh	r3, [r7, #10]
	OSPI_RegularCmdTypeDef com = {0};
 8009406:	f107 0310 	add.w	r3, r7, #16
 800940a:	2250      	movs	r2, #80	; 0x50
 800940c:	2100      	movs	r1, #0
 800940e:	4618      	mov	r0, r3
 8009410:	f000 fde0 	bl	8009fd4 <memset>

	com.FlashId = dev->flashID;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	791b      	ldrb	r3, [r3, #4]
 8009418:	617b      	str	r3, [r7, #20]

	com.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE; // QSPI_INSTRUCTION_...
 800941a:	2301      	movs	r3, #1
 800941c:	61fb      	str	r3, [r7, #28]
	com.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 800941e:	2300      	movs	r3, #0
 8009420:	623b      	str	r3, [r7, #32]
	com.Instruction = W25N_FAST_READ_QUAD;	 // Command
 8009422:	236b      	movs	r3, #107	; 0x6b
 8009424:	61bb      	str	r3, [r7, #24]

	com.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8009426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800942a:	62fb      	str	r3, [r7, #44]	; 0x2c
	com.AddressSize = HAL_OSPI_ADDRESS_16_BITS;
 800942c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009430:	633b      	str	r3, [r7, #48]	; 0x30
	com.Address = columnAddress;
 8009432:	897b      	ldrh	r3, [r7, #10]
 8009434:	62bb      	str	r3, [r7, #40]	; 0x28

	com.DataMode = HAL_OSPI_DATA_4_LINES; //QSPI
 8009436:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800943a:	64bb      	str	r3, [r7, #72]	; 0x48
	com.NbData = bufferSize;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	64fb      	str	r3, [r7, #76]	; 0x4c
	com.DummyCycles = 8;
 8009440:	2308      	movs	r3, #8
 8009442:	657b      	str	r3, [r7, #84]	; 0x54

	if (HAL_OSPI_Command(dev->ospi, &com, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f107 0110 	add.w	r1, r7, #16
 800944c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009450:	4618      	mov	r0, r3
 8009452:	f7fa fb93 	bl	8003b7c <HAL_OSPI_Command>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <W25N_Read_Output_Quad+0x6a>
	{
		return W25N_SPI_ERR;
 800945c:	2304      	movs	r3, #4
 800945e:	e00d      	b.n	800947c <W25N_Read_Output_Quad+0x86>
	}
	//Receive the data
	if (HAL_OSPI_Receive(dev->ospi, buffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f241 3288 	movw	r2, #5000	; 0x1388
 8009468:	6879      	ldr	r1, [r7, #4]
 800946a:	4618      	mov	r0, r3
 800946c:	f7fa fc86 	bl	8003d7c <HAL_OSPI_Receive>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <W25N_Read_Output_Quad+0x84>
		return W25N_SPI_ERR;
 8009476:	2304      	movs	r3, #4
 8009478:	e000      	b.n	800947c <W25N_Read_Output_Quad+0x86>
	}
	return W25N_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3760      	adds	r7, #96	; 0x60
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <W25N_Wait_Until_Not_Busy>:
 * @param[in] Device struct
 * @param[in] Timeout
 * @return W25N_STATE enum
 */
W25N_STATE W25N_Wait_Until_Not_Busy(W25Nxx_dev * dev, uint32_t timout_ms)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b09c      	sub	sp, #112	; 0x70
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
	OSPI_RegularCmdTypeDef com = {0};
 800948e:	f107 0320 	add.w	r3, r7, #32
 8009492:	2250      	movs	r2, #80	; 0x50
 8009494:	2100      	movs	r1, #0
 8009496:	4618      	mov	r0, r3
 8009498:	f000 fd9c 	bl	8009fd4 <memset>
	OSPI_AutoPollingTypeDef polling_cmd = {0};
 800949c:	f107 030c 	add.w	r3, r7, #12
 80094a0:	2200      	movs	r2, #0
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	605a      	str	r2, [r3, #4]
 80094a6:	609a      	str	r2, [r3, #8]
 80094a8:	60da      	str	r2, [r3, #12]
 80094aa:	611a      	str	r2, [r3, #16]

	com.FlashId = dev->flashID;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	791b      	ldrb	r3, [r3, #4]
 80094b0:	627b      	str	r3, [r7, #36]	; 0x24

	com.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE; // QSPI_INSTRUCTION_...
 80094b2:	2301      	movs	r3, #1
 80094b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	com.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 80094b6:	2300      	movs	r3, #0
 80094b8:	633b      	str	r3, [r7, #48]	; 0x30
	com.Instruction = W25N_READ_SR1;	 // Command
 80094ba:	230f      	movs	r3, #15
 80094bc:	62bb      	str	r3, [r7, #40]	; 0x28

	com.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80094be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	com.AddressSize = HAL_OSPI_ADDRESS_8_BITS;
 80094c4:	2300      	movs	r3, #0
 80094c6:	643b      	str	r3, [r7, #64]	; 0x40
	com.Address = W25N_STATUS_REG;
 80094c8:	23c0      	movs	r3, #192	; 0xc0
 80094ca:	63bb      	str	r3, [r7, #56]	; 0x38

	com.DummyCycles = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	667b      	str	r3, [r7, #100]	; 0x64
	com.DataMode = HAL_OSPI_DATA_1_LINE;
 80094d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094d4:	65bb      	str	r3, [r7, #88]	; 0x58
	com.NbData = 1;
 80094d6:	2301      	movs	r3, #1
 80094d8:	65fb      	str	r3, [r7, #92]	; 0x5c

	polling_cmd.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80094da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80094de:	61bb      	str	r3, [r7, #24]
	polling_cmd.Interval = 16U;
 80094e0:	2310      	movs	r3, #16
 80094e2:	61fb      	str	r3, [r7, #28]
	polling_cmd.Mask = 0x00000001; //Busy bit is LSB, the only one we care about
 80094e4:	2301      	movs	r3, #1
 80094e6:	613b      	str	r3, [r7, #16]
	polling_cmd.Match = 0x00000000; //Busy bit is 0 when not busy
 80094e8:	2300      	movs	r3, #0
 80094ea:	60fb      	str	r3, [r7, #12]
	polling_cmd.MatchMode = HAL_OSPI_MATCH_MODE_AND;
 80094ec:	2300      	movs	r3, #0
 80094ee:	617b      	str	r3, [r7, #20]

	if (HAL_OSPI_Command(dev->ospi, &com, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f107 0120 	add.w	r1, r7, #32
 80094f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7fa fb3d 	bl	8003b7c <HAL_OSPI_Command>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <W25N_Wait_Until_Not_Busy+0x88>
	{
		return W25N_SPI_ERR;
 8009508:	2304      	movs	r3, #4
 800950a:	e00d      	b.n	8009528 <W25N_Wait_Until_Not_Busy+0xa4>
	}
	if (HAL_OSPI_AutoPolling(dev->ospi, &polling_cmd, timout_ms) != HAL_OK)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f107 010c 	add.w	r1, r7, #12
 8009514:	683a      	ldr	r2, [r7, #0]
 8009516:	4618      	mov	r0, r3
 8009518:	f7fa fcd3 	bl	8003ec2 <HAL_OSPI_AutoPolling>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <W25N_Wait_Until_Not_Busy+0xa2>
	{
		return W25N_SPI_ERR;
 8009522:	2304      	movs	r3, #4
 8009524:	e000      	b.n	8009528 <W25N_Wait_Until_Not_Busy+0xa4>
	}
	return W25N_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3770      	adds	r7, #112	; 0x70
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <__cvt>:
 8009530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009532:	ed2d 8b02 	vpush	{d8}
 8009536:	eeb0 8b40 	vmov.f64	d8, d0
 800953a:	b085      	sub	sp, #20
 800953c:	4617      	mov	r7, r2
 800953e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009540:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009542:	ee18 2a90 	vmov	r2, s17
 8009546:	f025 0520 	bic.w	r5, r5, #32
 800954a:	2a00      	cmp	r2, #0
 800954c:	bfb6      	itet	lt
 800954e:	222d      	movlt	r2, #45	; 0x2d
 8009550:	2200      	movge	r2, #0
 8009552:	eeb1 8b40 	vneglt.f64	d8, d0
 8009556:	2d46      	cmp	r5, #70	; 0x46
 8009558:	460c      	mov	r4, r1
 800955a:	701a      	strb	r2, [r3, #0]
 800955c:	d004      	beq.n	8009568 <__cvt+0x38>
 800955e:	2d45      	cmp	r5, #69	; 0x45
 8009560:	d100      	bne.n	8009564 <__cvt+0x34>
 8009562:	3401      	adds	r4, #1
 8009564:	2102      	movs	r1, #2
 8009566:	e000      	b.n	800956a <__cvt+0x3a>
 8009568:	2103      	movs	r1, #3
 800956a:	ab03      	add	r3, sp, #12
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	ab02      	add	r3, sp, #8
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	4622      	mov	r2, r4
 8009574:	4633      	mov	r3, r6
 8009576:	eeb0 0b48 	vmov.f64	d0, d8
 800957a:	f000 fe41 	bl	800a200 <_dtoa_r>
 800957e:	2d47      	cmp	r5, #71	; 0x47
 8009580:	d101      	bne.n	8009586 <__cvt+0x56>
 8009582:	07fb      	lsls	r3, r7, #31
 8009584:	d51a      	bpl.n	80095bc <__cvt+0x8c>
 8009586:	2d46      	cmp	r5, #70	; 0x46
 8009588:	eb00 0204 	add.w	r2, r0, r4
 800958c:	d10c      	bne.n	80095a8 <__cvt+0x78>
 800958e:	7803      	ldrb	r3, [r0, #0]
 8009590:	2b30      	cmp	r3, #48	; 0x30
 8009592:	d107      	bne.n	80095a4 <__cvt+0x74>
 8009594:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800959c:	bf1c      	itt	ne
 800959e:	f1c4 0401 	rsbne	r4, r4, #1
 80095a2:	6034      	strne	r4, [r6, #0]
 80095a4:	6833      	ldr	r3, [r6, #0]
 80095a6:	441a      	add	r2, r3
 80095a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80095ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b0:	bf08      	it	eq
 80095b2:	9203      	streq	r2, [sp, #12]
 80095b4:	2130      	movs	r1, #48	; 0x30
 80095b6:	9b03      	ldr	r3, [sp, #12]
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d307      	bcc.n	80095cc <__cvt+0x9c>
 80095bc:	9b03      	ldr	r3, [sp, #12]
 80095be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095c0:	1a1b      	subs	r3, r3, r0
 80095c2:	6013      	str	r3, [r2, #0]
 80095c4:	b005      	add	sp, #20
 80095c6:	ecbd 8b02 	vpop	{d8}
 80095ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095cc:	1c5c      	adds	r4, r3, #1
 80095ce:	9403      	str	r4, [sp, #12]
 80095d0:	7019      	strb	r1, [r3, #0]
 80095d2:	e7f0      	b.n	80095b6 <__cvt+0x86>

080095d4 <__exponent>:
 80095d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095d6:	4603      	mov	r3, r0
 80095d8:	2900      	cmp	r1, #0
 80095da:	bfb8      	it	lt
 80095dc:	4249      	neglt	r1, r1
 80095de:	f803 2b02 	strb.w	r2, [r3], #2
 80095e2:	bfb4      	ite	lt
 80095e4:	222d      	movlt	r2, #45	; 0x2d
 80095e6:	222b      	movge	r2, #43	; 0x2b
 80095e8:	2909      	cmp	r1, #9
 80095ea:	7042      	strb	r2, [r0, #1]
 80095ec:	dd2a      	ble.n	8009644 <__exponent+0x70>
 80095ee:	f10d 0207 	add.w	r2, sp, #7
 80095f2:	4617      	mov	r7, r2
 80095f4:	260a      	movs	r6, #10
 80095f6:	4694      	mov	ip, r2
 80095f8:	fb91 f5f6 	sdiv	r5, r1, r6
 80095fc:	fb06 1415 	mls	r4, r6, r5, r1
 8009600:	3430      	adds	r4, #48	; 0x30
 8009602:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009606:	460c      	mov	r4, r1
 8009608:	2c63      	cmp	r4, #99	; 0x63
 800960a:	f102 32ff 	add.w	r2, r2, #4294967295
 800960e:	4629      	mov	r1, r5
 8009610:	dcf1      	bgt.n	80095f6 <__exponent+0x22>
 8009612:	3130      	adds	r1, #48	; 0x30
 8009614:	f1ac 0402 	sub.w	r4, ip, #2
 8009618:	f802 1c01 	strb.w	r1, [r2, #-1]
 800961c:	1c41      	adds	r1, r0, #1
 800961e:	4622      	mov	r2, r4
 8009620:	42ba      	cmp	r2, r7
 8009622:	d30a      	bcc.n	800963a <__exponent+0x66>
 8009624:	f10d 0209 	add.w	r2, sp, #9
 8009628:	eba2 020c 	sub.w	r2, r2, ip
 800962c:	42bc      	cmp	r4, r7
 800962e:	bf88      	it	hi
 8009630:	2200      	movhi	r2, #0
 8009632:	4413      	add	r3, r2
 8009634:	1a18      	subs	r0, r3, r0
 8009636:	b003      	add	sp, #12
 8009638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800963a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800963e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009642:	e7ed      	b.n	8009620 <__exponent+0x4c>
 8009644:	2330      	movs	r3, #48	; 0x30
 8009646:	3130      	adds	r1, #48	; 0x30
 8009648:	7083      	strb	r3, [r0, #2]
 800964a:	70c1      	strb	r1, [r0, #3]
 800964c:	1d03      	adds	r3, r0, #4
 800964e:	e7f1      	b.n	8009634 <__exponent+0x60>

08009650 <_printf_float>:
 8009650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009654:	b08b      	sub	sp, #44	; 0x2c
 8009656:	460c      	mov	r4, r1
 8009658:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800965c:	4616      	mov	r6, r2
 800965e:	461f      	mov	r7, r3
 8009660:	4605      	mov	r5, r0
 8009662:	f000 fcbf 	bl	8009fe4 <_localeconv_r>
 8009666:	f8d0 b000 	ldr.w	fp, [r0]
 800966a:	4658      	mov	r0, fp
 800966c:	f7f6 fea0 	bl	80003b0 <strlen>
 8009670:	2300      	movs	r3, #0
 8009672:	9308      	str	r3, [sp, #32]
 8009674:	f8d8 3000 	ldr.w	r3, [r8]
 8009678:	f894 9018 	ldrb.w	r9, [r4, #24]
 800967c:	6822      	ldr	r2, [r4, #0]
 800967e:	3307      	adds	r3, #7
 8009680:	f023 0307 	bic.w	r3, r3, #7
 8009684:	f103 0108 	add.w	r1, r3, #8
 8009688:	f8c8 1000 	str.w	r1, [r8]
 800968c:	ed93 0b00 	vldr	d0, [r3]
 8009690:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80098f0 <_printf_float+0x2a0>
 8009694:	eeb0 7bc0 	vabs.f64	d7, d0
 8009698:	eeb4 7b46 	vcmp.f64	d7, d6
 800969c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80096a4:	4682      	mov	sl, r0
 80096a6:	dd24      	ble.n	80096f2 <_printf_float+0xa2>
 80096a8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80096ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b0:	d502      	bpl.n	80096b8 <_printf_float+0x68>
 80096b2:	232d      	movs	r3, #45	; 0x2d
 80096b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096b8:	498f      	ldr	r1, [pc, #572]	; (80098f8 <_printf_float+0x2a8>)
 80096ba:	4b90      	ldr	r3, [pc, #576]	; (80098fc <_printf_float+0x2ac>)
 80096bc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80096c0:	bf94      	ite	ls
 80096c2:	4688      	movls	r8, r1
 80096c4:	4698      	movhi	r8, r3
 80096c6:	2303      	movs	r3, #3
 80096c8:	6123      	str	r3, [r4, #16]
 80096ca:	f022 0204 	bic.w	r2, r2, #4
 80096ce:	2300      	movs	r3, #0
 80096d0:	6022      	str	r2, [r4, #0]
 80096d2:	9304      	str	r3, [sp, #16]
 80096d4:	9700      	str	r7, [sp, #0]
 80096d6:	4633      	mov	r3, r6
 80096d8:	aa09      	add	r2, sp, #36	; 0x24
 80096da:	4621      	mov	r1, r4
 80096dc:	4628      	mov	r0, r5
 80096de:	f000 f9d1 	bl	8009a84 <_printf_common>
 80096e2:	3001      	adds	r0, #1
 80096e4:	f040 808a 	bne.w	80097fc <_printf_float+0x1ac>
 80096e8:	f04f 30ff 	mov.w	r0, #4294967295
 80096ec:	b00b      	add	sp, #44	; 0x2c
 80096ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f2:	eeb4 0b40 	vcmp.f64	d0, d0
 80096f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096fa:	d709      	bvc.n	8009710 <_printf_float+0xc0>
 80096fc:	ee10 3a90 	vmov	r3, s1
 8009700:	2b00      	cmp	r3, #0
 8009702:	bfbc      	itt	lt
 8009704:	232d      	movlt	r3, #45	; 0x2d
 8009706:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800970a:	497d      	ldr	r1, [pc, #500]	; (8009900 <_printf_float+0x2b0>)
 800970c:	4b7d      	ldr	r3, [pc, #500]	; (8009904 <_printf_float+0x2b4>)
 800970e:	e7d5      	b.n	80096bc <_printf_float+0x6c>
 8009710:	6863      	ldr	r3, [r4, #4]
 8009712:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009716:	9104      	str	r1, [sp, #16]
 8009718:	1c59      	adds	r1, r3, #1
 800971a:	d13c      	bne.n	8009796 <_printf_float+0x146>
 800971c:	2306      	movs	r3, #6
 800971e:	6063      	str	r3, [r4, #4]
 8009720:	2300      	movs	r3, #0
 8009722:	9303      	str	r3, [sp, #12]
 8009724:	ab08      	add	r3, sp, #32
 8009726:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800972a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800972e:	ab07      	add	r3, sp, #28
 8009730:	6861      	ldr	r1, [r4, #4]
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	6022      	str	r2, [r4, #0]
 8009736:	f10d 031b 	add.w	r3, sp, #27
 800973a:	4628      	mov	r0, r5
 800973c:	f7ff fef8 	bl	8009530 <__cvt>
 8009740:	9b04      	ldr	r3, [sp, #16]
 8009742:	9907      	ldr	r1, [sp, #28]
 8009744:	2b47      	cmp	r3, #71	; 0x47
 8009746:	4680      	mov	r8, r0
 8009748:	d108      	bne.n	800975c <_printf_float+0x10c>
 800974a:	1cc8      	adds	r0, r1, #3
 800974c:	db02      	blt.n	8009754 <_printf_float+0x104>
 800974e:	6863      	ldr	r3, [r4, #4]
 8009750:	4299      	cmp	r1, r3
 8009752:	dd41      	ble.n	80097d8 <_printf_float+0x188>
 8009754:	f1a9 0902 	sub.w	r9, r9, #2
 8009758:	fa5f f989 	uxtb.w	r9, r9
 800975c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009760:	d820      	bhi.n	80097a4 <_printf_float+0x154>
 8009762:	3901      	subs	r1, #1
 8009764:	464a      	mov	r2, r9
 8009766:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800976a:	9107      	str	r1, [sp, #28]
 800976c:	f7ff ff32 	bl	80095d4 <__exponent>
 8009770:	9a08      	ldr	r2, [sp, #32]
 8009772:	9004      	str	r0, [sp, #16]
 8009774:	1813      	adds	r3, r2, r0
 8009776:	2a01      	cmp	r2, #1
 8009778:	6123      	str	r3, [r4, #16]
 800977a:	dc02      	bgt.n	8009782 <_printf_float+0x132>
 800977c:	6822      	ldr	r2, [r4, #0]
 800977e:	07d2      	lsls	r2, r2, #31
 8009780:	d501      	bpl.n	8009786 <_printf_float+0x136>
 8009782:	3301      	adds	r3, #1
 8009784:	6123      	str	r3, [r4, #16]
 8009786:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0a2      	beq.n	80096d4 <_printf_float+0x84>
 800978e:	232d      	movs	r3, #45	; 0x2d
 8009790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009794:	e79e      	b.n	80096d4 <_printf_float+0x84>
 8009796:	9904      	ldr	r1, [sp, #16]
 8009798:	2947      	cmp	r1, #71	; 0x47
 800979a:	d1c1      	bne.n	8009720 <_printf_float+0xd0>
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1bf      	bne.n	8009720 <_printf_float+0xd0>
 80097a0:	2301      	movs	r3, #1
 80097a2:	e7bc      	b.n	800971e <_printf_float+0xce>
 80097a4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80097a8:	d118      	bne.n	80097dc <_printf_float+0x18c>
 80097aa:	2900      	cmp	r1, #0
 80097ac:	6863      	ldr	r3, [r4, #4]
 80097ae:	dd0b      	ble.n	80097c8 <_printf_float+0x178>
 80097b0:	6121      	str	r1, [r4, #16]
 80097b2:	b913      	cbnz	r3, 80097ba <_printf_float+0x16a>
 80097b4:	6822      	ldr	r2, [r4, #0]
 80097b6:	07d0      	lsls	r0, r2, #31
 80097b8:	d502      	bpl.n	80097c0 <_printf_float+0x170>
 80097ba:	3301      	adds	r3, #1
 80097bc:	440b      	add	r3, r1
 80097be:	6123      	str	r3, [r4, #16]
 80097c0:	2300      	movs	r3, #0
 80097c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80097c4:	9304      	str	r3, [sp, #16]
 80097c6:	e7de      	b.n	8009786 <_printf_float+0x136>
 80097c8:	b913      	cbnz	r3, 80097d0 <_printf_float+0x180>
 80097ca:	6822      	ldr	r2, [r4, #0]
 80097cc:	07d2      	lsls	r2, r2, #31
 80097ce:	d501      	bpl.n	80097d4 <_printf_float+0x184>
 80097d0:	3302      	adds	r3, #2
 80097d2:	e7f4      	b.n	80097be <_printf_float+0x16e>
 80097d4:	2301      	movs	r3, #1
 80097d6:	e7f2      	b.n	80097be <_printf_float+0x16e>
 80097d8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80097dc:	9b08      	ldr	r3, [sp, #32]
 80097de:	4299      	cmp	r1, r3
 80097e0:	db05      	blt.n	80097ee <_printf_float+0x19e>
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	6121      	str	r1, [r4, #16]
 80097e6:	07d8      	lsls	r0, r3, #31
 80097e8:	d5ea      	bpl.n	80097c0 <_printf_float+0x170>
 80097ea:	1c4b      	adds	r3, r1, #1
 80097ec:	e7e7      	b.n	80097be <_printf_float+0x16e>
 80097ee:	2900      	cmp	r1, #0
 80097f0:	bfd4      	ite	le
 80097f2:	f1c1 0202 	rsble	r2, r1, #2
 80097f6:	2201      	movgt	r2, #1
 80097f8:	4413      	add	r3, r2
 80097fa:	e7e0      	b.n	80097be <_printf_float+0x16e>
 80097fc:	6823      	ldr	r3, [r4, #0]
 80097fe:	055a      	lsls	r2, r3, #21
 8009800:	d407      	bmi.n	8009812 <_printf_float+0x1c2>
 8009802:	6923      	ldr	r3, [r4, #16]
 8009804:	4642      	mov	r2, r8
 8009806:	4631      	mov	r1, r6
 8009808:	4628      	mov	r0, r5
 800980a:	47b8      	blx	r7
 800980c:	3001      	adds	r0, #1
 800980e:	d12a      	bne.n	8009866 <_printf_float+0x216>
 8009810:	e76a      	b.n	80096e8 <_printf_float+0x98>
 8009812:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009816:	f240 80e0 	bls.w	80099da <_printf_float+0x38a>
 800981a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800981e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009826:	d133      	bne.n	8009890 <_printf_float+0x240>
 8009828:	4a37      	ldr	r2, [pc, #220]	; (8009908 <_printf_float+0x2b8>)
 800982a:	2301      	movs	r3, #1
 800982c:	4631      	mov	r1, r6
 800982e:	4628      	mov	r0, r5
 8009830:	47b8      	blx	r7
 8009832:	3001      	adds	r0, #1
 8009834:	f43f af58 	beq.w	80096e8 <_printf_float+0x98>
 8009838:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800983c:	429a      	cmp	r2, r3
 800983e:	db02      	blt.n	8009846 <_printf_float+0x1f6>
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	07d8      	lsls	r0, r3, #31
 8009844:	d50f      	bpl.n	8009866 <_printf_float+0x216>
 8009846:	4653      	mov	r3, sl
 8009848:	465a      	mov	r2, fp
 800984a:	4631      	mov	r1, r6
 800984c:	4628      	mov	r0, r5
 800984e:	47b8      	blx	r7
 8009850:	3001      	adds	r0, #1
 8009852:	f43f af49 	beq.w	80096e8 <_printf_float+0x98>
 8009856:	f04f 0800 	mov.w	r8, #0
 800985a:	f104 091a 	add.w	r9, r4, #26
 800985e:	9b08      	ldr	r3, [sp, #32]
 8009860:	3b01      	subs	r3, #1
 8009862:	4543      	cmp	r3, r8
 8009864:	dc09      	bgt.n	800987a <_printf_float+0x22a>
 8009866:	6823      	ldr	r3, [r4, #0]
 8009868:	079b      	lsls	r3, r3, #30
 800986a:	f100 8106 	bmi.w	8009a7a <_printf_float+0x42a>
 800986e:	68e0      	ldr	r0, [r4, #12]
 8009870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009872:	4298      	cmp	r0, r3
 8009874:	bfb8      	it	lt
 8009876:	4618      	movlt	r0, r3
 8009878:	e738      	b.n	80096ec <_printf_float+0x9c>
 800987a:	2301      	movs	r3, #1
 800987c:	464a      	mov	r2, r9
 800987e:	4631      	mov	r1, r6
 8009880:	4628      	mov	r0, r5
 8009882:	47b8      	blx	r7
 8009884:	3001      	adds	r0, #1
 8009886:	f43f af2f 	beq.w	80096e8 <_printf_float+0x98>
 800988a:	f108 0801 	add.w	r8, r8, #1
 800988e:	e7e6      	b.n	800985e <_printf_float+0x20e>
 8009890:	9b07      	ldr	r3, [sp, #28]
 8009892:	2b00      	cmp	r3, #0
 8009894:	dc3a      	bgt.n	800990c <_printf_float+0x2bc>
 8009896:	4a1c      	ldr	r2, [pc, #112]	; (8009908 <_printf_float+0x2b8>)
 8009898:	2301      	movs	r3, #1
 800989a:	4631      	mov	r1, r6
 800989c:	4628      	mov	r0, r5
 800989e:	47b8      	blx	r7
 80098a0:	3001      	adds	r0, #1
 80098a2:	f43f af21 	beq.w	80096e8 <_printf_float+0x98>
 80098a6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	d102      	bne.n	80098b4 <_printf_float+0x264>
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	07d9      	lsls	r1, r3, #31
 80098b2:	d5d8      	bpl.n	8009866 <_printf_float+0x216>
 80098b4:	4653      	mov	r3, sl
 80098b6:	465a      	mov	r2, fp
 80098b8:	4631      	mov	r1, r6
 80098ba:	4628      	mov	r0, r5
 80098bc:	47b8      	blx	r7
 80098be:	3001      	adds	r0, #1
 80098c0:	f43f af12 	beq.w	80096e8 <_printf_float+0x98>
 80098c4:	f04f 0900 	mov.w	r9, #0
 80098c8:	f104 0a1a 	add.w	sl, r4, #26
 80098cc:	9b07      	ldr	r3, [sp, #28]
 80098ce:	425b      	negs	r3, r3
 80098d0:	454b      	cmp	r3, r9
 80098d2:	dc01      	bgt.n	80098d8 <_printf_float+0x288>
 80098d4:	9b08      	ldr	r3, [sp, #32]
 80098d6:	e795      	b.n	8009804 <_printf_float+0x1b4>
 80098d8:	2301      	movs	r3, #1
 80098da:	4652      	mov	r2, sl
 80098dc:	4631      	mov	r1, r6
 80098de:	4628      	mov	r0, r5
 80098e0:	47b8      	blx	r7
 80098e2:	3001      	adds	r0, #1
 80098e4:	f43f af00 	beq.w	80096e8 <_printf_float+0x98>
 80098e8:	f109 0901 	add.w	r9, r9, #1
 80098ec:	e7ee      	b.n	80098cc <_printf_float+0x27c>
 80098ee:	bf00      	nop
 80098f0:	ffffffff 	.word	0xffffffff
 80098f4:	7fefffff 	.word	0x7fefffff
 80098f8:	0800c14c 	.word	0x0800c14c
 80098fc:	0800c150 	.word	0x0800c150
 8009900:	0800c154 	.word	0x0800c154
 8009904:	0800c158 	.word	0x0800c158
 8009908:	0800c15c 	.word	0x0800c15c
 800990c:	9a08      	ldr	r2, [sp, #32]
 800990e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009910:	429a      	cmp	r2, r3
 8009912:	bfa8      	it	ge
 8009914:	461a      	movge	r2, r3
 8009916:	2a00      	cmp	r2, #0
 8009918:	4691      	mov	r9, r2
 800991a:	dc38      	bgt.n	800998e <_printf_float+0x33e>
 800991c:	2300      	movs	r3, #0
 800991e:	9305      	str	r3, [sp, #20]
 8009920:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009924:	f104 021a 	add.w	r2, r4, #26
 8009928:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800992a:	9905      	ldr	r1, [sp, #20]
 800992c:	9304      	str	r3, [sp, #16]
 800992e:	eba3 0309 	sub.w	r3, r3, r9
 8009932:	428b      	cmp	r3, r1
 8009934:	dc33      	bgt.n	800999e <_printf_float+0x34e>
 8009936:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800993a:	429a      	cmp	r2, r3
 800993c:	db3c      	blt.n	80099b8 <_printf_float+0x368>
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	07da      	lsls	r2, r3, #31
 8009942:	d439      	bmi.n	80099b8 <_printf_float+0x368>
 8009944:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009948:	eba2 0903 	sub.w	r9, r2, r3
 800994c:	9b04      	ldr	r3, [sp, #16]
 800994e:	1ad2      	subs	r2, r2, r3
 8009950:	4591      	cmp	r9, r2
 8009952:	bfa8      	it	ge
 8009954:	4691      	movge	r9, r2
 8009956:	f1b9 0f00 	cmp.w	r9, #0
 800995a:	dc35      	bgt.n	80099c8 <_printf_float+0x378>
 800995c:	f04f 0800 	mov.w	r8, #0
 8009960:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009964:	f104 0a1a 	add.w	sl, r4, #26
 8009968:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800996c:	1a9b      	subs	r3, r3, r2
 800996e:	eba3 0309 	sub.w	r3, r3, r9
 8009972:	4543      	cmp	r3, r8
 8009974:	f77f af77 	ble.w	8009866 <_printf_float+0x216>
 8009978:	2301      	movs	r3, #1
 800997a:	4652      	mov	r2, sl
 800997c:	4631      	mov	r1, r6
 800997e:	4628      	mov	r0, r5
 8009980:	47b8      	blx	r7
 8009982:	3001      	adds	r0, #1
 8009984:	f43f aeb0 	beq.w	80096e8 <_printf_float+0x98>
 8009988:	f108 0801 	add.w	r8, r8, #1
 800998c:	e7ec      	b.n	8009968 <_printf_float+0x318>
 800998e:	4613      	mov	r3, r2
 8009990:	4631      	mov	r1, r6
 8009992:	4642      	mov	r2, r8
 8009994:	4628      	mov	r0, r5
 8009996:	47b8      	blx	r7
 8009998:	3001      	adds	r0, #1
 800999a:	d1bf      	bne.n	800991c <_printf_float+0x2cc>
 800999c:	e6a4      	b.n	80096e8 <_printf_float+0x98>
 800999e:	2301      	movs	r3, #1
 80099a0:	4631      	mov	r1, r6
 80099a2:	4628      	mov	r0, r5
 80099a4:	9204      	str	r2, [sp, #16]
 80099a6:	47b8      	blx	r7
 80099a8:	3001      	adds	r0, #1
 80099aa:	f43f ae9d 	beq.w	80096e8 <_printf_float+0x98>
 80099ae:	9b05      	ldr	r3, [sp, #20]
 80099b0:	9a04      	ldr	r2, [sp, #16]
 80099b2:	3301      	adds	r3, #1
 80099b4:	9305      	str	r3, [sp, #20]
 80099b6:	e7b7      	b.n	8009928 <_printf_float+0x2d8>
 80099b8:	4653      	mov	r3, sl
 80099ba:	465a      	mov	r2, fp
 80099bc:	4631      	mov	r1, r6
 80099be:	4628      	mov	r0, r5
 80099c0:	47b8      	blx	r7
 80099c2:	3001      	adds	r0, #1
 80099c4:	d1be      	bne.n	8009944 <_printf_float+0x2f4>
 80099c6:	e68f      	b.n	80096e8 <_printf_float+0x98>
 80099c8:	9a04      	ldr	r2, [sp, #16]
 80099ca:	464b      	mov	r3, r9
 80099cc:	4442      	add	r2, r8
 80099ce:	4631      	mov	r1, r6
 80099d0:	4628      	mov	r0, r5
 80099d2:	47b8      	blx	r7
 80099d4:	3001      	adds	r0, #1
 80099d6:	d1c1      	bne.n	800995c <_printf_float+0x30c>
 80099d8:	e686      	b.n	80096e8 <_printf_float+0x98>
 80099da:	9a08      	ldr	r2, [sp, #32]
 80099dc:	2a01      	cmp	r2, #1
 80099de:	dc01      	bgt.n	80099e4 <_printf_float+0x394>
 80099e0:	07db      	lsls	r3, r3, #31
 80099e2:	d537      	bpl.n	8009a54 <_printf_float+0x404>
 80099e4:	2301      	movs	r3, #1
 80099e6:	4642      	mov	r2, r8
 80099e8:	4631      	mov	r1, r6
 80099ea:	4628      	mov	r0, r5
 80099ec:	47b8      	blx	r7
 80099ee:	3001      	adds	r0, #1
 80099f0:	f43f ae7a 	beq.w	80096e8 <_printf_float+0x98>
 80099f4:	4653      	mov	r3, sl
 80099f6:	465a      	mov	r2, fp
 80099f8:	4631      	mov	r1, r6
 80099fa:	4628      	mov	r0, r5
 80099fc:	47b8      	blx	r7
 80099fe:	3001      	adds	r0, #1
 8009a00:	f43f ae72 	beq.w	80096e8 <_printf_float+0x98>
 8009a04:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009a08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a10:	9b08      	ldr	r3, [sp, #32]
 8009a12:	d01a      	beq.n	8009a4a <_printf_float+0x3fa>
 8009a14:	3b01      	subs	r3, #1
 8009a16:	f108 0201 	add.w	r2, r8, #1
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	47b8      	blx	r7
 8009a20:	3001      	adds	r0, #1
 8009a22:	d10e      	bne.n	8009a42 <_printf_float+0x3f2>
 8009a24:	e660      	b.n	80096e8 <_printf_float+0x98>
 8009a26:	2301      	movs	r3, #1
 8009a28:	464a      	mov	r2, r9
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	47b8      	blx	r7
 8009a30:	3001      	adds	r0, #1
 8009a32:	f43f ae59 	beq.w	80096e8 <_printf_float+0x98>
 8009a36:	f108 0801 	add.w	r8, r8, #1
 8009a3a:	9b08      	ldr	r3, [sp, #32]
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	4543      	cmp	r3, r8
 8009a40:	dcf1      	bgt.n	8009a26 <_printf_float+0x3d6>
 8009a42:	9b04      	ldr	r3, [sp, #16]
 8009a44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a48:	e6dd      	b.n	8009806 <_printf_float+0x1b6>
 8009a4a:	f04f 0800 	mov.w	r8, #0
 8009a4e:	f104 091a 	add.w	r9, r4, #26
 8009a52:	e7f2      	b.n	8009a3a <_printf_float+0x3ea>
 8009a54:	2301      	movs	r3, #1
 8009a56:	4642      	mov	r2, r8
 8009a58:	e7df      	b.n	8009a1a <_printf_float+0x3ca>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	464a      	mov	r2, r9
 8009a5e:	4631      	mov	r1, r6
 8009a60:	4628      	mov	r0, r5
 8009a62:	47b8      	blx	r7
 8009a64:	3001      	adds	r0, #1
 8009a66:	f43f ae3f 	beq.w	80096e8 <_printf_float+0x98>
 8009a6a:	f108 0801 	add.w	r8, r8, #1
 8009a6e:	68e3      	ldr	r3, [r4, #12]
 8009a70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a72:	1a5b      	subs	r3, r3, r1
 8009a74:	4543      	cmp	r3, r8
 8009a76:	dcf0      	bgt.n	8009a5a <_printf_float+0x40a>
 8009a78:	e6f9      	b.n	800986e <_printf_float+0x21e>
 8009a7a:	f04f 0800 	mov.w	r8, #0
 8009a7e:	f104 0919 	add.w	r9, r4, #25
 8009a82:	e7f4      	b.n	8009a6e <_printf_float+0x41e>

08009a84 <_printf_common>:
 8009a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a88:	4616      	mov	r6, r2
 8009a8a:	4699      	mov	r9, r3
 8009a8c:	688a      	ldr	r2, [r1, #8]
 8009a8e:	690b      	ldr	r3, [r1, #16]
 8009a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a94:	4293      	cmp	r3, r2
 8009a96:	bfb8      	it	lt
 8009a98:	4613      	movlt	r3, r2
 8009a9a:	6033      	str	r3, [r6, #0]
 8009a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	b10a      	cbz	r2, 8009aaa <_printf_common+0x26>
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	6033      	str	r3, [r6, #0]
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	0699      	lsls	r1, r3, #26
 8009aae:	bf42      	ittt	mi
 8009ab0:	6833      	ldrmi	r3, [r6, #0]
 8009ab2:	3302      	addmi	r3, #2
 8009ab4:	6033      	strmi	r3, [r6, #0]
 8009ab6:	6825      	ldr	r5, [r4, #0]
 8009ab8:	f015 0506 	ands.w	r5, r5, #6
 8009abc:	d106      	bne.n	8009acc <_printf_common+0x48>
 8009abe:	f104 0a19 	add.w	sl, r4, #25
 8009ac2:	68e3      	ldr	r3, [r4, #12]
 8009ac4:	6832      	ldr	r2, [r6, #0]
 8009ac6:	1a9b      	subs	r3, r3, r2
 8009ac8:	42ab      	cmp	r3, r5
 8009aca:	dc26      	bgt.n	8009b1a <_printf_common+0x96>
 8009acc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ad0:	1e13      	subs	r3, r2, #0
 8009ad2:	6822      	ldr	r2, [r4, #0]
 8009ad4:	bf18      	it	ne
 8009ad6:	2301      	movne	r3, #1
 8009ad8:	0692      	lsls	r2, r2, #26
 8009ada:	d42b      	bmi.n	8009b34 <_printf_common+0xb0>
 8009adc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ae0:	4649      	mov	r1, r9
 8009ae2:	4638      	mov	r0, r7
 8009ae4:	47c0      	blx	r8
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	d01e      	beq.n	8009b28 <_printf_common+0xa4>
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	6922      	ldr	r2, [r4, #16]
 8009aee:	f003 0306 	and.w	r3, r3, #6
 8009af2:	2b04      	cmp	r3, #4
 8009af4:	bf02      	ittt	eq
 8009af6:	68e5      	ldreq	r5, [r4, #12]
 8009af8:	6833      	ldreq	r3, [r6, #0]
 8009afa:	1aed      	subeq	r5, r5, r3
 8009afc:	68a3      	ldr	r3, [r4, #8]
 8009afe:	bf0c      	ite	eq
 8009b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b04:	2500      	movne	r5, #0
 8009b06:	4293      	cmp	r3, r2
 8009b08:	bfc4      	itt	gt
 8009b0a:	1a9b      	subgt	r3, r3, r2
 8009b0c:	18ed      	addgt	r5, r5, r3
 8009b0e:	2600      	movs	r6, #0
 8009b10:	341a      	adds	r4, #26
 8009b12:	42b5      	cmp	r5, r6
 8009b14:	d11a      	bne.n	8009b4c <_printf_common+0xc8>
 8009b16:	2000      	movs	r0, #0
 8009b18:	e008      	b.n	8009b2c <_printf_common+0xa8>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	4652      	mov	r2, sl
 8009b1e:	4649      	mov	r1, r9
 8009b20:	4638      	mov	r0, r7
 8009b22:	47c0      	blx	r8
 8009b24:	3001      	adds	r0, #1
 8009b26:	d103      	bne.n	8009b30 <_printf_common+0xac>
 8009b28:	f04f 30ff 	mov.w	r0, #4294967295
 8009b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b30:	3501      	adds	r5, #1
 8009b32:	e7c6      	b.n	8009ac2 <_printf_common+0x3e>
 8009b34:	18e1      	adds	r1, r4, r3
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	2030      	movs	r0, #48	; 0x30
 8009b3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b3e:	4422      	add	r2, r4
 8009b40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b48:	3302      	adds	r3, #2
 8009b4a:	e7c7      	b.n	8009adc <_printf_common+0x58>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	4622      	mov	r2, r4
 8009b50:	4649      	mov	r1, r9
 8009b52:	4638      	mov	r0, r7
 8009b54:	47c0      	blx	r8
 8009b56:	3001      	adds	r0, #1
 8009b58:	d0e6      	beq.n	8009b28 <_printf_common+0xa4>
 8009b5a:	3601      	adds	r6, #1
 8009b5c:	e7d9      	b.n	8009b12 <_printf_common+0x8e>
	...

08009b60 <_printf_i>:
 8009b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b64:	7e0f      	ldrb	r7, [r1, #24]
 8009b66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b68:	2f78      	cmp	r7, #120	; 0x78
 8009b6a:	4691      	mov	r9, r2
 8009b6c:	4680      	mov	r8, r0
 8009b6e:	460c      	mov	r4, r1
 8009b70:	469a      	mov	sl, r3
 8009b72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b76:	d807      	bhi.n	8009b88 <_printf_i+0x28>
 8009b78:	2f62      	cmp	r7, #98	; 0x62
 8009b7a:	d80a      	bhi.n	8009b92 <_printf_i+0x32>
 8009b7c:	2f00      	cmp	r7, #0
 8009b7e:	f000 80d4 	beq.w	8009d2a <_printf_i+0x1ca>
 8009b82:	2f58      	cmp	r7, #88	; 0x58
 8009b84:	f000 80c0 	beq.w	8009d08 <_printf_i+0x1a8>
 8009b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b90:	e03a      	b.n	8009c08 <_printf_i+0xa8>
 8009b92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b96:	2b15      	cmp	r3, #21
 8009b98:	d8f6      	bhi.n	8009b88 <_printf_i+0x28>
 8009b9a:	a101      	add	r1, pc, #4	; (adr r1, 8009ba0 <_printf_i+0x40>)
 8009b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ba0:	08009bf9 	.word	0x08009bf9
 8009ba4:	08009c0d 	.word	0x08009c0d
 8009ba8:	08009b89 	.word	0x08009b89
 8009bac:	08009b89 	.word	0x08009b89
 8009bb0:	08009b89 	.word	0x08009b89
 8009bb4:	08009b89 	.word	0x08009b89
 8009bb8:	08009c0d 	.word	0x08009c0d
 8009bbc:	08009b89 	.word	0x08009b89
 8009bc0:	08009b89 	.word	0x08009b89
 8009bc4:	08009b89 	.word	0x08009b89
 8009bc8:	08009b89 	.word	0x08009b89
 8009bcc:	08009d11 	.word	0x08009d11
 8009bd0:	08009c39 	.word	0x08009c39
 8009bd4:	08009ccb 	.word	0x08009ccb
 8009bd8:	08009b89 	.word	0x08009b89
 8009bdc:	08009b89 	.word	0x08009b89
 8009be0:	08009d33 	.word	0x08009d33
 8009be4:	08009b89 	.word	0x08009b89
 8009be8:	08009c39 	.word	0x08009c39
 8009bec:	08009b89 	.word	0x08009b89
 8009bf0:	08009b89 	.word	0x08009b89
 8009bf4:	08009cd3 	.word	0x08009cd3
 8009bf8:	682b      	ldr	r3, [r5, #0]
 8009bfa:	1d1a      	adds	r2, r3, #4
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	602a      	str	r2, [r5, #0]
 8009c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e09f      	b.n	8009d4c <_printf_i+0x1ec>
 8009c0c:	6820      	ldr	r0, [r4, #0]
 8009c0e:	682b      	ldr	r3, [r5, #0]
 8009c10:	0607      	lsls	r7, r0, #24
 8009c12:	f103 0104 	add.w	r1, r3, #4
 8009c16:	6029      	str	r1, [r5, #0]
 8009c18:	d501      	bpl.n	8009c1e <_printf_i+0xbe>
 8009c1a:	681e      	ldr	r6, [r3, #0]
 8009c1c:	e003      	b.n	8009c26 <_printf_i+0xc6>
 8009c1e:	0646      	lsls	r6, r0, #25
 8009c20:	d5fb      	bpl.n	8009c1a <_printf_i+0xba>
 8009c22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c26:	2e00      	cmp	r6, #0
 8009c28:	da03      	bge.n	8009c32 <_printf_i+0xd2>
 8009c2a:	232d      	movs	r3, #45	; 0x2d
 8009c2c:	4276      	negs	r6, r6
 8009c2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c32:	485a      	ldr	r0, [pc, #360]	; (8009d9c <_printf_i+0x23c>)
 8009c34:	230a      	movs	r3, #10
 8009c36:	e012      	b.n	8009c5e <_printf_i+0xfe>
 8009c38:	682b      	ldr	r3, [r5, #0]
 8009c3a:	6820      	ldr	r0, [r4, #0]
 8009c3c:	1d19      	adds	r1, r3, #4
 8009c3e:	6029      	str	r1, [r5, #0]
 8009c40:	0605      	lsls	r5, r0, #24
 8009c42:	d501      	bpl.n	8009c48 <_printf_i+0xe8>
 8009c44:	681e      	ldr	r6, [r3, #0]
 8009c46:	e002      	b.n	8009c4e <_printf_i+0xee>
 8009c48:	0641      	lsls	r1, r0, #25
 8009c4a:	d5fb      	bpl.n	8009c44 <_printf_i+0xe4>
 8009c4c:	881e      	ldrh	r6, [r3, #0]
 8009c4e:	4853      	ldr	r0, [pc, #332]	; (8009d9c <_printf_i+0x23c>)
 8009c50:	2f6f      	cmp	r7, #111	; 0x6f
 8009c52:	bf0c      	ite	eq
 8009c54:	2308      	moveq	r3, #8
 8009c56:	230a      	movne	r3, #10
 8009c58:	2100      	movs	r1, #0
 8009c5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c5e:	6865      	ldr	r5, [r4, #4]
 8009c60:	60a5      	str	r5, [r4, #8]
 8009c62:	2d00      	cmp	r5, #0
 8009c64:	bfa2      	ittt	ge
 8009c66:	6821      	ldrge	r1, [r4, #0]
 8009c68:	f021 0104 	bicge.w	r1, r1, #4
 8009c6c:	6021      	strge	r1, [r4, #0]
 8009c6e:	b90e      	cbnz	r6, 8009c74 <_printf_i+0x114>
 8009c70:	2d00      	cmp	r5, #0
 8009c72:	d04b      	beq.n	8009d0c <_printf_i+0x1ac>
 8009c74:	4615      	mov	r5, r2
 8009c76:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c7a:	fb03 6711 	mls	r7, r3, r1, r6
 8009c7e:	5dc7      	ldrb	r7, [r0, r7]
 8009c80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c84:	4637      	mov	r7, r6
 8009c86:	42bb      	cmp	r3, r7
 8009c88:	460e      	mov	r6, r1
 8009c8a:	d9f4      	bls.n	8009c76 <_printf_i+0x116>
 8009c8c:	2b08      	cmp	r3, #8
 8009c8e:	d10b      	bne.n	8009ca8 <_printf_i+0x148>
 8009c90:	6823      	ldr	r3, [r4, #0]
 8009c92:	07de      	lsls	r6, r3, #31
 8009c94:	d508      	bpl.n	8009ca8 <_printf_i+0x148>
 8009c96:	6923      	ldr	r3, [r4, #16]
 8009c98:	6861      	ldr	r1, [r4, #4]
 8009c9a:	4299      	cmp	r1, r3
 8009c9c:	bfde      	ittt	le
 8009c9e:	2330      	movle	r3, #48	; 0x30
 8009ca0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ca4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ca8:	1b52      	subs	r2, r2, r5
 8009caa:	6122      	str	r2, [r4, #16]
 8009cac:	f8cd a000 	str.w	sl, [sp]
 8009cb0:	464b      	mov	r3, r9
 8009cb2:	aa03      	add	r2, sp, #12
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	4640      	mov	r0, r8
 8009cb8:	f7ff fee4 	bl	8009a84 <_printf_common>
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	d14a      	bne.n	8009d56 <_printf_i+0x1f6>
 8009cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc4:	b004      	add	sp, #16
 8009cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cca:	6823      	ldr	r3, [r4, #0]
 8009ccc:	f043 0320 	orr.w	r3, r3, #32
 8009cd0:	6023      	str	r3, [r4, #0]
 8009cd2:	4833      	ldr	r0, [pc, #204]	; (8009da0 <_printf_i+0x240>)
 8009cd4:	2778      	movs	r7, #120	; 0x78
 8009cd6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	6829      	ldr	r1, [r5, #0]
 8009cde:	061f      	lsls	r7, r3, #24
 8009ce0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ce4:	d402      	bmi.n	8009cec <_printf_i+0x18c>
 8009ce6:	065f      	lsls	r7, r3, #25
 8009ce8:	bf48      	it	mi
 8009cea:	b2b6      	uxthmi	r6, r6
 8009cec:	07df      	lsls	r7, r3, #31
 8009cee:	bf48      	it	mi
 8009cf0:	f043 0320 	orrmi.w	r3, r3, #32
 8009cf4:	6029      	str	r1, [r5, #0]
 8009cf6:	bf48      	it	mi
 8009cf8:	6023      	strmi	r3, [r4, #0]
 8009cfa:	b91e      	cbnz	r6, 8009d04 <_printf_i+0x1a4>
 8009cfc:	6823      	ldr	r3, [r4, #0]
 8009cfe:	f023 0320 	bic.w	r3, r3, #32
 8009d02:	6023      	str	r3, [r4, #0]
 8009d04:	2310      	movs	r3, #16
 8009d06:	e7a7      	b.n	8009c58 <_printf_i+0xf8>
 8009d08:	4824      	ldr	r0, [pc, #144]	; (8009d9c <_printf_i+0x23c>)
 8009d0a:	e7e4      	b.n	8009cd6 <_printf_i+0x176>
 8009d0c:	4615      	mov	r5, r2
 8009d0e:	e7bd      	b.n	8009c8c <_printf_i+0x12c>
 8009d10:	682b      	ldr	r3, [r5, #0]
 8009d12:	6826      	ldr	r6, [r4, #0]
 8009d14:	6961      	ldr	r1, [r4, #20]
 8009d16:	1d18      	adds	r0, r3, #4
 8009d18:	6028      	str	r0, [r5, #0]
 8009d1a:	0635      	lsls	r5, r6, #24
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	d501      	bpl.n	8009d24 <_printf_i+0x1c4>
 8009d20:	6019      	str	r1, [r3, #0]
 8009d22:	e002      	b.n	8009d2a <_printf_i+0x1ca>
 8009d24:	0670      	lsls	r0, r6, #25
 8009d26:	d5fb      	bpl.n	8009d20 <_printf_i+0x1c0>
 8009d28:	8019      	strh	r1, [r3, #0]
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	6123      	str	r3, [r4, #16]
 8009d2e:	4615      	mov	r5, r2
 8009d30:	e7bc      	b.n	8009cac <_printf_i+0x14c>
 8009d32:	682b      	ldr	r3, [r5, #0]
 8009d34:	1d1a      	adds	r2, r3, #4
 8009d36:	602a      	str	r2, [r5, #0]
 8009d38:	681d      	ldr	r5, [r3, #0]
 8009d3a:	6862      	ldr	r2, [r4, #4]
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f7f6 fae6 	bl	8000310 <memchr>
 8009d44:	b108      	cbz	r0, 8009d4a <_printf_i+0x1ea>
 8009d46:	1b40      	subs	r0, r0, r5
 8009d48:	6060      	str	r0, [r4, #4]
 8009d4a:	6863      	ldr	r3, [r4, #4]
 8009d4c:	6123      	str	r3, [r4, #16]
 8009d4e:	2300      	movs	r3, #0
 8009d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d54:	e7aa      	b.n	8009cac <_printf_i+0x14c>
 8009d56:	6923      	ldr	r3, [r4, #16]
 8009d58:	462a      	mov	r2, r5
 8009d5a:	4649      	mov	r1, r9
 8009d5c:	4640      	mov	r0, r8
 8009d5e:	47d0      	blx	sl
 8009d60:	3001      	adds	r0, #1
 8009d62:	d0ad      	beq.n	8009cc0 <_printf_i+0x160>
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	079b      	lsls	r3, r3, #30
 8009d68:	d413      	bmi.n	8009d92 <_printf_i+0x232>
 8009d6a:	68e0      	ldr	r0, [r4, #12]
 8009d6c:	9b03      	ldr	r3, [sp, #12]
 8009d6e:	4298      	cmp	r0, r3
 8009d70:	bfb8      	it	lt
 8009d72:	4618      	movlt	r0, r3
 8009d74:	e7a6      	b.n	8009cc4 <_printf_i+0x164>
 8009d76:	2301      	movs	r3, #1
 8009d78:	4632      	mov	r2, r6
 8009d7a:	4649      	mov	r1, r9
 8009d7c:	4640      	mov	r0, r8
 8009d7e:	47d0      	blx	sl
 8009d80:	3001      	adds	r0, #1
 8009d82:	d09d      	beq.n	8009cc0 <_printf_i+0x160>
 8009d84:	3501      	adds	r5, #1
 8009d86:	68e3      	ldr	r3, [r4, #12]
 8009d88:	9903      	ldr	r1, [sp, #12]
 8009d8a:	1a5b      	subs	r3, r3, r1
 8009d8c:	42ab      	cmp	r3, r5
 8009d8e:	dcf2      	bgt.n	8009d76 <_printf_i+0x216>
 8009d90:	e7eb      	b.n	8009d6a <_printf_i+0x20a>
 8009d92:	2500      	movs	r5, #0
 8009d94:	f104 0619 	add.w	r6, r4, #25
 8009d98:	e7f5      	b.n	8009d86 <_printf_i+0x226>
 8009d9a:	bf00      	nop
 8009d9c:	0800c15e 	.word	0x0800c15e
 8009da0:	0800c16f 	.word	0x0800c16f

08009da4 <std>:
 8009da4:	2300      	movs	r3, #0
 8009da6:	b510      	push	{r4, lr}
 8009da8:	4604      	mov	r4, r0
 8009daa:	e9c0 3300 	strd	r3, r3, [r0]
 8009dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009db2:	6083      	str	r3, [r0, #8]
 8009db4:	8181      	strh	r1, [r0, #12]
 8009db6:	6643      	str	r3, [r0, #100]	; 0x64
 8009db8:	81c2      	strh	r2, [r0, #14]
 8009dba:	6183      	str	r3, [r0, #24]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	2208      	movs	r2, #8
 8009dc0:	305c      	adds	r0, #92	; 0x5c
 8009dc2:	f000 f907 	bl	8009fd4 <memset>
 8009dc6:	4b05      	ldr	r3, [pc, #20]	; (8009ddc <std+0x38>)
 8009dc8:	6263      	str	r3, [r4, #36]	; 0x24
 8009dca:	4b05      	ldr	r3, [pc, #20]	; (8009de0 <std+0x3c>)
 8009dcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009dce:	4b05      	ldr	r3, [pc, #20]	; (8009de4 <std+0x40>)
 8009dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009dd2:	4b05      	ldr	r3, [pc, #20]	; (8009de8 <std+0x44>)
 8009dd4:	6224      	str	r4, [r4, #32]
 8009dd6:	6323      	str	r3, [r4, #48]	; 0x30
 8009dd8:	bd10      	pop	{r4, pc}
 8009dda:	bf00      	nop
 8009ddc:	08009f39 	.word	0x08009f39
 8009de0:	08009f5b 	.word	0x08009f5b
 8009de4:	08009f93 	.word	0x08009f93
 8009de8:	08009fb7 	.word	0x08009fb7

08009dec <stdio_exit_handler>:
 8009dec:	4a02      	ldr	r2, [pc, #8]	; (8009df8 <stdio_exit_handler+0xc>)
 8009dee:	4903      	ldr	r1, [pc, #12]	; (8009dfc <stdio_exit_handler+0x10>)
 8009df0:	4803      	ldr	r0, [pc, #12]	; (8009e00 <stdio_exit_handler+0x14>)
 8009df2:	f000 b869 	b.w	8009ec8 <_fwalk_sglue>
 8009df6:	bf00      	nop
 8009df8:	24000114 	.word	0x24000114
 8009dfc:	0800b965 	.word	0x0800b965
 8009e00:	24000120 	.word	0x24000120

08009e04 <cleanup_stdio>:
 8009e04:	6841      	ldr	r1, [r0, #4]
 8009e06:	4b0c      	ldr	r3, [pc, #48]	; (8009e38 <cleanup_stdio+0x34>)
 8009e08:	4299      	cmp	r1, r3
 8009e0a:	b510      	push	{r4, lr}
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	d001      	beq.n	8009e14 <cleanup_stdio+0x10>
 8009e10:	f001 fda8 	bl	800b964 <_fflush_r>
 8009e14:	68a1      	ldr	r1, [r4, #8]
 8009e16:	4b09      	ldr	r3, [pc, #36]	; (8009e3c <cleanup_stdio+0x38>)
 8009e18:	4299      	cmp	r1, r3
 8009e1a:	d002      	beq.n	8009e22 <cleanup_stdio+0x1e>
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f001 fda1 	bl	800b964 <_fflush_r>
 8009e22:	68e1      	ldr	r1, [r4, #12]
 8009e24:	4b06      	ldr	r3, [pc, #24]	; (8009e40 <cleanup_stdio+0x3c>)
 8009e26:	4299      	cmp	r1, r3
 8009e28:	d004      	beq.n	8009e34 <cleanup_stdio+0x30>
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e30:	f001 bd98 	b.w	800b964 <_fflush_r>
 8009e34:	bd10      	pop	{r4, pc}
 8009e36:	bf00      	nop
 8009e38:	240007a8 	.word	0x240007a8
 8009e3c:	24000810 	.word	0x24000810
 8009e40:	24000878 	.word	0x24000878

08009e44 <global_stdio_init.part.0>:
 8009e44:	b510      	push	{r4, lr}
 8009e46:	4b0b      	ldr	r3, [pc, #44]	; (8009e74 <global_stdio_init.part.0+0x30>)
 8009e48:	4c0b      	ldr	r4, [pc, #44]	; (8009e78 <global_stdio_init.part.0+0x34>)
 8009e4a:	4a0c      	ldr	r2, [pc, #48]	; (8009e7c <global_stdio_init.part.0+0x38>)
 8009e4c:	601a      	str	r2, [r3, #0]
 8009e4e:	4620      	mov	r0, r4
 8009e50:	2200      	movs	r2, #0
 8009e52:	2104      	movs	r1, #4
 8009e54:	f7ff ffa6 	bl	8009da4 <std>
 8009e58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	2109      	movs	r1, #9
 8009e60:	f7ff ffa0 	bl	8009da4 <std>
 8009e64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009e68:	2202      	movs	r2, #2
 8009e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e6e:	2112      	movs	r1, #18
 8009e70:	f7ff bf98 	b.w	8009da4 <std>
 8009e74:	240008e0 	.word	0x240008e0
 8009e78:	240007a8 	.word	0x240007a8
 8009e7c:	08009ded 	.word	0x08009ded

08009e80 <__sfp_lock_acquire>:
 8009e80:	4801      	ldr	r0, [pc, #4]	; (8009e88 <__sfp_lock_acquire+0x8>)
 8009e82:	f000 b923 	b.w	800a0cc <__retarget_lock_acquire_recursive>
 8009e86:	bf00      	nop
 8009e88:	240008e9 	.word	0x240008e9

08009e8c <__sfp_lock_release>:
 8009e8c:	4801      	ldr	r0, [pc, #4]	; (8009e94 <__sfp_lock_release+0x8>)
 8009e8e:	f000 b91e 	b.w	800a0ce <__retarget_lock_release_recursive>
 8009e92:	bf00      	nop
 8009e94:	240008e9 	.word	0x240008e9

08009e98 <__sinit>:
 8009e98:	b510      	push	{r4, lr}
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	f7ff fff0 	bl	8009e80 <__sfp_lock_acquire>
 8009ea0:	6a23      	ldr	r3, [r4, #32]
 8009ea2:	b11b      	cbz	r3, 8009eac <__sinit+0x14>
 8009ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ea8:	f7ff bff0 	b.w	8009e8c <__sfp_lock_release>
 8009eac:	4b04      	ldr	r3, [pc, #16]	; (8009ec0 <__sinit+0x28>)
 8009eae:	6223      	str	r3, [r4, #32]
 8009eb0:	4b04      	ldr	r3, [pc, #16]	; (8009ec4 <__sinit+0x2c>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1f5      	bne.n	8009ea4 <__sinit+0xc>
 8009eb8:	f7ff ffc4 	bl	8009e44 <global_stdio_init.part.0>
 8009ebc:	e7f2      	b.n	8009ea4 <__sinit+0xc>
 8009ebe:	bf00      	nop
 8009ec0:	08009e05 	.word	0x08009e05
 8009ec4:	240008e0 	.word	0x240008e0

08009ec8 <_fwalk_sglue>:
 8009ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ecc:	4607      	mov	r7, r0
 8009ece:	4688      	mov	r8, r1
 8009ed0:	4614      	mov	r4, r2
 8009ed2:	2600      	movs	r6, #0
 8009ed4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ed8:	f1b9 0901 	subs.w	r9, r9, #1
 8009edc:	d505      	bpl.n	8009eea <_fwalk_sglue+0x22>
 8009ede:	6824      	ldr	r4, [r4, #0]
 8009ee0:	2c00      	cmp	r4, #0
 8009ee2:	d1f7      	bne.n	8009ed4 <_fwalk_sglue+0xc>
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eea:	89ab      	ldrh	r3, [r5, #12]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d907      	bls.n	8009f00 <_fwalk_sglue+0x38>
 8009ef0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	d003      	beq.n	8009f00 <_fwalk_sglue+0x38>
 8009ef8:	4629      	mov	r1, r5
 8009efa:	4638      	mov	r0, r7
 8009efc:	47c0      	blx	r8
 8009efe:	4306      	orrs	r6, r0
 8009f00:	3568      	adds	r5, #104	; 0x68
 8009f02:	e7e9      	b.n	8009ed8 <_fwalk_sglue+0x10>

08009f04 <iprintf>:
 8009f04:	b40f      	push	{r0, r1, r2, r3}
 8009f06:	b507      	push	{r0, r1, r2, lr}
 8009f08:	4906      	ldr	r1, [pc, #24]	; (8009f24 <iprintf+0x20>)
 8009f0a:	ab04      	add	r3, sp, #16
 8009f0c:	6808      	ldr	r0, [r1, #0]
 8009f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f12:	6881      	ldr	r1, [r0, #8]
 8009f14:	9301      	str	r3, [sp, #4]
 8009f16:	f001 fb85 	bl	800b624 <_vfiprintf_r>
 8009f1a:	b003      	add	sp, #12
 8009f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f20:	b004      	add	sp, #16
 8009f22:	4770      	bx	lr
 8009f24:	2400016c 	.word	0x2400016c

08009f28 <putchar>:
 8009f28:	4b02      	ldr	r3, [pc, #8]	; (8009f34 <putchar+0xc>)
 8009f2a:	4601      	mov	r1, r0
 8009f2c:	6818      	ldr	r0, [r3, #0]
 8009f2e:	6882      	ldr	r2, [r0, #8]
 8009f30:	f001 bd40 	b.w	800b9b4 <_putc_r>
 8009f34:	2400016c 	.word	0x2400016c

08009f38 <__sread>:
 8009f38:	b510      	push	{r4, lr}
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f40:	f000 f876 	bl	800a030 <_read_r>
 8009f44:	2800      	cmp	r0, #0
 8009f46:	bfab      	itete	ge
 8009f48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8009f4c:	181b      	addge	r3, r3, r0
 8009f4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f52:	bfac      	ite	ge
 8009f54:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f56:	81a3      	strhlt	r3, [r4, #12]
 8009f58:	bd10      	pop	{r4, pc}

08009f5a <__swrite>:
 8009f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5e:	461f      	mov	r7, r3
 8009f60:	898b      	ldrh	r3, [r1, #12]
 8009f62:	05db      	lsls	r3, r3, #23
 8009f64:	4605      	mov	r5, r0
 8009f66:	460c      	mov	r4, r1
 8009f68:	4616      	mov	r6, r2
 8009f6a:	d505      	bpl.n	8009f78 <__swrite+0x1e>
 8009f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f70:	2302      	movs	r3, #2
 8009f72:	2200      	movs	r2, #0
 8009f74:	f000 f84a 	bl	800a00c <_lseek_r>
 8009f78:	89a3      	ldrh	r3, [r4, #12]
 8009f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f82:	81a3      	strh	r3, [r4, #12]
 8009f84:	4632      	mov	r2, r6
 8009f86:	463b      	mov	r3, r7
 8009f88:	4628      	mov	r0, r5
 8009f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f8e:	f000 b861 	b.w	800a054 <_write_r>

08009f92 <__sseek>:
 8009f92:	b510      	push	{r4, lr}
 8009f94:	460c      	mov	r4, r1
 8009f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f9a:	f000 f837 	bl	800a00c <_lseek_r>
 8009f9e:	1c43      	adds	r3, r0, #1
 8009fa0:	89a3      	ldrh	r3, [r4, #12]
 8009fa2:	bf15      	itete	ne
 8009fa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009fa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009faa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009fae:	81a3      	strheq	r3, [r4, #12]
 8009fb0:	bf18      	it	ne
 8009fb2:	81a3      	strhne	r3, [r4, #12]
 8009fb4:	bd10      	pop	{r4, pc}

08009fb6 <__sclose>:
 8009fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fba:	f000 b817 	b.w	8009fec <_close_r>
	...

08009fc0 <viprintf>:
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	4903      	ldr	r1, [pc, #12]	; (8009fd0 <viprintf+0x10>)
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	6808      	ldr	r0, [r1, #0]
 8009fc8:	6881      	ldr	r1, [r0, #8]
 8009fca:	f001 bb2b 	b.w	800b624 <_vfiprintf_r>
 8009fce:	bf00      	nop
 8009fd0:	2400016c 	.word	0x2400016c

08009fd4 <memset>:
 8009fd4:	4402      	add	r2, r0
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d100      	bne.n	8009fde <memset+0xa>
 8009fdc:	4770      	bx	lr
 8009fde:	f803 1b01 	strb.w	r1, [r3], #1
 8009fe2:	e7f9      	b.n	8009fd8 <memset+0x4>

08009fe4 <_localeconv_r>:
 8009fe4:	4800      	ldr	r0, [pc, #0]	; (8009fe8 <_localeconv_r+0x4>)
 8009fe6:	4770      	bx	lr
 8009fe8:	24000260 	.word	0x24000260

08009fec <_close_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	4d06      	ldr	r5, [pc, #24]	; (800a008 <_close_r+0x1c>)
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	4608      	mov	r0, r1
 8009ff6:	602b      	str	r3, [r5, #0]
 8009ff8:	f7f7 fd85 	bl	8001b06 <_close>
 8009ffc:	1c43      	adds	r3, r0, #1
 8009ffe:	d102      	bne.n	800a006 <_close_r+0x1a>
 800a000:	682b      	ldr	r3, [r5, #0]
 800a002:	b103      	cbz	r3, 800a006 <_close_r+0x1a>
 800a004:	6023      	str	r3, [r4, #0]
 800a006:	bd38      	pop	{r3, r4, r5, pc}
 800a008:	240008e4 	.word	0x240008e4

0800a00c <_lseek_r>:
 800a00c:	b538      	push	{r3, r4, r5, lr}
 800a00e:	4d07      	ldr	r5, [pc, #28]	; (800a02c <_lseek_r+0x20>)
 800a010:	4604      	mov	r4, r0
 800a012:	4608      	mov	r0, r1
 800a014:	4611      	mov	r1, r2
 800a016:	2200      	movs	r2, #0
 800a018:	602a      	str	r2, [r5, #0]
 800a01a:	461a      	mov	r2, r3
 800a01c:	f7f7 fd9a 	bl	8001b54 <_lseek>
 800a020:	1c43      	adds	r3, r0, #1
 800a022:	d102      	bne.n	800a02a <_lseek_r+0x1e>
 800a024:	682b      	ldr	r3, [r5, #0]
 800a026:	b103      	cbz	r3, 800a02a <_lseek_r+0x1e>
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	bd38      	pop	{r3, r4, r5, pc}
 800a02c:	240008e4 	.word	0x240008e4

0800a030 <_read_r>:
 800a030:	b538      	push	{r3, r4, r5, lr}
 800a032:	4d07      	ldr	r5, [pc, #28]	; (800a050 <_read_r+0x20>)
 800a034:	4604      	mov	r4, r0
 800a036:	4608      	mov	r0, r1
 800a038:	4611      	mov	r1, r2
 800a03a:	2200      	movs	r2, #0
 800a03c:	602a      	str	r2, [r5, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	f7f7 fd28 	bl	8001a94 <_read>
 800a044:	1c43      	adds	r3, r0, #1
 800a046:	d102      	bne.n	800a04e <_read_r+0x1e>
 800a048:	682b      	ldr	r3, [r5, #0]
 800a04a:	b103      	cbz	r3, 800a04e <_read_r+0x1e>
 800a04c:	6023      	str	r3, [r4, #0]
 800a04e:	bd38      	pop	{r3, r4, r5, pc}
 800a050:	240008e4 	.word	0x240008e4

0800a054 <_write_r>:
 800a054:	b538      	push	{r3, r4, r5, lr}
 800a056:	4d07      	ldr	r5, [pc, #28]	; (800a074 <_write_r+0x20>)
 800a058:	4604      	mov	r4, r0
 800a05a:	4608      	mov	r0, r1
 800a05c:	4611      	mov	r1, r2
 800a05e:	2200      	movs	r2, #0
 800a060:	602a      	str	r2, [r5, #0]
 800a062:	461a      	mov	r2, r3
 800a064:	f7f7 fd33 	bl	8001ace <_write>
 800a068:	1c43      	adds	r3, r0, #1
 800a06a:	d102      	bne.n	800a072 <_write_r+0x1e>
 800a06c:	682b      	ldr	r3, [r5, #0]
 800a06e:	b103      	cbz	r3, 800a072 <_write_r+0x1e>
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	bd38      	pop	{r3, r4, r5, pc}
 800a074:	240008e4 	.word	0x240008e4

0800a078 <__errno>:
 800a078:	4b01      	ldr	r3, [pc, #4]	; (800a080 <__errno+0x8>)
 800a07a:	6818      	ldr	r0, [r3, #0]
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	2400016c 	.word	0x2400016c

0800a084 <__libc_init_array>:
 800a084:	b570      	push	{r4, r5, r6, lr}
 800a086:	4d0d      	ldr	r5, [pc, #52]	; (800a0bc <__libc_init_array+0x38>)
 800a088:	4c0d      	ldr	r4, [pc, #52]	; (800a0c0 <__libc_init_array+0x3c>)
 800a08a:	1b64      	subs	r4, r4, r5
 800a08c:	10a4      	asrs	r4, r4, #2
 800a08e:	2600      	movs	r6, #0
 800a090:	42a6      	cmp	r6, r4
 800a092:	d109      	bne.n	800a0a8 <__libc_init_array+0x24>
 800a094:	4d0b      	ldr	r5, [pc, #44]	; (800a0c4 <__libc_init_array+0x40>)
 800a096:	4c0c      	ldr	r4, [pc, #48]	; (800a0c8 <__libc_init_array+0x44>)
 800a098:	f001 fe9c 	bl	800bdd4 <_init>
 800a09c:	1b64      	subs	r4, r4, r5
 800a09e:	10a4      	asrs	r4, r4, #2
 800a0a0:	2600      	movs	r6, #0
 800a0a2:	42a6      	cmp	r6, r4
 800a0a4:	d105      	bne.n	800a0b2 <__libc_init_array+0x2e>
 800a0a6:	bd70      	pop	{r4, r5, r6, pc}
 800a0a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ac:	4798      	blx	r3
 800a0ae:	3601      	adds	r6, #1
 800a0b0:	e7ee      	b.n	800a090 <__libc_init_array+0xc>
 800a0b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0b6:	4798      	blx	r3
 800a0b8:	3601      	adds	r6, #1
 800a0ba:	e7f2      	b.n	800a0a2 <__libc_init_array+0x1e>
 800a0bc:	0800c4c4 	.word	0x0800c4c4
 800a0c0:	0800c4c4 	.word	0x0800c4c4
 800a0c4:	0800c4c4 	.word	0x0800c4c4
 800a0c8:	0800c4c8 	.word	0x0800c4c8

0800a0cc <__retarget_lock_acquire_recursive>:
 800a0cc:	4770      	bx	lr

0800a0ce <__retarget_lock_release_recursive>:
 800a0ce:	4770      	bx	lr

0800a0d0 <memcpy>:
 800a0d0:	440a      	add	r2, r1
 800a0d2:	4291      	cmp	r1, r2
 800a0d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0d8:	d100      	bne.n	800a0dc <memcpy+0xc>
 800a0da:	4770      	bx	lr
 800a0dc:	b510      	push	{r4, lr}
 800a0de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0e6:	4291      	cmp	r1, r2
 800a0e8:	d1f9      	bne.n	800a0de <memcpy+0xe>
 800a0ea:	bd10      	pop	{r4, pc}

0800a0ec <quorem>:
 800a0ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f0:	6903      	ldr	r3, [r0, #16]
 800a0f2:	690c      	ldr	r4, [r1, #16]
 800a0f4:	42a3      	cmp	r3, r4
 800a0f6:	4607      	mov	r7, r0
 800a0f8:	db7e      	blt.n	800a1f8 <quorem+0x10c>
 800a0fa:	3c01      	subs	r4, #1
 800a0fc:	f101 0814 	add.w	r8, r1, #20
 800a100:	f100 0514 	add.w	r5, r0, #20
 800a104:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a10e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a112:	3301      	adds	r3, #1
 800a114:	429a      	cmp	r2, r3
 800a116:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a11a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a11e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a122:	d331      	bcc.n	800a188 <quorem+0x9c>
 800a124:	f04f 0e00 	mov.w	lr, #0
 800a128:	4640      	mov	r0, r8
 800a12a:	46ac      	mov	ip, r5
 800a12c:	46f2      	mov	sl, lr
 800a12e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a132:	b293      	uxth	r3, r2
 800a134:	fb06 e303 	mla	r3, r6, r3, lr
 800a138:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a13c:	0c1a      	lsrs	r2, r3, #16
 800a13e:	b29b      	uxth	r3, r3
 800a140:	ebaa 0303 	sub.w	r3, sl, r3
 800a144:	f8dc a000 	ldr.w	sl, [ip]
 800a148:	fa13 f38a 	uxtah	r3, r3, sl
 800a14c:	fb06 220e 	mla	r2, r6, lr, r2
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	9b00      	ldr	r3, [sp, #0]
 800a154:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a158:	b292      	uxth	r2, r2
 800a15a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a15e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a162:	f8bd 3000 	ldrh.w	r3, [sp]
 800a166:	4581      	cmp	r9, r0
 800a168:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a16c:	f84c 3b04 	str.w	r3, [ip], #4
 800a170:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a174:	d2db      	bcs.n	800a12e <quorem+0x42>
 800a176:	f855 300b 	ldr.w	r3, [r5, fp]
 800a17a:	b92b      	cbnz	r3, 800a188 <quorem+0x9c>
 800a17c:	9b01      	ldr	r3, [sp, #4]
 800a17e:	3b04      	subs	r3, #4
 800a180:	429d      	cmp	r5, r3
 800a182:	461a      	mov	r2, r3
 800a184:	d32c      	bcc.n	800a1e0 <quorem+0xf4>
 800a186:	613c      	str	r4, [r7, #16]
 800a188:	4638      	mov	r0, r7
 800a18a:	f001 f921 	bl	800b3d0 <__mcmp>
 800a18e:	2800      	cmp	r0, #0
 800a190:	db22      	blt.n	800a1d8 <quorem+0xec>
 800a192:	3601      	adds	r6, #1
 800a194:	4629      	mov	r1, r5
 800a196:	2000      	movs	r0, #0
 800a198:	f858 2b04 	ldr.w	r2, [r8], #4
 800a19c:	f8d1 c000 	ldr.w	ip, [r1]
 800a1a0:	b293      	uxth	r3, r2
 800a1a2:	1ac3      	subs	r3, r0, r3
 800a1a4:	0c12      	lsrs	r2, r2, #16
 800a1a6:	fa13 f38c 	uxtah	r3, r3, ip
 800a1aa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a1ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1b8:	45c1      	cmp	r9, r8
 800a1ba:	f841 3b04 	str.w	r3, [r1], #4
 800a1be:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a1c2:	d2e9      	bcs.n	800a198 <quorem+0xac>
 800a1c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1cc:	b922      	cbnz	r2, 800a1d8 <quorem+0xec>
 800a1ce:	3b04      	subs	r3, #4
 800a1d0:	429d      	cmp	r5, r3
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	d30a      	bcc.n	800a1ec <quorem+0x100>
 800a1d6:	613c      	str	r4, [r7, #16]
 800a1d8:	4630      	mov	r0, r6
 800a1da:	b003      	add	sp, #12
 800a1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e0:	6812      	ldr	r2, [r2, #0]
 800a1e2:	3b04      	subs	r3, #4
 800a1e4:	2a00      	cmp	r2, #0
 800a1e6:	d1ce      	bne.n	800a186 <quorem+0x9a>
 800a1e8:	3c01      	subs	r4, #1
 800a1ea:	e7c9      	b.n	800a180 <quorem+0x94>
 800a1ec:	6812      	ldr	r2, [r2, #0]
 800a1ee:	3b04      	subs	r3, #4
 800a1f0:	2a00      	cmp	r2, #0
 800a1f2:	d1f0      	bne.n	800a1d6 <quorem+0xea>
 800a1f4:	3c01      	subs	r4, #1
 800a1f6:	e7eb      	b.n	800a1d0 <quorem+0xe4>
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	e7ee      	b.n	800a1da <quorem+0xee>
 800a1fc:	0000      	movs	r0, r0
	...

0800a200 <_dtoa_r>:
 800a200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a204:	ed2d 8b02 	vpush	{d8}
 800a208:	69c5      	ldr	r5, [r0, #28]
 800a20a:	b091      	sub	sp, #68	; 0x44
 800a20c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a210:	ec59 8b10 	vmov	r8, r9, d0
 800a214:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a216:	9106      	str	r1, [sp, #24]
 800a218:	4606      	mov	r6, r0
 800a21a:	9208      	str	r2, [sp, #32]
 800a21c:	930c      	str	r3, [sp, #48]	; 0x30
 800a21e:	b975      	cbnz	r5, 800a23e <_dtoa_r+0x3e>
 800a220:	2010      	movs	r0, #16
 800a222:	f000 fda5 	bl	800ad70 <malloc>
 800a226:	4602      	mov	r2, r0
 800a228:	61f0      	str	r0, [r6, #28]
 800a22a:	b920      	cbnz	r0, 800a236 <_dtoa_r+0x36>
 800a22c:	4ba6      	ldr	r3, [pc, #664]	; (800a4c8 <_dtoa_r+0x2c8>)
 800a22e:	21ef      	movs	r1, #239	; 0xef
 800a230:	48a6      	ldr	r0, [pc, #664]	; (800a4cc <_dtoa_r+0x2cc>)
 800a232:	f001 fc99 	bl	800bb68 <__assert_func>
 800a236:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a23a:	6005      	str	r5, [r0, #0]
 800a23c:	60c5      	str	r5, [r0, #12]
 800a23e:	69f3      	ldr	r3, [r6, #28]
 800a240:	6819      	ldr	r1, [r3, #0]
 800a242:	b151      	cbz	r1, 800a25a <_dtoa_r+0x5a>
 800a244:	685a      	ldr	r2, [r3, #4]
 800a246:	604a      	str	r2, [r1, #4]
 800a248:	2301      	movs	r3, #1
 800a24a:	4093      	lsls	r3, r2
 800a24c:	608b      	str	r3, [r1, #8]
 800a24e:	4630      	mov	r0, r6
 800a250:	f000 fe82 	bl	800af58 <_Bfree>
 800a254:	69f3      	ldr	r3, [r6, #28]
 800a256:	2200      	movs	r2, #0
 800a258:	601a      	str	r2, [r3, #0]
 800a25a:	f1b9 0300 	subs.w	r3, r9, #0
 800a25e:	bfbb      	ittet	lt
 800a260:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a264:	9303      	strlt	r3, [sp, #12]
 800a266:	2300      	movge	r3, #0
 800a268:	2201      	movlt	r2, #1
 800a26a:	bfac      	ite	ge
 800a26c:	6023      	strge	r3, [r4, #0]
 800a26e:	6022      	strlt	r2, [r4, #0]
 800a270:	4b97      	ldr	r3, [pc, #604]	; (800a4d0 <_dtoa_r+0x2d0>)
 800a272:	9c03      	ldr	r4, [sp, #12]
 800a274:	43a3      	bics	r3, r4
 800a276:	d11c      	bne.n	800a2b2 <_dtoa_r+0xb2>
 800a278:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a27a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a27e:	6013      	str	r3, [r2, #0]
 800a280:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a284:	ea53 0308 	orrs.w	r3, r3, r8
 800a288:	f000 84fb 	beq.w	800ac82 <_dtoa_r+0xa82>
 800a28c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a28e:	b963      	cbnz	r3, 800a2aa <_dtoa_r+0xaa>
 800a290:	4b90      	ldr	r3, [pc, #576]	; (800a4d4 <_dtoa_r+0x2d4>)
 800a292:	e020      	b.n	800a2d6 <_dtoa_r+0xd6>
 800a294:	4b90      	ldr	r3, [pc, #576]	; (800a4d8 <_dtoa_r+0x2d8>)
 800a296:	9301      	str	r3, [sp, #4]
 800a298:	3308      	adds	r3, #8
 800a29a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a29c:	6013      	str	r3, [r2, #0]
 800a29e:	9801      	ldr	r0, [sp, #4]
 800a2a0:	b011      	add	sp, #68	; 0x44
 800a2a2:	ecbd 8b02 	vpop	{d8}
 800a2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2aa:	4b8a      	ldr	r3, [pc, #552]	; (800a4d4 <_dtoa_r+0x2d4>)
 800a2ac:	9301      	str	r3, [sp, #4]
 800a2ae:	3303      	adds	r3, #3
 800a2b0:	e7f3      	b.n	800a29a <_dtoa_r+0x9a>
 800a2b2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a2b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2be:	d10c      	bne.n	800a2da <_dtoa_r+0xda>
 800a2c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	6013      	str	r3, [r2, #0]
 800a2c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f000 84d7 	beq.w	800ac7c <_dtoa_r+0xa7c>
 800a2ce:	4b83      	ldr	r3, [pc, #524]	; (800a4dc <_dtoa_r+0x2dc>)
 800a2d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a2d2:	6013      	str	r3, [r2, #0]
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	9301      	str	r3, [sp, #4]
 800a2d8:	e7e1      	b.n	800a29e <_dtoa_r+0x9e>
 800a2da:	aa0e      	add	r2, sp, #56	; 0x38
 800a2dc:	a90f      	add	r1, sp, #60	; 0x3c
 800a2de:	4630      	mov	r0, r6
 800a2e0:	eeb0 0b48 	vmov.f64	d0, d8
 800a2e4:	f001 f91a 	bl	800b51c <__d2b>
 800a2e8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800a2ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2ee:	4605      	mov	r5, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d046      	beq.n	800a382 <_dtoa_r+0x182>
 800a2f4:	eeb0 7b48 	vmov.f64	d7, d8
 800a2f8:	ee18 1a90 	vmov	r1, s17
 800a2fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a300:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a304:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a308:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a30c:	2000      	movs	r0, #0
 800a30e:	ee07 1a90 	vmov	s15, r1
 800a312:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800a316:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800a4b0 <_dtoa_r+0x2b0>
 800a31a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a31e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800a4b8 <_dtoa_r+0x2b8>
 800a322:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a326:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800a4c0 <_dtoa_r+0x2c0>
 800a32a:	ee07 3a90 	vmov	s15, r3
 800a32e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a332:	eeb0 7b46 	vmov.f64	d7, d6
 800a336:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a33a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a33e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a346:	ee16 ba90 	vmov	fp, s13
 800a34a:	9009      	str	r0, [sp, #36]	; 0x24
 800a34c:	d508      	bpl.n	800a360 <_dtoa_r+0x160>
 800a34e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a352:	eeb4 6b47 	vcmp.f64	d6, d7
 800a356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a35a:	bf18      	it	ne
 800a35c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a360:	f1bb 0f16 	cmp.w	fp, #22
 800a364:	d82b      	bhi.n	800a3be <_dtoa_r+0x1be>
 800a366:	495e      	ldr	r1, [pc, #376]	; (800a4e0 <_dtoa_r+0x2e0>)
 800a368:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800a36c:	ed91 7b00 	vldr	d7, [r1]
 800a370:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a378:	d501      	bpl.n	800a37e <_dtoa_r+0x17e>
 800a37a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a37e:	2100      	movs	r1, #0
 800a380:	e01e      	b.n	800a3c0 <_dtoa_r+0x1c0>
 800a382:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a384:	4413      	add	r3, r2
 800a386:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800a38a:	2920      	cmp	r1, #32
 800a38c:	bfc1      	itttt	gt
 800a38e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800a392:	408c      	lslgt	r4, r1
 800a394:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800a398:	fa28 f101 	lsrgt.w	r1, r8, r1
 800a39c:	bfd6      	itet	le
 800a39e:	f1c1 0120 	rsble	r1, r1, #32
 800a3a2:	4321      	orrgt	r1, r4
 800a3a4:	fa08 f101 	lslle.w	r1, r8, r1
 800a3a8:	ee07 1a90 	vmov	s15, r1
 800a3ac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	ee17 1a90 	vmov	r1, s15
 800a3b6:	2001      	movs	r0, #1
 800a3b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a3bc:	e7a7      	b.n	800a30e <_dtoa_r+0x10e>
 800a3be:	2101      	movs	r1, #1
 800a3c0:	1ad2      	subs	r2, r2, r3
 800a3c2:	1e53      	subs	r3, r2, #1
 800a3c4:	9305      	str	r3, [sp, #20]
 800a3c6:	bf45      	ittet	mi
 800a3c8:	f1c2 0301 	rsbmi	r3, r2, #1
 800a3cc:	9304      	strmi	r3, [sp, #16]
 800a3ce:	2300      	movpl	r3, #0
 800a3d0:	2300      	movmi	r3, #0
 800a3d2:	bf4c      	ite	mi
 800a3d4:	9305      	strmi	r3, [sp, #20]
 800a3d6:	9304      	strpl	r3, [sp, #16]
 800a3d8:	f1bb 0f00 	cmp.w	fp, #0
 800a3dc:	910b      	str	r1, [sp, #44]	; 0x2c
 800a3de:	db18      	blt.n	800a412 <_dtoa_r+0x212>
 800a3e0:	9b05      	ldr	r3, [sp, #20]
 800a3e2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800a3e6:	445b      	add	r3, fp
 800a3e8:	9305      	str	r3, [sp, #20]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	9a06      	ldr	r2, [sp, #24]
 800a3ee:	2a09      	cmp	r2, #9
 800a3f0:	d848      	bhi.n	800a484 <_dtoa_r+0x284>
 800a3f2:	2a05      	cmp	r2, #5
 800a3f4:	bfc4      	itt	gt
 800a3f6:	3a04      	subgt	r2, #4
 800a3f8:	9206      	strgt	r2, [sp, #24]
 800a3fa:	9a06      	ldr	r2, [sp, #24]
 800a3fc:	f1a2 0202 	sub.w	r2, r2, #2
 800a400:	bfcc      	ite	gt
 800a402:	2400      	movgt	r4, #0
 800a404:	2401      	movle	r4, #1
 800a406:	2a03      	cmp	r2, #3
 800a408:	d847      	bhi.n	800a49a <_dtoa_r+0x29a>
 800a40a:	e8df f002 	tbb	[pc, r2]
 800a40e:	2d0b      	.short	0x2d0b
 800a410:	392b      	.short	0x392b
 800a412:	9b04      	ldr	r3, [sp, #16]
 800a414:	2200      	movs	r2, #0
 800a416:	eba3 030b 	sub.w	r3, r3, fp
 800a41a:	9304      	str	r3, [sp, #16]
 800a41c:	920a      	str	r2, [sp, #40]	; 0x28
 800a41e:	f1cb 0300 	rsb	r3, fp, #0
 800a422:	e7e3      	b.n	800a3ec <_dtoa_r+0x1ec>
 800a424:	2200      	movs	r2, #0
 800a426:	9207      	str	r2, [sp, #28]
 800a428:	9a08      	ldr	r2, [sp, #32]
 800a42a:	2a00      	cmp	r2, #0
 800a42c:	dc38      	bgt.n	800a4a0 <_dtoa_r+0x2a0>
 800a42e:	f04f 0a01 	mov.w	sl, #1
 800a432:	46d1      	mov	r9, sl
 800a434:	4652      	mov	r2, sl
 800a436:	f8cd a020 	str.w	sl, [sp, #32]
 800a43a:	69f7      	ldr	r7, [r6, #28]
 800a43c:	2100      	movs	r1, #0
 800a43e:	2004      	movs	r0, #4
 800a440:	f100 0c14 	add.w	ip, r0, #20
 800a444:	4594      	cmp	ip, r2
 800a446:	d930      	bls.n	800a4aa <_dtoa_r+0x2aa>
 800a448:	6079      	str	r1, [r7, #4]
 800a44a:	4630      	mov	r0, r6
 800a44c:	930d      	str	r3, [sp, #52]	; 0x34
 800a44e:	f000 fd43 	bl	800aed8 <_Balloc>
 800a452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a454:	9001      	str	r0, [sp, #4]
 800a456:	4602      	mov	r2, r0
 800a458:	2800      	cmp	r0, #0
 800a45a:	d145      	bne.n	800a4e8 <_dtoa_r+0x2e8>
 800a45c:	4b21      	ldr	r3, [pc, #132]	; (800a4e4 <_dtoa_r+0x2e4>)
 800a45e:	f240 11af 	movw	r1, #431	; 0x1af
 800a462:	e6e5      	b.n	800a230 <_dtoa_r+0x30>
 800a464:	2201      	movs	r2, #1
 800a466:	e7de      	b.n	800a426 <_dtoa_r+0x226>
 800a468:	2200      	movs	r2, #0
 800a46a:	9207      	str	r2, [sp, #28]
 800a46c:	9a08      	ldr	r2, [sp, #32]
 800a46e:	eb0b 0a02 	add.w	sl, fp, r2
 800a472:	f10a 0901 	add.w	r9, sl, #1
 800a476:	464a      	mov	r2, r9
 800a478:	2a01      	cmp	r2, #1
 800a47a:	bfb8      	it	lt
 800a47c:	2201      	movlt	r2, #1
 800a47e:	e7dc      	b.n	800a43a <_dtoa_r+0x23a>
 800a480:	2201      	movs	r2, #1
 800a482:	e7f2      	b.n	800a46a <_dtoa_r+0x26a>
 800a484:	2401      	movs	r4, #1
 800a486:	2200      	movs	r2, #0
 800a488:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a48c:	f04f 3aff 	mov.w	sl, #4294967295
 800a490:	2100      	movs	r1, #0
 800a492:	46d1      	mov	r9, sl
 800a494:	2212      	movs	r2, #18
 800a496:	9108      	str	r1, [sp, #32]
 800a498:	e7cf      	b.n	800a43a <_dtoa_r+0x23a>
 800a49a:	2201      	movs	r2, #1
 800a49c:	9207      	str	r2, [sp, #28]
 800a49e:	e7f5      	b.n	800a48c <_dtoa_r+0x28c>
 800a4a0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a4a4:	46d1      	mov	r9, sl
 800a4a6:	4652      	mov	r2, sl
 800a4a8:	e7c7      	b.n	800a43a <_dtoa_r+0x23a>
 800a4aa:	3101      	adds	r1, #1
 800a4ac:	0040      	lsls	r0, r0, #1
 800a4ae:	e7c7      	b.n	800a440 <_dtoa_r+0x240>
 800a4b0:	636f4361 	.word	0x636f4361
 800a4b4:	3fd287a7 	.word	0x3fd287a7
 800a4b8:	8b60c8b3 	.word	0x8b60c8b3
 800a4bc:	3fc68a28 	.word	0x3fc68a28
 800a4c0:	509f79fb 	.word	0x509f79fb
 800a4c4:	3fd34413 	.word	0x3fd34413
 800a4c8:	0800c18d 	.word	0x0800c18d
 800a4cc:	0800c1a4 	.word	0x0800c1a4
 800a4d0:	7ff00000 	.word	0x7ff00000
 800a4d4:	0800c189 	.word	0x0800c189
 800a4d8:	0800c180 	.word	0x0800c180
 800a4dc:	0800c15d 	.word	0x0800c15d
 800a4e0:	0800c290 	.word	0x0800c290
 800a4e4:	0800c1fc 	.word	0x0800c1fc
 800a4e8:	69f2      	ldr	r2, [r6, #28]
 800a4ea:	9901      	ldr	r1, [sp, #4]
 800a4ec:	6011      	str	r1, [r2, #0]
 800a4ee:	f1b9 0f0e 	cmp.w	r9, #14
 800a4f2:	d86c      	bhi.n	800a5ce <_dtoa_r+0x3ce>
 800a4f4:	2c00      	cmp	r4, #0
 800a4f6:	d06a      	beq.n	800a5ce <_dtoa_r+0x3ce>
 800a4f8:	f1bb 0f00 	cmp.w	fp, #0
 800a4fc:	f340 80a0 	ble.w	800a640 <_dtoa_r+0x440>
 800a500:	4ac1      	ldr	r2, [pc, #772]	; (800a808 <_dtoa_r+0x608>)
 800a502:	f00b 010f 	and.w	r1, fp, #15
 800a506:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a50a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a50e:	ed92 7b00 	vldr	d7, [r2]
 800a512:	ea4f 122b 	mov.w	r2, fp, asr #4
 800a516:	f000 8087 	beq.w	800a628 <_dtoa_r+0x428>
 800a51a:	49bc      	ldr	r1, [pc, #752]	; (800a80c <_dtoa_r+0x60c>)
 800a51c:	ed91 6b08 	vldr	d6, [r1, #32]
 800a520:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a524:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a528:	f002 020f 	and.w	r2, r2, #15
 800a52c:	2103      	movs	r1, #3
 800a52e:	48b7      	ldr	r0, [pc, #732]	; (800a80c <_dtoa_r+0x60c>)
 800a530:	2a00      	cmp	r2, #0
 800a532:	d17b      	bne.n	800a62c <_dtoa_r+0x42c>
 800a534:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a538:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a53c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a540:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a542:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a546:	2a00      	cmp	r2, #0
 800a548:	f000 80a0 	beq.w	800a68c <_dtoa_r+0x48c>
 800a54c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a550:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a558:	f140 8098 	bpl.w	800a68c <_dtoa_r+0x48c>
 800a55c:	f1b9 0f00 	cmp.w	r9, #0
 800a560:	f000 8094 	beq.w	800a68c <_dtoa_r+0x48c>
 800a564:	f1ba 0f00 	cmp.w	sl, #0
 800a568:	dd2f      	ble.n	800a5ca <_dtoa_r+0x3ca>
 800a56a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a56e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a572:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a576:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a57a:	3101      	adds	r1, #1
 800a57c:	4654      	mov	r4, sl
 800a57e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a582:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a586:	ee07 1a90 	vmov	s15, r1
 800a58a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a58e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a592:	ee15 7a90 	vmov	r7, s11
 800a596:	ec51 0b15 	vmov	r0, r1, d5
 800a59a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800a59e:	2c00      	cmp	r4, #0
 800a5a0:	d177      	bne.n	800a692 <_dtoa_r+0x492>
 800a5a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a5a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a5aa:	ec41 0b17 	vmov	d7, r0, r1
 800a5ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b6:	f300 826a 	bgt.w	800aa8e <_dtoa_r+0x88e>
 800a5ba:	eeb1 7b47 	vneg.f64	d7, d7
 800a5be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5c6:	f100 8260 	bmi.w	800aa8a <_dtoa_r+0x88a>
 800a5ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a5ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5d0:	2a00      	cmp	r2, #0
 800a5d2:	f2c0 811d 	blt.w	800a810 <_dtoa_r+0x610>
 800a5d6:	f1bb 0f0e 	cmp.w	fp, #14
 800a5da:	f300 8119 	bgt.w	800a810 <_dtoa_r+0x610>
 800a5de:	4b8a      	ldr	r3, [pc, #552]	; (800a808 <_dtoa_r+0x608>)
 800a5e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a5e4:	ed93 6b00 	vldr	d6, [r3]
 800a5e8:	9b08      	ldr	r3, [sp, #32]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	f280 80b7 	bge.w	800a75e <_dtoa_r+0x55e>
 800a5f0:	f1b9 0f00 	cmp.w	r9, #0
 800a5f4:	f300 80b3 	bgt.w	800a75e <_dtoa_r+0x55e>
 800a5f8:	f040 8246 	bne.w	800aa88 <_dtoa_r+0x888>
 800a5fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a600:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a604:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a608:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a610:	464c      	mov	r4, r9
 800a612:	464f      	mov	r7, r9
 800a614:	f280 821c 	bge.w	800aa50 <_dtoa_r+0x850>
 800a618:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a61c:	2331      	movs	r3, #49	; 0x31
 800a61e:	f808 3b01 	strb.w	r3, [r8], #1
 800a622:	f10b 0b01 	add.w	fp, fp, #1
 800a626:	e218      	b.n	800aa5a <_dtoa_r+0x85a>
 800a628:	2102      	movs	r1, #2
 800a62a:	e780      	b.n	800a52e <_dtoa_r+0x32e>
 800a62c:	07d4      	lsls	r4, r2, #31
 800a62e:	d504      	bpl.n	800a63a <_dtoa_r+0x43a>
 800a630:	ed90 6b00 	vldr	d6, [r0]
 800a634:	3101      	adds	r1, #1
 800a636:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a63a:	1052      	asrs	r2, r2, #1
 800a63c:	3008      	adds	r0, #8
 800a63e:	e777      	b.n	800a530 <_dtoa_r+0x330>
 800a640:	d022      	beq.n	800a688 <_dtoa_r+0x488>
 800a642:	f1cb 0200 	rsb	r2, fp, #0
 800a646:	4970      	ldr	r1, [pc, #448]	; (800a808 <_dtoa_r+0x608>)
 800a648:	f002 000f 	and.w	r0, r2, #15
 800a64c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a650:	ed91 7b00 	vldr	d7, [r1]
 800a654:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a658:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a65c:	486b      	ldr	r0, [pc, #428]	; (800a80c <_dtoa_r+0x60c>)
 800a65e:	1112      	asrs	r2, r2, #4
 800a660:	2400      	movs	r4, #0
 800a662:	2102      	movs	r1, #2
 800a664:	b92a      	cbnz	r2, 800a672 <_dtoa_r+0x472>
 800a666:	2c00      	cmp	r4, #0
 800a668:	f43f af6a 	beq.w	800a540 <_dtoa_r+0x340>
 800a66c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a670:	e766      	b.n	800a540 <_dtoa_r+0x340>
 800a672:	07d7      	lsls	r7, r2, #31
 800a674:	d505      	bpl.n	800a682 <_dtoa_r+0x482>
 800a676:	ed90 6b00 	vldr	d6, [r0]
 800a67a:	3101      	adds	r1, #1
 800a67c:	2401      	movs	r4, #1
 800a67e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a682:	1052      	asrs	r2, r2, #1
 800a684:	3008      	adds	r0, #8
 800a686:	e7ed      	b.n	800a664 <_dtoa_r+0x464>
 800a688:	2102      	movs	r1, #2
 800a68a:	e759      	b.n	800a540 <_dtoa_r+0x340>
 800a68c:	465a      	mov	r2, fp
 800a68e:	464c      	mov	r4, r9
 800a690:	e775      	b.n	800a57e <_dtoa_r+0x37e>
 800a692:	ec41 0b17 	vmov	d7, r0, r1
 800a696:	495c      	ldr	r1, [pc, #368]	; (800a808 <_dtoa_r+0x608>)
 800a698:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800a69c:	ed11 4b02 	vldr	d4, [r1, #-8]
 800a6a0:	9901      	ldr	r1, [sp, #4]
 800a6a2:	440c      	add	r4, r1
 800a6a4:	9907      	ldr	r1, [sp, #28]
 800a6a6:	b351      	cbz	r1, 800a6fe <_dtoa_r+0x4fe>
 800a6a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a6ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a6b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a6b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a6b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a6bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a6c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a6c4:	ee14 1a90 	vmov	r1, s9
 800a6c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a6cc:	3130      	adds	r1, #48	; 0x30
 800a6ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a6d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6da:	f808 1b01 	strb.w	r1, [r8], #1
 800a6de:	d439      	bmi.n	800a754 <_dtoa_r+0x554>
 800a6e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a6e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ec:	d472      	bmi.n	800a7d4 <_dtoa_r+0x5d4>
 800a6ee:	45a0      	cmp	r8, r4
 800a6f0:	f43f af6b 	beq.w	800a5ca <_dtoa_r+0x3ca>
 800a6f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a6f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a6fc:	e7e0      	b.n	800a6c0 <_dtoa_r+0x4c0>
 800a6fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a702:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a706:	4620      	mov	r0, r4
 800a708:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a70c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a710:	ee14 1a90 	vmov	r1, s9
 800a714:	3130      	adds	r1, #48	; 0x30
 800a716:	f808 1b01 	strb.w	r1, [r8], #1
 800a71a:	45a0      	cmp	r8, r4
 800a71c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a720:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a724:	d118      	bne.n	800a758 <_dtoa_r+0x558>
 800a726:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a72a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a72e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a736:	dc4d      	bgt.n	800a7d4 <_dtoa_r+0x5d4>
 800a738:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a73c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a744:	f57f af41 	bpl.w	800a5ca <_dtoa_r+0x3ca>
 800a748:	4680      	mov	r8, r0
 800a74a:	3801      	subs	r0, #1
 800a74c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a750:	2b30      	cmp	r3, #48	; 0x30
 800a752:	d0f9      	beq.n	800a748 <_dtoa_r+0x548>
 800a754:	4693      	mov	fp, r2
 800a756:	e02a      	b.n	800a7ae <_dtoa_r+0x5ae>
 800a758:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a75c:	e7d6      	b.n	800a70c <_dtoa_r+0x50c>
 800a75e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a762:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a766:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a76a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a76e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a772:	ee15 3a10 	vmov	r3, s10
 800a776:	3330      	adds	r3, #48	; 0x30
 800a778:	f808 3b01 	strb.w	r3, [r8], #1
 800a77c:	9b01      	ldr	r3, [sp, #4]
 800a77e:	eba8 0303 	sub.w	r3, r8, r3
 800a782:	4599      	cmp	r9, r3
 800a784:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a788:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a78c:	d133      	bne.n	800a7f6 <_dtoa_r+0x5f6>
 800a78e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a792:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a79a:	dc1a      	bgt.n	800a7d2 <_dtoa_r+0x5d2>
 800a79c:	eeb4 7b46 	vcmp.f64	d7, d6
 800a7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a4:	d103      	bne.n	800a7ae <_dtoa_r+0x5ae>
 800a7a6:	ee15 3a10 	vmov	r3, s10
 800a7aa:	07d9      	lsls	r1, r3, #31
 800a7ac:	d411      	bmi.n	800a7d2 <_dtoa_r+0x5d2>
 800a7ae:	4629      	mov	r1, r5
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f000 fbd1 	bl	800af58 <_Bfree>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7ba:	f888 3000 	strb.w	r3, [r8]
 800a7be:	f10b 0301 	add.w	r3, fp, #1
 800a7c2:	6013      	str	r3, [r2, #0]
 800a7c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f43f ad69 	beq.w	800a29e <_dtoa_r+0x9e>
 800a7cc:	f8c3 8000 	str.w	r8, [r3]
 800a7d0:	e565      	b.n	800a29e <_dtoa_r+0x9e>
 800a7d2:	465a      	mov	r2, fp
 800a7d4:	4643      	mov	r3, r8
 800a7d6:	4698      	mov	r8, r3
 800a7d8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800a7dc:	2939      	cmp	r1, #57	; 0x39
 800a7de:	d106      	bne.n	800a7ee <_dtoa_r+0x5ee>
 800a7e0:	9901      	ldr	r1, [sp, #4]
 800a7e2:	4299      	cmp	r1, r3
 800a7e4:	d1f7      	bne.n	800a7d6 <_dtoa_r+0x5d6>
 800a7e6:	9801      	ldr	r0, [sp, #4]
 800a7e8:	2130      	movs	r1, #48	; 0x30
 800a7ea:	3201      	adds	r2, #1
 800a7ec:	7001      	strb	r1, [r0, #0]
 800a7ee:	7819      	ldrb	r1, [r3, #0]
 800a7f0:	3101      	adds	r1, #1
 800a7f2:	7019      	strb	r1, [r3, #0]
 800a7f4:	e7ae      	b.n	800a754 <_dtoa_r+0x554>
 800a7f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a7fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a802:	d1b2      	bne.n	800a76a <_dtoa_r+0x56a>
 800a804:	e7d3      	b.n	800a7ae <_dtoa_r+0x5ae>
 800a806:	bf00      	nop
 800a808:	0800c290 	.word	0x0800c290
 800a80c:	0800c268 	.word	0x0800c268
 800a810:	9907      	ldr	r1, [sp, #28]
 800a812:	2900      	cmp	r1, #0
 800a814:	f000 80d0 	beq.w	800a9b8 <_dtoa_r+0x7b8>
 800a818:	9906      	ldr	r1, [sp, #24]
 800a81a:	2901      	cmp	r1, #1
 800a81c:	f300 80b4 	bgt.w	800a988 <_dtoa_r+0x788>
 800a820:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a822:	2900      	cmp	r1, #0
 800a824:	f000 80ac 	beq.w	800a980 <_dtoa_r+0x780>
 800a828:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a82c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a830:	461c      	mov	r4, r3
 800a832:	9309      	str	r3, [sp, #36]	; 0x24
 800a834:	9b04      	ldr	r3, [sp, #16]
 800a836:	4413      	add	r3, r2
 800a838:	9304      	str	r3, [sp, #16]
 800a83a:	9b05      	ldr	r3, [sp, #20]
 800a83c:	2101      	movs	r1, #1
 800a83e:	4413      	add	r3, r2
 800a840:	4630      	mov	r0, r6
 800a842:	9305      	str	r3, [sp, #20]
 800a844:	f000 fc3e 	bl	800b0c4 <__i2b>
 800a848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a84a:	4607      	mov	r7, r0
 800a84c:	f1b8 0f00 	cmp.w	r8, #0
 800a850:	d00d      	beq.n	800a86e <_dtoa_r+0x66e>
 800a852:	9a05      	ldr	r2, [sp, #20]
 800a854:	2a00      	cmp	r2, #0
 800a856:	dd0a      	ble.n	800a86e <_dtoa_r+0x66e>
 800a858:	4542      	cmp	r2, r8
 800a85a:	9904      	ldr	r1, [sp, #16]
 800a85c:	bfa8      	it	ge
 800a85e:	4642      	movge	r2, r8
 800a860:	1a89      	subs	r1, r1, r2
 800a862:	9104      	str	r1, [sp, #16]
 800a864:	9905      	ldr	r1, [sp, #20]
 800a866:	eba8 0802 	sub.w	r8, r8, r2
 800a86a:	1a8a      	subs	r2, r1, r2
 800a86c:	9205      	str	r2, [sp, #20]
 800a86e:	b303      	cbz	r3, 800a8b2 <_dtoa_r+0x6b2>
 800a870:	9a07      	ldr	r2, [sp, #28]
 800a872:	2a00      	cmp	r2, #0
 800a874:	f000 80a5 	beq.w	800a9c2 <_dtoa_r+0x7c2>
 800a878:	2c00      	cmp	r4, #0
 800a87a:	dd13      	ble.n	800a8a4 <_dtoa_r+0x6a4>
 800a87c:	4639      	mov	r1, r7
 800a87e:	4622      	mov	r2, r4
 800a880:	4630      	mov	r0, r6
 800a882:	930d      	str	r3, [sp, #52]	; 0x34
 800a884:	f000 fcde 	bl	800b244 <__pow5mult>
 800a888:	462a      	mov	r2, r5
 800a88a:	4601      	mov	r1, r0
 800a88c:	4607      	mov	r7, r0
 800a88e:	4630      	mov	r0, r6
 800a890:	f000 fc2e 	bl	800b0f0 <__multiply>
 800a894:	4629      	mov	r1, r5
 800a896:	9009      	str	r0, [sp, #36]	; 0x24
 800a898:	4630      	mov	r0, r6
 800a89a:	f000 fb5d 	bl	800af58 <_Bfree>
 800a89e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8a2:	4615      	mov	r5, r2
 800a8a4:	1b1a      	subs	r2, r3, r4
 800a8a6:	d004      	beq.n	800a8b2 <_dtoa_r+0x6b2>
 800a8a8:	4629      	mov	r1, r5
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	f000 fcca 	bl	800b244 <__pow5mult>
 800a8b0:	4605      	mov	r5, r0
 800a8b2:	2101      	movs	r1, #1
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	f000 fc05 	bl	800b0c4 <__i2b>
 800a8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	4604      	mov	r4, r0
 800a8c0:	f340 8081 	ble.w	800a9c6 <_dtoa_r+0x7c6>
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	4601      	mov	r1, r0
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	f000 fcbb 	bl	800b244 <__pow5mult>
 800a8ce:	9b06      	ldr	r3, [sp, #24]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	dd7a      	ble.n	800a9cc <_dtoa_r+0x7cc>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8da:	6922      	ldr	r2, [r4, #16]
 800a8dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a8e0:	6910      	ldr	r0, [r2, #16]
 800a8e2:	f000 fba1 	bl	800b028 <__hi0bits>
 800a8e6:	f1c0 0020 	rsb	r0, r0, #32
 800a8ea:	9b05      	ldr	r3, [sp, #20]
 800a8ec:	4418      	add	r0, r3
 800a8ee:	f010 001f 	ands.w	r0, r0, #31
 800a8f2:	f000 8093 	beq.w	800aa1c <_dtoa_r+0x81c>
 800a8f6:	f1c0 0220 	rsb	r2, r0, #32
 800a8fa:	2a04      	cmp	r2, #4
 800a8fc:	f340 8085 	ble.w	800aa0a <_dtoa_r+0x80a>
 800a900:	9b04      	ldr	r3, [sp, #16]
 800a902:	f1c0 001c 	rsb	r0, r0, #28
 800a906:	4403      	add	r3, r0
 800a908:	9304      	str	r3, [sp, #16]
 800a90a:	9b05      	ldr	r3, [sp, #20]
 800a90c:	4480      	add	r8, r0
 800a90e:	4403      	add	r3, r0
 800a910:	9305      	str	r3, [sp, #20]
 800a912:	9b04      	ldr	r3, [sp, #16]
 800a914:	2b00      	cmp	r3, #0
 800a916:	dd05      	ble.n	800a924 <_dtoa_r+0x724>
 800a918:	4629      	mov	r1, r5
 800a91a:	461a      	mov	r2, r3
 800a91c:	4630      	mov	r0, r6
 800a91e:	f000 fceb 	bl	800b2f8 <__lshift>
 800a922:	4605      	mov	r5, r0
 800a924:	9b05      	ldr	r3, [sp, #20]
 800a926:	2b00      	cmp	r3, #0
 800a928:	dd05      	ble.n	800a936 <_dtoa_r+0x736>
 800a92a:	4621      	mov	r1, r4
 800a92c:	461a      	mov	r2, r3
 800a92e:	4630      	mov	r0, r6
 800a930:	f000 fce2 	bl	800b2f8 <__lshift>
 800a934:	4604      	mov	r4, r0
 800a936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d071      	beq.n	800aa20 <_dtoa_r+0x820>
 800a93c:	4621      	mov	r1, r4
 800a93e:	4628      	mov	r0, r5
 800a940:	f000 fd46 	bl	800b3d0 <__mcmp>
 800a944:	2800      	cmp	r0, #0
 800a946:	da6b      	bge.n	800aa20 <_dtoa_r+0x820>
 800a948:	2300      	movs	r3, #0
 800a94a:	4629      	mov	r1, r5
 800a94c:	220a      	movs	r2, #10
 800a94e:	4630      	mov	r0, r6
 800a950:	f000 fb24 	bl	800af9c <__multadd>
 800a954:	9b07      	ldr	r3, [sp, #28]
 800a956:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a95a:	4605      	mov	r5, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f000 8197 	beq.w	800ac90 <_dtoa_r+0xa90>
 800a962:	4639      	mov	r1, r7
 800a964:	2300      	movs	r3, #0
 800a966:	220a      	movs	r2, #10
 800a968:	4630      	mov	r0, r6
 800a96a:	f000 fb17 	bl	800af9c <__multadd>
 800a96e:	f1ba 0f00 	cmp.w	sl, #0
 800a972:	4607      	mov	r7, r0
 800a974:	f300 8093 	bgt.w	800aa9e <_dtoa_r+0x89e>
 800a978:	9b06      	ldr	r3, [sp, #24]
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	dc57      	bgt.n	800aa2e <_dtoa_r+0x82e>
 800a97e:	e08e      	b.n	800aa9e <_dtoa_r+0x89e>
 800a980:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a982:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a986:	e751      	b.n	800a82c <_dtoa_r+0x62c>
 800a988:	f109 34ff 	add.w	r4, r9, #4294967295
 800a98c:	42a3      	cmp	r3, r4
 800a98e:	bfbf      	itttt	lt
 800a990:	1ae2      	sublt	r2, r4, r3
 800a992:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a994:	189b      	addlt	r3, r3, r2
 800a996:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a998:	bfae      	itee	ge
 800a99a:	1b1c      	subge	r4, r3, r4
 800a99c:	4623      	movlt	r3, r4
 800a99e:	2400      	movlt	r4, #0
 800a9a0:	f1b9 0f00 	cmp.w	r9, #0
 800a9a4:	bfb5      	itete	lt
 800a9a6:	9a04      	ldrlt	r2, [sp, #16]
 800a9a8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a9ac:	eba2 0809 	sublt.w	r8, r2, r9
 800a9b0:	464a      	movge	r2, r9
 800a9b2:	bfb8      	it	lt
 800a9b4:	2200      	movlt	r2, #0
 800a9b6:	e73c      	b.n	800a832 <_dtoa_r+0x632>
 800a9b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a9bc:	9f07      	ldr	r7, [sp, #28]
 800a9be:	461c      	mov	r4, r3
 800a9c0:	e744      	b.n	800a84c <_dtoa_r+0x64c>
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	e770      	b.n	800a8a8 <_dtoa_r+0x6a8>
 800a9c6:	9b06      	ldr	r3, [sp, #24]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	dc18      	bgt.n	800a9fe <_dtoa_r+0x7fe>
 800a9cc:	9b02      	ldr	r3, [sp, #8]
 800a9ce:	b9b3      	cbnz	r3, 800a9fe <_dtoa_r+0x7fe>
 800a9d0:	9b03      	ldr	r3, [sp, #12]
 800a9d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a9d6:	b9a2      	cbnz	r2, 800aa02 <_dtoa_r+0x802>
 800a9d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a9dc:	0d12      	lsrs	r2, r2, #20
 800a9de:	0512      	lsls	r2, r2, #20
 800a9e0:	b18a      	cbz	r2, 800aa06 <_dtoa_r+0x806>
 800a9e2:	9b04      	ldr	r3, [sp, #16]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	9304      	str	r3, [sp, #16]
 800a9e8:	9b05      	ldr	r3, [sp, #20]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	9305      	str	r3, [sp, #20]
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a9f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f47f af70 	bne.w	800a8da <_dtoa_r+0x6da>
 800a9fa:	2001      	movs	r0, #1
 800a9fc:	e775      	b.n	800a8ea <_dtoa_r+0x6ea>
 800a9fe:	2300      	movs	r3, #0
 800aa00:	e7f6      	b.n	800a9f0 <_dtoa_r+0x7f0>
 800aa02:	9b02      	ldr	r3, [sp, #8]
 800aa04:	e7f4      	b.n	800a9f0 <_dtoa_r+0x7f0>
 800aa06:	9209      	str	r2, [sp, #36]	; 0x24
 800aa08:	e7f3      	b.n	800a9f2 <_dtoa_r+0x7f2>
 800aa0a:	d082      	beq.n	800a912 <_dtoa_r+0x712>
 800aa0c:	9b04      	ldr	r3, [sp, #16]
 800aa0e:	321c      	adds	r2, #28
 800aa10:	4413      	add	r3, r2
 800aa12:	9304      	str	r3, [sp, #16]
 800aa14:	9b05      	ldr	r3, [sp, #20]
 800aa16:	4490      	add	r8, r2
 800aa18:	4413      	add	r3, r2
 800aa1a:	e779      	b.n	800a910 <_dtoa_r+0x710>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	e7f5      	b.n	800aa0c <_dtoa_r+0x80c>
 800aa20:	f1b9 0f00 	cmp.w	r9, #0
 800aa24:	dc36      	bgt.n	800aa94 <_dtoa_r+0x894>
 800aa26:	9b06      	ldr	r3, [sp, #24]
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	dd33      	ble.n	800aa94 <_dtoa_r+0x894>
 800aa2c:	46ca      	mov	sl, r9
 800aa2e:	f1ba 0f00 	cmp.w	sl, #0
 800aa32:	d10d      	bne.n	800aa50 <_dtoa_r+0x850>
 800aa34:	4621      	mov	r1, r4
 800aa36:	4653      	mov	r3, sl
 800aa38:	2205      	movs	r2, #5
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	f000 faae 	bl	800af9c <__multadd>
 800aa40:	4601      	mov	r1, r0
 800aa42:	4604      	mov	r4, r0
 800aa44:	4628      	mov	r0, r5
 800aa46:	f000 fcc3 	bl	800b3d0 <__mcmp>
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	f73f ade4 	bgt.w	800a618 <_dtoa_r+0x418>
 800aa50:	9b08      	ldr	r3, [sp, #32]
 800aa52:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aa56:	ea6f 0b03 	mvn.w	fp, r3
 800aa5a:	f04f 0900 	mov.w	r9, #0
 800aa5e:	4621      	mov	r1, r4
 800aa60:	4630      	mov	r0, r6
 800aa62:	f000 fa79 	bl	800af58 <_Bfree>
 800aa66:	2f00      	cmp	r7, #0
 800aa68:	f43f aea1 	beq.w	800a7ae <_dtoa_r+0x5ae>
 800aa6c:	f1b9 0f00 	cmp.w	r9, #0
 800aa70:	d005      	beq.n	800aa7e <_dtoa_r+0x87e>
 800aa72:	45b9      	cmp	r9, r7
 800aa74:	d003      	beq.n	800aa7e <_dtoa_r+0x87e>
 800aa76:	4649      	mov	r1, r9
 800aa78:	4630      	mov	r0, r6
 800aa7a:	f000 fa6d 	bl	800af58 <_Bfree>
 800aa7e:	4639      	mov	r1, r7
 800aa80:	4630      	mov	r0, r6
 800aa82:	f000 fa69 	bl	800af58 <_Bfree>
 800aa86:	e692      	b.n	800a7ae <_dtoa_r+0x5ae>
 800aa88:	2400      	movs	r4, #0
 800aa8a:	4627      	mov	r7, r4
 800aa8c:	e7e0      	b.n	800aa50 <_dtoa_r+0x850>
 800aa8e:	4693      	mov	fp, r2
 800aa90:	4627      	mov	r7, r4
 800aa92:	e5c1      	b.n	800a618 <_dtoa_r+0x418>
 800aa94:	9b07      	ldr	r3, [sp, #28]
 800aa96:	46ca      	mov	sl, r9
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f000 8100 	beq.w	800ac9e <_dtoa_r+0xa9e>
 800aa9e:	f1b8 0f00 	cmp.w	r8, #0
 800aaa2:	dd05      	ble.n	800aab0 <_dtoa_r+0x8b0>
 800aaa4:	4639      	mov	r1, r7
 800aaa6:	4642      	mov	r2, r8
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f000 fc25 	bl	800b2f8 <__lshift>
 800aaae:	4607      	mov	r7, r0
 800aab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d05d      	beq.n	800ab72 <_dtoa_r+0x972>
 800aab6:	6879      	ldr	r1, [r7, #4]
 800aab8:	4630      	mov	r0, r6
 800aaba:	f000 fa0d 	bl	800aed8 <_Balloc>
 800aabe:	4680      	mov	r8, r0
 800aac0:	b928      	cbnz	r0, 800aace <_dtoa_r+0x8ce>
 800aac2:	4b82      	ldr	r3, [pc, #520]	; (800accc <_dtoa_r+0xacc>)
 800aac4:	4602      	mov	r2, r0
 800aac6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800aaca:	f7ff bbb1 	b.w	800a230 <_dtoa_r+0x30>
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	3202      	adds	r2, #2
 800aad2:	0092      	lsls	r2, r2, #2
 800aad4:	f107 010c 	add.w	r1, r7, #12
 800aad8:	300c      	adds	r0, #12
 800aada:	f7ff faf9 	bl	800a0d0 <memcpy>
 800aade:	2201      	movs	r2, #1
 800aae0:	4641      	mov	r1, r8
 800aae2:	4630      	mov	r0, r6
 800aae4:	f000 fc08 	bl	800b2f8 <__lshift>
 800aae8:	9b01      	ldr	r3, [sp, #4]
 800aaea:	3301      	adds	r3, #1
 800aaec:	9304      	str	r3, [sp, #16]
 800aaee:	9b01      	ldr	r3, [sp, #4]
 800aaf0:	4453      	add	r3, sl
 800aaf2:	9308      	str	r3, [sp, #32]
 800aaf4:	9b02      	ldr	r3, [sp, #8]
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	46b9      	mov	r9, r7
 800aafc:	9307      	str	r3, [sp, #28]
 800aafe:	4607      	mov	r7, r0
 800ab00:	9b04      	ldr	r3, [sp, #16]
 800ab02:	4621      	mov	r1, r4
 800ab04:	3b01      	subs	r3, #1
 800ab06:	4628      	mov	r0, r5
 800ab08:	9302      	str	r3, [sp, #8]
 800ab0a:	f7ff faef 	bl	800a0ec <quorem>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	3330      	adds	r3, #48	; 0x30
 800ab12:	9005      	str	r0, [sp, #20]
 800ab14:	4649      	mov	r1, r9
 800ab16:	4628      	mov	r0, r5
 800ab18:	9309      	str	r3, [sp, #36]	; 0x24
 800ab1a:	f000 fc59 	bl	800b3d0 <__mcmp>
 800ab1e:	463a      	mov	r2, r7
 800ab20:	4682      	mov	sl, r0
 800ab22:	4621      	mov	r1, r4
 800ab24:	4630      	mov	r0, r6
 800ab26:	f000 fc6f 	bl	800b408 <__mdiff>
 800ab2a:	68c2      	ldr	r2, [r0, #12]
 800ab2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab2e:	4680      	mov	r8, r0
 800ab30:	bb0a      	cbnz	r2, 800ab76 <_dtoa_r+0x976>
 800ab32:	4601      	mov	r1, r0
 800ab34:	4628      	mov	r0, r5
 800ab36:	f000 fc4b 	bl	800b3d0 <__mcmp>
 800ab3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	4641      	mov	r1, r8
 800ab40:	4630      	mov	r0, r6
 800ab42:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ab46:	f000 fa07 	bl	800af58 <_Bfree>
 800ab4a:	9b06      	ldr	r3, [sp, #24]
 800ab4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab4e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ab52:	ea43 0102 	orr.w	r1, r3, r2
 800ab56:	9b07      	ldr	r3, [sp, #28]
 800ab58:	4319      	orrs	r1, r3
 800ab5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab5c:	d10d      	bne.n	800ab7a <_dtoa_r+0x97a>
 800ab5e:	2b39      	cmp	r3, #57	; 0x39
 800ab60:	d029      	beq.n	800abb6 <_dtoa_r+0x9b6>
 800ab62:	f1ba 0f00 	cmp.w	sl, #0
 800ab66:	dd01      	ble.n	800ab6c <_dtoa_r+0x96c>
 800ab68:	9b05      	ldr	r3, [sp, #20]
 800ab6a:	3331      	adds	r3, #49	; 0x31
 800ab6c:	9a02      	ldr	r2, [sp, #8]
 800ab6e:	7013      	strb	r3, [r2, #0]
 800ab70:	e775      	b.n	800aa5e <_dtoa_r+0x85e>
 800ab72:	4638      	mov	r0, r7
 800ab74:	e7b8      	b.n	800aae8 <_dtoa_r+0x8e8>
 800ab76:	2201      	movs	r2, #1
 800ab78:	e7e1      	b.n	800ab3e <_dtoa_r+0x93e>
 800ab7a:	f1ba 0f00 	cmp.w	sl, #0
 800ab7e:	db06      	blt.n	800ab8e <_dtoa_r+0x98e>
 800ab80:	9906      	ldr	r1, [sp, #24]
 800ab82:	ea41 0a0a 	orr.w	sl, r1, sl
 800ab86:	9907      	ldr	r1, [sp, #28]
 800ab88:	ea5a 0a01 	orrs.w	sl, sl, r1
 800ab8c:	d120      	bne.n	800abd0 <_dtoa_r+0x9d0>
 800ab8e:	2a00      	cmp	r2, #0
 800ab90:	ddec      	ble.n	800ab6c <_dtoa_r+0x96c>
 800ab92:	4629      	mov	r1, r5
 800ab94:	2201      	movs	r2, #1
 800ab96:	4630      	mov	r0, r6
 800ab98:	9304      	str	r3, [sp, #16]
 800ab9a:	f000 fbad 	bl	800b2f8 <__lshift>
 800ab9e:	4621      	mov	r1, r4
 800aba0:	4605      	mov	r5, r0
 800aba2:	f000 fc15 	bl	800b3d0 <__mcmp>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	9b04      	ldr	r3, [sp, #16]
 800abaa:	dc02      	bgt.n	800abb2 <_dtoa_r+0x9b2>
 800abac:	d1de      	bne.n	800ab6c <_dtoa_r+0x96c>
 800abae:	07da      	lsls	r2, r3, #31
 800abb0:	d5dc      	bpl.n	800ab6c <_dtoa_r+0x96c>
 800abb2:	2b39      	cmp	r3, #57	; 0x39
 800abb4:	d1d8      	bne.n	800ab68 <_dtoa_r+0x968>
 800abb6:	9a02      	ldr	r2, [sp, #8]
 800abb8:	2339      	movs	r3, #57	; 0x39
 800abba:	7013      	strb	r3, [r2, #0]
 800abbc:	4643      	mov	r3, r8
 800abbe:	4698      	mov	r8, r3
 800abc0:	3b01      	subs	r3, #1
 800abc2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800abc6:	2a39      	cmp	r2, #57	; 0x39
 800abc8:	d051      	beq.n	800ac6e <_dtoa_r+0xa6e>
 800abca:	3201      	adds	r2, #1
 800abcc:	701a      	strb	r2, [r3, #0]
 800abce:	e746      	b.n	800aa5e <_dtoa_r+0x85e>
 800abd0:	2a00      	cmp	r2, #0
 800abd2:	dd03      	ble.n	800abdc <_dtoa_r+0x9dc>
 800abd4:	2b39      	cmp	r3, #57	; 0x39
 800abd6:	d0ee      	beq.n	800abb6 <_dtoa_r+0x9b6>
 800abd8:	3301      	adds	r3, #1
 800abda:	e7c7      	b.n	800ab6c <_dtoa_r+0x96c>
 800abdc:	9a04      	ldr	r2, [sp, #16]
 800abde:	9908      	ldr	r1, [sp, #32]
 800abe0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800abe4:	428a      	cmp	r2, r1
 800abe6:	d02b      	beq.n	800ac40 <_dtoa_r+0xa40>
 800abe8:	4629      	mov	r1, r5
 800abea:	2300      	movs	r3, #0
 800abec:	220a      	movs	r2, #10
 800abee:	4630      	mov	r0, r6
 800abf0:	f000 f9d4 	bl	800af9c <__multadd>
 800abf4:	45b9      	cmp	r9, r7
 800abf6:	4605      	mov	r5, r0
 800abf8:	f04f 0300 	mov.w	r3, #0
 800abfc:	f04f 020a 	mov.w	r2, #10
 800ac00:	4649      	mov	r1, r9
 800ac02:	4630      	mov	r0, r6
 800ac04:	d107      	bne.n	800ac16 <_dtoa_r+0xa16>
 800ac06:	f000 f9c9 	bl	800af9c <__multadd>
 800ac0a:	4681      	mov	r9, r0
 800ac0c:	4607      	mov	r7, r0
 800ac0e:	9b04      	ldr	r3, [sp, #16]
 800ac10:	3301      	adds	r3, #1
 800ac12:	9304      	str	r3, [sp, #16]
 800ac14:	e774      	b.n	800ab00 <_dtoa_r+0x900>
 800ac16:	f000 f9c1 	bl	800af9c <__multadd>
 800ac1a:	4639      	mov	r1, r7
 800ac1c:	4681      	mov	r9, r0
 800ac1e:	2300      	movs	r3, #0
 800ac20:	220a      	movs	r2, #10
 800ac22:	4630      	mov	r0, r6
 800ac24:	f000 f9ba 	bl	800af9c <__multadd>
 800ac28:	4607      	mov	r7, r0
 800ac2a:	e7f0      	b.n	800ac0e <_dtoa_r+0xa0e>
 800ac2c:	f1ba 0f00 	cmp.w	sl, #0
 800ac30:	9a01      	ldr	r2, [sp, #4]
 800ac32:	bfcc      	ite	gt
 800ac34:	46d0      	movgt	r8, sl
 800ac36:	f04f 0801 	movle.w	r8, #1
 800ac3a:	4490      	add	r8, r2
 800ac3c:	f04f 0900 	mov.w	r9, #0
 800ac40:	4629      	mov	r1, r5
 800ac42:	2201      	movs	r2, #1
 800ac44:	4630      	mov	r0, r6
 800ac46:	9302      	str	r3, [sp, #8]
 800ac48:	f000 fb56 	bl	800b2f8 <__lshift>
 800ac4c:	4621      	mov	r1, r4
 800ac4e:	4605      	mov	r5, r0
 800ac50:	f000 fbbe 	bl	800b3d0 <__mcmp>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	dcb1      	bgt.n	800abbc <_dtoa_r+0x9bc>
 800ac58:	d102      	bne.n	800ac60 <_dtoa_r+0xa60>
 800ac5a:	9b02      	ldr	r3, [sp, #8]
 800ac5c:	07db      	lsls	r3, r3, #31
 800ac5e:	d4ad      	bmi.n	800abbc <_dtoa_r+0x9bc>
 800ac60:	4643      	mov	r3, r8
 800ac62:	4698      	mov	r8, r3
 800ac64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac68:	2a30      	cmp	r2, #48	; 0x30
 800ac6a:	d0fa      	beq.n	800ac62 <_dtoa_r+0xa62>
 800ac6c:	e6f7      	b.n	800aa5e <_dtoa_r+0x85e>
 800ac6e:	9a01      	ldr	r2, [sp, #4]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d1a4      	bne.n	800abbe <_dtoa_r+0x9be>
 800ac74:	f10b 0b01 	add.w	fp, fp, #1
 800ac78:	2331      	movs	r3, #49	; 0x31
 800ac7a:	e778      	b.n	800ab6e <_dtoa_r+0x96e>
 800ac7c:	4b14      	ldr	r3, [pc, #80]	; (800acd0 <_dtoa_r+0xad0>)
 800ac7e:	f7ff bb2a 	b.w	800a2d6 <_dtoa_r+0xd6>
 800ac82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f47f ab05 	bne.w	800a294 <_dtoa_r+0x94>
 800ac8a:	4b12      	ldr	r3, [pc, #72]	; (800acd4 <_dtoa_r+0xad4>)
 800ac8c:	f7ff bb23 	b.w	800a2d6 <_dtoa_r+0xd6>
 800ac90:	f1ba 0f00 	cmp.w	sl, #0
 800ac94:	dc03      	bgt.n	800ac9e <_dtoa_r+0xa9e>
 800ac96:	9b06      	ldr	r3, [sp, #24]
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	f73f aec8 	bgt.w	800aa2e <_dtoa_r+0x82e>
 800ac9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aca2:	4621      	mov	r1, r4
 800aca4:	4628      	mov	r0, r5
 800aca6:	f7ff fa21 	bl	800a0ec <quorem>
 800acaa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800acae:	f808 3b01 	strb.w	r3, [r8], #1
 800acb2:	9a01      	ldr	r2, [sp, #4]
 800acb4:	eba8 0202 	sub.w	r2, r8, r2
 800acb8:	4592      	cmp	sl, r2
 800acba:	ddb7      	ble.n	800ac2c <_dtoa_r+0xa2c>
 800acbc:	4629      	mov	r1, r5
 800acbe:	2300      	movs	r3, #0
 800acc0:	220a      	movs	r2, #10
 800acc2:	4630      	mov	r0, r6
 800acc4:	f000 f96a 	bl	800af9c <__multadd>
 800acc8:	4605      	mov	r5, r0
 800acca:	e7ea      	b.n	800aca2 <_dtoa_r+0xaa2>
 800accc:	0800c1fc 	.word	0x0800c1fc
 800acd0:	0800c15c 	.word	0x0800c15c
 800acd4:	0800c180 	.word	0x0800c180

0800acd8 <_free_r>:
 800acd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acda:	2900      	cmp	r1, #0
 800acdc:	d044      	beq.n	800ad68 <_free_r+0x90>
 800acde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ace2:	9001      	str	r0, [sp, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f1a1 0404 	sub.w	r4, r1, #4
 800acea:	bfb8      	it	lt
 800acec:	18e4      	addlt	r4, r4, r3
 800acee:	f000 f8e7 	bl	800aec0 <__malloc_lock>
 800acf2:	4a1e      	ldr	r2, [pc, #120]	; (800ad6c <_free_r+0x94>)
 800acf4:	9801      	ldr	r0, [sp, #4]
 800acf6:	6813      	ldr	r3, [r2, #0]
 800acf8:	b933      	cbnz	r3, 800ad08 <_free_r+0x30>
 800acfa:	6063      	str	r3, [r4, #4]
 800acfc:	6014      	str	r4, [r2, #0]
 800acfe:	b003      	add	sp, #12
 800ad00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad04:	f000 b8e2 	b.w	800aecc <__malloc_unlock>
 800ad08:	42a3      	cmp	r3, r4
 800ad0a:	d908      	bls.n	800ad1e <_free_r+0x46>
 800ad0c:	6825      	ldr	r5, [r4, #0]
 800ad0e:	1961      	adds	r1, r4, r5
 800ad10:	428b      	cmp	r3, r1
 800ad12:	bf01      	itttt	eq
 800ad14:	6819      	ldreq	r1, [r3, #0]
 800ad16:	685b      	ldreq	r3, [r3, #4]
 800ad18:	1949      	addeq	r1, r1, r5
 800ad1a:	6021      	streq	r1, [r4, #0]
 800ad1c:	e7ed      	b.n	800acfa <_free_r+0x22>
 800ad1e:	461a      	mov	r2, r3
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	b10b      	cbz	r3, 800ad28 <_free_r+0x50>
 800ad24:	42a3      	cmp	r3, r4
 800ad26:	d9fa      	bls.n	800ad1e <_free_r+0x46>
 800ad28:	6811      	ldr	r1, [r2, #0]
 800ad2a:	1855      	adds	r5, r2, r1
 800ad2c:	42a5      	cmp	r5, r4
 800ad2e:	d10b      	bne.n	800ad48 <_free_r+0x70>
 800ad30:	6824      	ldr	r4, [r4, #0]
 800ad32:	4421      	add	r1, r4
 800ad34:	1854      	adds	r4, r2, r1
 800ad36:	42a3      	cmp	r3, r4
 800ad38:	6011      	str	r1, [r2, #0]
 800ad3a:	d1e0      	bne.n	800acfe <_free_r+0x26>
 800ad3c:	681c      	ldr	r4, [r3, #0]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	6053      	str	r3, [r2, #4]
 800ad42:	440c      	add	r4, r1
 800ad44:	6014      	str	r4, [r2, #0]
 800ad46:	e7da      	b.n	800acfe <_free_r+0x26>
 800ad48:	d902      	bls.n	800ad50 <_free_r+0x78>
 800ad4a:	230c      	movs	r3, #12
 800ad4c:	6003      	str	r3, [r0, #0]
 800ad4e:	e7d6      	b.n	800acfe <_free_r+0x26>
 800ad50:	6825      	ldr	r5, [r4, #0]
 800ad52:	1961      	adds	r1, r4, r5
 800ad54:	428b      	cmp	r3, r1
 800ad56:	bf04      	itt	eq
 800ad58:	6819      	ldreq	r1, [r3, #0]
 800ad5a:	685b      	ldreq	r3, [r3, #4]
 800ad5c:	6063      	str	r3, [r4, #4]
 800ad5e:	bf04      	itt	eq
 800ad60:	1949      	addeq	r1, r1, r5
 800ad62:	6021      	streq	r1, [r4, #0]
 800ad64:	6054      	str	r4, [r2, #4]
 800ad66:	e7ca      	b.n	800acfe <_free_r+0x26>
 800ad68:	b003      	add	sp, #12
 800ad6a:	bd30      	pop	{r4, r5, pc}
 800ad6c:	240008ec 	.word	0x240008ec

0800ad70 <malloc>:
 800ad70:	4b02      	ldr	r3, [pc, #8]	; (800ad7c <malloc+0xc>)
 800ad72:	4601      	mov	r1, r0
 800ad74:	6818      	ldr	r0, [r3, #0]
 800ad76:	f000 b823 	b.w	800adc0 <_malloc_r>
 800ad7a:	bf00      	nop
 800ad7c:	2400016c 	.word	0x2400016c

0800ad80 <sbrk_aligned>:
 800ad80:	b570      	push	{r4, r5, r6, lr}
 800ad82:	4e0e      	ldr	r6, [pc, #56]	; (800adbc <sbrk_aligned+0x3c>)
 800ad84:	460c      	mov	r4, r1
 800ad86:	6831      	ldr	r1, [r6, #0]
 800ad88:	4605      	mov	r5, r0
 800ad8a:	b911      	cbnz	r1, 800ad92 <sbrk_aligned+0x12>
 800ad8c:	f000 fedc 	bl	800bb48 <_sbrk_r>
 800ad90:	6030      	str	r0, [r6, #0]
 800ad92:	4621      	mov	r1, r4
 800ad94:	4628      	mov	r0, r5
 800ad96:	f000 fed7 	bl	800bb48 <_sbrk_r>
 800ad9a:	1c43      	adds	r3, r0, #1
 800ad9c:	d00a      	beq.n	800adb4 <sbrk_aligned+0x34>
 800ad9e:	1cc4      	adds	r4, r0, #3
 800ada0:	f024 0403 	bic.w	r4, r4, #3
 800ada4:	42a0      	cmp	r0, r4
 800ada6:	d007      	beq.n	800adb8 <sbrk_aligned+0x38>
 800ada8:	1a21      	subs	r1, r4, r0
 800adaa:	4628      	mov	r0, r5
 800adac:	f000 fecc 	bl	800bb48 <_sbrk_r>
 800adb0:	3001      	adds	r0, #1
 800adb2:	d101      	bne.n	800adb8 <sbrk_aligned+0x38>
 800adb4:	f04f 34ff 	mov.w	r4, #4294967295
 800adb8:	4620      	mov	r0, r4
 800adba:	bd70      	pop	{r4, r5, r6, pc}
 800adbc:	240008f0 	.word	0x240008f0

0800adc0 <_malloc_r>:
 800adc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc4:	1ccd      	adds	r5, r1, #3
 800adc6:	f025 0503 	bic.w	r5, r5, #3
 800adca:	3508      	adds	r5, #8
 800adcc:	2d0c      	cmp	r5, #12
 800adce:	bf38      	it	cc
 800add0:	250c      	movcc	r5, #12
 800add2:	2d00      	cmp	r5, #0
 800add4:	4607      	mov	r7, r0
 800add6:	db01      	blt.n	800addc <_malloc_r+0x1c>
 800add8:	42a9      	cmp	r1, r5
 800adda:	d905      	bls.n	800ade8 <_malloc_r+0x28>
 800addc:	230c      	movs	r3, #12
 800adde:	603b      	str	r3, [r7, #0]
 800ade0:	2600      	movs	r6, #0
 800ade2:	4630      	mov	r0, r6
 800ade4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ade8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aebc <_malloc_r+0xfc>
 800adec:	f000 f868 	bl	800aec0 <__malloc_lock>
 800adf0:	f8d8 3000 	ldr.w	r3, [r8]
 800adf4:	461c      	mov	r4, r3
 800adf6:	bb5c      	cbnz	r4, 800ae50 <_malloc_r+0x90>
 800adf8:	4629      	mov	r1, r5
 800adfa:	4638      	mov	r0, r7
 800adfc:	f7ff ffc0 	bl	800ad80 <sbrk_aligned>
 800ae00:	1c43      	adds	r3, r0, #1
 800ae02:	4604      	mov	r4, r0
 800ae04:	d155      	bne.n	800aeb2 <_malloc_r+0xf2>
 800ae06:	f8d8 4000 	ldr.w	r4, [r8]
 800ae0a:	4626      	mov	r6, r4
 800ae0c:	2e00      	cmp	r6, #0
 800ae0e:	d145      	bne.n	800ae9c <_malloc_r+0xdc>
 800ae10:	2c00      	cmp	r4, #0
 800ae12:	d048      	beq.n	800aea6 <_malloc_r+0xe6>
 800ae14:	6823      	ldr	r3, [r4, #0]
 800ae16:	4631      	mov	r1, r6
 800ae18:	4638      	mov	r0, r7
 800ae1a:	eb04 0903 	add.w	r9, r4, r3
 800ae1e:	f000 fe93 	bl	800bb48 <_sbrk_r>
 800ae22:	4581      	cmp	r9, r0
 800ae24:	d13f      	bne.n	800aea6 <_malloc_r+0xe6>
 800ae26:	6821      	ldr	r1, [r4, #0]
 800ae28:	1a6d      	subs	r5, r5, r1
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	4638      	mov	r0, r7
 800ae2e:	f7ff ffa7 	bl	800ad80 <sbrk_aligned>
 800ae32:	3001      	adds	r0, #1
 800ae34:	d037      	beq.n	800aea6 <_malloc_r+0xe6>
 800ae36:	6823      	ldr	r3, [r4, #0]
 800ae38:	442b      	add	r3, r5
 800ae3a:	6023      	str	r3, [r4, #0]
 800ae3c:	f8d8 3000 	ldr.w	r3, [r8]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d038      	beq.n	800aeb6 <_malloc_r+0xf6>
 800ae44:	685a      	ldr	r2, [r3, #4]
 800ae46:	42a2      	cmp	r2, r4
 800ae48:	d12b      	bne.n	800aea2 <_malloc_r+0xe2>
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	605a      	str	r2, [r3, #4]
 800ae4e:	e00f      	b.n	800ae70 <_malloc_r+0xb0>
 800ae50:	6822      	ldr	r2, [r4, #0]
 800ae52:	1b52      	subs	r2, r2, r5
 800ae54:	d41f      	bmi.n	800ae96 <_malloc_r+0xd6>
 800ae56:	2a0b      	cmp	r2, #11
 800ae58:	d917      	bls.n	800ae8a <_malloc_r+0xca>
 800ae5a:	1961      	adds	r1, r4, r5
 800ae5c:	42a3      	cmp	r3, r4
 800ae5e:	6025      	str	r5, [r4, #0]
 800ae60:	bf18      	it	ne
 800ae62:	6059      	strne	r1, [r3, #4]
 800ae64:	6863      	ldr	r3, [r4, #4]
 800ae66:	bf08      	it	eq
 800ae68:	f8c8 1000 	streq.w	r1, [r8]
 800ae6c:	5162      	str	r2, [r4, r5]
 800ae6e:	604b      	str	r3, [r1, #4]
 800ae70:	4638      	mov	r0, r7
 800ae72:	f104 060b 	add.w	r6, r4, #11
 800ae76:	f000 f829 	bl	800aecc <__malloc_unlock>
 800ae7a:	f026 0607 	bic.w	r6, r6, #7
 800ae7e:	1d23      	adds	r3, r4, #4
 800ae80:	1af2      	subs	r2, r6, r3
 800ae82:	d0ae      	beq.n	800ade2 <_malloc_r+0x22>
 800ae84:	1b9b      	subs	r3, r3, r6
 800ae86:	50a3      	str	r3, [r4, r2]
 800ae88:	e7ab      	b.n	800ade2 <_malloc_r+0x22>
 800ae8a:	42a3      	cmp	r3, r4
 800ae8c:	6862      	ldr	r2, [r4, #4]
 800ae8e:	d1dd      	bne.n	800ae4c <_malloc_r+0x8c>
 800ae90:	f8c8 2000 	str.w	r2, [r8]
 800ae94:	e7ec      	b.n	800ae70 <_malloc_r+0xb0>
 800ae96:	4623      	mov	r3, r4
 800ae98:	6864      	ldr	r4, [r4, #4]
 800ae9a:	e7ac      	b.n	800adf6 <_malloc_r+0x36>
 800ae9c:	4634      	mov	r4, r6
 800ae9e:	6876      	ldr	r6, [r6, #4]
 800aea0:	e7b4      	b.n	800ae0c <_malloc_r+0x4c>
 800aea2:	4613      	mov	r3, r2
 800aea4:	e7cc      	b.n	800ae40 <_malloc_r+0x80>
 800aea6:	230c      	movs	r3, #12
 800aea8:	603b      	str	r3, [r7, #0]
 800aeaa:	4638      	mov	r0, r7
 800aeac:	f000 f80e 	bl	800aecc <__malloc_unlock>
 800aeb0:	e797      	b.n	800ade2 <_malloc_r+0x22>
 800aeb2:	6025      	str	r5, [r4, #0]
 800aeb4:	e7dc      	b.n	800ae70 <_malloc_r+0xb0>
 800aeb6:	605b      	str	r3, [r3, #4]
 800aeb8:	deff      	udf	#255	; 0xff
 800aeba:	bf00      	nop
 800aebc:	240008ec 	.word	0x240008ec

0800aec0 <__malloc_lock>:
 800aec0:	4801      	ldr	r0, [pc, #4]	; (800aec8 <__malloc_lock+0x8>)
 800aec2:	f7ff b903 	b.w	800a0cc <__retarget_lock_acquire_recursive>
 800aec6:	bf00      	nop
 800aec8:	240008e8 	.word	0x240008e8

0800aecc <__malloc_unlock>:
 800aecc:	4801      	ldr	r0, [pc, #4]	; (800aed4 <__malloc_unlock+0x8>)
 800aece:	f7ff b8fe 	b.w	800a0ce <__retarget_lock_release_recursive>
 800aed2:	bf00      	nop
 800aed4:	240008e8 	.word	0x240008e8

0800aed8 <_Balloc>:
 800aed8:	b570      	push	{r4, r5, r6, lr}
 800aeda:	69c6      	ldr	r6, [r0, #28]
 800aedc:	4604      	mov	r4, r0
 800aede:	460d      	mov	r5, r1
 800aee0:	b976      	cbnz	r6, 800af00 <_Balloc+0x28>
 800aee2:	2010      	movs	r0, #16
 800aee4:	f7ff ff44 	bl	800ad70 <malloc>
 800aee8:	4602      	mov	r2, r0
 800aeea:	61e0      	str	r0, [r4, #28]
 800aeec:	b920      	cbnz	r0, 800aef8 <_Balloc+0x20>
 800aeee:	4b18      	ldr	r3, [pc, #96]	; (800af50 <_Balloc+0x78>)
 800aef0:	4818      	ldr	r0, [pc, #96]	; (800af54 <_Balloc+0x7c>)
 800aef2:	216b      	movs	r1, #107	; 0x6b
 800aef4:	f000 fe38 	bl	800bb68 <__assert_func>
 800aef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aefc:	6006      	str	r6, [r0, #0]
 800aefe:	60c6      	str	r6, [r0, #12]
 800af00:	69e6      	ldr	r6, [r4, #28]
 800af02:	68f3      	ldr	r3, [r6, #12]
 800af04:	b183      	cbz	r3, 800af28 <_Balloc+0x50>
 800af06:	69e3      	ldr	r3, [r4, #28]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af0e:	b9b8      	cbnz	r0, 800af40 <_Balloc+0x68>
 800af10:	2101      	movs	r1, #1
 800af12:	fa01 f605 	lsl.w	r6, r1, r5
 800af16:	1d72      	adds	r2, r6, #5
 800af18:	0092      	lsls	r2, r2, #2
 800af1a:	4620      	mov	r0, r4
 800af1c:	f000 fe42 	bl	800bba4 <_calloc_r>
 800af20:	b160      	cbz	r0, 800af3c <_Balloc+0x64>
 800af22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af26:	e00e      	b.n	800af46 <_Balloc+0x6e>
 800af28:	2221      	movs	r2, #33	; 0x21
 800af2a:	2104      	movs	r1, #4
 800af2c:	4620      	mov	r0, r4
 800af2e:	f000 fe39 	bl	800bba4 <_calloc_r>
 800af32:	69e3      	ldr	r3, [r4, #28]
 800af34:	60f0      	str	r0, [r6, #12]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1e4      	bne.n	800af06 <_Balloc+0x2e>
 800af3c:	2000      	movs	r0, #0
 800af3e:	bd70      	pop	{r4, r5, r6, pc}
 800af40:	6802      	ldr	r2, [r0, #0]
 800af42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af46:	2300      	movs	r3, #0
 800af48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af4c:	e7f7      	b.n	800af3e <_Balloc+0x66>
 800af4e:	bf00      	nop
 800af50:	0800c18d 	.word	0x0800c18d
 800af54:	0800c20d 	.word	0x0800c20d

0800af58 <_Bfree>:
 800af58:	b570      	push	{r4, r5, r6, lr}
 800af5a:	69c6      	ldr	r6, [r0, #28]
 800af5c:	4605      	mov	r5, r0
 800af5e:	460c      	mov	r4, r1
 800af60:	b976      	cbnz	r6, 800af80 <_Bfree+0x28>
 800af62:	2010      	movs	r0, #16
 800af64:	f7ff ff04 	bl	800ad70 <malloc>
 800af68:	4602      	mov	r2, r0
 800af6a:	61e8      	str	r0, [r5, #28]
 800af6c:	b920      	cbnz	r0, 800af78 <_Bfree+0x20>
 800af6e:	4b09      	ldr	r3, [pc, #36]	; (800af94 <_Bfree+0x3c>)
 800af70:	4809      	ldr	r0, [pc, #36]	; (800af98 <_Bfree+0x40>)
 800af72:	218f      	movs	r1, #143	; 0x8f
 800af74:	f000 fdf8 	bl	800bb68 <__assert_func>
 800af78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af7c:	6006      	str	r6, [r0, #0]
 800af7e:	60c6      	str	r6, [r0, #12]
 800af80:	b13c      	cbz	r4, 800af92 <_Bfree+0x3a>
 800af82:	69eb      	ldr	r3, [r5, #28]
 800af84:	6862      	ldr	r2, [r4, #4]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af8c:	6021      	str	r1, [r4, #0]
 800af8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af92:	bd70      	pop	{r4, r5, r6, pc}
 800af94:	0800c18d 	.word	0x0800c18d
 800af98:	0800c20d 	.word	0x0800c20d

0800af9c <__multadd>:
 800af9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afa0:	690d      	ldr	r5, [r1, #16]
 800afa2:	4607      	mov	r7, r0
 800afa4:	460c      	mov	r4, r1
 800afa6:	461e      	mov	r6, r3
 800afa8:	f101 0c14 	add.w	ip, r1, #20
 800afac:	2000      	movs	r0, #0
 800afae:	f8dc 3000 	ldr.w	r3, [ip]
 800afb2:	b299      	uxth	r1, r3
 800afb4:	fb02 6101 	mla	r1, r2, r1, r6
 800afb8:	0c1e      	lsrs	r6, r3, #16
 800afba:	0c0b      	lsrs	r3, r1, #16
 800afbc:	fb02 3306 	mla	r3, r2, r6, r3
 800afc0:	b289      	uxth	r1, r1
 800afc2:	3001      	adds	r0, #1
 800afc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800afc8:	4285      	cmp	r5, r0
 800afca:	f84c 1b04 	str.w	r1, [ip], #4
 800afce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800afd2:	dcec      	bgt.n	800afae <__multadd+0x12>
 800afd4:	b30e      	cbz	r6, 800b01a <__multadd+0x7e>
 800afd6:	68a3      	ldr	r3, [r4, #8]
 800afd8:	42ab      	cmp	r3, r5
 800afda:	dc19      	bgt.n	800b010 <__multadd+0x74>
 800afdc:	6861      	ldr	r1, [r4, #4]
 800afde:	4638      	mov	r0, r7
 800afe0:	3101      	adds	r1, #1
 800afe2:	f7ff ff79 	bl	800aed8 <_Balloc>
 800afe6:	4680      	mov	r8, r0
 800afe8:	b928      	cbnz	r0, 800aff6 <__multadd+0x5a>
 800afea:	4602      	mov	r2, r0
 800afec:	4b0c      	ldr	r3, [pc, #48]	; (800b020 <__multadd+0x84>)
 800afee:	480d      	ldr	r0, [pc, #52]	; (800b024 <__multadd+0x88>)
 800aff0:	21ba      	movs	r1, #186	; 0xba
 800aff2:	f000 fdb9 	bl	800bb68 <__assert_func>
 800aff6:	6922      	ldr	r2, [r4, #16]
 800aff8:	3202      	adds	r2, #2
 800affa:	f104 010c 	add.w	r1, r4, #12
 800affe:	0092      	lsls	r2, r2, #2
 800b000:	300c      	adds	r0, #12
 800b002:	f7ff f865 	bl	800a0d0 <memcpy>
 800b006:	4621      	mov	r1, r4
 800b008:	4638      	mov	r0, r7
 800b00a:	f7ff ffa5 	bl	800af58 <_Bfree>
 800b00e:	4644      	mov	r4, r8
 800b010:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b014:	3501      	adds	r5, #1
 800b016:	615e      	str	r6, [r3, #20]
 800b018:	6125      	str	r5, [r4, #16]
 800b01a:	4620      	mov	r0, r4
 800b01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b020:	0800c1fc 	.word	0x0800c1fc
 800b024:	0800c20d 	.word	0x0800c20d

0800b028 <__hi0bits>:
 800b028:	0c03      	lsrs	r3, r0, #16
 800b02a:	041b      	lsls	r3, r3, #16
 800b02c:	b9d3      	cbnz	r3, 800b064 <__hi0bits+0x3c>
 800b02e:	0400      	lsls	r0, r0, #16
 800b030:	2310      	movs	r3, #16
 800b032:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b036:	bf04      	itt	eq
 800b038:	0200      	lsleq	r0, r0, #8
 800b03a:	3308      	addeq	r3, #8
 800b03c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b040:	bf04      	itt	eq
 800b042:	0100      	lsleq	r0, r0, #4
 800b044:	3304      	addeq	r3, #4
 800b046:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b04a:	bf04      	itt	eq
 800b04c:	0080      	lsleq	r0, r0, #2
 800b04e:	3302      	addeq	r3, #2
 800b050:	2800      	cmp	r0, #0
 800b052:	db05      	blt.n	800b060 <__hi0bits+0x38>
 800b054:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b058:	f103 0301 	add.w	r3, r3, #1
 800b05c:	bf08      	it	eq
 800b05e:	2320      	moveq	r3, #32
 800b060:	4618      	mov	r0, r3
 800b062:	4770      	bx	lr
 800b064:	2300      	movs	r3, #0
 800b066:	e7e4      	b.n	800b032 <__hi0bits+0xa>

0800b068 <__lo0bits>:
 800b068:	6803      	ldr	r3, [r0, #0]
 800b06a:	f013 0207 	ands.w	r2, r3, #7
 800b06e:	d00c      	beq.n	800b08a <__lo0bits+0x22>
 800b070:	07d9      	lsls	r1, r3, #31
 800b072:	d422      	bmi.n	800b0ba <__lo0bits+0x52>
 800b074:	079a      	lsls	r2, r3, #30
 800b076:	bf49      	itett	mi
 800b078:	085b      	lsrmi	r3, r3, #1
 800b07a:	089b      	lsrpl	r3, r3, #2
 800b07c:	6003      	strmi	r3, [r0, #0]
 800b07e:	2201      	movmi	r2, #1
 800b080:	bf5c      	itt	pl
 800b082:	6003      	strpl	r3, [r0, #0]
 800b084:	2202      	movpl	r2, #2
 800b086:	4610      	mov	r0, r2
 800b088:	4770      	bx	lr
 800b08a:	b299      	uxth	r1, r3
 800b08c:	b909      	cbnz	r1, 800b092 <__lo0bits+0x2a>
 800b08e:	0c1b      	lsrs	r3, r3, #16
 800b090:	2210      	movs	r2, #16
 800b092:	b2d9      	uxtb	r1, r3
 800b094:	b909      	cbnz	r1, 800b09a <__lo0bits+0x32>
 800b096:	3208      	adds	r2, #8
 800b098:	0a1b      	lsrs	r3, r3, #8
 800b09a:	0719      	lsls	r1, r3, #28
 800b09c:	bf04      	itt	eq
 800b09e:	091b      	lsreq	r3, r3, #4
 800b0a0:	3204      	addeq	r2, #4
 800b0a2:	0799      	lsls	r1, r3, #30
 800b0a4:	bf04      	itt	eq
 800b0a6:	089b      	lsreq	r3, r3, #2
 800b0a8:	3202      	addeq	r2, #2
 800b0aa:	07d9      	lsls	r1, r3, #31
 800b0ac:	d403      	bmi.n	800b0b6 <__lo0bits+0x4e>
 800b0ae:	085b      	lsrs	r3, r3, #1
 800b0b0:	f102 0201 	add.w	r2, r2, #1
 800b0b4:	d003      	beq.n	800b0be <__lo0bits+0x56>
 800b0b6:	6003      	str	r3, [r0, #0]
 800b0b8:	e7e5      	b.n	800b086 <__lo0bits+0x1e>
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	e7e3      	b.n	800b086 <__lo0bits+0x1e>
 800b0be:	2220      	movs	r2, #32
 800b0c0:	e7e1      	b.n	800b086 <__lo0bits+0x1e>
	...

0800b0c4 <__i2b>:
 800b0c4:	b510      	push	{r4, lr}
 800b0c6:	460c      	mov	r4, r1
 800b0c8:	2101      	movs	r1, #1
 800b0ca:	f7ff ff05 	bl	800aed8 <_Balloc>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	b928      	cbnz	r0, 800b0de <__i2b+0x1a>
 800b0d2:	4b05      	ldr	r3, [pc, #20]	; (800b0e8 <__i2b+0x24>)
 800b0d4:	4805      	ldr	r0, [pc, #20]	; (800b0ec <__i2b+0x28>)
 800b0d6:	f240 1145 	movw	r1, #325	; 0x145
 800b0da:	f000 fd45 	bl	800bb68 <__assert_func>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	6144      	str	r4, [r0, #20]
 800b0e2:	6103      	str	r3, [r0, #16]
 800b0e4:	bd10      	pop	{r4, pc}
 800b0e6:	bf00      	nop
 800b0e8:	0800c1fc 	.word	0x0800c1fc
 800b0ec:	0800c20d 	.word	0x0800c20d

0800b0f0 <__multiply>:
 800b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f4:	4691      	mov	r9, r2
 800b0f6:	690a      	ldr	r2, [r1, #16]
 800b0f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	bfb8      	it	lt
 800b100:	460b      	movlt	r3, r1
 800b102:	460c      	mov	r4, r1
 800b104:	bfbc      	itt	lt
 800b106:	464c      	movlt	r4, r9
 800b108:	4699      	movlt	r9, r3
 800b10a:	6927      	ldr	r7, [r4, #16]
 800b10c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b110:	68a3      	ldr	r3, [r4, #8]
 800b112:	6861      	ldr	r1, [r4, #4]
 800b114:	eb07 060a 	add.w	r6, r7, sl
 800b118:	42b3      	cmp	r3, r6
 800b11a:	b085      	sub	sp, #20
 800b11c:	bfb8      	it	lt
 800b11e:	3101      	addlt	r1, #1
 800b120:	f7ff feda 	bl	800aed8 <_Balloc>
 800b124:	b930      	cbnz	r0, 800b134 <__multiply+0x44>
 800b126:	4602      	mov	r2, r0
 800b128:	4b44      	ldr	r3, [pc, #272]	; (800b23c <__multiply+0x14c>)
 800b12a:	4845      	ldr	r0, [pc, #276]	; (800b240 <__multiply+0x150>)
 800b12c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b130:	f000 fd1a 	bl	800bb68 <__assert_func>
 800b134:	f100 0514 	add.w	r5, r0, #20
 800b138:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b13c:	462b      	mov	r3, r5
 800b13e:	2200      	movs	r2, #0
 800b140:	4543      	cmp	r3, r8
 800b142:	d321      	bcc.n	800b188 <__multiply+0x98>
 800b144:	f104 0314 	add.w	r3, r4, #20
 800b148:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b14c:	f109 0314 	add.w	r3, r9, #20
 800b150:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b154:	9202      	str	r2, [sp, #8]
 800b156:	1b3a      	subs	r2, r7, r4
 800b158:	3a15      	subs	r2, #21
 800b15a:	f022 0203 	bic.w	r2, r2, #3
 800b15e:	3204      	adds	r2, #4
 800b160:	f104 0115 	add.w	r1, r4, #21
 800b164:	428f      	cmp	r7, r1
 800b166:	bf38      	it	cc
 800b168:	2204      	movcc	r2, #4
 800b16a:	9201      	str	r2, [sp, #4]
 800b16c:	9a02      	ldr	r2, [sp, #8]
 800b16e:	9303      	str	r3, [sp, #12]
 800b170:	429a      	cmp	r2, r3
 800b172:	d80c      	bhi.n	800b18e <__multiply+0x9e>
 800b174:	2e00      	cmp	r6, #0
 800b176:	dd03      	ble.n	800b180 <__multiply+0x90>
 800b178:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d05b      	beq.n	800b238 <__multiply+0x148>
 800b180:	6106      	str	r6, [r0, #16]
 800b182:	b005      	add	sp, #20
 800b184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b188:	f843 2b04 	str.w	r2, [r3], #4
 800b18c:	e7d8      	b.n	800b140 <__multiply+0x50>
 800b18e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b192:	f1ba 0f00 	cmp.w	sl, #0
 800b196:	d024      	beq.n	800b1e2 <__multiply+0xf2>
 800b198:	f104 0e14 	add.w	lr, r4, #20
 800b19c:	46a9      	mov	r9, r5
 800b19e:	f04f 0c00 	mov.w	ip, #0
 800b1a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b1a6:	f8d9 1000 	ldr.w	r1, [r9]
 800b1aa:	fa1f fb82 	uxth.w	fp, r2
 800b1ae:	b289      	uxth	r1, r1
 800b1b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b1b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b1b8:	f8d9 2000 	ldr.w	r2, [r9]
 800b1bc:	4461      	add	r1, ip
 800b1be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b1c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800b1c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b1ca:	b289      	uxth	r1, r1
 800b1cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b1d0:	4577      	cmp	r7, lr
 800b1d2:	f849 1b04 	str.w	r1, [r9], #4
 800b1d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b1da:	d8e2      	bhi.n	800b1a2 <__multiply+0xb2>
 800b1dc:	9a01      	ldr	r2, [sp, #4]
 800b1de:	f845 c002 	str.w	ip, [r5, r2]
 800b1e2:	9a03      	ldr	r2, [sp, #12]
 800b1e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	f1b9 0f00 	cmp.w	r9, #0
 800b1ee:	d021      	beq.n	800b234 <__multiply+0x144>
 800b1f0:	6829      	ldr	r1, [r5, #0]
 800b1f2:	f104 0c14 	add.w	ip, r4, #20
 800b1f6:	46ae      	mov	lr, r5
 800b1f8:	f04f 0a00 	mov.w	sl, #0
 800b1fc:	f8bc b000 	ldrh.w	fp, [ip]
 800b200:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b204:	fb09 220b 	mla	r2, r9, fp, r2
 800b208:	4452      	add	r2, sl
 800b20a:	b289      	uxth	r1, r1
 800b20c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b210:	f84e 1b04 	str.w	r1, [lr], #4
 800b214:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b218:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b21c:	f8be 1000 	ldrh.w	r1, [lr]
 800b220:	fb09 110a 	mla	r1, r9, sl, r1
 800b224:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b228:	4567      	cmp	r7, ip
 800b22a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b22e:	d8e5      	bhi.n	800b1fc <__multiply+0x10c>
 800b230:	9a01      	ldr	r2, [sp, #4]
 800b232:	50a9      	str	r1, [r5, r2]
 800b234:	3504      	adds	r5, #4
 800b236:	e799      	b.n	800b16c <__multiply+0x7c>
 800b238:	3e01      	subs	r6, #1
 800b23a:	e79b      	b.n	800b174 <__multiply+0x84>
 800b23c:	0800c1fc 	.word	0x0800c1fc
 800b240:	0800c20d 	.word	0x0800c20d

0800b244 <__pow5mult>:
 800b244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b248:	4615      	mov	r5, r2
 800b24a:	f012 0203 	ands.w	r2, r2, #3
 800b24e:	4606      	mov	r6, r0
 800b250:	460f      	mov	r7, r1
 800b252:	d007      	beq.n	800b264 <__pow5mult+0x20>
 800b254:	4c25      	ldr	r4, [pc, #148]	; (800b2ec <__pow5mult+0xa8>)
 800b256:	3a01      	subs	r2, #1
 800b258:	2300      	movs	r3, #0
 800b25a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b25e:	f7ff fe9d 	bl	800af9c <__multadd>
 800b262:	4607      	mov	r7, r0
 800b264:	10ad      	asrs	r5, r5, #2
 800b266:	d03d      	beq.n	800b2e4 <__pow5mult+0xa0>
 800b268:	69f4      	ldr	r4, [r6, #28]
 800b26a:	b97c      	cbnz	r4, 800b28c <__pow5mult+0x48>
 800b26c:	2010      	movs	r0, #16
 800b26e:	f7ff fd7f 	bl	800ad70 <malloc>
 800b272:	4602      	mov	r2, r0
 800b274:	61f0      	str	r0, [r6, #28]
 800b276:	b928      	cbnz	r0, 800b284 <__pow5mult+0x40>
 800b278:	4b1d      	ldr	r3, [pc, #116]	; (800b2f0 <__pow5mult+0xac>)
 800b27a:	481e      	ldr	r0, [pc, #120]	; (800b2f4 <__pow5mult+0xb0>)
 800b27c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b280:	f000 fc72 	bl	800bb68 <__assert_func>
 800b284:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b288:	6004      	str	r4, [r0, #0]
 800b28a:	60c4      	str	r4, [r0, #12]
 800b28c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b290:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b294:	b94c      	cbnz	r4, 800b2aa <__pow5mult+0x66>
 800b296:	f240 2171 	movw	r1, #625	; 0x271
 800b29a:	4630      	mov	r0, r6
 800b29c:	f7ff ff12 	bl	800b0c4 <__i2b>
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	6003      	str	r3, [r0, #0]
 800b2aa:	f04f 0900 	mov.w	r9, #0
 800b2ae:	07eb      	lsls	r3, r5, #31
 800b2b0:	d50a      	bpl.n	800b2c8 <__pow5mult+0x84>
 800b2b2:	4639      	mov	r1, r7
 800b2b4:	4622      	mov	r2, r4
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	f7ff ff1a 	bl	800b0f0 <__multiply>
 800b2bc:	4639      	mov	r1, r7
 800b2be:	4680      	mov	r8, r0
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	f7ff fe49 	bl	800af58 <_Bfree>
 800b2c6:	4647      	mov	r7, r8
 800b2c8:	106d      	asrs	r5, r5, #1
 800b2ca:	d00b      	beq.n	800b2e4 <__pow5mult+0xa0>
 800b2cc:	6820      	ldr	r0, [r4, #0]
 800b2ce:	b938      	cbnz	r0, 800b2e0 <__pow5mult+0x9c>
 800b2d0:	4622      	mov	r2, r4
 800b2d2:	4621      	mov	r1, r4
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	f7ff ff0b 	bl	800b0f0 <__multiply>
 800b2da:	6020      	str	r0, [r4, #0]
 800b2dc:	f8c0 9000 	str.w	r9, [r0]
 800b2e0:	4604      	mov	r4, r0
 800b2e2:	e7e4      	b.n	800b2ae <__pow5mult+0x6a>
 800b2e4:	4638      	mov	r0, r7
 800b2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2ea:	bf00      	nop
 800b2ec:	0800c358 	.word	0x0800c358
 800b2f0:	0800c18d 	.word	0x0800c18d
 800b2f4:	0800c20d 	.word	0x0800c20d

0800b2f8 <__lshift>:
 800b2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2fc:	460c      	mov	r4, r1
 800b2fe:	6849      	ldr	r1, [r1, #4]
 800b300:	6923      	ldr	r3, [r4, #16]
 800b302:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b306:	68a3      	ldr	r3, [r4, #8]
 800b308:	4607      	mov	r7, r0
 800b30a:	4691      	mov	r9, r2
 800b30c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b310:	f108 0601 	add.w	r6, r8, #1
 800b314:	42b3      	cmp	r3, r6
 800b316:	db0b      	blt.n	800b330 <__lshift+0x38>
 800b318:	4638      	mov	r0, r7
 800b31a:	f7ff fddd 	bl	800aed8 <_Balloc>
 800b31e:	4605      	mov	r5, r0
 800b320:	b948      	cbnz	r0, 800b336 <__lshift+0x3e>
 800b322:	4602      	mov	r2, r0
 800b324:	4b28      	ldr	r3, [pc, #160]	; (800b3c8 <__lshift+0xd0>)
 800b326:	4829      	ldr	r0, [pc, #164]	; (800b3cc <__lshift+0xd4>)
 800b328:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b32c:	f000 fc1c 	bl	800bb68 <__assert_func>
 800b330:	3101      	adds	r1, #1
 800b332:	005b      	lsls	r3, r3, #1
 800b334:	e7ee      	b.n	800b314 <__lshift+0x1c>
 800b336:	2300      	movs	r3, #0
 800b338:	f100 0114 	add.w	r1, r0, #20
 800b33c:	f100 0210 	add.w	r2, r0, #16
 800b340:	4618      	mov	r0, r3
 800b342:	4553      	cmp	r3, sl
 800b344:	db33      	blt.n	800b3ae <__lshift+0xb6>
 800b346:	6920      	ldr	r0, [r4, #16]
 800b348:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b34c:	f104 0314 	add.w	r3, r4, #20
 800b350:	f019 091f 	ands.w	r9, r9, #31
 800b354:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b358:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b35c:	d02b      	beq.n	800b3b6 <__lshift+0xbe>
 800b35e:	f1c9 0e20 	rsb	lr, r9, #32
 800b362:	468a      	mov	sl, r1
 800b364:	2200      	movs	r2, #0
 800b366:	6818      	ldr	r0, [r3, #0]
 800b368:	fa00 f009 	lsl.w	r0, r0, r9
 800b36c:	4310      	orrs	r0, r2
 800b36e:	f84a 0b04 	str.w	r0, [sl], #4
 800b372:	f853 2b04 	ldr.w	r2, [r3], #4
 800b376:	459c      	cmp	ip, r3
 800b378:	fa22 f20e 	lsr.w	r2, r2, lr
 800b37c:	d8f3      	bhi.n	800b366 <__lshift+0x6e>
 800b37e:	ebac 0304 	sub.w	r3, ip, r4
 800b382:	3b15      	subs	r3, #21
 800b384:	f023 0303 	bic.w	r3, r3, #3
 800b388:	3304      	adds	r3, #4
 800b38a:	f104 0015 	add.w	r0, r4, #21
 800b38e:	4584      	cmp	ip, r0
 800b390:	bf38      	it	cc
 800b392:	2304      	movcc	r3, #4
 800b394:	50ca      	str	r2, [r1, r3]
 800b396:	b10a      	cbz	r2, 800b39c <__lshift+0xa4>
 800b398:	f108 0602 	add.w	r6, r8, #2
 800b39c:	3e01      	subs	r6, #1
 800b39e:	4638      	mov	r0, r7
 800b3a0:	612e      	str	r6, [r5, #16]
 800b3a2:	4621      	mov	r1, r4
 800b3a4:	f7ff fdd8 	bl	800af58 <_Bfree>
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	e7c5      	b.n	800b342 <__lshift+0x4a>
 800b3b6:	3904      	subs	r1, #4
 800b3b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3c0:	459c      	cmp	ip, r3
 800b3c2:	d8f9      	bhi.n	800b3b8 <__lshift+0xc0>
 800b3c4:	e7ea      	b.n	800b39c <__lshift+0xa4>
 800b3c6:	bf00      	nop
 800b3c8:	0800c1fc 	.word	0x0800c1fc
 800b3cc:	0800c20d 	.word	0x0800c20d

0800b3d0 <__mcmp>:
 800b3d0:	b530      	push	{r4, r5, lr}
 800b3d2:	6902      	ldr	r2, [r0, #16]
 800b3d4:	690c      	ldr	r4, [r1, #16]
 800b3d6:	1b12      	subs	r2, r2, r4
 800b3d8:	d10e      	bne.n	800b3f8 <__mcmp+0x28>
 800b3da:	f100 0314 	add.w	r3, r0, #20
 800b3de:	3114      	adds	r1, #20
 800b3e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b3e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b3e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b3ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b3f0:	42a5      	cmp	r5, r4
 800b3f2:	d003      	beq.n	800b3fc <__mcmp+0x2c>
 800b3f4:	d305      	bcc.n	800b402 <__mcmp+0x32>
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	4610      	mov	r0, r2
 800b3fa:	bd30      	pop	{r4, r5, pc}
 800b3fc:	4283      	cmp	r3, r0
 800b3fe:	d3f3      	bcc.n	800b3e8 <__mcmp+0x18>
 800b400:	e7fa      	b.n	800b3f8 <__mcmp+0x28>
 800b402:	f04f 32ff 	mov.w	r2, #4294967295
 800b406:	e7f7      	b.n	800b3f8 <__mcmp+0x28>

0800b408 <__mdiff>:
 800b408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b40c:	460c      	mov	r4, r1
 800b40e:	4606      	mov	r6, r0
 800b410:	4611      	mov	r1, r2
 800b412:	4620      	mov	r0, r4
 800b414:	4690      	mov	r8, r2
 800b416:	f7ff ffdb 	bl	800b3d0 <__mcmp>
 800b41a:	1e05      	subs	r5, r0, #0
 800b41c:	d110      	bne.n	800b440 <__mdiff+0x38>
 800b41e:	4629      	mov	r1, r5
 800b420:	4630      	mov	r0, r6
 800b422:	f7ff fd59 	bl	800aed8 <_Balloc>
 800b426:	b930      	cbnz	r0, 800b436 <__mdiff+0x2e>
 800b428:	4b3a      	ldr	r3, [pc, #232]	; (800b514 <__mdiff+0x10c>)
 800b42a:	4602      	mov	r2, r0
 800b42c:	f240 2137 	movw	r1, #567	; 0x237
 800b430:	4839      	ldr	r0, [pc, #228]	; (800b518 <__mdiff+0x110>)
 800b432:	f000 fb99 	bl	800bb68 <__assert_func>
 800b436:	2301      	movs	r3, #1
 800b438:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b43c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b440:	bfa4      	itt	ge
 800b442:	4643      	movge	r3, r8
 800b444:	46a0      	movge	r8, r4
 800b446:	4630      	mov	r0, r6
 800b448:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b44c:	bfa6      	itte	ge
 800b44e:	461c      	movge	r4, r3
 800b450:	2500      	movge	r5, #0
 800b452:	2501      	movlt	r5, #1
 800b454:	f7ff fd40 	bl	800aed8 <_Balloc>
 800b458:	b920      	cbnz	r0, 800b464 <__mdiff+0x5c>
 800b45a:	4b2e      	ldr	r3, [pc, #184]	; (800b514 <__mdiff+0x10c>)
 800b45c:	4602      	mov	r2, r0
 800b45e:	f240 2145 	movw	r1, #581	; 0x245
 800b462:	e7e5      	b.n	800b430 <__mdiff+0x28>
 800b464:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b468:	6926      	ldr	r6, [r4, #16]
 800b46a:	60c5      	str	r5, [r0, #12]
 800b46c:	f104 0914 	add.w	r9, r4, #20
 800b470:	f108 0514 	add.w	r5, r8, #20
 800b474:	f100 0e14 	add.w	lr, r0, #20
 800b478:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b47c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b480:	f108 0210 	add.w	r2, r8, #16
 800b484:	46f2      	mov	sl, lr
 800b486:	2100      	movs	r1, #0
 800b488:	f859 3b04 	ldr.w	r3, [r9], #4
 800b48c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b490:	fa11 f88b 	uxtah	r8, r1, fp
 800b494:	b299      	uxth	r1, r3
 800b496:	0c1b      	lsrs	r3, r3, #16
 800b498:	eba8 0801 	sub.w	r8, r8, r1
 800b49c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b4a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b4a4:	fa1f f888 	uxth.w	r8, r8
 800b4a8:	1419      	asrs	r1, r3, #16
 800b4aa:	454e      	cmp	r6, r9
 800b4ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b4b0:	f84a 3b04 	str.w	r3, [sl], #4
 800b4b4:	d8e8      	bhi.n	800b488 <__mdiff+0x80>
 800b4b6:	1b33      	subs	r3, r6, r4
 800b4b8:	3b15      	subs	r3, #21
 800b4ba:	f023 0303 	bic.w	r3, r3, #3
 800b4be:	3304      	adds	r3, #4
 800b4c0:	3415      	adds	r4, #21
 800b4c2:	42a6      	cmp	r6, r4
 800b4c4:	bf38      	it	cc
 800b4c6:	2304      	movcc	r3, #4
 800b4c8:	441d      	add	r5, r3
 800b4ca:	4473      	add	r3, lr
 800b4cc:	469e      	mov	lr, r3
 800b4ce:	462e      	mov	r6, r5
 800b4d0:	4566      	cmp	r6, ip
 800b4d2:	d30e      	bcc.n	800b4f2 <__mdiff+0xea>
 800b4d4:	f10c 0203 	add.w	r2, ip, #3
 800b4d8:	1b52      	subs	r2, r2, r5
 800b4da:	f022 0203 	bic.w	r2, r2, #3
 800b4de:	3d03      	subs	r5, #3
 800b4e0:	45ac      	cmp	ip, r5
 800b4e2:	bf38      	it	cc
 800b4e4:	2200      	movcc	r2, #0
 800b4e6:	4413      	add	r3, r2
 800b4e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b4ec:	b17a      	cbz	r2, 800b50e <__mdiff+0x106>
 800b4ee:	6107      	str	r7, [r0, #16]
 800b4f0:	e7a4      	b.n	800b43c <__mdiff+0x34>
 800b4f2:	f856 8b04 	ldr.w	r8, [r6], #4
 800b4f6:	fa11 f288 	uxtah	r2, r1, r8
 800b4fa:	1414      	asrs	r4, r2, #16
 800b4fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b500:	b292      	uxth	r2, r2
 800b502:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b506:	f84e 2b04 	str.w	r2, [lr], #4
 800b50a:	1421      	asrs	r1, r4, #16
 800b50c:	e7e0      	b.n	800b4d0 <__mdiff+0xc8>
 800b50e:	3f01      	subs	r7, #1
 800b510:	e7ea      	b.n	800b4e8 <__mdiff+0xe0>
 800b512:	bf00      	nop
 800b514:	0800c1fc 	.word	0x0800c1fc
 800b518:	0800c20d 	.word	0x0800c20d

0800b51c <__d2b>:
 800b51c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b520:	460f      	mov	r7, r1
 800b522:	2101      	movs	r1, #1
 800b524:	ec59 8b10 	vmov	r8, r9, d0
 800b528:	4616      	mov	r6, r2
 800b52a:	f7ff fcd5 	bl	800aed8 <_Balloc>
 800b52e:	4604      	mov	r4, r0
 800b530:	b930      	cbnz	r0, 800b540 <__d2b+0x24>
 800b532:	4602      	mov	r2, r0
 800b534:	4b24      	ldr	r3, [pc, #144]	; (800b5c8 <__d2b+0xac>)
 800b536:	4825      	ldr	r0, [pc, #148]	; (800b5cc <__d2b+0xb0>)
 800b538:	f240 310f 	movw	r1, #783	; 0x30f
 800b53c:	f000 fb14 	bl	800bb68 <__assert_func>
 800b540:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b544:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b548:	bb2d      	cbnz	r5, 800b596 <__d2b+0x7a>
 800b54a:	9301      	str	r3, [sp, #4]
 800b54c:	f1b8 0300 	subs.w	r3, r8, #0
 800b550:	d026      	beq.n	800b5a0 <__d2b+0x84>
 800b552:	4668      	mov	r0, sp
 800b554:	9300      	str	r3, [sp, #0]
 800b556:	f7ff fd87 	bl	800b068 <__lo0bits>
 800b55a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b55e:	b1e8      	cbz	r0, 800b59c <__d2b+0x80>
 800b560:	f1c0 0320 	rsb	r3, r0, #32
 800b564:	fa02 f303 	lsl.w	r3, r2, r3
 800b568:	430b      	orrs	r3, r1
 800b56a:	40c2      	lsrs	r2, r0
 800b56c:	6163      	str	r3, [r4, #20]
 800b56e:	9201      	str	r2, [sp, #4]
 800b570:	9b01      	ldr	r3, [sp, #4]
 800b572:	61a3      	str	r3, [r4, #24]
 800b574:	2b00      	cmp	r3, #0
 800b576:	bf14      	ite	ne
 800b578:	2202      	movne	r2, #2
 800b57a:	2201      	moveq	r2, #1
 800b57c:	6122      	str	r2, [r4, #16]
 800b57e:	b1bd      	cbz	r5, 800b5b0 <__d2b+0x94>
 800b580:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b584:	4405      	add	r5, r0
 800b586:	603d      	str	r5, [r7, #0]
 800b588:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b58c:	6030      	str	r0, [r6, #0]
 800b58e:	4620      	mov	r0, r4
 800b590:	b003      	add	sp, #12
 800b592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b59a:	e7d6      	b.n	800b54a <__d2b+0x2e>
 800b59c:	6161      	str	r1, [r4, #20]
 800b59e:	e7e7      	b.n	800b570 <__d2b+0x54>
 800b5a0:	a801      	add	r0, sp, #4
 800b5a2:	f7ff fd61 	bl	800b068 <__lo0bits>
 800b5a6:	9b01      	ldr	r3, [sp, #4]
 800b5a8:	6163      	str	r3, [r4, #20]
 800b5aa:	3020      	adds	r0, #32
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	e7e5      	b.n	800b57c <__d2b+0x60>
 800b5b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b5b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5b8:	6038      	str	r0, [r7, #0]
 800b5ba:	6918      	ldr	r0, [r3, #16]
 800b5bc:	f7ff fd34 	bl	800b028 <__hi0bits>
 800b5c0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5c4:	e7e2      	b.n	800b58c <__d2b+0x70>
 800b5c6:	bf00      	nop
 800b5c8:	0800c1fc 	.word	0x0800c1fc
 800b5cc:	0800c20d 	.word	0x0800c20d

0800b5d0 <__sfputc_r>:
 800b5d0:	6893      	ldr	r3, [r2, #8]
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	b410      	push	{r4}
 800b5d8:	6093      	str	r3, [r2, #8]
 800b5da:	da08      	bge.n	800b5ee <__sfputc_r+0x1e>
 800b5dc:	6994      	ldr	r4, [r2, #24]
 800b5de:	42a3      	cmp	r3, r4
 800b5e0:	db01      	blt.n	800b5e6 <__sfputc_r+0x16>
 800b5e2:	290a      	cmp	r1, #10
 800b5e4:	d103      	bne.n	800b5ee <__sfputc_r+0x1e>
 800b5e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5ea:	f000 ba17 	b.w	800ba1c <__swbuf_r>
 800b5ee:	6813      	ldr	r3, [r2, #0]
 800b5f0:	1c58      	adds	r0, r3, #1
 800b5f2:	6010      	str	r0, [r2, #0]
 800b5f4:	7019      	strb	r1, [r3, #0]
 800b5f6:	4608      	mov	r0, r1
 800b5f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <__sfputs_r>:
 800b5fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b600:	4606      	mov	r6, r0
 800b602:	460f      	mov	r7, r1
 800b604:	4614      	mov	r4, r2
 800b606:	18d5      	adds	r5, r2, r3
 800b608:	42ac      	cmp	r4, r5
 800b60a:	d101      	bne.n	800b610 <__sfputs_r+0x12>
 800b60c:	2000      	movs	r0, #0
 800b60e:	e007      	b.n	800b620 <__sfputs_r+0x22>
 800b610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b614:	463a      	mov	r2, r7
 800b616:	4630      	mov	r0, r6
 800b618:	f7ff ffda 	bl	800b5d0 <__sfputc_r>
 800b61c:	1c43      	adds	r3, r0, #1
 800b61e:	d1f3      	bne.n	800b608 <__sfputs_r+0xa>
 800b620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b624 <_vfiprintf_r>:
 800b624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b628:	460d      	mov	r5, r1
 800b62a:	b09d      	sub	sp, #116	; 0x74
 800b62c:	4614      	mov	r4, r2
 800b62e:	4698      	mov	r8, r3
 800b630:	4606      	mov	r6, r0
 800b632:	b118      	cbz	r0, 800b63c <_vfiprintf_r+0x18>
 800b634:	6a03      	ldr	r3, [r0, #32]
 800b636:	b90b      	cbnz	r3, 800b63c <_vfiprintf_r+0x18>
 800b638:	f7fe fc2e 	bl	8009e98 <__sinit>
 800b63c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b63e:	07d9      	lsls	r1, r3, #31
 800b640:	d405      	bmi.n	800b64e <_vfiprintf_r+0x2a>
 800b642:	89ab      	ldrh	r3, [r5, #12]
 800b644:	059a      	lsls	r2, r3, #22
 800b646:	d402      	bmi.n	800b64e <_vfiprintf_r+0x2a>
 800b648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b64a:	f7fe fd3f 	bl	800a0cc <__retarget_lock_acquire_recursive>
 800b64e:	89ab      	ldrh	r3, [r5, #12]
 800b650:	071b      	lsls	r3, r3, #28
 800b652:	d501      	bpl.n	800b658 <_vfiprintf_r+0x34>
 800b654:	692b      	ldr	r3, [r5, #16]
 800b656:	b99b      	cbnz	r3, 800b680 <_vfiprintf_r+0x5c>
 800b658:	4629      	mov	r1, r5
 800b65a:	4630      	mov	r0, r6
 800b65c:	f000 fa1c 	bl	800ba98 <__swsetup_r>
 800b660:	b170      	cbz	r0, 800b680 <_vfiprintf_r+0x5c>
 800b662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b664:	07dc      	lsls	r4, r3, #31
 800b666:	d504      	bpl.n	800b672 <_vfiprintf_r+0x4e>
 800b668:	f04f 30ff 	mov.w	r0, #4294967295
 800b66c:	b01d      	add	sp, #116	; 0x74
 800b66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b672:	89ab      	ldrh	r3, [r5, #12]
 800b674:	0598      	lsls	r0, r3, #22
 800b676:	d4f7      	bmi.n	800b668 <_vfiprintf_r+0x44>
 800b678:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b67a:	f7fe fd28 	bl	800a0ce <__retarget_lock_release_recursive>
 800b67e:	e7f3      	b.n	800b668 <_vfiprintf_r+0x44>
 800b680:	2300      	movs	r3, #0
 800b682:	9309      	str	r3, [sp, #36]	; 0x24
 800b684:	2320      	movs	r3, #32
 800b686:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b68a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b68e:	2330      	movs	r3, #48	; 0x30
 800b690:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b844 <_vfiprintf_r+0x220>
 800b694:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b698:	f04f 0901 	mov.w	r9, #1
 800b69c:	4623      	mov	r3, r4
 800b69e:	469a      	mov	sl, r3
 800b6a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6a4:	b10a      	cbz	r2, 800b6aa <_vfiprintf_r+0x86>
 800b6a6:	2a25      	cmp	r2, #37	; 0x25
 800b6a8:	d1f9      	bne.n	800b69e <_vfiprintf_r+0x7a>
 800b6aa:	ebba 0b04 	subs.w	fp, sl, r4
 800b6ae:	d00b      	beq.n	800b6c8 <_vfiprintf_r+0xa4>
 800b6b0:	465b      	mov	r3, fp
 800b6b2:	4622      	mov	r2, r4
 800b6b4:	4629      	mov	r1, r5
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	f7ff ffa1 	bl	800b5fe <__sfputs_r>
 800b6bc:	3001      	adds	r0, #1
 800b6be:	f000 80a9 	beq.w	800b814 <_vfiprintf_r+0x1f0>
 800b6c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6c4:	445a      	add	r2, fp
 800b6c6:	9209      	str	r2, [sp, #36]	; 0x24
 800b6c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f000 80a1 	beq.w	800b814 <_vfiprintf_r+0x1f0>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6dc:	f10a 0a01 	add.w	sl, sl, #1
 800b6e0:	9304      	str	r3, [sp, #16]
 800b6e2:	9307      	str	r3, [sp, #28]
 800b6e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6e8:	931a      	str	r3, [sp, #104]	; 0x68
 800b6ea:	4654      	mov	r4, sl
 800b6ec:	2205      	movs	r2, #5
 800b6ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6f2:	4854      	ldr	r0, [pc, #336]	; (800b844 <_vfiprintf_r+0x220>)
 800b6f4:	f7f4 fe0c 	bl	8000310 <memchr>
 800b6f8:	9a04      	ldr	r2, [sp, #16]
 800b6fa:	b9d8      	cbnz	r0, 800b734 <_vfiprintf_r+0x110>
 800b6fc:	06d1      	lsls	r1, r2, #27
 800b6fe:	bf44      	itt	mi
 800b700:	2320      	movmi	r3, #32
 800b702:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b706:	0713      	lsls	r3, r2, #28
 800b708:	bf44      	itt	mi
 800b70a:	232b      	movmi	r3, #43	; 0x2b
 800b70c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b710:	f89a 3000 	ldrb.w	r3, [sl]
 800b714:	2b2a      	cmp	r3, #42	; 0x2a
 800b716:	d015      	beq.n	800b744 <_vfiprintf_r+0x120>
 800b718:	9a07      	ldr	r2, [sp, #28]
 800b71a:	4654      	mov	r4, sl
 800b71c:	2000      	movs	r0, #0
 800b71e:	f04f 0c0a 	mov.w	ip, #10
 800b722:	4621      	mov	r1, r4
 800b724:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b728:	3b30      	subs	r3, #48	; 0x30
 800b72a:	2b09      	cmp	r3, #9
 800b72c:	d94d      	bls.n	800b7ca <_vfiprintf_r+0x1a6>
 800b72e:	b1b0      	cbz	r0, 800b75e <_vfiprintf_r+0x13a>
 800b730:	9207      	str	r2, [sp, #28]
 800b732:	e014      	b.n	800b75e <_vfiprintf_r+0x13a>
 800b734:	eba0 0308 	sub.w	r3, r0, r8
 800b738:	fa09 f303 	lsl.w	r3, r9, r3
 800b73c:	4313      	orrs	r3, r2
 800b73e:	9304      	str	r3, [sp, #16]
 800b740:	46a2      	mov	sl, r4
 800b742:	e7d2      	b.n	800b6ea <_vfiprintf_r+0xc6>
 800b744:	9b03      	ldr	r3, [sp, #12]
 800b746:	1d19      	adds	r1, r3, #4
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	9103      	str	r1, [sp, #12]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	bfbb      	ittet	lt
 800b750:	425b      	neglt	r3, r3
 800b752:	f042 0202 	orrlt.w	r2, r2, #2
 800b756:	9307      	strge	r3, [sp, #28]
 800b758:	9307      	strlt	r3, [sp, #28]
 800b75a:	bfb8      	it	lt
 800b75c:	9204      	strlt	r2, [sp, #16]
 800b75e:	7823      	ldrb	r3, [r4, #0]
 800b760:	2b2e      	cmp	r3, #46	; 0x2e
 800b762:	d10c      	bne.n	800b77e <_vfiprintf_r+0x15a>
 800b764:	7863      	ldrb	r3, [r4, #1]
 800b766:	2b2a      	cmp	r3, #42	; 0x2a
 800b768:	d134      	bne.n	800b7d4 <_vfiprintf_r+0x1b0>
 800b76a:	9b03      	ldr	r3, [sp, #12]
 800b76c:	1d1a      	adds	r2, r3, #4
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	9203      	str	r2, [sp, #12]
 800b772:	2b00      	cmp	r3, #0
 800b774:	bfb8      	it	lt
 800b776:	f04f 33ff 	movlt.w	r3, #4294967295
 800b77a:	3402      	adds	r4, #2
 800b77c:	9305      	str	r3, [sp, #20]
 800b77e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b854 <_vfiprintf_r+0x230>
 800b782:	7821      	ldrb	r1, [r4, #0]
 800b784:	2203      	movs	r2, #3
 800b786:	4650      	mov	r0, sl
 800b788:	f7f4 fdc2 	bl	8000310 <memchr>
 800b78c:	b138      	cbz	r0, 800b79e <_vfiprintf_r+0x17a>
 800b78e:	9b04      	ldr	r3, [sp, #16]
 800b790:	eba0 000a 	sub.w	r0, r0, sl
 800b794:	2240      	movs	r2, #64	; 0x40
 800b796:	4082      	lsls	r2, r0
 800b798:	4313      	orrs	r3, r2
 800b79a:	3401      	adds	r4, #1
 800b79c:	9304      	str	r3, [sp, #16]
 800b79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7a2:	4829      	ldr	r0, [pc, #164]	; (800b848 <_vfiprintf_r+0x224>)
 800b7a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7a8:	2206      	movs	r2, #6
 800b7aa:	f7f4 fdb1 	bl	8000310 <memchr>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	d03f      	beq.n	800b832 <_vfiprintf_r+0x20e>
 800b7b2:	4b26      	ldr	r3, [pc, #152]	; (800b84c <_vfiprintf_r+0x228>)
 800b7b4:	bb1b      	cbnz	r3, 800b7fe <_vfiprintf_r+0x1da>
 800b7b6:	9b03      	ldr	r3, [sp, #12]
 800b7b8:	3307      	adds	r3, #7
 800b7ba:	f023 0307 	bic.w	r3, r3, #7
 800b7be:	3308      	adds	r3, #8
 800b7c0:	9303      	str	r3, [sp, #12]
 800b7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c4:	443b      	add	r3, r7
 800b7c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b7c8:	e768      	b.n	800b69c <_vfiprintf_r+0x78>
 800b7ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7ce:	460c      	mov	r4, r1
 800b7d0:	2001      	movs	r0, #1
 800b7d2:	e7a6      	b.n	800b722 <_vfiprintf_r+0xfe>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	3401      	adds	r4, #1
 800b7d8:	9305      	str	r3, [sp, #20]
 800b7da:	4619      	mov	r1, r3
 800b7dc:	f04f 0c0a 	mov.w	ip, #10
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7e6:	3a30      	subs	r2, #48	; 0x30
 800b7e8:	2a09      	cmp	r2, #9
 800b7ea:	d903      	bls.n	800b7f4 <_vfiprintf_r+0x1d0>
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d0c6      	beq.n	800b77e <_vfiprintf_r+0x15a>
 800b7f0:	9105      	str	r1, [sp, #20]
 800b7f2:	e7c4      	b.n	800b77e <_vfiprintf_r+0x15a>
 800b7f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e7f0      	b.n	800b7e0 <_vfiprintf_r+0x1bc>
 800b7fe:	ab03      	add	r3, sp, #12
 800b800:	9300      	str	r3, [sp, #0]
 800b802:	462a      	mov	r2, r5
 800b804:	4b12      	ldr	r3, [pc, #72]	; (800b850 <_vfiprintf_r+0x22c>)
 800b806:	a904      	add	r1, sp, #16
 800b808:	4630      	mov	r0, r6
 800b80a:	f7fd ff21 	bl	8009650 <_printf_float>
 800b80e:	4607      	mov	r7, r0
 800b810:	1c78      	adds	r0, r7, #1
 800b812:	d1d6      	bne.n	800b7c2 <_vfiprintf_r+0x19e>
 800b814:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b816:	07d9      	lsls	r1, r3, #31
 800b818:	d405      	bmi.n	800b826 <_vfiprintf_r+0x202>
 800b81a:	89ab      	ldrh	r3, [r5, #12]
 800b81c:	059a      	lsls	r2, r3, #22
 800b81e:	d402      	bmi.n	800b826 <_vfiprintf_r+0x202>
 800b820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b822:	f7fe fc54 	bl	800a0ce <__retarget_lock_release_recursive>
 800b826:	89ab      	ldrh	r3, [r5, #12]
 800b828:	065b      	lsls	r3, r3, #25
 800b82a:	f53f af1d 	bmi.w	800b668 <_vfiprintf_r+0x44>
 800b82e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b830:	e71c      	b.n	800b66c <_vfiprintf_r+0x48>
 800b832:	ab03      	add	r3, sp, #12
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	462a      	mov	r2, r5
 800b838:	4b05      	ldr	r3, [pc, #20]	; (800b850 <_vfiprintf_r+0x22c>)
 800b83a:	a904      	add	r1, sp, #16
 800b83c:	4630      	mov	r0, r6
 800b83e:	f7fe f98f 	bl	8009b60 <_printf_i>
 800b842:	e7e4      	b.n	800b80e <_vfiprintf_r+0x1ea>
 800b844:	0800c364 	.word	0x0800c364
 800b848:	0800c36e 	.word	0x0800c36e
 800b84c:	08009651 	.word	0x08009651
 800b850:	0800b5ff 	.word	0x0800b5ff
 800b854:	0800c36a 	.word	0x0800c36a

0800b858 <__sflush_r>:
 800b858:	898a      	ldrh	r2, [r1, #12]
 800b85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b85e:	4605      	mov	r5, r0
 800b860:	0710      	lsls	r0, r2, #28
 800b862:	460c      	mov	r4, r1
 800b864:	d458      	bmi.n	800b918 <__sflush_r+0xc0>
 800b866:	684b      	ldr	r3, [r1, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	dc05      	bgt.n	800b878 <__sflush_r+0x20>
 800b86c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b86e:	2b00      	cmp	r3, #0
 800b870:	dc02      	bgt.n	800b878 <__sflush_r+0x20>
 800b872:	2000      	movs	r0, #0
 800b874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b87a:	2e00      	cmp	r6, #0
 800b87c:	d0f9      	beq.n	800b872 <__sflush_r+0x1a>
 800b87e:	2300      	movs	r3, #0
 800b880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b884:	682f      	ldr	r7, [r5, #0]
 800b886:	6a21      	ldr	r1, [r4, #32]
 800b888:	602b      	str	r3, [r5, #0]
 800b88a:	d032      	beq.n	800b8f2 <__sflush_r+0x9a>
 800b88c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b88e:	89a3      	ldrh	r3, [r4, #12]
 800b890:	075a      	lsls	r2, r3, #29
 800b892:	d505      	bpl.n	800b8a0 <__sflush_r+0x48>
 800b894:	6863      	ldr	r3, [r4, #4]
 800b896:	1ac0      	subs	r0, r0, r3
 800b898:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b89a:	b10b      	cbz	r3, 800b8a0 <__sflush_r+0x48>
 800b89c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b89e:	1ac0      	subs	r0, r0, r3
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8a6:	6a21      	ldr	r1, [r4, #32]
 800b8a8:	4628      	mov	r0, r5
 800b8aa:	47b0      	blx	r6
 800b8ac:	1c43      	adds	r3, r0, #1
 800b8ae:	89a3      	ldrh	r3, [r4, #12]
 800b8b0:	d106      	bne.n	800b8c0 <__sflush_r+0x68>
 800b8b2:	6829      	ldr	r1, [r5, #0]
 800b8b4:	291d      	cmp	r1, #29
 800b8b6:	d82b      	bhi.n	800b910 <__sflush_r+0xb8>
 800b8b8:	4a29      	ldr	r2, [pc, #164]	; (800b960 <__sflush_r+0x108>)
 800b8ba:	410a      	asrs	r2, r1
 800b8bc:	07d6      	lsls	r6, r2, #31
 800b8be:	d427      	bmi.n	800b910 <__sflush_r+0xb8>
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	6062      	str	r2, [r4, #4]
 800b8c4:	04d9      	lsls	r1, r3, #19
 800b8c6:	6922      	ldr	r2, [r4, #16]
 800b8c8:	6022      	str	r2, [r4, #0]
 800b8ca:	d504      	bpl.n	800b8d6 <__sflush_r+0x7e>
 800b8cc:	1c42      	adds	r2, r0, #1
 800b8ce:	d101      	bne.n	800b8d4 <__sflush_r+0x7c>
 800b8d0:	682b      	ldr	r3, [r5, #0]
 800b8d2:	b903      	cbnz	r3, 800b8d6 <__sflush_r+0x7e>
 800b8d4:	6560      	str	r0, [r4, #84]	; 0x54
 800b8d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8d8:	602f      	str	r7, [r5, #0]
 800b8da:	2900      	cmp	r1, #0
 800b8dc:	d0c9      	beq.n	800b872 <__sflush_r+0x1a>
 800b8de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8e2:	4299      	cmp	r1, r3
 800b8e4:	d002      	beq.n	800b8ec <__sflush_r+0x94>
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	f7ff f9f6 	bl	800acd8 <_free_r>
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	6360      	str	r0, [r4, #52]	; 0x34
 800b8f0:	e7c0      	b.n	800b874 <__sflush_r+0x1c>
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	47b0      	blx	r6
 800b8f8:	1c41      	adds	r1, r0, #1
 800b8fa:	d1c8      	bne.n	800b88e <__sflush_r+0x36>
 800b8fc:	682b      	ldr	r3, [r5, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d0c5      	beq.n	800b88e <__sflush_r+0x36>
 800b902:	2b1d      	cmp	r3, #29
 800b904:	d001      	beq.n	800b90a <__sflush_r+0xb2>
 800b906:	2b16      	cmp	r3, #22
 800b908:	d101      	bne.n	800b90e <__sflush_r+0xb6>
 800b90a:	602f      	str	r7, [r5, #0]
 800b90c:	e7b1      	b.n	800b872 <__sflush_r+0x1a>
 800b90e:	89a3      	ldrh	r3, [r4, #12]
 800b910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b914:	81a3      	strh	r3, [r4, #12]
 800b916:	e7ad      	b.n	800b874 <__sflush_r+0x1c>
 800b918:	690f      	ldr	r7, [r1, #16]
 800b91a:	2f00      	cmp	r7, #0
 800b91c:	d0a9      	beq.n	800b872 <__sflush_r+0x1a>
 800b91e:	0793      	lsls	r3, r2, #30
 800b920:	680e      	ldr	r6, [r1, #0]
 800b922:	bf08      	it	eq
 800b924:	694b      	ldreq	r3, [r1, #20]
 800b926:	600f      	str	r7, [r1, #0]
 800b928:	bf18      	it	ne
 800b92a:	2300      	movne	r3, #0
 800b92c:	eba6 0807 	sub.w	r8, r6, r7
 800b930:	608b      	str	r3, [r1, #8]
 800b932:	f1b8 0f00 	cmp.w	r8, #0
 800b936:	dd9c      	ble.n	800b872 <__sflush_r+0x1a>
 800b938:	6a21      	ldr	r1, [r4, #32]
 800b93a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b93c:	4643      	mov	r3, r8
 800b93e:	463a      	mov	r2, r7
 800b940:	4628      	mov	r0, r5
 800b942:	47b0      	blx	r6
 800b944:	2800      	cmp	r0, #0
 800b946:	dc06      	bgt.n	800b956 <__sflush_r+0xfe>
 800b948:	89a3      	ldrh	r3, [r4, #12]
 800b94a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b94e:	81a3      	strh	r3, [r4, #12]
 800b950:	f04f 30ff 	mov.w	r0, #4294967295
 800b954:	e78e      	b.n	800b874 <__sflush_r+0x1c>
 800b956:	4407      	add	r7, r0
 800b958:	eba8 0800 	sub.w	r8, r8, r0
 800b95c:	e7e9      	b.n	800b932 <__sflush_r+0xda>
 800b95e:	bf00      	nop
 800b960:	dfbffffe 	.word	0xdfbffffe

0800b964 <_fflush_r>:
 800b964:	b538      	push	{r3, r4, r5, lr}
 800b966:	690b      	ldr	r3, [r1, #16]
 800b968:	4605      	mov	r5, r0
 800b96a:	460c      	mov	r4, r1
 800b96c:	b913      	cbnz	r3, 800b974 <_fflush_r+0x10>
 800b96e:	2500      	movs	r5, #0
 800b970:	4628      	mov	r0, r5
 800b972:	bd38      	pop	{r3, r4, r5, pc}
 800b974:	b118      	cbz	r0, 800b97e <_fflush_r+0x1a>
 800b976:	6a03      	ldr	r3, [r0, #32]
 800b978:	b90b      	cbnz	r3, 800b97e <_fflush_r+0x1a>
 800b97a:	f7fe fa8d 	bl	8009e98 <__sinit>
 800b97e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d0f3      	beq.n	800b96e <_fflush_r+0xa>
 800b986:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b988:	07d0      	lsls	r0, r2, #31
 800b98a:	d404      	bmi.n	800b996 <_fflush_r+0x32>
 800b98c:	0599      	lsls	r1, r3, #22
 800b98e:	d402      	bmi.n	800b996 <_fflush_r+0x32>
 800b990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b992:	f7fe fb9b 	bl	800a0cc <__retarget_lock_acquire_recursive>
 800b996:	4628      	mov	r0, r5
 800b998:	4621      	mov	r1, r4
 800b99a:	f7ff ff5d 	bl	800b858 <__sflush_r>
 800b99e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9a0:	07da      	lsls	r2, r3, #31
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	d4e4      	bmi.n	800b970 <_fflush_r+0xc>
 800b9a6:	89a3      	ldrh	r3, [r4, #12]
 800b9a8:	059b      	lsls	r3, r3, #22
 800b9aa:	d4e1      	bmi.n	800b970 <_fflush_r+0xc>
 800b9ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9ae:	f7fe fb8e 	bl	800a0ce <__retarget_lock_release_recursive>
 800b9b2:	e7dd      	b.n	800b970 <_fflush_r+0xc>

0800b9b4 <_putc_r>:
 800b9b4:	b570      	push	{r4, r5, r6, lr}
 800b9b6:	460d      	mov	r5, r1
 800b9b8:	4614      	mov	r4, r2
 800b9ba:	4606      	mov	r6, r0
 800b9bc:	b118      	cbz	r0, 800b9c6 <_putc_r+0x12>
 800b9be:	6a03      	ldr	r3, [r0, #32]
 800b9c0:	b90b      	cbnz	r3, 800b9c6 <_putc_r+0x12>
 800b9c2:	f7fe fa69 	bl	8009e98 <__sinit>
 800b9c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9c8:	07d8      	lsls	r0, r3, #31
 800b9ca:	d405      	bmi.n	800b9d8 <_putc_r+0x24>
 800b9cc:	89a3      	ldrh	r3, [r4, #12]
 800b9ce:	0599      	lsls	r1, r3, #22
 800b9d0:	d402      	bmi.n	800b9d8 <_putc_r+0x24>
 800b9d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9d4:	f7fe fb7a 	bl	800a0cc <__retarget_lock_acquire_recursive>
 800b9d8:	68a3      	ldr	r3, [r4, #8]
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	60a3      	str	r3, [r4, #8]
 800b9e0:	da05      	bge.n	800b9ee <_putc_r+0x3a>
 800b9e2:	69a2      	ldr	r2, [r4, #24]
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	db12      	blt.n	800ba0e <_putc_r+0x5a>
 800b9e8:	b2eb      	uxtb	r3, r5
 800b9ea:	2b0a      	cmp	r3, #10
 800b9ec:	d00f      	beq.n	800ba0e <_putc_r+0x5a>
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	1c5a      	adds	r2, r3, #1
 800b9f2:	6022      	str	r2, [r4, #0]
 800b9f4:	701d      	strb	r5, [r3, #0]
 800b9f6:	b2ed      	uxtb	r5, r5
 800b9f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9fa:	07da      	lsls	r2, r3, #31
 800b9fc:	d405      	bmi.n	800ba0a <_putc_r+0x56>
 800b9fe:	89a3      	ldrh	r3, [r4, #12]
 800ba00:	059b      	lsls	r3, r3, #22
 800ba02:	d402      	bmi.n	800ba0a <_putc_r+0x56>
 800ba04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba06:	f7fe fb62 	bl	800a0ce <__retarget_lock_release_recursive>
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	bd70      	pop	{r4, r5, r6, pc}
 800ba0e:	4629      	mov	r1, r5
 800ba10:	4622      	mov	r2, r4
 800ba12:	4630      	mov	r0, r6
 800ba14:	f000 f802 	bl	800ba1c <__swbuf_r>
 800ba18:	4605      	mov	r5, r0
 800ba1a:	e7ed      	b.n	800b9f8 <_putc_r+0x44>

0800ba1c <__swbuf_r>:
 800ba1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1e:	460e      	mov	r6, r1
 800ba20:	4614      	mov	r4, r2
 800ba22:	4605      	mov	r5, r0
 800ba24:	b118      	cbz	r0, 800ba2e <__swbuf_r+0x12>
 800ba26:	6a03      	ldr	r3, [r0, #32]
 800ba28:	b90b      	cbnz	r3, 800ba2e <__swbuf_r+0x12>
 800ba2a:	f7fe fa35 	bl	8009e98 <__sinit>
 800ba2e:	69a3      	ldr	r3, [r4, #24]
 800ba30:	60a3      	str	r3, [r4, #8]
 800ba32:	89a3      	ldrh	r3, [r4, #12]
 800ba34:	071a      	lsls	r2, r3, #28
 800ba36:	d525      	bpl.n	800ba84 <__swbuf_r+0x68>
 800ba38:	6923      	ldr	r3, [r4, #16]
 800ba3a:	b31b      	cbz	r3, 800ba84 <__swbuf_r+0x68>
 800ba3c:	6823      	ldr	r3, [r4, #0]
 800ba3e:	6922      	ldr	r2, [r4, #16]
 800ba40:	1a98      	subs	r0, r3, r2
 800ba42:	6963      	ldr	r3, [r4, #20]
 800ba44:	b2f6      	uxtb	r6, r6
 800ba46:	4283      	cmp	r3, r0
 800ba48:	4637      	mov	r7, r6
 800ba4a:	dc04      	bgt.n	800ba56 <__swbuf_r+0x3a>
 800ba4c:	4621      	mov	r1, r4
 800ba4e:	4628      	mov	r0, r5
 800ba50:	f7ff ff88 	bl	800b964 <_fflush_r>
 800ba54:	b9e0      	cbnz	r0, 800ba90 <__swbuf_r+0x74>
 800ba56:	68a3      	ldr	r3, [r4, #8]
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	60a3      	str	r3, [r4, #8]
 800ba5c:	6823      	ldr	r3, [r4, #0]
 800ba5e:	1c5a      	adds	r2, r3, #1
 800ba60:	6022      	str	r2, [r4, #0]
 800ba62:	701e      	strb	r6, [r3, #0]
 800ba64:	6962      	ldr	r2, [r4, #20]
 800ba66:	1c43      	adds	r3, r0, #1
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d004      	beq.n	800ba76 <__swbuf_r+0x5a>
 800ba6c:	89a3      	ldrh	r3, [r4, #12]
 800ba6e:	07db      	lsls	r3, r3, #31
 800ba70:	d506      	bpl.n	800ba80 <__swbuf_r+0x64>
 800ba72:	2e0a      	cmp	r6, #10
 800ba74:	d104      	bne.n	800ba80 <__swbuf_r+0x64>
 800ba76:	4621      	mov	r1, r4
 800ba78:	4628      	mov	r0, r5
 800ba7a:	f7ff ff73 	bl	800b964 <_fflush_r>
 800ba7e:	b938      	cbnz	r0, 800ba90 <__swbuf_r+0x74>
 800ba80:	4638      	mov	r0, r7
 800ba82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba84:	4621      	mov	r1, r4
 800ba86:	4628      	mov	r0, r5
 800ba88:	f000 f806 	bl	800ba98 <__swsetup_r>
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d0d5      	beq.n	800ba3c <__swbuf_r+0x20>
 800ba90:	f04f 37ff 	mov.w	r7, #4294967295
 800ba94:	e7f4      	b.n	800ba80 <__swbuf_r+0x64>
	...

0800ba98 <__swsetup_r>:
 800ba98:	b538      	push	{r3, r4, r5, lr}
 800ba9a:	4b2a      	ldr	r3, [pc, #168]	; (800bb44 <__swsetup_r+0xac>)
 800ba9c:	4605      	mov	r5, r0
 800ba9e:	6818      	ldr	r0, [r3, #0]
 800baa0:	460c      	mov	r4, r1
 800baa2:	b118      	cbz	r0, 800baac <__swsetup_r+0x14>
 800baa4:	6a03      	ldr	r3, [r0, #32]
 800baa6:	b90b      	cbnz	r3, 800baac <__swsetup_r+0x14>
 800baa8:	f7fe f9f6 	bl	8009e98 <__sinit>
 800baac:	89a3      	ldrh	r3, [r4, #12]
 800baae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bab2:	0718      	lsls	r0, r3, #28
 800bab4:	d422      	bmi.n	800bafc <__swsetup_r+0x64>
 800bab6:	06d9      	lsls	r1, r3, #27
 800bab8:	d407      	bmi.n	800baca <__swsetup_r+0x32>
 800baba:	2309      	movs	r3, #9
 800babc:	602b      	str	r3, [r5, #0]
 800babe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bac2:	81a3      	strh	r3, [r4, #12]
 800bac4:	f04f 30ff 	mov.w	r0, #4294967295
 800bac8:	e034      	b.n	800bb34 <__swsetup_r+0x9c>
 800baca:	0758      	lsls	r0, r3, #29
 800bacc:	d512      	bpl.n	800baf4 <__swsetup_r+0x5c>
 800bace:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bad0:	b141      	cbz	r1, 800bae4 <__swsetup_r+0x4c>
 800bad2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bad6:	4299      	cmp	r1, r3
 800bad8:	d002      	beq.n	800bae0 <__swsetup_r+0x48>
 800bada:	4628      	mov	r0, r5
 800badc:	f7ff f8fc 	bl	800acd8 <_free_r>
 800bae0:	2300      	movs	r3, #0
 800bae2:	6363      	str	r3, [r4, #52]	; 0x34
 800bae4:	89a3      	ldrh	r3, [r4, #12]
 800bae6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800baea:	81a3      	strh	r3, [r4, #12]
 800baec:	2300      	movs	r3, #0
 800baee:	6063      	str	r3, [r4, #4]
 800baf0:	6923      	ldr	r3, [r4, #16]
 800baf2:	6023      	str	r3, [r4, #0]
 800baf4:	89a3      	ldrh	r3, [r4, #12]
 800baf6:	f043 0308 	orr.w	r3, r3, #8
 800bafa:	81a3      	strh	r3, [r4, #12]
 800bafc:	6923      	ldr	r3, [r4, #16]
 800bafe:	b94b      	cbnz	r3, 800bb14 <__swsetup_r+0x7c>
 800bb00:	89a3      	ldrh	r3, [r4, #12]
 800bb02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb0a:	d003      	beq.n	800bb14 <__swsetup_r+0x7c>
 800bb0c:	4621      	mov	r1, r4
 800bb0e:	4628      	mov	r0, r5
 800bb10:	f000 f8b6 	bl	800bc80 <__smakebuf_r>
 800bb14:	89a0      	ldrh	r0, [r4, #12]
 800bb16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb1a:	f010 0301 	ands.w	r3, r0, #1
 800bb1e:	d00a      	beq.n	800bb36 <__swsetup_r+0x9e>
 800bb20:	2300      	movs	r3, #0
 800bb22:	60a3      	str	r3, [r4, #8]
 800bb24:	6963      	ldr	r3, [r4, #20]
 800bb26:	425b      	negs	r3, r3
 800bb28:	61a3      	str	r3, [r4, #24]
 800bb2a:	6923      	ldr	r3, [r4, #16]
 800bb2c:	b943      	cbnz	r3, 800bb40 <__swsetup_r+0xa8>
 800bb2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb32:	d1c4      	bne.n	800babe <__swsetup_r+0x26>
 800bb34:	bd38      	pop	{r3, r4, r5, pc}
 800bb36:	0781      	lsls	r1, r0, #30
 800bb38:	bf58      	it	pl
 800bb3a:	6963      	ldrpl	r3, [r4, #20]
 800bb3c:	60a3      	str	r3, [r4, #8]
 800bb3e:	e7f4      	b.n	800bb2a <__swsetup_r+0x92>
 800bb40:	2000      	movs	r0, #0
 800bb42:	e7f7      	b.n	800bb34 <__swsetup_r+0x9c>
 800bb44:	2400016c 	.word	0x2400016c

0800bb48 <_sbrk_r>:
 800bb48:	b538      	push	{r3, r4, r5, lr}
 800bb4a:	4d06      	ldr	r5, [pc, #24]	; (800bb64 <_sbrk_r+0x1c>)
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	4604      	mov	r4, r0
 800bb50:	4608      	mov	r0, r1
 800bb52:	602b      	str	r3, [r5, #0]
 800bb54:	f7f6 f80c 	bl	8001b70 <_sbrk>
 800bb58:	1c43      	adds	r3, r0, #1
 800bb5a:	d102      	bne.n	800bb62 <_sbrk_r+0x1a>
 800bb5c:	682b      	ldr	r3, [r5, #0]
 800bb5e:	b103      	cbz	r3, 800bb62 <_sbrk_r+0x1a>
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	bd38      	pop	{r3, r4, r5, pc}
 800bb64:	240008e4 	.word	0x240008e4

0800bb68 <__assert_func>:
 800bb68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb6a:	4614      	mov	r4, r2
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	4b09      	ldr	r3, [pc, #36]	; (800bb94 <__assert_func+0x2c>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4605      	mov	r5, r0
 800bb74:	68d8      	ldr	r0, [r3, #12]
 800bb76:	b14c      	cbz	r4, 800bb8c <__assert_func+0x24>
 800bb78:	4b07      	ldr	r3, [pc, #28]	; (800bb98 <__assert_func+0x30>)
 800bb7a:	9100      	str	r1, [sp, #0]
 800bb7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb80:	4906      	ldr	r1, [pc, #24]	; (800bb9c <__assert_func+0x34>)
 800bb82:	462b      	mov	r3, r5
 800bb84:	f000 f844 	bl	800bc10 <fiprintf>
 800bb88:	f000 f8d8 	bl	800bd3c <abort>
 800bb8c:	4b04      	ldr	r3, [pc, #16]	; (800bba0 <__assert_func+0x38>)
 800bb8e:	461c      	mov	r4, r3
 800bb90:	e7f3      	b.n	800bb7a <__assert_func+0x12>
 800bb92:	bf00      	nop
 800bb94:	2400016c 	.word	0x2400016c
 800bb98:	0800c37f 	.word	0x0800c37f
 800bb9c:	0800c38c 	.word	0x0800c38c
 800bba0:	0800c3ba 	.word	0x0800c3ba

0800bba4 <_calloc_r>:
 800bba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bba6:	fba1 2402 	umull	r2, r4, r1, r2
 800bbaa:	b94c      	cbnz	r4, 800bbc0 <_calloc_r+0x1c>
 800bbac:	4611      	mov	r1, r2
 800bbae:	9201      	str	r2, [sp, #4]
 800bbb0:	f7ff f906 	bl	800adc0 <_malloc_r>
 800bbb4:	9a01      	ldr	r2, [sp, #4]
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	b930      	cbnz	r0, 800bbc8 <_calloc_r+0x24>
 800bbba:	4628      	mov	r0, r5
 800bbbc:	b003      	add	sp, #12
 800bbbe:	bd30      	pop	{r4, r5, pc}
 800bbc0:	220c      	movs	r2, #12
 800bbc2:	6002      	str	r2, [r0, #0]
 800bbc4:	2500      	movs	r5, #0
 800bbc6:	e7f8      	b.n	800bbba <_calloc_r+0x16>
 800bbc8:	4621      	mov	r1, r4
 800bbca:	f7fe fa03 	bl	8009fd4 <memset>
 800bbce:	e7f4      	b.n	800bbba <_calloc_r+0x16>

0800bbd0 <__ascii_mbtowc>:
 800bbd0:	b082      	sub	sp, #8
 800bbd2:	b901      	cbnz	r1, 800bbd6 <__ascii_mbtowc+0x6>
 800bbd4:	a901      	add	r1, sp, #4
 800bbd6:	b142      	cbz	r2, 800bbea <__ascii_mbtowc+0x1a>
 800bbd8:	b14b      	cbz	r3, 800bbee <__ascii_mbtowc+0x1e>
 800bbda:	7813      	ldrb	r3, [r2, #0]
 800bbdc:	600b      	str	r3, [r1, #0]
 800bbde:	7812      	ldrb	r2, [r2, #0]
 800bbe0:	1e10      	subs	r0, r2, #0
 800bbe2:	bf18      	it	ne
 800bbe4:	2001      	movne	r0, #1
 800bbe6:	b002      	add	sp, #8
 800bbe8:	4770      	bx	lr
 800bbea:	4610      	mov	r0, r2
 800bbec:	e7fb      	b.n	800bbe6 <__ascii_mbtowc+0x16>
 800bbee:	f06f 0001 	mvn.w	r0, #1
 800bbf2:	e7f8      	b.n	800bbe6 <__ascii_mbtowc+0x16>

0800bbf4 <__ascii_wctomb>:
 800bbf4:	b149      	cbz	r1, 800bc0a <__ascii_wctomb+0x16>
 800bbf6:	2aff      	cmp	r2, #255	; 0xff
 800bbf8:	bf85      	ittet	hi
 800bbfa:	238a      	movhi	r3, #138	; 0x8a
 800bbfc:	6003      	strhi	r3, [r0, #0]
 800bbfe:	700a      	strbls	r2, [r1, #0]
 800bc00:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc04:	bf98      	it	ls
 800bc06:	2001      	movls	r0, #1
 800bc08:	4770      	bx	lr
 800bc0a:	4608      	mov	r0, r1
 800bc0c:	4770      	bx	lr
	...

0800bc10 <fiprintf>:
 800bc10:	b40e      	push	{r1, r2, r3}
 800bc12:	b503      	push	{r0, r1, lr}
 800bc14:	4601      	mov	r1, r0
 800bc16:	ab03      	add	r3, sp, #12
 800bc18:	4805      	ldr	r0, [pc, #20]	; (800bc30 <fiprintf+0x20>)
 800bc1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc1e:	6800      	ldr	r0, [r0, #0]
 800bc20:	9301      	str	r3, [sp, #4]
 800bc22:	f7ff fcff 	bl	800b624 <_vfiprintf_r>
 800bc26:	b002      	add	sp, #8
 800bc28:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc2c:	b003      	add	sp, #12
 800bc2e:	4770      	bx	lr
 800bc30:	2400016c 	.word	0x2400016c

0800bc34 <__swhatbuf_r>:
 800bc34:	b570      	push	{r4, r5, r6, lr}
 800bc36:	460c      	mov	r4, r1
 800bc38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc3c:	2900      	cmp	r1, #0
 800bc3e:	b096      	sub	sp, #88	; 0x58
 800bc40:	4615      	mov	r5, r2
 800bc42:	461e      	mov	r6, r3
 800bc44:	da0d      	bge.n	800bc62 <__swhatbuf_r+0x2e>
 800bc46:	89a3      	ldrh	r3, [r4, #12]
 800bc48:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bc4c:	f04f 0100 	mov.w	r1, #0
 800bc50:	bf0c      	ite	eq
 800bc52:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bc56:	2340      	movne	r3, #64	; 0x40
 800bc58:	2000      	movs	r0, #0
 800bc5a:	6031      	str	r1, [r6, #0]
 800bc5c:	602b      	str	r3, [r5, #0]
 800bc5e:	b016      	add	sp, #88	; 0x58
 800bc60:	bd70      	pop	{r4, r5, r6, pc}
 800bc62:	466a      	mov	r2, sp
 800bc64:	f000 f848 	bl	800bcf8 <_fstat_r>
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	dbec      	blt.n	800bc46 <__swhatbuf_r+0x12>
 800bc6c:	9901      	ldr	r1, [sp, #4]
 800bc6e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bc72:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bc76:	4259      	negs	r1, r3
 800bc78:	4159      	adcs	r1, r3
 800bc7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc7e:	e7eb      	b.n	800bc58 <__swhatbuf_r+0x24>

0800bc80 <__smakebuf_r>:
 800bc80:	898b      	ldrh	r3, [r1, #12]
 800bc82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc84:	079d      	lsls	r5, r3, #30
 800bc86:	4606      	mov	r6, r0
 800bc88:	460c      	mov	r4, r1
 800bc8a:	d507      	bpl.n	800bc9c <__smakebuf_r+0x1c>
 800bc8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	6123      	str	r3, [r4, #16]
 800bc94:	2301      	movs	r3, #1
 800bc96:	6163      	str	r3, [r4, #20]
 800bc98:	b002      	add	sp, #8
 800bc9a:	bd70      	pop	{r4, r5, r6, pc}
 800bc9c:	ab01      	add	r3, sp, #4
 800bc9e:	466a      	mov	r2, sp
 800bca0:	f7ff ffc8 	bl	800bc34 <__swhatbuf_r>
 800bca4:	9900      	ldr	r1, [sp, #0]
 800bca6:	4605      	mov	r5, r0
 800bca8:	4630      	mov	r0, r6
 800bcaa:	f7ff f889 	bl	800adc0 <_malloc_r>
 800bcae:	b948      	cbnz	r0, 800bcc4 <__smakebuf_r+0x44>
 800bcb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcb4:	059a      	lsls	r2, r3, #22
 800bcb6:	d4ef      	bmi.n	800bc98 <__smakebuf_r+0x18>
 800bcb8:	f023 0303 	bic.w	r3, r3, #3
 800bcbc:	f043 0302 	orr.w	r3, r3, #2
 800bcc0:	81a3      	strh	r3, [r4, #12]
 800bcc2:	e7e3      	b.n	800bc8c <__smakebuf_r+0xc>
 800bcc4:	89a3      	ldrh	r3, [r4, #12]
 800bcc6:	6020      	str	r0, [r4, #0]
 800bcc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bccc:	81a3      	strh	r3, [r4, #12]
 800bcce:	9b00      	ldr	r3, [sp, #0]
 800bcd0:	6163      	str	r3, [r4, #20]
 800bcd2:	9b01      	ldr	r3, [sp, #4]
 800bcd4:	6120      	str	r0, [r4, #16]
 800bcd6:	b15b      	cbz	r3, 800bcf0 <__smakebuf_r+0x70>
 800bcd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcdc:	4630      	mov	r0, r6
 800bcde:	f000 f81d 	bl	800bd1c <_isatty_r>
 800bce2:	b128      	cbz	r0, 800bcf0 <__smakebuf_r+0x70>
 800bce4:	89a3      	ldrh	r3, [r4, #12]
 800bce6:	f023 0303 	bic.w	r3, r3, #3
 800bcea:	f043 0301 	orr.w	r3, r3, #1
 800bcee:	81a3      	strh	r3, [r4, #12]
 800bcf0:	89a3      	ldrh	r3, [r4, #12]
 800bcf2:	431d      	orrs	r5, r3
 800bcf4:	81a5      	strh	r5, [r4, #12]
 800bcf6:	e7cf      	b.n	800bc98 <__smakebuf_r+0x18>

0800bcf8 <_fstat_r>:
 800bcf8:	b538      	push	{r3, r4, r5, lr}
 800bcfa:	4d07      	ldr	r5, [pc, #28]	; (800bd18 <_fstat_r+0x20>)
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	4604      	mov	r4, r0
 800bd00:	4608      	mov	r0, r1
 800bd02:	4611      	mov	r1, r2
 800bd04:	602b      	str	r3, [r5, #0]
 800bd06:	f7f5 ff0a 	bl	8001b1e <_fstat>
 800bd0a:	1c43      	adds	r3, r0, #1
 800bd0c:	d102      	bne.n	800bd14 <_fstat_r+0x1c>
 800bd0e:	682b      	ldr	r3, [r5, #0]
 800bd10:	b103      	cbz	r3, 800bd14 <_fstat_r+0x1c>
 800bd12:	6023      	str	r3, [r4, #0]
 800bd14:	bd38      	pop	{r3, r4, r5, pc}
 800bd16:	bf00      	nop
 800bd18:	240008e4 	.word	0x240008e4

0800bd1c <_isatty_r>:
 800bd1c:	b538      	push	{r3, r4, r5, lr}
 800bd1e:	4d06      	ldr	r5, [pc, #24]	; (800bd38 <_isatty_r+0x1c>)
 800bd20:	2300      	movs	r3, #0
 800bd22:	4604      	mov	r4, r0
 800bd24:	4608      	mov	r0, r1
 800bd26:	602b      	str	r3, [r5, #0]
 800bd28:	f7f5 ff09 	bl	8001b3e <_isatty>
 800bd2c:	1c43      	adds	r3, r0, #1
 800bd2e:	d102      	bne.n	800bd36 <_isatty_r+0x1a>
 800bd30:	682b      	ldr	r3, [r5, #0]
 800bd32:	b103      	cbz	r3, 800bd36 <_isatty_r+0x1a>
 800bd34:	6023      	str	r3, [r4, #0]
 800bd36:	bd38      	pop	{r3, r4, r5, pc}
 800bd38:	240008e4 	.word	0x240008e4

0800bd3c <abort>:
 800bd3c:	b508      	push	{r3, lr}
 800bd3e:	2006      	movs	r0, #6
 800bd40:	f000 f82c 	bl	800bd9c <raise>
 800bd44:	2001      	movs	r0, #1
 800bd46:	f7f5 fe9b 	bl	8001a80 <_exit>

0800bd4a <_raise_r>:
 800bd4a:	291f      	cmp	r1, #31
 800bd4c:	b538      	push	{r3, r4, r5, lr}
 800bd4e:	4604      	mov	r4, r0
 800bd50:	460d      	mov	r5, r1
 800bd52:	d904      	bls.n	800bd5e <_raise_r+0x14>
 800bd54:	2316      	movs	r3, #22
 800bd56:	6003      	str	r3, [r0, #0]
 800bd58:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5c:	bd38      	pop	{r3, r4, r5, pc}
 800bd5e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bd60:	b112      	cbz	r2, 800bd68 <_raise_r+0x1e>
 800bd62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd66:	b94b      	cbnz	r3, 800bd7c <_raise_r+0x32>
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f000 f831 	bl	800bdd0 <_getpid_r>
 800bd6e:	462a      	mov	r2, r5
 800bd70:	4601      	mov	r1, r0
 800bd72:	4620      	mov	r0, r4
 800bd74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd78:	f000 b818 	b.w	800bdac <_kill_r>
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d00a      	beq.n	800bd96 <_raise_r+0x4c>
 800bd80:	1c59      	adds	r1, r3, #1
 800bd82:	d103      	bne.n	800bd8c <_raise_r+0x42>
 800bd84:	2316      	movs	r3, #22
 800bd86:	6003      	str	r3, [r0, #0]
 800bd88:	2001      	movs	r0, #1
 800bd8a:	e7e7      	b.n	800bd5c <_raise_r+0x12>
 800bd8c:	2400      	movs	r4, #0
 800bd8e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd92:	4628      	mov	r0, r5
 800bd94:	4798      	blx	r3
 800bd96:	2000      	movs	r0, #0
 800bd98:	e7e0      	b.n	800bd5c <_raise_r+0x12>
	...

0800bd9c <raise>:
 800bd9c:	4b02      	ldr	r3, [pc, #8]	; (800bda8 <raise+0xc>)
 800bd9e:	4601      	mov	r1, r0
 800bda0:	6818      	ldr	r0, [r3, #0]
 800bda2:	f7ff bfd2 	b.w	800bd4a <_raise_r>
 800bda6:	bf00      	nop
 800bda8:	2400016c 	.word	0x2400016c

0800bdac <_kill_r>:
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	4d07      	ldr	r5, [pc, #28]	; (800bdcc <_kill_r+0x20>)
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	4608      	mov	r0, r1
 800bdb6:	4611      	mov	r1, r2
 800bdb8:	602b      	str	r3, [r5, #0]
 800bdba:	f7f5 fe51 	bl	8001a60 <_kill>
 800bdbe:	1c43      	adds	r3, r0, #1
 800bdc0:	d102      	bne.n	800bdc8 <_kill_r+0x1c>
 800bdc2:	682b      	ldr	r3, [r5, #0]
 800bdc4:	b103      	cbz	r3, 800bdc8 <_kill_r+0x1c>
 800bdc6:	6023      	str	r3, [r4, #0]
 800bdc8:	bd38      	pop	{r3, r4, r5, pc}
 800bdca:	bf00      	nop
 800bdcc:	240008e4 	.word	0x240008e4

0800bdd0 <_getpid_r>:
 800bdd0:	f7f5 be3e 	b.w	8001a50 <_getpid>

0800bdd4 <_init>:
 800bdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd6:	bf00      	nop
 800bdd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdda:	bc08      	pop	{r3}
 800bddc:	469e      	mov	lr, r3
 800bdde:	4770      	bx	lr

0800bde0 <_fini>:
 800bde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde2:	bf00      	nop
 800bde4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bde6:	bc08      	pop	{r3}
 800bde8:	469e      	mov	lr, r3
 800bdea:	4770      	bx	lr
