
devBoardTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad8c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800b060  0800b060  0001b060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b5cc  0800b5cc  0001b5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b5d4  0800b5d4  0001b5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b5d8  0800b5d8  0001b5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002e4  24000000  0800b5dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000260  240002e4  0800b8c0  000202e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000544  0800b8c0  00020544  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ee42  00000000  00000000  00020312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c3c  00000000  00000000  0003f154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012e0  00000000  00000000  00042d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001138  00000000  00000000  00044070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003584c  00000000  00000000  000451a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c54f  00000000  00000000  0007a9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014967a  00000000  00000000  00096f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e05bd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c70  00000000  00000000  001e0610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002e4 	.word	0x240002e4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b044 	.word	0x0800b044

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002e8 	.word	0x240002e8
 800030c:	0800b044 	.word	0x0800b044

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b974 	b.w	80006c0 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468e      	mov	lr, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d14d      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fe:	428a      	cmp	r2, r1
 8000400:	4694      	mov	ip, r2
 8000402:	d969      	bls.n	80004d8 <__udivmoddi4+0xe8>
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	b152      	cbz	r2, 8000420 <__udivmoddi4+0x30>
 800040a:	fa01 f302 	lsl.w	r3, r1, r2
 800040e:	f1c2 0120 	rsb	r1, r2, #32
 8000412:	fa20 f101 	lsr.w	r1, r0, r1
 8000416:	fa0c fc02 	lsl.w	ip, ip, r2
 800041a:	ea41 0e03 	orr.w	lr, r1, r3
 800041e:	4094      	lsls	r4, r2
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	0c21      	lsrs	r1, r4, #16
 8000426:	fbbe f6f8 	udiv	r6, lr, r8
 800042a:	fa1f f78c 	uxth.w	r7, ip
 800042e:	fb08 e316 	mls	r3, r8, r6, lr
 8000432:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000436:	fb06 f107 	mul.w	r1, r6, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 30ff 	add.w	r0, r6, #4294967295
 8000446:	f080 811f 	bcs.w	8000688 <__udivmoddi4+0x298>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 811c 	bls.w	8000688 <__udivmoddi4+0x298>
 8000450:	3e02      	subs	r6, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb00 f707 	mul.w	r7, r0, r7
 8000468:	42a7      	cmp	r7, r4
 800046a:	d90a      	bls.n	8000482 <__udivmoddi4+0x92>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	f080 810a 	bcs.w	800068c <__udivmoddi4+0x29c>
 8000478:	42a7      	cmp	r7, r4
 800047a:	f240 8107 	bls.w	800068c <__udivmoddi4+0x29c>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000486:	1be4      	subs	r4, r4, r7
 8000488:	2600      	movs	r6, #0
 800048a:	b11d      	cbz	r5, 8000494 <__udivmoddi4+0xa4>
 800048c:	40d4      	lsrs	r4, r2
 800048e:	2300      	movs	r3, #0
 8000490:	e9c5 4300 	strd	r4, r3, [r5]
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d909      	bls.n	80004b2 <__udivmoddi4+0xc2>
 800049e:	2d00      	cmp	r5, #0
 80004a0:	f000 80ef 	beq.w	8000682 <__udivmoddi4+0x292>
 80004a4:	2600      	movs	r6, #0
 80004a6:	e9c5 0100 	strd	r0, r1, [r5]
 80004aa:	4630      	mov	r0, r6
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	fab3 f683 	clz	r6, r3
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	d14a      	bne.n	8000550 <__udivmoddi4+0x160>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d302      	bcc.n	80004c4 <__udivmoddi4+0xd4>
 80004be:	4282      	cmp	r2, r0
 80004c0:	f200 80f9 	bhi.w	80006b6 <__udivmoddi4+0x2c6>
 80004c4:	1a84      	subs	r4, r0, r2
 80004c6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ca:	2001      	movs	r0, #1
 80004cc:	469e      	mov	lr, r3
 80004ce:	2d00      	cmp	r5, #0
 80004d0:	d0e0      	beq.n	8000494 <__udivmoddi4+0xa4>
 80004d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004d6:	e7dd      	b.n	8000494 <__udivmoddi4+0xa4>
 80004d8:	b902      	cbnz	r2, 80004dc <__udivmoddi4+0xec>
 80004da:	deff      	udf	#255	; 0xff
 80004dc:	fab2 f282 	clz	r2, r2
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	f040 8092 	bne.w	800060a <__udivmoddi4+0x21a>
 80004e6:	eba1 010c 	sub.w	r1, r1, ip
 80004ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ee:	fa1f fe8c 	uxth.w	lr, ip
 80004f2:	2601      	movs	r6, #1
 80004f4:	0c20      	lsrs	r0, r4, #16
 80004f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004fa:	fb07 1113 	mls	r1, r7, r3, r1
 80004fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000502:	fb0e f003 	mul.w	r0, lr, r3
 8000506:	4288      	cmp	r0, r1
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x12c>
 800050a:	eb1c 0101 	adds.w	r1, ip, r1
 800050e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x12a>
 8000514:	4288      	cmp	r0, r1
 8000516:	f200 80cb 	bhi.w	80006b0 <__udivmoddi4+0x2c0>
 800051a:	4643      	mov	r3, r8
 800051c:	1a09      	subs	r1, r1, r0
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb1 f0f7 	udiv	r0, r1, r7
 8000524:	fb07 1110 	mls	r1, r7, r0, r1
 8000528:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800052c:	fb0e fe00 	mul.w	lr, lr, r0
 8000530:	45a6      	cmp	lr, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x156>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f100 31ff 	add.w	r1, r0, #4294967295
 800053c:	d202      	bcs.n	8000544 <__udivmoddi4+0x154>
 800053e:	45a6      	cmp	lr, r4
 8000540:	f200 80bb 	bhi.w	80006ba <__udivmoddi4+0x2ca>
 8000544:	4608      	mov	r0, r1
 8000546:	eba4 040e 	sub.w	r4, r4, lr
 800054a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x9a>
 8000550:	f1c6 0720 	rsb	r7, r6, #32
 8000554:	40b3      	lsls	r3, r6
 8000556:	fa22 fc07 	lsr.w	ip, r2, r7
 800055a:	ea4c 0c03 	orr.w	ip, ip, r3
 800055e:	fa20 f407 	lsr.w	r4, r0, r7
 8000562:	fa01 f306 	lsl.w	r3, r1, r6
 8000566:	431c      	orrs	r4, r3
 8000568:	40f9      	lsrs	r1, r7
 800056a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800056e:	fa00 f306 	lsl.w	r3, r0, r6
 8000572:	fbb1 f8f9 	udiv	r8, r1, r9
 8000576:	0c20      	lsrs	r0, r4, #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fb09 1118 	mls	r1, r9, r8, r1
 8000580:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000584:	fb08 f00e 	mul.w	r0, r8, lr
 8000588:	4288      	cmp	r0, r1
 800058a:	fa02 f206 	lsl.w	r2, r2, r6
 800058e:	d90b      	bls.n	80005a8 <__udivmoddi4+0x1b8>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f108 3aff 	add.w	sl, r8, #4294967295
 8000598:	f080 8088 	bcs.w	80006ac <__udivmoddi4+0x2bc>
 800059c:	4288      	cmp	r0, r1
 800059e:	f240 8085 	bls.w	80006ac <__udivmoddi4+0x2bc>
 80005a2:	f1a8 0802 	sub.w	r8, r8, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1a09      	subs	r1, r1, r0
 80005aa:	b2a4      	uxth	r4, r4
 80005ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80005b0:	fb09 1110 	mls	r1, r9, r0, r1
 80005b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005bc:	458e      	cmp	lr, r1
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x1e2>
 80005c0:	eb1c 0101 	adds.w	r1, ip, r1
 80005c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c8:	d26c      	bcs.n	80006a4 <__udivmoddi4+0x2b4>
 80005ca:	458e      	cmp	lr, r1
 80005cc:	d96a      	bls.n	80006a4 <__udivmoddi4+0x2b4>
 80005ce:	3802      	subs	r0, #2
 80005d0:	4461      	add	r1, ip
 80005d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005d6:	fba0 9402 	umull	r9, r4, r0, r2
 80005da:	eba1 010e 	sub.w	r1, r1, lr
 80005de:	42a1      	cmp	r1, r4
 80005e0:	46c8      	mov	r8, r9
 80005e2:	46a6      	mov	lr, r4
 80005e4:	d356      	bcc.n	8000694 <__udivmoddi4+0x2a4>
 80005e6:	d053      	beq.n	8000690 <__udivmoddi4+0x2a0>
 80005e8:	b15d      	cbz	r5, 8000602 <__udivmoddi4+0x212>
 80005ea:	ebb3 0208 	subs.w	r2, r3, r8
 80005ee:	eb61 010e 	sbc.w	r1, r1, lr
 80005f2:	fa01 f707 	lsl.w	r7, r1, r7
 80005f6:	fa22 f306 	lsr.w	r3, r2, r6
 80005fa:	40f1      	lsrs	r1, r6
 80005fc:	431f      	orrs	r7, r3
 80005fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000602:	2600      	movs	r6, #0
 8000604:	4631      	mov	r1, r6
 8000606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	40d8      	lsrs	r0, r3
 8000610:	fa0c fc02 	lsl.w	ip, ip, r2
 8000614:	fa21 f303 	lsr.w	r3, r1, r3
 8000618:	4091      	lsls	r1, r2
 800061a:	4301      	orrs	r1, r0
 800061c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000620:	fa1f fe8c 	uxth.w	lr, ip
 8000624:	fbb3 f0f7 	udiv	r0, r3, r7
 8000628:	fb07 3610 	mls	r6, r7, r0, r3
 800062c:	0c0b      	lsrs	r3, r1, #16
 800062e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000632:	fb00 f60e 	mul.w	r6, r0, lr
 8000636:	429e      	cmp	r6, r3
 8000638:	fa04 f402 	lsl.w	r4, r4, r2
 800063c:	d908      	bls.n	8000650 <__udivmoddi4+0x260>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f100 38ff 	add.w	r8, r0, #4294967295
 8000646:	d22f      	bcs.n	80006a8 <__udivmoddi4+0x2b8>
 8000648:	429e      	cmp	r6, r3
 800064a:	d92d      	bls.n	80006a8 <__udivmoddi4+0x2b8>
 800064c:	3802      	subs	r0, #2
 800064e:	4463      	add	r3, ip
 8000650:	1b9b      	subs	r3, r3, r6
 8000652:	b289      	uxth	r1, r1
 8000654:	fbb3 f6f7 	udiv	r6, r3, r7
 8000658:	fb07 3316 	mls	r3, r7, r6, r3
 800065c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000660:	fb06 f30e 	mul.w	r3, r6, lr
 8000664:	428b      	cmp	r3, r1
 8000666:	d908      	bls.n	800067a <__udivmoddi4+0x28a>
 8000668:	eb1c 0101 	adds.w	r1, ip, r1
 800066c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000670:	d216      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000672:	428b      	cmp	r3, r1
 8000674:	d914      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000676:	3e02      	subs	r6, #2
 8000678:	4461      	add	r1, ip
 800067a:	1ac9      	subs	r1, r1, r3
 800067c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000680:	e738      	b.n	80004f4 <__udivmoddi4+0x104>
 8000682:	462e      	mov	r6, r5
 8000684:	4628      	mov	r0, r5
 8000686:	e705      	b.n	8000494 <__udivmoddi4+0xa4>
 8000688:	4606      	mov	r6, r0
 800068a:	e6e3      	b.n	8000454 <__udivmoddi4+0x64>
 800068c:	4618      	mov	r0, r3
 800068e:	e6f8      	b.n	8000482 <__udivmoddi4+0x92>
 8000690:	454b      	cmp	r3, r9
 8000692:	d2a9      	bcs.n	80005e8 <__udivmoddi4+0x1f8>
 8000694:	ebb9 0802 	subs.w	r8, r9, r2
 8000698:	eb64 0e0c 	sbc.w	lr, r4, ip
 800069c:	3801      	subs	r0, #1
 800069e:	e7a3      	b.n	80005e8 <__udivmoddi4+0x1f8>
 80006a0:	4646      	mov	r6, r8
 80006a2:	e7ea      	b.n	800067a <__udivmoddi4+0x28a>
 80006a4:	4620      	mov	r0, r4
 80006a6:	e794      	b.n	80005d2 <__udivmoddi4+0x1e2>
 80006a8:	4640      	mov	r0, r8
 80006aa:	e7d1      	b.n	8000650 <__udivmoddi4+0x260>
 80006ac:	46d0      	mov	r8, sl
 80006ae:	e77b      	b.n	80005a8 <__udivmoddi4+0x1b8>
 80006b0:	3b02      	subs	r3, #2
 80006b2:	4461      	add	r1, ip
 80006b4:	e732      	b.n	800051c <__udivmoddi4+0x12c>
 80006b6:	4630      	mov	r0, r6
 80006b8:	e709      	b.n	80004ce <__udivmoddi4+0xde>
 80006ba:	4464      	add	r4, ip
 80006bc:	3802      	subs	r0, #2
 80006be:	e742      	b.n	8000546 <__udivmoddi4+0x156>

080006c0 <__aeabi_idiv0>:
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_DCMI_Init+0x64>)
 80006ca:	4a18      	ldr	r2, [pc, #96]	; (800072c <MX_DCMI_Init+0x68>)
 80006cc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_DCMI_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_DCMI_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_DCMI_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_DCMI_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_DCMI_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_10B;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_DCMI_Init+0x64>)
 80006ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006f2:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_DCMI_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_DCMI_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_DCMI_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_DCMI_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_DCMI_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_DCMI_Init+0x64>)
 8000714:	f001 fca4 	bl	8002060 <HAL_DCMI_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_DCMI_Init+0x5e>
  {
    Error_Handler();
 800071e:	f000 fd5b 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	24000300 	.word	0x24000300
 800072c:	48020000 	.word	0x48020000

08000730 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08e      	sub	sp, #56	; 0x38
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a69      	ldr	r2, [pc, #420]	; (80008f4 <HAL_DCMI_MspInit+0x1c4>)
 800074e:	4293      	cmp	r3, r2
 8000750:	f040 80cc 	bne.w	80008ec <HAL_DCMI_MspInit+0x1bc>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000754:	4b68      	ldr	r3, [pc, #416]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 8000756:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800075a:	4a67      	ldr	r2, [pc, #412]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000764:	4b64      	ldr	r3, [pc, #400]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 8000766:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	623b      	str	r3, [r7, #32]
 8000770:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000772:	4b61      	ldr	r3, [pc, #388]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	4a5f      	ldr	r2, [pc, #380]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 800077a:	f043 0310 	orr.w	r3, r3, #16
 800077e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000782:	4b5d      	ldr	r3, [pc, #372]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000788:	f003 0310 	and.w	r3, r3, #16
 800078c:	61fb      	str	r3, [r7, #28]
 800078e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4b59      	ldr	r3, [pc, #356]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000796:	4a58      	ldr	r2, [pc, #352]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a0:	4b55      	ldr	r3, [pc, #340]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	61bb      	str	r3, [r7, #24]
 80007ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b52      	ldr	r3, [pc, #328]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b4:	4a50      	ldr	r2, [pc, #320]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007b6:	f043 0302 	orr.w	r3, r3, #2
 80007ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007be:	4b4e      	ldr	r3, [pc, #312]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c4:	f003 0302 	and.w	r3, r3, #2
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007cc:	4b4a      	ldr	r3, [pc, #296]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d2:	4a49      	ldr	r2, [pc, #292]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007dc:	4b46      	ldr	r3, [pc, #280]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	4b43      	ldr	r3, [pc, #268]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f0:	4a41      	ldr	r2, [pc, #260]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007f2:	f043 0308 	orr.w	r3, r3, #8
 80007f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007fa:	4b3f      	ldr	r3, [pc, #252]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 80007fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000800:	f003 0308 	and.w	r3, r3, #8
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000808:	4b3b      	ldr	r3, [pc, #236]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 800080a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080e:	4a3a      	ldr	r2, [pc, #232]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 8000810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000818:	4b37      	ldr	r3, [pc, #220]	; (80008f8 <HAL_DCMI_MspInit+0x1c8>)
 800081a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> DCMI_D8
    PC12     ------> DCMI_D9
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000826:	2370      	movs	r3, #112	; 0x70
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000836:	230d      	movs	r3, #13
 8000838:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	4619      	mov	r1, r3
 8000840:	482e      	ldr	r0, [pc, #184]	; (80008fc <HAL_DCMI_MspInit+0x1cc>)
 8000842:	f001 fc87 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000846:	2350      	movs	r3, #80	; 0x50
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000856:	230d      	movs	r3, #13
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085e:	4619      	mov	r1, r3
 8000860:	4827      	ldr	r0, [pc, #156]	; (8000900 <HAL_DCMI_MspInit+0x1d0>)
 8000862:	f001 fc77 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000878:	230d      	movs	r3, #13
 800087a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000880:	4619      	mov	r1, r3
 8000882:	4820      	ldr	r0, [pc, #128]	; (8000904 <HAL_DCMI_MspInit+0x1d4>)
 8000884:	f001 fc66 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10
 8000888:	f44f 53b6 	mov.w	r3, #5824	; 0x16c0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800089a:	230d      	movs	r3, #13
 800089c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	4619      	mov	r1, r3
 80008a4:	4818      	ldr	r0, [pc, #96]	; (8000908 <HAL_DCMI_MspInit+0x1d8>)
 80008a6:	f001 fc55 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008aa:	2308      	movs	r3, #8
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008ba:	230d      	movs	r3, #13
 80008bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4619      	mov	r1, r3
 80008c4:	4811      	ldr	r0, [pc, #68]	; (800090c <HAL_DCMI_MspInit+0x1dc>)
 80008c6:	f001 fc45 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008dc:	230d      	movs	r3, #13
 80008de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e4:	4619      	mov	r1, r3
 80008e6:	480a      	ldr	r0, [pc, #40]	; (8000910 <HAL_DCMI_MspInit+0x1e0>)
 80008e8:	f001 fc34 	bl	8002154 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80008ec:	bf00      	nop
 80008ee:	3738      	adds	r7, #56	; 0x38
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	48020000 	.word	0x48020000
 80008f8:	58024400 	.word	0x58024400
 80008fc:	58021000 	.word	0x58021000
 8000900:	58020000 	.word	0x58020000
 8000904:	58020400 	.word	0x58020400
 8000908:	58020800 	.word	0x58020800
 800090c:	58020c00 	.word	0x58020c00
 8000910:	58021800 	.word	0x58021800

08000914 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	; 0x30
 8000918:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800092a:	4b47      	ldr	r3, [pc, #284]	; (8000a48 <MX_GPIO_Init+0x134>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	4a45      	ldr	r2, [pc, #276]	; (8000a48 <MX_GPIO_Init+0x134>)
 8000932:	f043 0310 	orr.w	r3, r3, #16
 8000936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093a:	4b43      	ldr	r3, [pc, #268]	; (8000a48 <MX_GPIO_Init+0x134>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	f003 0310 	and.w	r3, r3, #16
 8000944:	61bb      	str	r3, [r7, #24]
 8000946:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000948:	4b3f      	ldr	r3, [pc, #252]	; (8000a48 <MX_GPIO_Init+0x134>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094e:	4a3e      	ldr	r2, [pc, #248]	; (8000a48 <MX_GPIO_Init+0x134>)
 8000950:	f043 0320 	orr.w	r3, r3, #32
 8000954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000958:	4b3b      	ldr	r3, [pc, #236]	; (8000a48 <MX_GPIO_Init+0x134>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095e:	f003 0320 	and.w	r3, r3, #32
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	4b38      	ldr	r3, [pc, #224]	; (8000a48 <MX_GPIO_Init+0x134>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096c:	4a36      	ldr	r2, [pc, #216]	; (8000a48 <MX_GPIO_Init+0x134>)
 800096e:	f043 0304 	orr.w	r3, r3, #4
 8000972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000976:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <MX_GPIO_Init+0x134>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	f003 0304 	and.w	r3, r3, #4
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	4b30      	ldr	r3, [pc, #192]	; (8000a48 <MX_GPIO_Init+0x134>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098a:	4a2f      	ldr	r2, [pc, #188]	; (8000a48 <MX_GPIO_Init+0x134>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000994:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <MX_GPIO_Init+0x134>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a8:	4a27      	ldr	r2, [pc, #156]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009aa:	f043 0302 	orr.w	r3, r3, #2
 80009ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b2:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b8:	f003 0302 	and.w	r3, r3, #2
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c0:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c6:	4a20      	ldr	r2, [pc, #128]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a02:	4812      	ldr	r0, [pc, #72]	; (8000a4c <MX_GPIO_Init+0x138>)
 8000a04:	f001 fd4e 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480d      	ldr	r0, [pc, #52]	; (8000a50 <MX_GPIO_Init+0x13c>)
 8000a1c:	f001 fb9a 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_GPIO_Init+0x138>)
 8000a3a:	f001 fb8b 	bl	8002154 <HAL_GPIO_Init>

}
 8000a3e:	bf00      	nop
 8000a40:	3730      	adds	r7, #48	; 0x30
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	58024400 	.word	0x58024400
 8000a4c:	58020c00 	.word	0x58020c00
 8000a50:	58020000 	.word	0x58020000

08000a54 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a5a:	4a20      	ldr	r2, [pc, #128]	; (8000adc <MX_I2C1_Init+0x88>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a60:	4a1f      	ldr	r2, [pc, #124]	; (8000ae0 <MX_I2C1_Init+0x8c>)
 8000a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a8e:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000a90:	f001 fd22 	bl	80024d8 <HAL_I2C_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a9a:	f000 fb9d 	bl	80011d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000aa2:	f002 fc79 	bl	8003398 <HAL_I2CEx_ConfigAnalogFilter>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000aac:	f000 fb94 	bl	80011d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000ab4:	f002 fcbb 	bl	800342e <HAL_I2CEx_ConfigDigitalFilter>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000abe:	f000 fb8b 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  i2c_bus_1.I2C_Handle = &hi2c1;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_I2C1_Init+0x90>)
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <MX_I2C1_Init+0x84>)
 8000ac6:	601a      	str	r2, [r3, #0]
  i2c_bus_1.read = &I2C1_ReadReg;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_I2C1_Init+0x90>)
 8000aca:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <MX_I2C1_Init+0x94>)
 8000acc:	611a      	str	r2, [r3, #16]
  i2c_bus_1.write = &I2C1_WriteReg;
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <MX_I2C1_Init+0x90>)
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <MX_I2C1_Init+0x98>)
 8000ad2:	615a      	str	r2, [r3, #20]
  /* USER CODE END I2C1_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	24000388 	.word	0x24000388
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	10707dbc 	.word	0x10707dbc
 8000ae4:	24000350 	.word	0x24000350
 8000ae8:	08000d55 	.word	0x08000d55
 8000aec:	08000d0d 	.word	0x08000d0d

08000af0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000af4:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000af6:	4a20      	ldr	r2, [pc, #128]	; (8000b78 <MX_I2C2_Init+0x88>)
 8000af8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8000afa:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000afc:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <MX_I2C2_Init+0x8c>)
 8000afe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b06:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b2a:	4812      	ldr	r0, [pc, #72]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b2c:	f001 fcd4 	bl	80024d8 <HAL_I2C_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b36:	f000 fb4f 	bl	80011d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b3e:	f002 fc2b 	bl	8003398 <HAL_I2CEx_ConfigAnalogFilter>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b48:	f000 fb46 	bl	80011d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4809      	ldr	r0, [pc, #36]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b50:	f002 fc6d 	bl	800342e <HAL_I2CEx_ConfigDigitalFilter>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b5a:	f000 fb3d 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  i2c_bus_2.I2C_Handle = &hi2c2;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_I2C2_Init+0x90>)
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <MX_I2C2_Init+0x84>)
 8000b62:	601a      	str	r2, [r3, #0]
  i2c_bus_2.read = &I2C2_ReadReg;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_I2C2_Init+0x90>)
 8000b66:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <MX_I2C2_Init+0x94>)
 8000b68:	611a      	str	r2, [r3, #16]
  i2c_bus_2.write = &I2C2_WriteReg;
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <MX_I2C2_Init+0x90>)
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <MX_I2C2_Init+0x98>)
 8000b6e:	615a      	str	r2, [r3, #20]
  /* USER CODE END I2C2_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	240003d4 	.word	0x240003d4
 8000b78:	40005800 	.word	0x40005800
 8000b7c:	10707dbc 	.word	0x10707dbc
 8000b80:	2400036c 	.word	0x2400036c
 8000b84:	08000de5 	.word	0x08000de5
 8000b88:	08000d9d 	.word	0x08000d9d

08000b8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0b8      	sub	sp, #224	; 0xe0
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba4:	f107 0318 	add.w	r3, r7, #24
 8000ba8:	22b4      	movs	r2, #180	; 0xb4
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f007 fd53 	bl	8008658 <memset>
  if(i2cHandle->Instance==I2C1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a4d      	ldr	r2, [pc, #308]	; (8000cec <HAL_I2C_MspInit+0x160>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d142      	bne.n	8000c42 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc6:	f107 0318 	add.w	r3, r7, #24
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 ff82 	bl	8005ad4 <HAL_RCCEx_PeriphCLKConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000bd6:	f000 faff 	bl	80011d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	4b45      	ldr	r3, [pc, #276]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	4a43      	ldr	r2, [pc, #268]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000be2:	f043 0302 	orr.w	r3, r3, #2
 8000be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bea:	4b41      	ldr	r3, [pc, #260]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	f003 0302 	and.w	r3, r3, #2
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bf8:	23c0      	movs	r3, #192	; 0xc0
 8000bfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bfe:	2312      	movs	r3, #18
 8000c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c10:	2304      	movs	r3, #4
 8000c12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4835      	ldr	r0, [pc, #212]	; (8000cf4 <HAL_I2C_MspInit+0x168>)
 8000c1e:	f001 fa99 	bl	8002154 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c22:	4b33      	ldr	r3, [pc, #204]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c28:	4a31      	ldr	r2, [pc, #196]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000c2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c32:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	693b      	ldr	r3, [r7, #16]
    i2c_bus_2.I2C_Handle = &hi2c2;
    i2c_bus_2.read = &I2C2_ReadReg;
    i2c_bus_2.write = &I2C2_WriteReg;
  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c40:	e050      	b.n	8000ce4 <HAL_I2C_MspInit+0x158>
  else if(i2cHandle->Instance==I2C2)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a2c      	ldr	r2, [pc, #176]	; (8000cf8 <HAL_I2C_MspInit+0x16c>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d14b      	bne.n	8000ce4 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f004 ff3a 	bl	8005ad4 <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_I2C_MspInit+0xde>
      Error_Handler();
 8000c66:	f000 fab7 	bl	80011d8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c90:	2312      	movs	r3, #18
 8000c92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cac:	4619      	mov	r1, r3
 8000cae:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <HAL_I2C_MspInit+0x168>)
 8000cb0:	f001 fa50 	bl	8002154 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000cb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cba:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000cbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cc0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_I2C_MspInit+0x164>)
 8000cc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
    i2c_bus_2.I2C_Handle = &hi2c2;
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <HAL_I2C_MspInit+0x170>)
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_I2C_MspInit+0x174>)
 8000cd6:	601a      	str	r2, [r3, #0]
    i2c_bus_2.read = &I2C2_ReadReg;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_I2C_MspInit+0x170>)
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_I2C_MspInit+0x178>)
 8000cdc:	611a      	str	r2, [r3, #16]
    i2c_bus_2.write = &I2C2_WriteReg;
 8000cde:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <HAL_I2C_MspInit+0x170>)
 8000ce0:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <HAL_I2C_MspInit+0x17c>)
 8000ce2:	615a      	str	r2, [r3, #20]
}
 8000ce4:	bf00      	nop
 8000ce6:	37e0      	adds	r7, #224	; 0xe0
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	58024400 	.word	0x58024400
 8000cf4:	58020400 	.word	0x58020400
 8000cf8:	40005800 	.word	0x40005800
 8000cfc:	2400036c 	.word	0x2400036c
 8000d00:	240003d4 	.word	0x240003d4
 8000d04:	08000de5 	.word	0x08000de5
 8000d08:	08000d9d 	.word	0x08000d9d

08000d0c <I2C1_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af04      	add	r7, sp, #16
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	4603      	mov	r3, r0
 8000d16:	81fb      	strh	r3, [r7, #14]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	81bb      	strh	r3, [r7, #12]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8000d20:	8978      	ldrh	r0, [r7, #10]
 8000d22:	89ba      	ldrh	r2, [r7, #12]
 8000d24:	89f9      	ldrh	r1, [r7, #14]
 8000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2a:	9302      	str	r3, [sp, #8]
 8000d2c:	8b3b      	ldrh	r3, [r7, #24]
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	4603      	mov	r3, r0
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <I2C1_WriteReg+0x44>)
 8000d38:	f001 fd52 	bl	80027e0 <HAL_I2C_Mem_Write>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <I2C1_WriteReg+0x3a>
  {
    return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <I2C1_WriteReg+0x3c>
  }

  return HAL_I2C_STATE_ERROR;
 8000d46:	23e0      	movs	r3, #224	; 0xe0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	24000388 	.word	0x24000388

08000d54 <I2C1_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af04      	add	r7, sp, #16
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	81fb      	strh	r3, [r7, #14]
 8000d60:	460b      	mov	r3, r1
 8000d62:	81bb      	strh	r3, [r7, #12]
 8000d64:	4613      	mov	r3, r2
 8000d66:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8000d68:	8978      	ldrh	r0, [r7, #10]
 8000d6a:	89ba      	ldrh	r2, [r7, #12]
 8000d6c:	89f9      	ldrh	r1, [r7, #14]
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	8b3b      	ldrh	r3, [r7, #24]
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4806      	ldr	r0, [pc, #24]	; (8000d98 <I2C1_ReadReg+0x44>)
 8000d80:	f001 fe42 	bl	8002a08 <HAL_I2C_Mem_Read>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <I2C1_ReadReg+0x3a>
  {
    return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e000      	b.n	8000d90 <I2C1_ReadReg+0x3c>
  }

  return HAL_I2C_STATE_ERROR;
 8000d8e:	23e0      	movs	r3, #224	; 0xe0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	24000388 	.word	0x24000388

08000d9c <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af04      	add	r7, sp, #16
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	4603      	mov	r3, r0
 8000da6:	81fb      	strh	r3, [r7, #14]
 8000da8:	460b      	mov	r3, r1
 8000daa:	81bb      	strh	r3, [r7, #12]
 8000dac:	4613      	mov	r3, r2
 8000dae:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hi2c2, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8000db0:	8978      	ldrh	r0, [r7, #10]
 8000db2:	89ba      	ldrh	r2, [r7, #12]
 8000db4:	89f9      	ldrh	r1, [r7, #14]
 8000db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dba:	9302      	str	r3, [sp, #8]
 8000dbc:	8b3b      	ldrh	r3, [r7, #24]
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <I2C2_WriteReg+0x44>)
 8000dc8:	f001 fd0a 	bl	80027e0 <HAL_I2C_Mem_Write>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <I2C2_WriteReg+0x3a>
  {
    return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <I2C2_WriteReg+0x3c>
  }

  return HAL_I2C_STATE_ERROR;
 8000dd6:	23e0      	movs	r3, #224	; 0xe0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	240003d4 	.word	0x240003d4

08000de4 <I2C2_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af04      	add	r7, sp, #16
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	4603      	mov	r3, r0
 8000dee:	81fb      	strh	r3, [r7, #14]
 8000df0:	460b      	mov	r3, r1
 8000df2:	81bb      	strh	r3, [r7, #12]
 8000df4:	4613      	mov	r3, r2
 8000df6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8000df8:	8978      	ldrh	r0, [r7, #10]
 8000dfa:	89ba      	ldrh	r2, [r7, #12]
 8000dfc:	89f9      	ldrh	r1, [r7, #14]
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	9302      	str	r3, [sp, #8]
 8000e04:	8b3b      	ldrh	r3, [r7, #24]
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4806      	ldr	r0, [pc, #24]	; (8000e28 <I2C2_ReadReg+0x44>)
 8000e10:	f001 fdfa 	bl	8002a08 <HAL_I2C_Mem_Read>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <I2C2_ReadReg+0x3a>
  {
    return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <I2C2_ReadReg+0x3c>
  }

  return HAL_I2C_STATE_ERROR;
 8000e1e:	23e0      	movs	r3, #224	; 0xe0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	240003d4 	.word	0x240003d4

08000e2c <__io_putchar>:
#include "log.h"

PUTCHAR_PROTOTYPE
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e34:	1d39      	adds	r1, r7, #4
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <__io_putchar+0x20>)
 8000e3e:	f006 f9b5 	bl	80071ac <HAL_UART_Transmit>
  return ch;
 8000e42:	687b      	ldr	r3, [r7, #4]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	240004a0 	.word	0x240004a0

08000e50 <log_format>:

void log_format(const char* tag, const char* message, va_list args)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
	uint32_t time = HAL_GetTick();
 8000e5c:	f000 ffc0 	bl	8001de0 <HAL_GetTick>
 8000e60:	6178      	str	r0, [r7, #20]
	printf("%u [%s] ", (unsigned int)time, tag);
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	6979      	ldr	r1, [r7, #20]
 8000e66:	4807      	ldr	r0, [pc, #28]	; (8000e84 <log_format+0x34>)
 8000e68:	f008 f840 	bl	8008eec <iprintf>
	vprintf(message, args);
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	68b8      	ldr	r0, [r7, #8]
 8000e70:	f008 f86a 	bl	8008f48 <viprintf>
	printf("\n");
 8000e74:	200a      	movs	r0, #10
 8000e76:	f008 f851 	bl	8008f1c <putchar>
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	0800b060 	.word	0x0800b060

08000e88 <log_error>:

void log_error(const char* message, ...)
{
 8000e88:	b40f      	push	{r0, r1, r2, r3}
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	607b      	str	r3, [r7, #4]
	log_format("error", message, args);
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	6939      	ldr	r1, [r7, #16]
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <log_error+0x28>)
 8000e9c:	f7ff ffd8 	bl	8000e50 <log_format>
	va_end(args);
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eaa:	b004      	add	sp, #16
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	0800b06c 	.word	0x0800b06c

08000eb4 <log_info>:

void log_info(const char* message, ...)
{
 8000eb4:	b40f      	push	{r0, r1, r2, r3}
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	607b      	str	r3, [r7, #4]
	log_format("info", message, args);
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	6939      	ldr	r1, [r7, #16]
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <log_info+0x28>)
 8000ec8:	f7ff ffc2 	bl	8000e50 <log_format>
	va_end(args);
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ed6:	b004      	add	sp, #16
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	0800b074 	.word	0x0800b074

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f000 fef5 	bl	8001cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f8fd 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f7ff fd11 	bl	8000914 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ef2:	f000 fca7 	bl	8001844 <MX_USART1_UART_Init>
  MX_DCMI_Init();
 8000ef6:	f7ff fbe5 	bl	80006c4 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000efa:	f7ff fdab 	bl	8000a54 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000efe:	f7ff fdf7 	bl	8000af0 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000f02:	f000 f96f 	bl	80011e4 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */
  log_info("Main Init");
 8000f06:	4863      	ldr	r0, [pc, #396]	; (8001094 <main+0x1b4>)
 8000f08:	f7ff ffd4 	bl	8000eb4 <log_info>
  //EnableMemMapped();
  uint32_t id = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
  APS6408_Reset(&hospi1);
 8000f10:	4861      	ldr	r0, [pc, #388]	; (8001098 <main+0x1b8>)
 8000f12:	f000 fe53 	bl	8001bbc <APS6408_Reset>
  if (APS6408_ReadID(&hospi1, &id, APS6408_READ_LATENCY_7) != HAL_OK)
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2210      	movs	r2, #16
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	485e      	ldr	r0, [pc, #376]	; (8001098 <main+0x1b8>)
 8000f1e:	f000 fe26 	bl	8001b6e <APS6408_ReadID>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <main+0x50>
  {
	  log_error("Unable to read ID");
 8000f28:	485c      	ldr	r0, [pc, #368]	; (800109c <main+0x1bc>)
 8000f2a:	f7ff ffad 	bl	8000e88 <log_error>
 8000f2e:	e004      	b.n	8000f3a <main+0x5a>
  }
  else
  {
	  log_info("APS6048 ID:%d", id);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4619      	mov	r1, r3
 8000f34:	485a      	ldr	r0, [pc, #360]	; (80010a0 <main+0x1c0>)
 8000f36:	f7ff ffbd 	bl	8000eb4 <log_info>
  }

  if (APS6408_EnableMemoryMappedMode(&hospi1, APS6408_READ_LATENCY_7, APS6408_MR4_WLC_7, APS6408_MR8_BL_32_BYTES) != HAL_OK)
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	2220      	movs	r2, #32
 8000f3e:	2110      	movs	r1, #16
 8000f40:	4855      	ldr	r0, [pc, #340]	; (8001098 <main+0x1b8>)
 8000f42:	f000 fd5a 	bl	80019fa <APS6408_EnableMemoryMappedMode>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <main+0x72>
  {
	  log_error("Unable to start APS6408 memory mapped mode");
 8000f4c:	4855      	ldr	r0, [pc, #340]	; (80010a4 <main+0x1c4>)
 8000f4e:	f7ff ff9b 	bl	8000e88 <log_error>
  //DelayBlock_Calibration();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  INA236_setup(&INA33Bus, &i2c_bus_2, INA236_ADDR_1);
 8000f52:	2240      	movs	r2, #64	; 0x40
 8000f54:	4954      	ldr	r1, [pc, #336]	; (80010a8 <main+0x1c8>)
 8000f56:	4855      	ldr	r0, [pc, #340]	; (80010ac <main+0x1cc>)
 8000f58:	f000 fe73 	bl	8001c42 <INA236_setup>
  INA236_setup(&INA18Bus, &i2c_bus_2, INA236_ADDR_1);
 8000f5c:	2240      	movs	r2, #64	; 0x40
 8000f5e:	4952      	ldr	r1, [pc, #328]	; (80010a8 <main+0x1c8>)
 8000f60:	4853      	ldr	r0, [pc, #332]	; (80010b0 <main+0x1d0>)
 8000f62:	f000 fe6e 	bl	8001c42 <INA236_setup>
  PCA9543_setup(&i2c_switch, &i2c_bus_2, PCA9543_ADDR_1);
 8000f66:	2270      	movs	r2, #112	; 0x70
 8000f68:	494f      	ldr	r1, [pc, #316]	; (80010a8 <main+0x1c8>)
 8000f6a:	4852      	ldr	r0, [pc, #328]	; (80010b4 <main+0x1d4>)
 8000f6c:	f000 fe7c 	bl	8001c68 <PCA9543_setup>
  TMP117_setup(&temp_A, &i2c_bus_2, TMP117_ADDR_1);
 8000f70:	2248      	movs	r2, #72	; 0x48
 8000f72:	494d      	ldr	r1, [pc, #308]	; (80010a8 <main+0x1c8>)
 8000f74:	4850      	ldr	r0, [pc, #320]	; (80010b8 <main+0x1d8>)
 8000f76:	f007 fad3 	bl	8008520 <TMP117_setup>

  if (PCA9543_set_channel(&i2c_switch, PCA9543_CHANNEL_1) != HAL_OK)
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	484d      	ldr	r0, [pc, #308]	; (80010b4 <main+0x1d4>)
 8000f7e:	f000 fe86 	bl	8001c8e <PCA9543_set_channel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d002      	beq.n	8000f8e <main+0xae>
  {
	  log_error("Unable to set i2c switch channel");
 8000f88:	484c      	ldr	r0, [pc, #304]	; (80010bc <main+0x1dc>)
 8000f8a:	f7ff ff7d 	bl	8000e88 <log_error>
  if (HAL_I2C_IsDeviceReady(&hi2c2, PCA9543_ADDR_1, 2, 1000) != HAL_OK)
  {
	  log_error("Unable to communicate with i2c switch");
  } */

  if (HAL_I2C_IsDeviceReady(&hi2c2, TMP117_ADDR_1 << 1, 2, 1000) != HAL_OK)
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	2202      	movs	r2, #2
 8000f94:	2190      	movs	r1, #144	; 0x90
 8000f96:	484a      	ldr	r0, [pc, #296]	; (80010c0 <main+0x1e0>)
 8000f98:	f001 fe50 	bl	8002c3c <HAL_I2C_IsDeviceReady>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <main+0xca>
  {
	  log_error("Unable to communicate with TMP117_A");
 8000fa2:	4848      	ldr	r0, [pc, #288]	; (80010c4 <main+0x1e4>)
 8000fa4:	f7ff ff70 	bl	8000e88 <log_error>
 8000fa8:	e002      	b.n	8000fb0 <main+0xd0>
  }
  else {
	  log_info("TMP117_A Ready");
 8000faa:	4847      	ldr	r0, [pc, #284]	; (80010c8 <main+0x1e8>)
 8000fac:	f7ff ff82 	bl	8000eb4 <log_info>
  }

  if (HAL_I2C_IsDeviceReady(&hi2c1, 0b11010000, 2, 1000) != HAL_OK)
 8000fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	21d0      	movs	r1, #208	; 0xd0
 8000fb8:	4844      	ldr	r0, [pc, #272]	; (80010cc <main+0x1ec>)
 8000fba:	f001 fe3f 	bl	8002c3c <HAL_I2C_IsDeviceReady>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <main+0xec>
  {
	  log_error("Unable to communicate with ICM-20948");
 8000fc4:	4842      	ldr	r0, [pc, #264]	; (80010d0 <main+0x1f0>)
 8000fc6:	f7ff ff5f 	bl	8000e88 <log_error>
 8000fca:	e002      	b.n	8000fd2 <main+0xf2>
  }
  else {
	  log_info("ICM-20948 Ready");
 8000fcc:	4841      	ldr	r0, [pc, #260]	; (80010d4 <main+0x1f4>)
 8000fce:	f7ff ff71 	bl	8000eb4 <log_info>
  }

  __IO uint8_t *mem_addr;
  uint32_t address = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	float voltage = 0;
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
	float temperature_A = 0;
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	603b      	str	r3, [r7, #0]
	if (TMP117_read_temperature(&temp_A, &temperature_A) == HAL_OK) {
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4834      	ldr	r0, [pc, #208]	; (80010b8 <main+0x1d8>)
 8000fe8:	f007 faae 	bl	8008548 <TMP117_read_temperature>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d109      	bne.n	8001006 <main+0x126>
		log_info("Temperature A:%f", temperature_A);
 8000ff2:	edd7 7a00 	vldr	s15, [r7]
 8000ff6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ffa:	ec53 2b17 	vmov	r2, r3, d7
 8000ffe:	4836      	ldr	r0, [pc, #216]	; (80010d8 <main+0x1f8>)
 8001000:	f7ff ff58 	bl	8000eb4 <log_info>
 8001004:	e002      	b.n	800100c <main+0x12c>
	}
	else {
		log_error("Unable to get temp A");
 8001006:	4835      	ldr	r0, [pc, #212]	; (80010dc <main+0x1fc>)
 8001008:	f7ff ff3e 	bl	8000e88 <log_error>
	else {
	  log_error("Error getting 1.8v bus voltage");
	}
	*/

	mem_addr = (__IO uint8_t *)(OCTOSPI1_BASE + address);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f103 4310 	add.w	r3, r3, #2415919104	; 0x90000000
 8001012:	617b      	str	r3, [r7, #20]
	/*Writing 1Mbyte (256Byte BUFFERSIZE x 4096 times) */
	for (index2 = 0; index2 < EXTENDEDBUFFERSIZE/BUFFERSIZE; index2++)
 8001014:	2300      	movs	r3, #0
 8001016:	823b      	strh	r3, [r7, #16]
 8001018:	e013      	b.n	8001042 <main+0x162>
	{
		for (index1 = 0; index1 < BUFFERSIZE; index1++)
 800101a:	2300      	movs	r3, #0
 800101c:	827b      	strh	r3, [r7, #18]
 800101e:	e00a      	b.n	8001036 <main+0x156>
		{
			*mem_addr = aTxBuffer[index1];
 8001020:	8a7b      	ldrh	r3, [r7, #18]
 8001022:	4a2f      	ldr	r2, [pc, #188]	; (80010e0 <main+0x200>)
 8001024:	5cd2      	ldrb	r2, [r2, r3]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	701a      	strb	r2, [r3, #0]
			mem_addr++;
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3301      	adds	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
		for (index1 = 0; index1 < BUFFERSIZE; index1++)
 8001030:	8a7b      	ldrh	r3, [r7, #18]
 8001032:	3301      	adds	r3, #1
 8001034:	827b      	strh	r3, [r7, #18]
 8001036:	8a7b      	ldrh	r3, [r7, #18]
 8001038:	2bff      	cmp	r3, #255	; 0xff
 800103a:	d9f1      	bls.n	8001020 <main+0x140>
	for (index2 = 0; index2 < EXTENDEDBUFFERSIZE/BUFFERSIZE; index2++)
 800103c:	8a3b      	ldrh	r3, [r7, #16]
 800103e:	3301      	adds	r3, #1
 8001040:	823b      	strh	r3, [r7, #16]
 8001042:	8a3b      	ldrh	r3, [r7, #16]
 8001044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001048:	d3e7      	bcc.n	800101a <main+0x13a>
		}
	}
	/*----------------------------------------------------------------------*/
	/* Reading Sequence of 1Mbyte */
	mem_addr = (__IO uint8_t *)(OCTOSPI1_BASE + address);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f103 4310 	add.w	r3, r3, #2415919104	; 0x90000000
 8001050:	617b      	str	r3, [r7, #20]
	/*Reading 1Mbyte (256Byte BUFFERSIZE x 4096 times)*/
	for (index2 = 0; index2 < EXTENDEDBUFFERSIZE/BUFFERSIZE; index2++) {
 8001052:	2300      	movs	r3, #0
 8001054:	823b      	strh	r3, [r7, #16]
 8001056:	e010      	b.n	800107a <main+0x19a>
		for (index1 = 0; index1 < BUFFERSIZE; index1++)
 8001058:	2300      	movs	r3, #0
 800105a:	827b      	strh	r3, [r7, #18]
 800105c:	e007      	b.n	800106e <main+0x18e>
		{
			if (*mem_addr != aTxBuffer[index1])
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	781b      	ldrb	r3, [r3, #0]
			{
				/*if data read is corrupted we can toggle a led here: example blue led*/
				//log_error("Data Corrupt");
			}
				mem_addr++;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
		for (index1 = 0; index1 < BUFFERSIZE; index1++)
 8001068:	8a7b      	ldrh	r3, [r7, #18]
 800106a:	3301      	adds	r3, #1
 800106c:	827b      	strh	r3, [r7, #18]
 800106e:	8a7b      	ldrh	r3, [r7, #18]
 8001070:	2bff      	cmp	r3, #255	; 0xff
 8001072:	d9f4      	bls.n	800105e <main+0x17e>
	for (index2 = 0; index2 < EXTENDEDBUFFERSIZE/BUFFERSIZE; index2++) {
 8001074:	8a3b      	ldrh	r3, [r7, #16]
 8001076:	3301      	adds	r3, #1
 8001078:	823b      	strh	r3, [r7, #16]
 800107a:	8a3b      	ldrh	r3, [r7, #16]
 800107c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001080:	d3ea      	bcc.n	8001058 <main+0x178>
		}
	}
	/*if data read is correct we can toggle a led here: example green led*/
	log_info("PSRAM data transfer success");
 8001082:	4818      	ldr	r0, [pc, #96]	; (80010e4 <main+0x204>)
 8001084:	f7ff ff16 	bl	8000eb4 <log_info>

	HAL_Delay(1000);
 8001088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800108c:	f000 feb4 	bl	8001df8 <HAL_Delay>
  {
 8001090:	e7a1      	b.n	8000fd6 <main+0xf6>
 8001092:	bf00      	nop
 8001094:	0800b084 	.word	0x0800b084
 8001098:	24000440 	.word	0x24000440
 800109c:	0800b090 	.word	0x0800b090
 80010a0:	0800b0a4 	.word	0x0800b0a4
 80010a4:	0800b0b4 	.word	0x0800b0b4
 80010a8:	2400036c 	.word	0x2400036c
 80010ac:	24000420 	.word	0x24000420
 80010b0:	24000428 	.word	0x24000428
 80010b4:	24000438 	.word	0x24000438
 80010b8:	24000430 	.word	0x24000430
 80010bc:	0800b0e0 	.word	0x0800b0e0
 80010c0:	240003d4 	.word	0x240003d4
 80010c4:	0800b104 	.word	0x0800b104
 80010c8:	0800b128 	.word	0x0800b128
 80010cc:	24000388 	.word	0x24000388
 80010d0:	0800b138 	.word	0x0800b138
 80010d4:	0800b160 	.word	0x0800b160
 80010d8:	0800b170 	.word	0x0800b170
 80010dc:	0800b184 	.word	0x0800b184
 80010e0:	24000000 	.word	0x24000000
 80010e4:	0800b19c 	.word	0x0800b19c

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b09c      	sub	sp, #112	; 0x70
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f2:	224c      	movs	r2, #76	; 0x4c
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f007 faae 	bl	8008658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2220      	movs	r2, #32
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f007 faa8 	bl	8008658 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001108:	2002      	movs	r0, #2
 800110a:	f003 fd6f 	bl	8004bec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <SystemClock_Config+0xe8>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800111a:	4a2d      	ldr	r2, [pc, #180]	; (80011d0 <SystemClock_Config+0xe8>)
 800111c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001120:	6193      	str	r3, [r2, #24]
 8001122:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <SystemClock_Config+0xe8>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800112e:	bf00      	nop
 8001130:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <SystemClock_Config+0xe8>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800113c:	d1f8      	bne.n	8001130 <SystemClock_Config+0x48>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <SystemClock_Config+0xec>)
 8001140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001142:	4a24      	ldr	r2, [pc, #144]	; (80011d4 <SystemClock_Config+0xec>)
 8001144:	f023 0303 	bic.w	r3, r3, #3
 8001148:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114a:	2302      	movs	r3, #2
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800114e:	2301      	movs	r3, #1
 8001150:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001152:	2340      	movs	r3, #64	; 0x40
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001156:	2302      	movs	r3, #2
 8001158:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800115a:	2300      	movs	r3, #0
 800115c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800115e:	2304      	movs	r3, #4
 8001160:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001162:	2310      	movs	r3, #16
 8001164:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001166:	2301      	movs	r3, #1
 8001168:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800116a:	2302      	movs	r3, #2
 800116c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800116e:	2302      	movs	r3, #2
 8001170:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001172:	230c      	movs	r3, #12
 8001174:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001176:	2300      	movs	r3, #0
 8001178:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001182:	4618      	mov	r0, r3
 8001184:	f003 fd6c 	bl	8004c60 <HAL_RCC_OscConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800118e:	f000 f823 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001192:	233f      	movs	r3, #63	; 0x3f
 8001194:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001196:	2303      	movs	r3, #3
 8001198:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800119e:	2308      	movs	r3, #8
 80011a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011a2:	2340      	movs	r3, #64	; 0x40
 80011a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011a6:	2340      	movs	r3, #64	; 0x40
 80011a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80011b0:	2340      	movs	r3, #64	; 0x40
 80011b2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2102      	movs	r1, #2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f004 f8ff 	bl	80053bc <HAL_RCC_ClockConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80011c4:	f000 f808 	bl	80011d8 <Error_Handler>
  }
}
 80011c8:	bf00      	nop
 80011ca:	3770      	adds	r7, #112	; 0x70
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	58024800 	.word	0x58024800
 80011d4:	58024400 	.word	0x58024400

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <Error_Handler+0x8>
	...

080011e4 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
 80011f8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */
  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 80011fa:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <MX_OCTOSPI1_Init+0xc4>)
 80011fc:	4a2b      	ldr	r2, [pc, #172]	; (80012ac <MX_OCTOSPI1_Init+0xc8>)
 80011fe:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001200:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <MX_OCTOSPI1_Init+0xc4>)
 8001202:	2201      	movs	r2, #1
 8001204:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001206:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <MX_OCTOSPI1_Init+0xc4>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 800120c:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <MX_OCTOSPI1_Init+0xc4>)
 800120e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001212:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <MX_OCTOSPI1_Init+0xc4>)
 8001216:	2218      	movs	r2, #24
 8001218:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <MX_OCTOSPI1_Init+0xc4>)
 800121c:	2201      	movs	r2, #1
 800121e:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <MX_OCTOSPI1_Init+0xc4>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MX_OCTOSPI1_Init+0xc4>)
 8001228:	2200      	movs	r2, #0
 800122a:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <MX_OCTOSPI1_Init+0xc4>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_OCTOSPI1_Init+0xc4>)
 8001234:	2201      	movs	r2, #1
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_OCTOSPI1_Init+0xc4>)
 800123a:	2200      	movs	r2, #0
 800123c:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MX_OCTOSPI1_Init+0xc4>)
 8001240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 10;
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_OCTOSPI1_Init+0xc4>)
 8001248:	220a      	movs	r2, #10
 800124a:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_OCTOSPI1_Init+0xc4>)
 800124e:	2200      	movs	r2, #0
 8001250:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <MX_OCTOSPI1_Init+0xc4>)
 8001254:	2200      	movs	r2, #0
 8001256:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 400;
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <MX_OCTOSPI1_Init+0xc4>)
 800125a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800125e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001260:	4811      	ldr	r0, [pc, #68]	; (80012a8 <MX_OCTOSPI1_Init+0xc4>)
 8001262:	f002 f957 	bl	8003514 <HAL_OSPI_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_OCTOSPI1_Init+0x8c>
  {
    Error_Handler();
 800126c:	f7ff ffb4 	bl	80011d8 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 8001274:	2301      	movs	r3, #1
 8001276:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 8001278:	2301      	movs	r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 800127c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001280:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <MX_OCTOSPI1_Init+0xcc>)
 8001284:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	f241 3288 	movw	r2, #5000	; 0x1388
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <MX_OCTOSPI1_Init+0xc4>)
 8001290:	f002 fd1c 	bl	8003ccc <HAL_OSPIM_Config>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_OCTOSPI1_Init+0xba>
  {
    Error_Handler();
 800129a:	f7ff ff9d 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	24000440 	.word	0x24000440
 80012ac:	52005000 	.word	0x52005000
 80012b0:	01000001 	.word	0x01000001

080012b4 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0bc      	sub	sp, #240	; 0xf0
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d0:	22b4      	movs	r2, #180	; 0xb4
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f007 f9bf 	bl	8008658 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a8c      	ldr	r2, [pc, #560]	; (8001510 <HAL_OSPI_MspInit+0x25c>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	f040 8111 	bne.w	8001508 <HAL_OSPI_MspInit+0x254>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80012e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80012ec:	2304      	movs	r3, #4
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80012f0:	230c      	movs	r3, #12
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001300:	23c0      	movs	r3, #192	; 0xc0
 8001302:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001304:	2300      	movs	r3, #0
 8001306:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 800130c:	2320      	movs	r3, #32
 800130e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001310:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001314:	4618      	mov	r0, r3
 8001316:	f004 fbdd 	bl	8005ad4 <HAL_RCCEx_PeriphCLKConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_OSPI_MspInit+0x70>
    {
      Error_Handler();
 8001320:	f7ff ff5a 	bl	80011d8 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001324:	4b7b      	ldr	r3, [pc, #492]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 8001326:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800132a:	4a7a      	ldr	r2, [pc, #488]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 800132c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001330:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001334:	4b77      	ldr	r3, [pc, #476]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 8001336:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800133a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001342:	4b74      	ldr	r3, [pc, #464]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 8001344:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001348:	4a72      	ldr	r2, [pc, #456]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 800134a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001352:	4b70      	ldr	r3, [pc, #448]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 8001354:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135c:	623b      	str	r3, [r7, #32]
 800135e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001360:	4b6c      	ldr	r3, [pc, #432]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001366:	4a6b      	ldr	r2, [pc, #428]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 8001368:	f043 0320 	orr.w	r3, r3, #32
 800136c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001370:	4b68      	ldr	r3, [pc, #416]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001376:	f003 0320 	and.w	r3, r3, #32
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	4b65      	ldr	r3, [pc, #404]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001384:	4a63      	ldr	r2, [pc, #396]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138e:	4b61      	ldr	r3, [pc, #388]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 8001390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
 800139a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b5d      	ldr	r3, [pc, #372]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a2:	4a5c      	ldr	r2, [pc, #368]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ac:	4b59      	ldr	r3, [pc, #356]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ba:	4b56      	ldr	r3, [pc, #344]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c0:	4a54      	ldr	r2, [pc, #336]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 80013c2:	f043 0310 	orr.w	r3, r3, #16
 80013c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ca:	4b52      	ldr	r3, [pc, #328]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 80013cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d0:	f003 0310 	and.w	r3, r3, #16
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013d8:	4b4e      	ldr	r3, [pc, #312]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013de:	4a4d      	ldr	r2, [pc, #308]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 80013e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e8:	4b4a      	ldr	r3, [pc, #296]	; (8001514 <HAL_OSPI_MspInit+0x260>)
 80013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    PE7     ------> OCTOSPIM_P1_IO4
    PE8     ------> OCTOSPIM_P1_IO5
    PE10     ------> OCTOSPIM_P1_IO7
    PG6     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80013f6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80013fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001410:	230a      	movs	r3, #10
 8001412:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001416:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800141a:	4619      	mov	r1, r3
 800141c:	483e      	ldr	r0, [pc, #248]	; (8001518 <HAL_OSPI_MspInit+0x264>)
 800141e:	f000 fe99 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001426:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800143c:	2309      	movs	r3, #9
 800143e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001442:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001446:	4619      	mov	r1, r3
 8001448:	4833      	ldr	r0, [pc, #204]	; (8001518 <HAL_OSPI_MspInit+0x264>)
 800144a:	f000 fe83 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800144e:	2308      	movs	r3, #8
 8001450:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 8001466:	2304      	movs	r3, #4
 8001468:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001470:	4619      	mov	r1, r3
 8001472:	482a      	ldr	r0, [pc, #168]	; (800151c <HAL_OSPI_MspInit+0x268>)
 8001474:	f000 fe6e 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001478:	2302      	movs	r3, #2
 800147a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_OCTOSPIM_P1;
 8001490:	230c      	movs	r3, #12
 8001492:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800149a:	4619      	mov	r1, r3
 800149c:	4820      	ldr	r0, [pc, #128]	; (8001520 <HAL_OSPI_MspInit+0x26c>)
 800149e:	f000 fe59 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80014a2:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80014a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80014bc:	230a      	movs	r3, #10
 80014be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014c6:	4619      	mov	r1, r3
 80014c8:	4816      	ldr	r0, [pc, #88]	; (8001524 <HAL_OSPI_MspInit+0x270>)
 80014ca:	f000 fe43 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014ce:	2340      	movs	r3, #64	; 0x40
 80014d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80014e6:	230a      	movs	r3, #10
 80014e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014f0:	4619      	mov	r1, r3
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <HAL_OSPI_MspInit+0x274>)
 80014f4:	f000 fe2e 	bl	8002154 <HAL_GPIO_Init>

    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	205c      	movs	r0, #92	; 0x5c
 80014fe:	f000 fd7a 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8001502:	205c      	movs	r0, #92	; 0x5c
 8001504:	f000 fd91 	bl	800202a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8001508:	bf00      	nop
 800150a:	37f0      	adds	r7, #240	; 0xf0
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	52005000 	.word	0x52005000
 8001514:	58024400 	.word	0x58024400
 8001518:	58021400 	.word	0x58021400
 800151c:	58020800 	.word	0x58020800
 8001520:	58020000 	.word	0x58020000
 8001524:	58021000 	.word	0x58021000
 8001528:	58021800 	.word	0x58021800

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_MspInit+0x30>)
 8001534:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001538:	4a08      	ldr	r2, [pc, #32]	; (800155c <HAL_MspInit+0x30>)
 800153a:	f043 0302 	orr.w	r3, r3, #2
 800153e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_MspInit+0x30>)
 8001544:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	58024400 	.word	0x58024400

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <NMI_Handler+0x4>

08001566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <MemManage_Handler+0x4>

08001572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <UsageFault_Handler+0x4>

0800157e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ac:	f000 fc04 	bl	8001db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <OCTOSPI1_IRQHandler+0x10>)
 80015ba:	f002 f867 	bl	800368c <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	24000440 	.word	0x24000440

080015c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
	return 1;
 80015cc:	2301      	movs	r3, #1
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <_kill>:

int _kill(int pid, int sig)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015e2:	f007 f801 	bl	80085e8 <__errno>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2216      	movs	r2, #22
 80015ea:	601a      	str	r2, [r3, #0]
	return -1;
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <_exit>:

void _exit (int status)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ffe7 	bl	80015d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800160a:	e7fe      	b.n	800160a <_exit+0x12>

0800160c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	e00a      	b.n	8001634 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800161e:	f3af 8000 	nop.w
 8001622:	4601      	mov	r1, r0
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	60ba      	str	r2, [r7, #8]
 800162a:	b2ca      	uxtb	r2, r1
 800162c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3301      	adds	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	429a      	cmp	r2, r3
 800163a:	dbf0      	blt.n	800161e <_read+0x12>
	}

return len;
 800163c:	687b      	ldr	r3, [r7, #4]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b086      	sub	sp, #24
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	e009      	b.n	800166c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	60ba      	str	r2, [r7, #8]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fbe3 	bl	8000e2c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	429a      	cmp	r2, r3
 8001672:	dbf1      	blt.n	8001658 <_write+0x12>
	}
	return len;
 8001674:	687b      	ldr	r3, [r7, #4]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_close>:

int _close(int file)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
	return -1;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a6:	605a      	str	r2, [r3, #4]
	return 0;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <_isatty>:

int _isatty(int file)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
	return 1;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
	return 0;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <_sbrk+0x5c>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <_sbrk+0x60>)
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <_sbrk+0x64>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <_sbrk+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	429a      	cmp	r2, r3
 8001716:	d207      	bcs.n	8001728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001718:	f006 ff66 	bl	80085e8 <__errno>
 800171c:	4603      	mov	r3, r0
 800171e:	220c      	movs	r2, #12
 8001720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	e009      	b.n	800173c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <_sbrk+0x64>)
 8001738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	24050000 	.word	0x24050000
 8001748:	00000400 	.word	0x00000400
 800174c:	2400049c 	.word	0x2400049c
 8001750:	24000548 	.word	0x24000548

08001754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001758:	4b32      	ldr	r3, [pc, #200]	; (8001824 <SystemInit+0xd0>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175e:	4a31      	ldr	r2, [pc, #196]	; (8001824 <SystemInit+0xd0>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001768:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <SystemInit+0xd4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 030f 	and.w	r3, r3, #15
 8001770:	2b06      	cmp	r3, #6
 8001772:	d807      	bhi.n	8001784 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001774:	4b2c      	ldr	r3, [pc, #176]	; (8001828 <SystemInit+0xd4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 030f 	bic.w	r3, r3, #15
 800177c:	4a2a      	ldr	r2, [pc, #168]	; (8001828 <SystemInit+0xd4>)
 800177e:	f043 0307 	orr.w	r3, r3, #7
 8001782:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001784:	4b29      	ldr	r3, [pc, #164]	; (800182c <SystemInit+0xd8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a28      	ldr	r2, [pc, #160]	; (800182c <SystemInit+0xd8>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001790:	4b26      	ldr	r3, [pc, #152]	; (800182c <SystemInit+0xd8>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001796:	4b25      	ldr	r3, [pc, #148]	; (800182c <SystemInit+0xd8>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4924      	ldr	r1, [pc, #144]	; (800182c <SystemInit+0xd8>)
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <SystemInit+0xdc>)
 800179e:	4013      	ands	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017a2:	4b21      	ldr	r3, [pc, #132]	; (8001828 <SystemInit+0xd4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d007      	beq.n	80017be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <SystemInit+0xd4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 030f 	bic.w	r3, r3, #15
 80017b6:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <SystemInit+0xd4>)
 80017b8:	f043 0307 	orr.w	r3, r3, #7
 80017bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <SystemInit+0xd8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <SystemInit+0xd8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <SystemInit+0xd8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <SystemInit+0xd8>)
 80017d2:	4a18      	ldr	r2, [pc, #96]	; (8001834 <SystemInit+0xe0>)
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <SystemInit+0xd8>)
 80017d8:	4a17      	ldr	r2, [pc, #92]	; (8001838 <SystemInit+0xe4>)
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <SystemInit+0xd8>)
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <SystemInit+0xe8>)
 80017e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <SystemInit+0xd8>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <SystemInit+0xd8>)
 80017ea:	4a14      	ldr	r2, [pc, #80]	; (800183c <SystemInit+0xe8>)
 80017ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <SystemInit+0xd8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <SystemInit+0xd8>)
 80017f6:	4a11      	ldr	r2, [pc, #68]	; (800183c <SystemInit+0xe8>)
 80017f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <SystemInit+0xd8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <SystemInit+0xd8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a09      	ldr	r2, [pc, #36]	; (800182c <SystemInit+0xd8>)
 8001806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800180a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <SystemInit+0xd8>)
 800180e:	2200      	movs	r2, #0
 8001810:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <SystemInit+0xec>)
 8001814:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001818:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00
 8001828:	52002000 	.word	0x52002000
 800182c:	58024400 	.word	0x58024400
 8001830:	eaf6ed7f 	.word	0xeaf6ed7f
 8001834:	02020200 	.word	0x02020200
 8001838:	01ff0000 	.word	0x01ff0000
 800183c:	01010280 	.word	0x01010280
 8001840:	52004000 	.word	0x52004000

08001844 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 800184a:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <MX_USART1_UART_Init+0x94>)
 800184c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800184e:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 8001850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001856:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 800186a:	220c      	movs	r2, #12
 800186c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 800187c:	2200      	movs	r2, #0
 800187e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 8001882:	2200      	movs	r2, #0
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 8001888:	2200      	movs	r2, #0
 800188a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800188c:	4811      	ldr	r0, [pc, #68]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 800188e:	f005 fc3d 	bl	800710c <HAL_UART_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001898:	f7ff fc9e 	bl	80011d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800189c:	2100      	movs	r1, #0
 800189e:	480d      	ldr	r0, [pc, #52]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 80018a0:	f006 fd74 	bl	800838c <HAL_UARTEx_SetTxFifoThreshold>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80018aa:	f7ff fc95 	bl	80011d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ae:	2100      	movs	r1, #0
 80018b0:	4808      	ldr	r0, [pc, #32]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 80018b2:	f006 fda9 	bl	8008408 <HAL_UARTEx_SetRxFifoThreshold>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80018bc:	f7ff fc8c 	bl	80011d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <MX_USART1_UART_Init+0x90>)
 80018c2:	f006 fd2a 	bl	800831a <HAL_UARTEx_DisableFifoMode>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80018cc:	f7ff fc84 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	240004a0 	.word	0x240004a0
 80018d8:	40011000 	.word	0x40011000

080018dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b0b6      	sub	sp, #216	; 0xd8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	22b4      	movs	r2, #180	; 0xb4
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f006 feab 	bl	8008658 <memset>
  if(uartHandle->Instance==USART1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a25      	ldr	r2, [pc, #148]	; (800199c <HAL_UART_MspInit+0xc0>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d142      	bne.n	8001992 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800190c:	2301      	movs	r3, #1
 800190e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001910:	2300      	movs	r3, #0
 8001912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	4618      	mov	r0, r3
 800191c:	f004 f8da 	bl	8005ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001926:	f7ff fc57 	bl	80011d8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_UART_MspInit+0xc4>)
 800192c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001930:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <HAL_UART_MspInit+0xc4>)
 8001932:	f043 0310 	orr.w	r3, r3, #16
 8001936:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800193a:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_UART_MspInit+0xc4>)
 800193c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001940:	f003 0310 	and.w	r3, r3, #16
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_UART_MspInit+0xc4>)
 800194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194e:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <HAL_UART_MspInit+0xc4>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_UART_MspInit+0xc4>)
 800195a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001966:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800196a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001980:	2304      	movs	r3, #4
 8001982:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001986:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800198a:	4619      	mov	r1, r3
 800198c:	4805      	ldr	r0, [pc, #20]	; (80019a4 <HAL_UART_MspInit+0xc8>)
 800198e:	f000 fbe1 	bl	8002154 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001992:	bf00      	nop
 8001994:	37d8      	adds	r7, #216	; 0xd8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40011000 	.word	0x40011000
 80019a0:	58024400 	.word	0x58024400
 80019a4:	58020400 	.word	0x58020400

080019a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019ac:	f7ff fed2 	bl	8001754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b0:	480c      	ldr	r0, [pc, #48]	; (80019e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019b2:	490d      	ldr	r1, [pc, #52]	; (80019e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019c8:	4c0a      	ldr	r4, [pc, #40]	; (80019f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d6:	f006 fe0d 	bl	80085f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019da:	f7ff fa81 	bl	8000ee0 <main>
  bx  lr
 80019de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019e0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80019e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019e8:	240002e4 	.word	0x240002e4
  ldr r2, =_sidata
 80019ec:	0800b5dc 	.word	0x0800b5dc
  ldr r2, =_sbss
 80019f0:	240002e4 	.word	0x240002e4
  ldr r4, =_ebss
 80019f4:	24000544 	.word	0x24000544

080019f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC3_IRQHandler>

080019fa <APS6408_EnableMemoryMappedMode>:
  * @param  Ctx Component object pointer
  * @retval OSPI memory status
  */
int32_t APS6408_EnableMemoryMappedMode(OSPI_HandleTypeDef *Ctx, uint32_t ReadLatencyCode, uint32_t WriteLatencyCode,
                                       uint32_t BurstType)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b09a      	sub	sp, #104	; 0x68
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	603b      	str	r3, [r7, #0]
  OSPI_RegularCmdTypeDef   sCommand;
  OSPI_MemoryMappedTypeDef sMemMappedCfg;

  /* Initialize the write command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	61bb      	str	r3, [r7, #24]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8001a10:	2304      	movs	r3, #4
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction        = (BurstType == 0U) ? APS6408_WRITE_LINEAR_BURST_CMD : APS6408_WRITE_CMD;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <APS6408_EnableMemoryMappedMode+0x2c>
 8001a22:	23a0      	movs	r3, #160	; 0xa0
 8001a24:	e000      	b.n	8001a28 <APS6408_EnableMemoryMappedMode+0x2e>
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8001a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a2e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8001a30:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a34:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8001a36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode           = HAL_OSPI_DATA_8_LINES;
 8001a40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a44:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8001a46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a4a:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = WriteLatencyCode;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8001a50:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a54:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001a56:	2300      	movs	r3, #0
 8001a58:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_OSPI_Command(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a5a:	f107 0318 	add.w	r3, r7, #24
 8001a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a62:	4619      	mov	r1, r3
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f001 ff53 	bl	8003910 <HAL_OSPI_Command>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <APS6408_EnableMemoryMappedMode+0x7c>
  {
    return APS6408_ERROR;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
 8001a74:	e024      	b.n	8001ac0 <APS6408_EnableMemoryMappedMode+0xc6>
  }

  /* Initialize the read command */
  sCommand.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
 8001a76:	2301      	movs	r3, #1
 8001a78:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction   = APS6408_READ_CMD;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
  sCommand.DummyCycles   = ReadLatencyCode;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a82:	f107 0318 	add.w	r3, r7, #24
 8001a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f001 ff3f 	bl	8003910 <HAL_OSPI_Command>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <APS6408_EnableMemoryMappedMode+0xa4>
  {
    return APS6408_ERROR;
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9c:	e010      	b.n	8001ac0 <APS6408_EnableMemoryMappedMode+0xc6>
  }

  /* OctoSPI activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_ENABLE;
 8001a9e:	2308      	movs	r3, #8
 8001aa0:	613b      	str	r3, [r7, #16]
  sMemMappedCfg.TimeOutPeriod     = 0x34U;
 8001aa2:	2334      	movs	r3, #52	; 0x34
 8001aa4:	617b      	str	r3, [r7, #20]

  if (HAL_OSPI_MemoryMapped(Ctx, &sMemMappedCfg) != HAL_OK)
 8001aa6:	f107 0310 	add.w	r3, r7, #16
 8001aaa:	4619      	mov	r1, r3
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f002 f85f 	bl	8003b70 <HAL_OSPI_MemoryMapped>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <APS6408_EnableMemoryMappedMode+0xc4>
  {
    return APS6408_ERROR;
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8001abc:	e000      	b.n	8001ac0 <APS6408_EnableMemoryMappedMode+0xc6>
  }

  return APS6408_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3768      	adds	r7, #104	; 0x68
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <APS6408_ReadReg>:
  * @param  Value Register value pointer
  * @param  LatencyCode Latency used for the access
  * @retval error status
  */
int32_t APS6408_ReadReg(OSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t *Value, uint32_t LatencyCode)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b098      	sub	sp, #96	; 0x60
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand = {0};
 8001ad6:	f107 0310 	add.w	r3, r7, #16
 8001ada:	2250      	movs	r2, #80	; 0x50
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f006 fdba 	bl	8008658 <memset>

  /* Initialize the read register command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = APS6408_READ_REG_CMD;
 8001af4:	2340      	movs	r3, #64	; 0x40
 8001af6:	61bb      	str	r3, [r7, #24]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8001af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8001afe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8001b04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.Address            = Address;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_8_LINES;
 8001b12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b16:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8001b18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b1c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.NbData             = 2;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DummyCycles        = LatencyCode;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8001b26:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b2a:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_OSPI_Command(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b38:	4619      	mov	r1, r3
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f001 fee8 	bl	8003910 <HAL_OSPI_Command>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <APS6408_ReadReg+0x84>
  {
    return APS6408_ERROR;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	e00c      	b.n	8001b66 <APS6408_ReadReg+0x9e>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, (uint8_t *)Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f001 ff69 	bl	8003a2a <HAL_OSPI_Receive>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <APS6408_ReadReg+0x9c>
  {
    return APS6408_ERROR;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e000      	b.n	8001b66 <APS6408_ReadReg+0x9e>
  }

  return APS6408_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3760      	adds	r7, #96	; 0x60
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <APS6408_ReadID>:
  * @param  ID IDs pointer (2 * 8-bits value)
  * @param  LatencyCode Latency used for the access
  * @retval error status
  */
int32_t APS6408_ReadID(OSPI_HandleTypeDef *Ctx, uint8_t *ID, uint32_t LatencyCode)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
  /* Read the Mode Register 1 and 2 */
  if (APS6408_ReadReg(Ctx, APS6408_MR1_ADDRESS, ID, LatencyCode) != APS6408_OK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	2101      	movs	r1, #1
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f7ff ffa1 	bl	8001ac8 <APS6408_ReadReg>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <APS6408_ReadID+0x24>
  {
    return APS6408_ERROR;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b90:	e010      	b.n	8001bb4 <APS6408_ReadID+0x46>
  }

  /* Keep only Vendor ID from Mode Register 1 */
  *ID &= (APS6408_MR1_VENDOR_ID);
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	701a      	strb	r2, [r3, #0]

  /* Keep only Device ID and Device Density from Mode Register 2 */
  *(ID + 1) &= (APS6408_MR2_DEVICE_ID | APS6408_MR2_DENSITY);
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	781a      	ldrb	r2, [r3, #0]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	f002 021f 	and.w	r2, r2, #31
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]

  return APS6408_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <APS6408_Reset>:
  * @brief  Reset the memory
  * @param  Ctx Component object pointer
  * @retval error status
  */
int32_t APS6408_Reset(OSPI_HandleTypeDef *Ctx)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b096      	sub	sp, #88	; 0x58
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand = {0};
 8001bc4:	f107 0308 	add.w	r3, r7, #8
 8001bc8:	2250      	movs	r2, #80	; 0x50
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f006 fd43 	bl	8008658 <memset>

  /* Initialize the command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
  sCommand.Instruction        = APS6408_RESET_CMD;
 8001be6:	23ff      	movs	r3, #255	; 0xff
 8001be8:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8001bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8001bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Address            = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.NbData             = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles        = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001c12:	2300      	movs	r3, #0
 8001c14:	657b      	str	r3, [r7, #84]	; 0x54

  /* Configure the command */
  if (HAL_OSPI_Command(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c16:	f107 0308 	add.w	r3, r7, #8
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	4619      	mov	r1, r3
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f001 fe75 	bl	8003910 <HAL_OSPI_Command>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <APS6408_Reset+0x76>
  {
    return APS6408_ERROR;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c30:	e003      	b.n	8001c3a <APS6408_Reset+0x7e>
  }

  /* Need to wait tRST */
  HAL_Delay(1);
 8001c32:	2001      	movs	r0, #1
 8001c34:	f000 f8e0 	bl	8001df8 <HAL_Delay>

  return APS6408_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3758      	adds	r7, #88	; 0x58
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <INA236_setup>:
 *      Author: Kieran Shanley
 */
#include "INA236.h"

void INA236_setup(INA236_dev * dev, I2C_Bus * bus, uint8_t addr)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b085      	sub	sp, #20
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	71fb      	strb	r3, [r7, #7]
	dev->addr = addr;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	79fa      	ldrb	r2, [r7, #7]
 8001c54:	711a      	strb	r2, [r3, #4]
	dev->bus = bus;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	601a      	str	r2, [r3, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <PCA9543_setup>:
 *      Author: Kieran Shanley
 */
#include "PCA9543.h"

void PCA9543_setup(PCA9543_dev * dev, I2C_Bus * bus, uint8_t addr)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	4613      	mov	r3, r2
 8001c74:	71fb      	strb	r3, [r7, #7]
	dev->addr = addr;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	79fa      	ldrb	r2, [r7, #7]
 8001c7a:	711a      	strb	r2, [r3, #4]
	dev->bus = bus;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	601a      	str	r2, [r3, #0]
}
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <PCA9543_set_channel>:

int32_t PCA9543_set_channel(PCA9543_dev * dev, uint8_t channel)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af02      	add	r7, sp, #8
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	70fb      	strb	r3, [r7, #3]
	uint8_t data = channel;
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	73bb      	strb	r3, [r7, #14]
	uint8_t addr = dev->addr << 1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	791b      	ldrb	r3, [r3, #4]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Master_Transmit(dev->bus->I2C_Handle, addr, &data, 1, 1000) == HAL_OK) {
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	b299      	uxth	r1, r3
 8001cb0:	f107 020e 	add.w	r2, r7, #14
 8001cb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2301      	movs	r3, #1
 8001cbc:	f000 fc9c 	bl	80025f8 <HAL_I2C_Master_Transmit>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <PCA9543_set_channel+0x3c>
		return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e000      	b.n	8001ccc <PCA9543_set_channel+0x3e>
	}

	return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cda:	2003      	movs	r0, #3
 8001cdc:	f000 f980 	bl	8001fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ce0:	f003 fd22 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_Init+0x68>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	4913      	ldr	r1, [pc, #76]	; (8001d40 <HAL_Init+0x6c>)
 8001cf2:	5ccb      	ldrb	r3, [r1, r3]
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_Init+0x68>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <HAL_Init+0x6c>)
 8001d08:	5cd3      	ldrb	r3, [r2, r3]
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
 8001d14:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <HAL_Init+0x70>)
 8001d16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <HAL_Init+0x74>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d1e:	200f      	movs	r0, #15
 8001d20:	f000 f814 	bl	8001d4c <HAL_InitTick>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e002      	b.n	8001d34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2e:	f7ff fbfd 	bl	800152c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	58024400 	.word	0x58024400
 8001d40:	0800b1b8 	.word	0x0800b1b8
 8001d44:	24000108 	.word	0x24000108
 8001d48:	24000104 	.word	0x24000104

08001d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_InitTick+0x60>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e021      	b.n	8001da4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <HAL_InitTick+0x64>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <HAL_InitTick+0x60>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f965 	bl	8002046 <HAL_SYSTICK_Config>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00e      	b.n	8001da4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b0f      	cmp	r3, #15
 8001d8a:	d80a      	bhi.n	8001da2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f000 f92f 	bl	8001ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d98:	4a06      	ldr	r2, [pc, #24]	; (8001db4 <HAL_InitTick+0x68>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	24000110 	.word	0x24000110
 8001db0:	24000104 	.word	0x24000104
 8001db4:	2400010c 	.word	0x2400010c

08001db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_IncTick+0x20>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_IncTick+0x24>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_IncTick+0x24>)
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	24000110 	.word	0x24000110
 8001ddc:	24000530 	.word	0x24000530

08001de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return uwTick;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_GetTick+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	24000530 	.word	0x24000530

08001df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e00:	f7ff ffee 	bl	8001de0 <HAL_GetTick>
 8001e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e10:	d005      	beq.n	8001e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_Delay+0x44>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e1e:	bf00      	nop
 8001e20:	f7ff ffde 	bl	8001de0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d8f7      	bhi.n	8001e20 <HAL_Delay+0x28>
  {
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	24000110 	.word	0x24000110

08001e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <__NVIC_SetPriorityGrouping+0x40>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6e:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <__NVIC_SetPriorityGrouping+0x40>)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	60d3      	str	r3, [r2, #12]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00
 8001e84:	05fa0000 	.word	0x05fa0000

08001e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	f003 0307 	and.w	r3, r3, #7
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001eae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	db0b      	blt.n	8001ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	f003 021f 	and.w	r2, r3, #31
 8001ebc:	4907      	ldr	r1, [pc, #28]	; (8001edc <__NVIC_EnableIRQ+0x38>)
 8001ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000e100 	.word	0xe000e100

08001ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	6039      	str	r1, [r7, #0]
 8001eea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001eec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	db0a      	blt.n	8001f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	490c      	ldr	r1, [pc, #48]	; (8001f2c <__NVIC_SetPriority+0x4c>)
 8001efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	440b      	add	r3, r1
 8001f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f08:	e00a      	b.n	8001f20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4908      	ldr	r1, [pc, #32]	; (8001f30 <__NVIC_SetPriority+0x50>)
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3b04      	subs	r3, #4
 8001f18:	0112      	lsls	r2, r2, #4
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	761a      	strb	r2, [r3, #24]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	; 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f1c3 0307 	rsb	r3, r3, #7
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	bf28      	it	cs
 8001f52:	2304      	movcs	r3, #4
 8001f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d902      	bls.n	8001f64 <NVIC_EncodePriority+0x30>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3b03      	subs	r3, #3
 8001f62:	e000      	b.n	8001f66 <NVIC_EncodePriority+0x32>
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	43d9      	mvns	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	4313      	orrs	r3, r2
         );
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	; 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fac:	d301      	bcc.n	8001fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00f      	b.n	8001fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <SysTick_Config+0x40>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fba:	210f      	movs	r1, #15
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f7ff ff8e 	bl	8001ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <SysTick_Config+0x40>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <SysTick_Config+0x40>)
 8001fcc:	2207      	movs	r2, #7
 8001fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	e000e010 	.word	0xe000e010

08001fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff29 	bl	8001e40 <__NVIC_SetPriorityGrouping>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002004:	f7ff ff40 	bl	8001e88 <__NVIC_GetPriorityGrouping>
 8002008:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	6978      	ldr	r0, [r7, #20]
 8002010:	f7ff ff90 	bl	8001f34 <NVIC_EncodePriority>
 8002014:	4602      	mov	r2, r0
 8002016:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff5f 	bl	8001ee0 <__NVIC_SetPriority>
}
 8002022:	bf00      	nop
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002034:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff33 	bl	8001ea4 <__NVIC_EnableIRQ>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ffa4 	bl	8001f9c <SysTick_Config>
 8002054:	4603      	mov	r3, r0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e069      	b.n	8002146 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d102      	bne.n	8002084 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe fb56 	bl	8000730 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2202      	movs	r2, #2
 8002088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6819      	ldr	r1, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <HAL_DCMI_Init+0xf0>)
 80020a6:	400b      	ands	r3, r1
 80020a8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6819      	ldr	r1, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80020be:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80020ca:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80020d6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80020e2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80020ee:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b10      	cmp	r3, #16
 80020fe:	d112      	bne.n	8002126 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7f1b      	ldrb	r3, [r3, #28]
 8002104:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	7f5b      	ldrb	r3, [r3, #29]
 800210a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800210c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7f9b      	ldrb	r3, [r3, #30]
 8002112:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002114:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	7fdb      	ldrb	r3, [r3, #31]
 800211c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002122:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002124:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 021e 	orr.w	r2, r2, #30
 8002134:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	ffe0f007 	.word	0xffe0f007

08002154 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	; 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002162:	4b86      	ldr	r3, [pc, #536]	; (800237c <HAL_GPIO_Init+0x228>)
 8002164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002166:	e18c      	b.n	8002482 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 817e 	beq.w	800247c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d005      	beq.n	8002198 <HAL_GPIO_Init+0x44>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d130      	bne.n	80021fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ce:	2201      	movs	r2, #1
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	f003 0201 	and.w	r2, r3, #1
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b03      	cmp	r3, #3
 8002204:	d017      	beq.n	8002236 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2203      	movs	r2, #3
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d123      	bne.n	800228a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	08da      	lsrs	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3208      	adds	r2, #8
 800224a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	08da      	lsrs	r2, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3208      	adds	r2, #8
 8002284:	69b9      	ldr	r1, [r7, #24]
 8002286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0203 	and.w	r2, r3, #3
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 80d8 	beq.w	800247c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022cc:	4b2c      	ldr	r3, [pc, #176]	; (8002380 <HAL_GPIO_Init+0x22c>)
 80022ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022d2:	4a2b      	ldr	r2, [pc, #172]	; (8002380 <HAL_GPIO_Init+0x22c>)
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022dc:	4b28      	ldr	r3, [pc, #160]	; (8002380 <HAL_GPIO_Init+0x22c>)
 80022de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ea:	4a26      	ldr	r2, [pc, #152]	; (8002384 <HAL_GPIO_Init+0x230>)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3302      	adds	r3, #2
 80022f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	220f      	movs	r2, #15
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a1d      	ldr	r2, [pc, #116]	; (8002388 <HAL_GPIO_Init+0x234>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d04a      	beq.n	80023ac <HAL_GPIO_Init+0x258>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a1c      	ldr	r2, [pc, #112]	; (800238c <HAL_GPIO_Init+0x238>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d02b      	beq.n	8002376 <HAL_GPIO_Init+0x222>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a1b      	ldr	r2, [pc, #108]	; (8002390 <HAL_GPIO_Init+0x23c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d025      	beq.n	8002372 <HAL_GPIO_Init+0x21e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a1a      	ldr	r2, [pc, #104]	; (8002394 <HAL_GPIO_Init+0x240>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d01f      	beq.n	800236e <HAL_GPIO_Init+0x21a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a19      	ldr	r2, [pc, #100]	; (8002398 <HAL_GPIO_Init+0x244>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d019      	beq.n	800236a <HAL_GPIO_Init+0x216>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a18      	ldr	r2, [pc, #96]	; (800239c <HAL_GPIO_Init+0x248>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d013      	beq.n	8002366 <HAL_GPIO_Init+0x212>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a17      	ldr	r2, [pc, #92]	; (80023a0 <HAL_GPIO_Init+0x24c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00d      	beq.n	8002362 <HAL_GPIO_Init+0x20e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a16      	ldr	r2, [pc, #88]	; (80023a4 <HAL_GPIO_Init+0x250>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d007      	beq.n	800235e <HAL_GPIO_Init+0x20a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <HAL_GPIO_Init+0x254>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d101      	bne.n	800235a <HAL_GPIO_Init+0x206>
 8002356:	2309      	movs	r3, #9
 8002358:	e029      	b.n	80023ae <HAL_GPIO_Init+0x25a>
 800235a:	230a      	movs	r3, #10
 800235c:	e027      	b.n	80023ae <HAL_GPIO_Init+0x25a>
 800235e:	2307      	movs	r3, #7
 8002360:	e025      	b.n	80023ae <HAL_GPIO_Init+0x25a>
 8002362:	2306      	movs	r3, #6
 8002364:	e023      	b.n	80023ae <HAL_GPIO_Init+0x25a>
 8002366:	2305      	movs	r3, #5
 8002368:	e021      	b.n	80023ae <HAL_GPIO_Init+0x25a>
 800236a:	2304      	movs	r3, #4
 800236c:	e01f      	b.n	80023ae <HAL_GPIO_Init+0x25a>
 800236e:	2303      	movs	r3, #3
 8002370:	e01d      	b.n	80023ae <HAL_GPIO_Init+0x25a>
 8002372:	2302      	movs	r3, #2
 8002374:	e01b      	b.n	80023ae <HAL_GPIO_Init+0x25a>
 8002376:	2301      	movs	r3, #1
 8002378:	e019      	b.n	80023ae <HAL_GPIO_Init+0x25a>
 800237a:	bf00      	nop
 800237c:	58000080 	.word	0x58000080
 8002380:	58024400 	.word	0x58024400
 8002384:	58000400 	.word	0x58000400
 8002388:	58020000 	.word	0x58020000
 800238c:	58020400 	.word	0x58020400
 8002390:	58020800 	.word	0x58020800
 8002394:	58020c00 	.word	0x58020c00
 8002398:	58021000 	.word	0x58021000
 800239c:	58021400 	.word	0x58021400
 80023a0:	58021800 	.word	0x58021800
 80023a4:	58021c00 	.word	0x58021c00
 80023a8:	58022400 	.word	0x58022400
 80023ac:	2300      	movs	r3, #0
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	f002 0203 	and.w	r2, r2, #3
 80023b4:	0092      	lsls	r2, r2, #2
 80023b6:	4093      	lsls	r3, r2
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023be:	4938      	ldr	r1, [pc, #224]	; (80024a0 <HAL_GPIO_Init+0x34c>)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3302      	adds	r3, #2
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80023f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002420:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	3301      	adds	r3, #1
 8002480:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	f47f ae6b 	bne.w	8002168 <HAL_GPIO_Init+0x14>
  }
}
 8002492:	bf00      	nop
 8002494:	bf00      	nop
 8002496:	3724      	adds	r7, #36	; 0x24
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	58000400 	.word	0x58000400

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80024c0:	e003      	b.n	80024ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	041a      	lsls	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	619a      	str	r2, [r3, #24]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e07f      	b.n	80025ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7fe fb44 	bl	8000b8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2224      	movs	r2, #36	; 0x24
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002528:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002538:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d107      	bne.n	8002552 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	e006      	b.n	8002560 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800255e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d104      	bne.n	8002572 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002570:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <HAL_I2C_Init+0x11c>)
 800257e:	430b      	orrs	r3, r1
 8002580:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002590:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691a      	ldr	r2, [r3, #16]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69d9      	ldr	r1, [r3, #28]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1a      	ldr	r2, [r3, #32]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2220      	movs	r2, #32
 80025d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	02008000 	.word	0x02008000

080025f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	461a      	mov	r2, r3
 8002604:	460b      	mov	r3, r1
 8002606:	817b      	strh	r3, [r7, #10]
 8002608:	4613      	mov	r3, r2
 800260a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b20      	cmp	r3, #32
 8002616:	f040 80da 	bne.w	80027ce <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_I2C_Master_Transmit+0x30>
 8002624:	2302      	movs	r3, #2
 8002626:	e0d3      	b.n	80027d0 <HAL_I2C_Master_Transmit+0x1d8>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002630:	f7ff fbd6 	bl	8001de0 <HAL_GetTick>
 8002634:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	2319      	movs	r3, #25
 800263c:	2201      	movs	r2, #1
 800263e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fcce 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e0be      	b.n	80027d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2221      	movs	r2, #33	; 0x21
 8002656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2210      	movs	r2, #16
 800265e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	893a      	ldrh	r2, [r7, #8]
 8002672:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	2bff      	cmp	r3, #255	; 0xff
 8002682:	d90e      	bls.n	80026a2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	22ff      	movs	r2, #255	; 0xff
 8002688:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268e:	b2da      	uxtb	r2, r3
 8002690:	8979      	ldrh	r1, [r7, #10]
 8002692:	4b51      	ldr	r3, [pc, #324]	; (80027d8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fe4a 	bl	8003334 <I2C_TransferConfig>
 80026a0:	e06c      	b.n	800277c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	8979      	ldrh	r1, [r7, #10]
 80026b4:	4b48      	ldr	r3, [pc, #288]	; (80027d8 <HAL_I2C_Master_Transmit+0x1e0>)
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 fe39 	bl	8003334 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80026c2:	e05b      	b.n	800277c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	6a39      	ldr	r1, [r7, #32]
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 fccb 	bl	8003064 <I2C_WaitOnTXISFlagUntilTimeout>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e07b      	b.n	80027d0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	781a      	ldrb	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d034      	beq.n	800277c <HAL_I2C_Master_Transmit+0x184>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002716:	2b00      	cmp	r3, #0
 8002718:	d130      	bne.n	800277c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	2200      	movs	r2, #0
 8002722:	2180      	movs	r1, #128	; 0x80
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fc5d 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e04d      	b.n	80027d0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	2bff      	cmp	r3, #255	; 0xff
 800273c:	d90e      	bls.n	800275c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	22ff      	movs	r2, #255	; 0xff
 8002742:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	b2da      	uxtb	r2, r3
 800274a:	8979      	ldrh	r1, [r7, #10]
 800274c:	2300      	movs	r3, #0
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fded 	bl	8003334 <I2C_TransferConfig>
 800275a:	e00f      	b.n	800277c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276a:	b2da      	uxtb	r2, r3
 800276c:	8979      	ldrh	r1, [r7, #10]
 800276e:	2300      	movs	r3, #0
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 fddc 	bl	8003334 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d19e      	bne.n	80026c4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	6a39      	ldr	r1, [r7, #32]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 fcaa 	bl	80030e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e01a      	b.n	80027d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2220      	movs	r2, #32
 80027a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_I2C_Master_Transmit+0x1e4>)
 80027ae:	400b      	ands	r3, r1
 80027b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	e000      	b.n	80027d0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80027ce:	2302      	movs	r3, #2
  }
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	80002000 	.word	0x80002000
 80027dc:	fe00e800 	.word	0xfe00e800

080027e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	4608      	mov	r0, r1
 80027ea:	4611      	mov	r1, r2
 80027ec:	461a      	mov	r2, r3
 80027ee:	4603      	mov	r3, r0
 80027f0:	817b      	strh	r3, [r7, #10]
 80027f2:	460b      	mov	r3, r1
 80027f4:	813b      	strh	r3, [r7, #8]
 80027f6:	4613      	mov	r3, r2
 80027f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b20      	cmp	r3, #32
 8002804:	f040 80f9 	bne.w	80029fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <HAL_I2C_Mem_Write+0x34>
 800280e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002810:	2b00      	cmp	r3, #0
 8002812:	d105      	bne.n	8002820 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800281a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0ed      	b.n	80029fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_I2C_Mem_Write+0x4e>
 800282a:	2302      	movs	r3, #2
 800282c:	e0e6      	b.n	80029fc <HAL_I2C_Mem_Write+0x21c>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002836:	f7ff fad3 	bl	8001de0 <HAL_GetTick>
 800283a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2319      	movs	r3, #25
 8002842:	2201      	movs	r2, #1
 8002844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fbcb 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0d1      	b.n	80029fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2221      	movs	r2, #33	; 0x21
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2240      	movs	r2, #64	; 0x40
 8002864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a3a      	ldr	r2, [r7, #32]
 8002872:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002878:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002880:	88f8      	ldrh	r0, [r7, #6]
 8002882:	893a      	ldrh	r2, [r7, #8]
 8002884:	8979      	ldrh	r1, [r7, #10]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	4603      	mov	r3, r0
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 fadb 	bl	8002e4c <I2C_RequestMemoryWrite>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0a9      	b.n	80029fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2bff      	cmp	r3, #255	; 0xff
 80028b0:	d90e      	bls.n	80028d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	22ff      	movs	r2, #255	; 0xff
 80028b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	8979      	ldrh	r1, [r7, #10]
 80028c0:	2300      	movs	r3, #0
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 fd33 	bl	8003334 <I2C_TransferConfig>
 80028ce:	e00f      	b.n	80028f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	8979      	ldrh	r1, [r7, #10]
 80028e2:	2300      	movs	r3, #0
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fd22 	bl	8003334 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 fbb5 	bl	8003064 <I2C_WaitOnTXISFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e07b      	b.n	80029fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d034      	beq.n	80029a8 <HAL_I2C_Mem_Write+0x1c8>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002942:	2b00      	cmp	r3, #0
 8002944:	d130      	bne.n	80029a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	2200      	movs	r2, #0
 800294e:	2180      	movs	r1, #128	; 0x80
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 fb47 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e04d      	b.n	80029fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	2bff      	cmp	r3, #255	; 0xff
 8002968:	d90e      	bls.n	8002988 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	22ff      	movs	r2, #255	; 0xff
 800296e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	b2da      	uxtb	r2, r3
 8002976:	8979      	ldrh	r1, [r7, #10]
 8002978:	2300      	movs	r3, #0
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 fcd7 	bl	8003334 <I2C_TransferConfig>
 8002986:	e00f      	b.n	80029a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002996:	b2da      	uxtb	r2, r3
 8002998:	8979      	ldrh	r1, [r7, #10]
 800299a:	2300      	movs	r3, #0
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fcc6 	bl	8003334 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d19e      	bne.n	80028f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 fb94 	bl	80030e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e01a      	b.n	80029fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2220      	movs	r2, #32
 80029cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6859      	ldr	r1, [r3, #4]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <HAL_I2C_Mem_Write+0x224>)
 80029da:	400b      	ands	r3, r1
 80029dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e000      	b.n	80029fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80029fa:	2302      	movs	r3, #2
  }
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	fe00e800 	.word	0xfe00e800

08002a08 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	4608      	mov	r0, r1
 8002a12:	4611      	mov	r1, r2
 8002a14:	461a      	mov	r2, r3
 8002a16:	4603      	mov	r3, r0
 8002a18:	817b      	strh	r3, [r7, #10]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	813b      	strh	r3, [r7, #8]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b20      	cmp	r3, #32
 8002a2c:	f040 80fd 	bne.w	8002c2a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <HAL_I2C_Mem_Read+0x34>
 8002a36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0f1      	b.n	8002c2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_I2C_Mem_Read+0x4e>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e0ea      	b.n	8002c2c <HAL_I2C_Mem_Read+0x224>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a5e:	f7ff f9bf 	bl	8001de0 <HAL_GetTick>
 8002a62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2319      	movs	r3, #25
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 fab7 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0d5      	b.n	8002c2c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2222      	movs	r2, #34	; 0x22
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2240      	movs	r2, #64	; 0x40
 8002a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a3a      	ldr	r2, [r7, #32]
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aa8:	88f8      	ldrh	r0, [r7, #6]
 8002aaa:	893a      	ldrh	r2, [r7, #8]
 8002aac:	8979      	ldrh	r1, [r7, #10]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 fa1b 	bl	8002ef4 <I2C_RequestMemoryRead>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0ad      	b.n	8002c2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2bff      	cmp	r3, #255	; 0xff
 8002ad8:	d90e      	bls.n	8002af8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	22ff      	movs	r2, #255	; 0xff
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	8979      	ldrh	r1, [r7, #10]
 8002ae8:	4b52      	ldr	r3, [pc, #328]	; (8002c34 <HAL_I2C_Mem_Read+0x22c>)
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 fc1f 	bl	8003334 <I2C_TransferConfig>
 8002af6:	e00f      	b.n	8002b18 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	8979      	ldrh	r1, [r7, #10]
 8002b0a:	4b4a      	ldr	r3, [pc, #296]	; (8002c34 <HAL_I2C_Mem_Read+0x22c>)
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fc0e 	bl	8003334 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2104      	movs	r1, #4
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fa5e 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e07c      	b.n	8002c2c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d034      	beq.n	8002bd8 <HAL_I2C_Mem_Read+0x1d0>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d130      	bne.n	8002bd8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2180      	movs	r1, #128	; 0x80
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fa2f 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e04d      	b.n	8002c2c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2bff      	cmp	r3, #255	; 0xff
 8002b98:	d90e      	bls.n	8002bb8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	22ff      	movs	r2, #255	; 0xff
 8002b9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	8979      	ldrh	r1, [r7, #10]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 fbbf 	bl	8003334 <I2C_TransferConfig>
 8002bb6:	e00f      	b.n	8002bd8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	8979      	ldrh	r1, [r7, #10]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 fbae 	bl	8003334 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d19a      	bne.n	8002b18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 fa7c 	bl	80030e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e01a      	b.n	8002c2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6859      	ldr	r1, [r3, #4]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_I2C_Mem_Read+0x230>)
 8002c0a:	400b      	ands	r3, r1
 8002c0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e000      	b.n	8002c2c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c2a:	2302      	movs	r3, #2
  }
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	80002400 	.word	0x80002400
 8002c38:	fe00e800 	.word	0xfe00e800

08002c3c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	f040 80ef 	bne.w	8002e3c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c6c:	d101      	bne.n	8002c72 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e0e5      	b.n	8002e3e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_I2C_IsDeviceReady+0x44>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e0de      	b.n	8002e3e <HAL_I2C_IsDeviceReady+0x202>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2224      	movs	r2, #36	; 0x24
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d105      	bne.n	8002caa <HAL_I2C_IsDeviceReady+0x6e>
 8002c9e:	897b      	ldrh	r3, [r7, #10]
 8002ca0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ca4:	4b68      	ldr	r3, [pc, #416]	; (8002e48 <HAL_I2C_IsDeviceReady+0x20c>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	e004      	b.n	8002cb4 <HAL_I2C_IsDeviceReady+0x78>
 8002caa:	897b      	ldrh	r3, [r7, #10]
 8002cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cb0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002cba:	f7ff f891 	bl	8001de0 <HAL_GetTick>
 8002cbe:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	bf0c      	ite	eq
 8002cce:	2301      	moveq	r3, #1
 8002cd0:	2300      	movne	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	bf0c      	ite	eq
 8002ce4:	2301      	moveq	r3, #1
 8002ce6:	2300      	movne	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002cec:	e034      	b.n	8002d58 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d01a      	beq.n	8002d2c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cf6:	f7ff f873 	bl	8001de0 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d302      	bcc.n	8002d0c <HAL_I2C_IsDeviceReady+0xd0>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10f      	bne.n	8002d2c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d18:	f043 0220 	orr.w	r2, r3, #32
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e088      	b.n	8002e3e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	bf0c      	ite	eq
 8002d3a:	2301      	moveq	r3, #1
 8002d3c:	2300      	movne	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002d58:	7ffb      	ldrb	r3, [r7, #31]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d102      	bne.n	8002d64 <HAL_I2C_IsDeviceReady+0x128>
 8002d5e:	7fbb      	ldrb	r3, [r7, #30]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0c4      	beq.n	8002cee <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b10      	cmp	r3, #16
 8002d70:	d01a      	beq.n	8002da8 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2120      	movs	r1, #32
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f931 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e058      	b.n	8002e3e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2220      	movs	r2, #32
 8002d92:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e04a      	b.n	8002e3e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2200      	movs	r2, #0
 8002db0:	2120      	movs	r1, #32
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f916 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e03d      	b.n	8002e3e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d118      	bne.n	8002e0c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002de8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2200      	movs	r2, #0
 8002df2:	2120      	movs	r1, #32
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f8f5 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e01c      	b.n	8002e3e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	f63f af3d 	bhi.w	8002c96 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e28:	f043 0220 	orr.w	r2, r3, #32
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	02002000 	.word	0x02002000

08002e4c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	817b      	strh	r3, [r7, #10]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	813b      	strh	r3, [r7, #8]
 8002e62:	4613      	mov	r3, r2
 8002e64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	8979      	ldrh	r1, [r7, #10]
 8002e6c:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <I2C_RequestMemoryWrite+0xa4>)
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fa5d 	bl	8003334 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	69b9      	ldr	r1, [r7, #24]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f8f0 	bl	8003064 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e02c      	b.n	8002ee8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e94:	893b      	ldrh	r3, [r7, #8]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	629a      	str	r2, [r3, #40]	; 0x28
 8002e9e:	e015      	b.n	8002ecc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ea0:	893b      	ldrh	r3, [r7, #8]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	69b9      	ldr	r1, [r7, #24]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f8d6 	bl	8003064 <I2C_WaitOnTXISFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e012      	b.n	8002ee8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec2:	893b      	ldrh	r3, [r7, #8]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f884 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	80002000 	.word	0x80002000

08002ef4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	4608      	mov	r0, r1
 8002efe:	4611      	mov	r1, r2
 8002f00:	461a      	mov	r2, r3
 8002f02:	4603      	mov	r3, r0
 8002f04:	817b      	strh	r3, [r7, #10]
 8002f06:	460b      	mov	r3, r1
 8002f08:	813b      	strh	r3, [r7, #8]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	8979      	ldrh	r1, [r7, #10]
 8002f14:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <I2C_RequestMemoryRead+0xa4>)
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fa0a 	bl	8003334 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	69b9      	ldr	r1, [r7, #24]
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f89d 	bl	8003064 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e02c      	b.n	8002f8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d105      	bne.n	8002f46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f3a:	893b      	ldrh	r3, [r7, #8]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	629a      	str	r2, [r3, #40]	; 0x28
 8002f44:	e015      	b.n	8002f72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f46:	893b      	ldrh	r3, [r7, #8]
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	69b9      	ldr	r1, [r7, #24]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f883 	bl	8003064 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e012      	b.n	8002f8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f68:	893b      	ldrh	r3, [r7, #8]
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2140      	movs	r1, #64	; 0x40
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 f831 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	80002000 	.word	0x80002000

08002f9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d103      	bne.n	8002fba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d007      	beq.n	8002fd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	619a      	str	r2, [r3, #24]
  }
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff4:	e022      	b.n	800303c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d01e      	beq.n	800303c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ffe:	f7fe feef 	bl	8001de0 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d302      	bcc.n	8003014 <I2C_WaitOnFlagUntilTimeout+0x30>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d113      	bne.n	800303c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003018:	f043 0220 	orr.w	r2, r3, #32
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e00f      	b.n	800305c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	4013      	ands	r3, r2
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	429a      	cmp	r2, r3
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	429a      	cmp	r2, r3
 8003058:	d0cd      	beq.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003070:	e02c      	b.n	80030cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f870 	bl	800315c <I2C_IsErrorOccurred>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e02a      	b.n	80030dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d01e      	beq.n	80030cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308e:	f7fe fea7 	bl	8001de0 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	429a      	cmp	r2, r3
 800309c:	d302      	bcc.n	80030a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d113      	bne.n	80030cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e007      	b.n	80030dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d1cb      	bne.n	8003072 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030f0:	e028      	b.n	8003144 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f830 	bl	800315c <I2C_IsErrorOccurred>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e026      	b.n	8003154 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003106:	f7fe fe6b 	bl	8001de0 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	429a      	cmp	r2, r3
 8003114:	d302      	bcc.n	800311c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d113      	bne.n	8003144 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e007      	b.n	8003154 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b20      	cmp	r3, #32
 8003150:	d1cf      	bne.n	80030f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08a      	sub	sp, #40	; 0x28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	d075      	beq.n	8003274 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2210      	movs	r2, #16
 800318e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003190:	e056      	b.n	8003240 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	d052      	beq.n	8003240 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7fe fe21 	bl	8001de0 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <I2C_IsErrorOccurred+0x54>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d147      	bne.n	8003240 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031d2:	d12e      	bne.n	8003232 <I2C_IsErrorOccurred+0xd6>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031da:	d02a      	beq.n	8003232 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80031dc:	7cfb      	ldrb	r3, [r7, #19]
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d027      	beq.n	8003232 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031f0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031f2:	f7fe fdf5 	bl	8001de0 <HAL_GetTick>
 80031f6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031f8:	e01b      	b.n	8003232 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031fa:	f7fe fdf1 	bl	8001de0 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b19      	cmp	r3, #25
 8003206:	d914      	bls.n	8003232 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320c:	f043 0220 	orr.w	r2, r3, #32
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b20      	cmp	r3, #32
 800323e:	d1dc      	bne.n	80031fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b20      	cmp	r3, #32
 800324c:	d003      	beq.n	8003256 <I2C_IsErrorOccurred+0xfa>
 800324e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003252:	2b00      	cmp	r3, #0
 8003254:	d09d      	beq.n	8003192 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2220      	movs	r2, #32
 8003264:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	f043 0304 	orr.w	r3, r3, #4
 800326c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003296:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00b      	beq.n	80032c0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	f043 0308 	orr.w	r3, r3, #8
 80032ae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	f043 0302 	orr.w	r3, r3, #2
 80032d0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80032e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d01c      	beq.n	8003324 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f7ff fe56 	bl	8002f9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6859      	ldr	r1, [r3, #4]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <I2C_IsErrorOccurred+0x1d4>)
 80032fc:	400b      	ands	r3, r1
 80032fe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	431a      	orrs	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003328:	4618      	mov	r0, r3
 800332a:	3728      	adds	r7, #40	; 0x28
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	fe00e800 	.word	0xfe00e800

08003334 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	460b      	mov	r3, r1
 8003340:	817b      	strh	r3, [r7, #10]
 8003342:	4613      	mov	r3, r2
 8003344:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800334c:	7a7b      	ldrb	r3, [r7, #9]
 800334e:	041b      	lsls	r3, r3, #16
 8003350:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003354:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	4313      	orrs	r3, r2
 800335e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003362:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	0d5b      	lsrs	r3, r3, #21
 800336e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <I2C_TransferConfig+0x60>)
 8003374:	430b      	orrs	r3, r1
 8003376:	43db      	mvns	r3, r3
 8003378:	ea02 0103 	and.w	r1, r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	03ff63ff 	.word	0x03ff63ff

08003398 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	d138      	bne.n	8003420 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e032      	b.n	8003422 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2224      	movs	r2, #36	; 0x24
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6819      	ldr	r1, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e000      	b.n	8003422 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b20      	cmp	r3, #32
 8003442:	d139      	bne.n	80034b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800344e:	2302      	movs	r3, #2
 8003450:	e033      	b.n	80034ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2224      	movs	r2, #36	; 0x24
 800345e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0201 	bic.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003480:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	021b      	lsls	r3, r3, #8
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e000      	b.n	80034ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034b8:	2302      	movs	r3, #2
  }
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e017      	b.n	8003508 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d004      	beq.n	80034ee <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2280      	movs	r2, #128	; 0x80
 80034e8:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e00c      	b.n	8003508 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2204      	movs	r2, #4
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af02      	add	r7, sp, #8
 800351a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003520:	f7fe fc5e 	bl	8001de0 <HAL_GetTick>
 8003524:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d102      	bne.n	8003532 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
 8003530:	e0a5      	b.n	800367e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353c:	2b00      	cmp	r3, #0
 800353e:	f040 809e 	bne.w	800367e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fd feb6 	bl	80012b4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003548:	f241 3188 	movw	r1, #5000	; 0x1388
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 fbad 	bl	8003cac <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <HAL_OSPI_Init+0x174>)
 800355a:	4013      	ands	r3, r2
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68d1      	ldr	r1, [r2, #12]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6912      	ldr	r2, [r2, #16]
 8003564:	3a01      	subs	r2, #1
 8003566:	0412      	lsls	r2, r2, #16
 8003568:	4311      	orrs	r1, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6952      	ldr	r2, [r2, #20]
 800356e:	3a01      	subs	r2, #1
 8003570:	0212      	lsls	r2, r2, #8
 8003572:	4311      	orrs	r1, r2
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003578:	4311      	orrs	r1, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	69d2      	ldr	r2, [r2, #28]
 800357e:	4311      	orrs	r1, r2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	430b      	orrs	r3, r1
 8003586:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1a      	ldr	r2, [r3, #32]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035b8:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	021a      	lsls	r2, r3, #8
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2200      	movs	r2, #0
 80035de:	2120      	movs	r1, #32
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f001 f897 	bl	8004714 <OSPI_WaitFlagStateUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d146      	bne.n	800367e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	1e5a      	subs	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003626:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d107      	bne.n	8003666 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0202 	orr.w	r2, r2, #2
 8003664:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800366e:	d103      	bne.n	8003678 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	651a      	str	r2, [r3, #80]	; 0x50
 8003676:	e002      	b.n	800367e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800367e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	f8e0f8f4 	.word	0xf8e0f8f4

0800368c <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3350      	adds	r3, #80	; 0x50
 800369a:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b0:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d03a      	beq.n	8003732 <HAL_OSPI_IRQHandler+0xa6>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d035      	beq.n	8003732 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b18      	cmp	r3, #24
 80036ca:	d10f      	bne.n	80036ec <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	781a      	ldrb	r2, [r3, #0]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e4:	1e5a      	subs	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	649a      	str	r2, [r3, #72]	; 0x48
 80036ea:	e012      	b.n	8003712 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b28      	cmp	r3, #40	; 0x28
 80036f0:	d10f      	bne.n	8003712 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	7812      	ldrb	r2, [r2, #0]
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370c:	1e5a      	subs	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003716:	2b00      	cmp	r3, #0
 8003718:	d107      	bne.n	800372a <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003728:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fa82 	bl	8003c34 <HAL_OSPI_FifoThresholdCallback>
 8003730:	e0e7      	b.n	8003902 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d067      	beq.n	800380c <HAL_OSPI_IRQHandler+0x180>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d062      	beq.n	800380c <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b28      	cmp	r3, #40	; 0x28
 800374a:	d131      	bne.n	80037b0 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003750:	2b00      	cmp	r3, #0
 8003752:	d015      	beq.n	8003780 <HAL_OSPI_IRQHandler+0xf4>
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800375a:	2b00      	cmp	r3, #0
 800375c:	d010      	beq.n	8003780 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	7812      	ldrb	r2, [r2, #0]
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003778:	1e5a      	subs	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800377e:	e0bd      	b.n	80038fc <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003784:	2b00      	cmp	r3, #0
 8003786:	f040 80b9 	bne.w	80038fc <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2202      	movs	r2, #2
 8003790:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80037a0:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fa57 	bl	8003c5c <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80037ae:	e0a5      	b.n	80038fc <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2202      	movs	r2, #2
 80037b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80037c6:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b18      	cmp	r3, #24
 80037d2:	d103      	bne.n	80037dc <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fa4b 	bl	8003c70 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80037da:	e08f      	b.n	80038fc <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d103      	bne.n	80037ea <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fa30 	bl	8003c48 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80037e8:	e088      	b.n	80038fc <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f0:	f040 8084 	bne.w	80038fc <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d103      	bne.n	8003804 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fa0f 	bl	8003c20 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003802:	e07b      	b.n	80038fc <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fa01 	bl	8003c0c <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800380a:	e077      	b.n	80038fc <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d01e      	beq.n	8003854 <HAL_OSPI_IRQHandler+0x1c8>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d019      	beq.n	8003854 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2208      	movs	r2, #8
 8003826:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003844:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2202      	movs	r2, #2
 800384a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fa19 	bl	8003c84 <HAL_OSPI_StatusMatchCallback>
 8003852:	e056      	b.n	8003902 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d03c      	beq.n	80038d8 <HAL_OSPI_IRQHandler+0x24c>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d037      	beq.n	80038d8 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2201      	movs	r2, #1
 800386e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800387e:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01a      	beq.n	80038ca <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0204 	bic.w	r2, r2, #4
 80038a2:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a8:	4a18      	ldr	r2, [pc, #96]	; (800390c <HAL_OSPI_IRQHandler+0x280>)
 80038aa:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fe08 	bl	80034c6 <HAL_MDMA_Abort_IT>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d021      	beq.n	8003900 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f9a2 	bl	8003c0c <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80038c8:	e01a      	b.n	8003900 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2202      	movs	r2, #2
 80038ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f99b 	bl	8003c0c <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80038d6:	e013      	b.n	8003900 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00f      	beq.n	8003902 <HAL_OSPI_IRQHandler+0x276>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2210      	movs	r2, #16
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f9cf 	bl	8003c98 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80038fa:	e002      	b.n	8003902 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80038fc:	bf00      	nop
 80038fe:	e000      	b.n	8003902 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003900:	bf00      	nop
}
 8003902:	bf00      	nop
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	0800469d 	.word	0x0800469d

08003910 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08a      	sub	sp, #40	; 0x28
 8003914:	af02      	add	r7, sp, #8
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800391c:	f7fe fa60 	bl	8001de0 <HAL_GetTick>
 8003920:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392c:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d104      	bne.n	800393e <HAL_OSPI_Command+0x2e>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800393c:	d115      	bne.n	800396a <HAL_OSPI_Command+0x5a>
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b14      	cmp	r3, #20
 8003942:	d107      	bne.n	8003954 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d00e      	beq.n	800396a <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d00a      	beq.n	800396a <HAL_OSPI_Command+0x5a>
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2b24      	cmp	r3, #36	; 0x24
 8003958:	d15b      	bne.n	8003a12 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d003      	beq.n	800396a <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8003966:	2b03      	cmp	r3, #3
 8003968:	d153      	bne.n	8003a12 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2200      	movs	r2, #0
 8003972:	2120      	movs	r1, #32
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fecd 	bl	8004714 <OSPI_WaitFlagStateUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800397e:	7ffb      	ldrb	r3, [r7, #31]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d14c      	bne.n	8003a1e <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 fef9 	bl	8004784 <OSPI_ConfigCmd>
 8003992:	4603      	mov	r3, r0
 8003994:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003996:	7ffb      	ldrb	r3, [r7, #31]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d140      	bne.n	8003a1e <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10e      	bne.n	80039c2 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2201      	movs	r2, #1
 80039ac:	2102      	movs	r1, #2
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 feb0 	bl	8004714 <OSPI_WaitFlagStateUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2202      	movs	r2, #2
 80039be:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80039c0:	e02d      	b.n	8003a1e <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d103      	bne.n	80039d2 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2204      	movs	r2, #4
 80039ce:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 80039d0:	e025      	b.n	8003a1e <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d10b      	bne.n	80039f2 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039de:	2b24      	cmp	r3, #36	; 0x24
 80039e0:	d103      	bne.n	80039ea <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2204      	movs	r2, #4
 80039e6:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 80039e8:	e019      	b.n	8003a1e <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2214      	movs	r2, #20
 80039ee:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 80039f0:	e015      	b.n	8003a1e <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d111      	bne.n	8003a1e <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fe:	2b14      	cmp	r3, #20
 8003a00:	d103      	bne.n	8003a0a <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2204      	movs	r2, #4
 8003a06:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8003a08:	e009      	b.n	8003a1e <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2224      	movs	r2, #36	; 0x24
 8003a0e:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8003a10:	e005      	b.n	8003a1e <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2210      	movs	r2, #16
 8003a1a:	655a      	str	r2, [r3, #84]	; 0x54
 8003a1c:	e000      	b.n	8003a20 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8003a1e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003a20:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3720      	adds	r7, #32
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b08c      	sub	sp, #48	; 0x30
 8003a2e:	af02      	add	r7, sp, #8
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003a36:	f7fe f9d3 	bl	8001de0 <HAL_GetTick>
 8003a3a:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3350      	adds	r3, #80	; 0x50
 8003a42:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a4a:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003a54:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d106      	bne.n	8003a6a <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2208      	movs	r2, #8
 8003a66:	655a      	str	r2, [r3, #84]	; 0x54
 8003a68:	e07c      	b.n	8003b64 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d172      	bne.n	8003b58 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a9e:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aa8:	d104      	bne.n	8003ab4 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	649a      	str	r2, [r3, #72]	; 0x48
 8003ab2:	e011      	b.n	8003ad8 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003abc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d004      	beq.n	8003ace <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	649a      	str	r2, [r3, #72]	; 0x48
 8003acc:	e004      	b.n	8003ad8 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	2106      	movs	r1, #6
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 fe16 	bl	8004714 <OSPI_WaitFlagStateUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8003aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d114      	bne.n	8003b20 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	7812      	ldrb	r2, [r2, #0]
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b10:	1e5a      	subs	r2, r3, #1
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1dc      	bne.n	8003ad8 <HAL_OSPI_Receive+0xae>
 8003b1e:	e000      	b.n	8003b22 <HAL_OSPI_Receive+0xf8>
          break;
 8003b20:	bf00      	nop

      if (status == HAL_OK)
 8003b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d11c      	bne.n	8003b64 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	2201      	movs	r2, #1
 8003b32:	2102      	movs	r1, #2
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 fded 	bl	8004714 <OSPI_WaitFlagStateUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8003b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10d      	bne.n	8003b64 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2202      	movs	r2, #2
 8003b54:	651a      	str	r2, [r3, #80]	; 0x50
 8003b56:	e005      	b.n	8003b64 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2210      	movs	r2, #16
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8003b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3728      	adds	r7, #40	; 0x28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003b7a:	f7fe f931 	bl	8001de0 <HAL_GetTick>
 8003b7e:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d134      	bne.n	8003bf2 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2200      	movs	r2, #0
 8003b92:	2120      	movs	r1, #32
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 fdbd 	bl	8004714 <OSPI_WaitFlagStateUntilTimeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d12b      	bne.n	8003bfc <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2288      	movs	r2, #136	; 0x88
 8003ba8:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d111      	bne.n	8003bd6 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	6852      	ldr	r2, [r2, #4]
 8003bba:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2210      	movs	r2, #16
 8003bc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003bd4:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <HAL_OSPI_MemoryMapped+0x98>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	6812      	ldr	r2, [r2, #0]
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	e004      	b.n	8003bfc <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2210      	movs	r2, #16
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	cffffff7 	.word	0xcffffff7

08003c0c <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b094      	sub	sp, #80	; 0x50
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a9d      	ldr	r2, [pc, #628]	; (8003f60 <HAL_OSPIM_Config+0x294>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d105      	bne.n	8003cfa <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8003cf8:	e004      	b.n	8003d04 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003d04:	2300      	movs	r3, #0
 8003d06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003d0a:	e01d      	b.n	8003d48 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8003d0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d10:	3301      	adds	r3, #1
 8003d12:	b2d8      	uxtb	r0, r3
 8003d14:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003d18:	f107 0114 	add.w	r1, r7, #20
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	4413      	add	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	440b      	add	r3, r1
 8003d26:	4619      	mov	r1, r3
 8003d28:	f000 fea6 	bl	8004a78 <OSPIM_GetConfig>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d005      	beq.n	8003d3e <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2208      	movs	r2, #8
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003d3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d42:	3301      	adds	r3, #1
 8003d44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003d48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d9dd      	bls.n	8003d0c <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8003d50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f040 8495 	bne.w	8004684 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003d5a:	4b81      	ldr	r3, [pc, #516]	; (8003f60 <HAL_OSPIM_Config+0x294>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003d66:	4b7e      	ldr	r3, [pc, #504]	; (8003f60 <HAL_OSPIM_Config+0x294>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a7d      	ldr	r2, [pc, #500]	; (8003f60 <HAL_OSPIM_Config+0x294>)
 8003d6c:	f023 0301 	bic.w	r3, r3, #1
 8003d70:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003d72:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003d7e:	4b79      	ldr	r3, [pc, #484]	; (8003f64 <HAL_OSPIM_Config+0x298>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00b      	beq.n	8003da2 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003d8a:	4b76      	ldr	r3, [pc, #472]	; (8003f64 <HAL_OSPIM_Config+0x298>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a75      	ldr	r2, [pc, #468]	; (8003f64 <HAL_OSPIM_Config+0x298>)
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003d96:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d9a:	f043 0302 	orr.w	r3, r3, #2
 8003d9e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003da2:	4971      	ldr	r1, [pc, #452]	; (8003f68 <HAL_OSPIM_Config+0x29c>)
 8003da4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003da6:	4613      	mov	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4413      	add	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	3350      	adds	r3, #80	; 0x50
 8003db0:	443b      	add	r3, r7
 8003db2:	3b34      	subs	r3, #52	; 0x34
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	440b      	add	r3, r1
 8003dbc:	6859      	ldr	r1, [r3, #4]
 8003dbe:	486a      	ldr	r0, [pc, #424]	; (8003f68 <HAL_OSPIM_Config+0x29c>)
 8003dc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	4413      	add	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	3350      	adds	r3, #80	; 0x50
 8003dcc:	443b      	add	r3, r7
 8003dce:	3b34      	subs	r3, #52	; 0x34
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4403      	add	r3, r0
 8003ddc:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8003dde:	4b62      	ldr	r3, [pc, #392]	; (8003f68 <HAL_OSPIM_Config+0x29c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80c0 	beq.w	8003f6c <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8003dec:	4b5e      	ldr	r3, [pc, #376]	; (8003f68 <HAL_OSPIM_Config+0x29c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a5d      	ldr	r2, [pc, #372]	; (8003f68 <HAL_OSPIM_Config+0x29c>)
 8003df2:	f023 0301 	bic.w	r3, r3, #1
 8003df6:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8003df8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	f040 8162 	bne.w	80040c6 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8003e02:	4959      	ldr	r1, [pc, #356]	; (8003f68 <HAL_OSPIM_Config+0x29c>)
 8003e04:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e08:	4613      	mov	r3, r2
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	4413      	add	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	3350      	adds	r3, #80	; 0x50
 8003e12:	443b      	add	r3, r7
 8003e14:	3b3c      	subs	r3, #60	; 0x3c
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	6859      	ldr	r1, [r3, #4]
 8003e20:	4851      	ldr	r0, [pc, #324]	; (8003f68 <HAL_OSPIM_Config+0x29c>)
 8003e22:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	3350      	adds	r3, #80	; 0x50
 8003e30:	443b      	add	r3, r7
 8003e32:	3b3c      	subs	r3, #60	; 0x3c
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	f041 0202 	orr.w	r2, r1, #2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4403      	add	r3, r0
 8003e40:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003e42:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e46:	4613      	mov	r3, r2
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4413      	add	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	3350      	adds	r3, #80	; 0x50
 8003e50:	443b      	add	r3, r7
 8003e52:	3b38      	subs	r3, #56	; 0x38
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01f      	beq.n	8003e9a <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8003e5a:	4943      	ldr	r1, [pc, #268]	; (8003f68 <HAL_OSPIM_Config+0x29c>)
 8003e5c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e60:	4613      	mov	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4413      	add	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	3350      	adds	r3, #80	; 0x50
 8003e6a:	443b      	add	r3, r7
 8003e6c:	3b38      	subs	r3, #56	; 0x38
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	6859      	ldr	r1, [r3, #4]
 8003e78:	483b      	ldr	r0, [pc, #236]	; (8003f68 <HAL_OSPIM_Config+0x29c>)
 8003e7a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e7e:	4613      	mov	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	3350      	adds	r3, #80	; 0x50
 8003e88:	443b      	add	r3, r7
 8003e8a:	3b38      	subs	r3, #56	; 0x38
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	f041 0220 	orr.w	r2, r1, #32
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4403      	add	r3, r0
 8003e98:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003e9a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	4413      	add	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	3350      	adds	r3, #80	; 0x50
 8003ea8:	443b      	add	r3, r7
 8003eaa:	3b30      	subs	r3, #48	; 0x30
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d023      	beq.n	8003efa <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8003eb2:	492d      	ldr	r1, [pc, #180]	; (8003f68 <HAL_OSPIM_Config+0x29c>)
 8003eb4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003eb8:	4613      	mov	r3, r2
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	4413      	add	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	3350      	adds	r3, #80	; 0x50
 8003ec2:	443b      	add	r3, r7
 8003ec4:	3b30      	subs	r3, #48	; 0x30
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	6859      	ldr	r1, [r3, #4]
 8003ed4:	4824      	ldr	r0, [pc, #144]	; (8003f68 <HAL_OSPIM_Config+0x29c>)
 8003ed6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003eda:	4613      	mov	r3, r2
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	4413      	add	r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	3350      	adds	r3, #80	; 0x50
 8003ee4:	443b      	add	r3, r7
 8003ee6:	3b30      	subs	r3, #48	; 0x30
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4403      	add	r3, r0
 8003ef8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003efa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003efe:	4613      	mov	r3, r2
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	4413      	add	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	3350      	adds	r3, #80	; 0x50
 8003f08:	443b      	add	r3, r7
 8003f0a:	3b2c      	subs	r3, #44	; 0x2c
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 80d9 	beq.w	80040c6 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8003f14:	4914      	ldr	r1, [pc, #80]	; (8003f68 <HAL_OSPIM_Config+0x29c>)
 8003f16:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4413      	add	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	3350      	adds	r3, #80	; 0x50
 8003f24:	443b      	add	r3, r7
 8003f26:	3b2c      	subs	r3, #44	; 0x2c
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	6859      	ldr	r1, [r3, #4]
 8003f36:	480c      	ldr	r0, [pc, #48]	; (8003f68 <HAL_OSPIM_Config+0x29c>)
 8003f38:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	4413      	add	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	3350      	adds	r3, #80	; 0x50
 8003f46:	443b      	add	r3, r7
 8003f48:	3b2c      	subs	r3, #44	; 0x2c
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4403      	add	r3, r0
 8003f5a:	605a      	str	r2, [r3, #4]
 8003f5c:	e0b3      	b.n	80040c6 <HAL_OSPIM_Config+0x3fa>
 8003f5e:	bf00      	nop
 8003f60:	52005000 	.word	0x52005000
 8003f64:	5200a000 	.word	0x5200a000
 8003f68:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8003f6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f6e:	4613      	mov	r3, r2
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	4413      	add	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	3350      	adds	r3, #80	; 0x50
 8003f78:	443b      	add	r3, r7
 8003f7a:	3b3c      	subs	r3, #60	; 0x3c
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 80a1 	beq.w	80040c6 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003f84:	4993      	ldr	r1, [pc, #588]	; (80041d4 <HAL_OSPIM_Config+0x508>)
 8003f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f88:	4613      	mov	r3, r2
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	4413      	add	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	3350      	adds	r3, #80	; 0x50
 8003f92:	443b      	add	r3, r7
 8003f94:	3b3c      	subs	r3, #60	; 0x3c
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	6859      	ldr	r1, [r3, #4]
 8003fa0:	488c      	ldr	r0, [pc, #560]	; (80041d4 <HAL_OSPIM_Config+0x508>)
 8003fa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	4413      	add	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	3350      	adds	r3, #80	; 0x50
 8003fae:	443b      	add	r3, r7
 8003fb0:	3b3c      	subs	r3, #60	; 0x3c
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	f021 0201 	bic.w	r2, r1, #1
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4403      	add	r3, r0
 8003fbe:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003fc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	4413      	add	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	3350      	adds	r3, #80	; 0x50
 8003fcc:	443b      	add	r3, r7
 8003fce:	3b38      	subs	r3, #56	; 0x38
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01d      	beq.n	8004012 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003fd6:	497f      	ldr	r1, [pc, #508]	; (80041d4 <HAL_OSPIM_Config+0x508>)
 8003fd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fda:	4613      	mov	r3, r2
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	4413      	add	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	3350      	adds	r3, #80	; 0x50
 8003fe4:	443b      	add	r3, r7
 8003fe6:	3b38      	subs	r3, #56	; 0x38
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	6859      	ldr	r1, [r3, #4]
 8003ff2:	4878      	ldr	r0, [pc, #480]	; (80041d4 <HAL_OSPIM_Config+0x508>)
 8003ff4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	4413      	add	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	3350      	adds	r3, #80	; 0x50
 8004000:	443b      	add	r3, r7
 8004002:	3b38      	subs	r3, #56	; 0x38
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3b01      	subs	r3, #1
 8004008:	f021 0210 	bic.w	r2, r1, #16
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4403      	add	r3, r0
 8004010:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004012:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004014:	4613      	mov	r3, r2
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	4413      	add	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	3350      	adds	r3, #80	; 0x50
 800401e:	443b      	add	r3, r7
 8004020:	3b30      	subs	r3, #48	; 0x30
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d021      	beq.n	800406c <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004028:	496a      	ldr	r1, [pc, #424]	; (80041d4 <HAL_OSPIM_Config+0x508>)
 800402a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800402c:	4613      	mov	r3, r2
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	4413      	add	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	3350      	adds	r3, #80	; 0x50
 8004036:	443b      	add	r3, r7
 8004038:	3b30      	subs	r3, #48	; 0x30
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3b01      	subs	r3, #1
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	6859      	ldr	r1, [r3, #4]
 8004048:	4862      	ldr	r0, [pc, #392]	; (80041d4 <HAL_OSPIM_Config+0x508>)
 800404a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800404c:	4613      	mov	r3, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4413      	add	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	3350      	adds	r3, #80	; 0x50
 8004056:	443b      	add	r3, r7
 8004058:	3b30      	subs	r3, #48	; 0x30
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3b01      	subs	r3, #1
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4403      	add	r3, r0
 800406a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800406c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800406e:	4613      	mov	r3, r2
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	4413      	add	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	3350      	adds	r3, #80	; 0x50
 8004078:	443b      	add	r3, r7
 800407a:	3b2c      	subs	r3, #44	; 0x2c
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d021      	beq.n	80040c6 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004082:	4954      	ldr	r1, [pc, #336]	; (80041d4 <HAL_OSPIM_Config+0x508>)
 8004084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004086:	4613      	mov	r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4413      	add	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	3350      	adds	r3, #80	; 0x50
 8004090:	443b      	add	r3, r7
 8004092:	3b2c      	subs	r3, #44	; 0x2c
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3b01      	subs	r3, #1
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	6859      	ldr	r1, [r3, #4]
 80040a2:	484c      	ldr	r0, [pc, #304]	; (80041d4 <HAL_OSPIM_Config+0x508>)
 80040a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040a6:	4613      	mov	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4413      	add	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	3350      	adds	r3, #80	; 0x50
 80040b0:	443b      	add	r3, r7
 80040b2:	3b2c      	subs	r3, #44	; 0x2c
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4403      	add	r3, r0
 80040c4:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	6819      	ldr	r1, [r3, #0]
 80040ca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80040ce:	4613      	mov	r3, r2
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	4413      	add	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	3350      	adds	r3, #80	; 0x50
 80040d8:	443b      	add	r3, r7
 80040da:	3b3c      	subs	r3, #60	; 0x3c
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4299      	cmp	r1, r3
 80040e0:	d038      	beq.n	8004154 <HAL_OSPIM_Config+0x488>
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	6859      	ldr	r1, [r3, #4]
 80040e6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80040ea:	4613      	mov	r3, r2
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	4413      	add	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	3350      	adds	r3, #80	; 0x50
 80040f4:	443b      	add	r3, r7
 80040f6:	3b38      	subs	r3, #56	; 0x38
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4299      	cmp	r1, r3
 80040fc:	d02a      	beq.n	8004154 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	6899      	ldr	r1, [r3, #8]
 8004102:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004106:	4613      	mov	r3, r2
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	4413      	add	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	3350      	adds	r3, #80	; 0x50
 8004110:	443b      	add	r3, r7
 8004112:	3b34      	subs	r3, #52	; 0x34
 8004114:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004116:	4299      	cmp	r1, r3
 8004118:	d01c      	beq.n	8004154 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	68d9      	ldr	r1, [r3, #12]
 800411e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004122:	4613      	mov	r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	4413      	add	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	3350      	adds	r3, #80	; 0x50
 800412c:	443b      	add	r3, r7
 800412e:	3b30      	subs	r3, #48	; 0x30
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4299      	cmp	r1, r3
 8004134:	d00e      	beq.n	8004154 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	6919      	ldr	r1, [r3, #16]
 800413a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800413e:	4613      	mov	r3, r2
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	4413      	add	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	3350      	adds	r3, #80	; 0x50
 8004148:	443b      	add	r3, r7
 800414a:	3b2c      	subs	r3, #44	; 0x2c
 800414c:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800414e:	4299      	cmp	r1, r3
 8004150:	f040 810e 	bne.w	8004370 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	6819      	ldr	r1, [r3, #0]
 8004158:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800415c:	4613      	mov	r3, r2
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	4413      	add	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	3350      	adds	r3, #80	; 0x50
 8004166:	443b      	add	r3, r7
 8004168:	3b3c      	subs	r3, #60	; 0x3c
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4299      	cmp	r1, r3
 800416e:	d133      	bne.n	80041d8 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004178:	4613      	mov	r3, r2
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	4413      	add	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	3350      	adds	r3, #80	; 0x50
 8004182:	443b      	add	r3, r7
 8004184:	3b38      	subs	r3, #56	; 0x38
 8004186:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004188:	4299      	cmp	r1, r3
 800418a:	d125      	bne.n	80041d8 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	68d9      	ldr	r1, [r3, #12]
 8004190:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004194:	4613      	mov	r3, r2
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	4413      	add	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	3350      	adds	r3, #80	; 0x50
 800419e:	443b      	add	r3, r7
 80041a0:	3b30      	subs	r3, #48	; 0x30
 80041a2:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80041a4:	4299      	cmp	r1, r3
 80041a6:	d117      	bne.n	80041d8 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	6919      	ldr	r1, [r3, #16]
 80041ac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80041b0:	4613      	mov	r3, r2
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	4413      	add	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	3350      	adds	r3, #80	; 0x50
 80041ba:	443b      	add	r3, r7
 80041bc:	3b2c      	subs	r3, #44	; 0x2c
 80041be:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80041c0:	4299      	cmp	r1, r3
 80041c2:	d109      	bne.n	80041d8 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80041c4:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <HAL_OSPIM_Config+0x508>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a02      	ldr	r2, [pc, #8]	; (80041d4 <HAL_OSPIM_Config+0x508>)
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	e0ce      	b.n	8004370 <HAL_OSPIM_Config+0x6a4>
 80041d2:	bf00      	nop
 80041d4:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80041d8:	49bb      	ldr	r1, [pc, #748]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 80041da:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80041de:	4613      	mov	r3, r2
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	4413      	add	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	3350      	adds	r3, #80	; 0x50
 80041e8:	443b      	add	r3, r7
 80041ea:	3b3c      	subs	r3, #60	; 0x3c
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	440b      	add	r3, r1
 80041f4:	6859      	ldr	r1, [r3, #4]
 80041f6:	48b4      	ldr	r0, [pc, #720]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 80041f8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80041fc:	4613      	mov	r3, r2
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	4413      	add	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	3350      	adds	r3, #80	; 0x50
 8004206:	443b      	add	r3, r7
 8004208:	3b3c      	subs	r3, #60	; 0x3c
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3b01      	subs	r3, #1
 800420e:	f021 0201 	bic.w	r2, r1, #1
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4403      	add	r3, r0
 8004216:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004218:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800421c:	4613      	mov	r3, r2
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	4413      	add	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	3350      	adds	r3, #80	; 0x50
 8004226:	443b      	add	r3, r7
 8004228:	3b38      	subs	r3, #56	; 0x38
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01f      	beq.n	8004270 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8004230:	49a5      	ldr	r1, [pc, #660]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 8004232:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004236:	4613      	mov	r3, r2
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	4413      	add	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	3350      	adds	r3, #80	; 0x50
 8004240:	443b      	add	r3, r7
 8004242:	3b38      	subs	r3, #56	; 0x38
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3b01      	subs	r3, #1
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	440b      	add	r3, r1
 800424c:	6859      	ldr	r1, [r3, #4]
 800424e:	489e      	ldr	r0, [pc, #632]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 8004250:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004254:	4613      	mov	r3, r2
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	4413      	add	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	3350      	adds	r3, #80	; 0x50
 800425e:	443b      	add	r3, r7
 8004260:	3b38      	subs	r3, #56	; 0x38
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3b01      	subs	r3, #1
 8004266:	f021 0210 	bic.w	r2, r1, #16
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4403      	add	r3, r0
 800426e:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8004270:	4995      	ldr	r1, [pc, #596]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 8004272:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004276:	4613      	mov	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	4413      	add	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	3350      	adds	r3, #80	; 0x50
 8004280:	443b      	add	r3, r7
 8004282:	3b34      	subs	r3, #52	; 0x34
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3b01      	subs	r3, #1
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	6859      	ldr	r1, [r3, #4]
 800428e:	488e      	ldr	r0, [pc, #568]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 8004290:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004294:	4613      	mov	r3, r2
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	4413      	add	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	3350      	adds	r3, #80	; 0x50
 800429e:	443b      	add	r3, r7
 80042a0:	3b34      	subs	r3, #52	; 0x34
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4403      	add	r3, r0
 80042ae:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80042b0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80042b4:	4613      	mov	r3, r2
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	4413      	add	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	3350      	adds	r3, #80	; 0x50
 80042be:	443b      	add	r3, r7
 80042c0:	3b30      	subs	r3, #48	; 0x30
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d023      	beq.n	8004310 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80042c8:	497f      	ldr	r1, [pc, #508]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 80042ca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80042ce:	4613      	mov	r3, r2
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	4413      	add	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	3350      	adds	r3, #80	; 0x50
 80042d8:	443b      	add	r3, r7
 80042da:	3b30      	subs	r3, #48	; 0x30
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3b01      	subs	r3, #1
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	440b      	add	r3, r1
 80042e8:	6859      	ldr	r1, [r3, #4]
 80042ea:	4877      	ldr	r0, [pc, #476]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 80042ec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80042f0:	4613      	mov	r3, r2
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	4413      	add	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	3350      	adds	r3, #80	; 0x50
 80042fa:	443b      	add	r3, r7
 80042fc:	3b30      	subs	r3, #48	; 0x30
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3b01      	subs	r3, #1
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4403      	add	r3, r0
 800430e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004310:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004314:	4613      	mov	r3, r2
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	4413      	add	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	3350      	adds	r3, #80	; 0x50
 800431e:	443b      	add	r3, r7
 8004320:	3b2c      	subs	r3, #44	; 0x2c
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d023      	beq.n	8004370 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8004328:	4967      	ldr	r1, [pc, #412]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 800432a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800432e:	4613      	mov	r3, r2
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	4413      	add	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	3350      	adds	r3, #80	; 0x50
 8004338:	443b      	add	r3, r7
 800433a:	3b2c      	subs	r3, #44	; 0x2c
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3b01      	subs	r3, #1
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	6859      	ldr	r1, [r3, #4]
 800434a:	485f      	ldr	r0, [pc, #380]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 800434c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004350:	4613      	mov	r3, r2
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	4413      	add	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	3350      	adds	r3, #80	; 0x50
 800435a:	443b      	add	r3, r7
 800435c:	3b2c      	subs	r3, #44	; 0x2c
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3b01      	subs	r3, #1
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4403      	add	r3, r0
 800436e:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004370:	4a55      	ldr	r2, [pc, #340]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	3b01      	subs	r3, #1
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004384:	025b      	lsls	r3, r3, #9
 8004386:	431a      	orrs	r2, r3
 8004388:	494f      	ldr	r1, [pc, #316]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	3b01      	subs	r3, #1
 8004390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	1e5a      	subs	r2, r3, #1
 80043a0:	4b49      	ldr	r3, [pc, #292]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d90a      	bls.n	80043c2 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80043ac:	4b46      	ldr	r3, [pc, #280]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	041b      	lsls	r3, r3, #16
 80043bc:	4942      	ldr	r1, [pc, #264]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80043c2:	4b41      	ldr	r3, [pc, #260]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 809a 	beq.w	8004504 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80043d0:	4a3d      	ldr	r2, [pc, #244]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f023 0203 	bic.w	r2, r3, #3
 80043e2:	4939      	ldr	r1, [pc, #228]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d011      	beq.n	8004420 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80043fc:	4a32      	ldr	r2, [pc, #200]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	3b01      	subs	r3, #1
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800440e:	492e      	ldr	r1, [pc, #184]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	3b01      	subs	r3, #1
 8004416:	f042 0210 	orr.w	r2, r2, #16
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d016      	beq.n	800445a <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800442c:	4a26      	ldr	r2, [pc, #152]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	3b01      	subs	r3, #1
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004442:	4921      	ldr	r1, [pc, #132]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	3b01      	subs	r3, #1
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	e019      	b.n	800448e <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d015      	beq.n	800448e <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004462:	4a19      	ldr	r2, [pc, #100]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	3b01      	subs	r3, #1
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004478:	4913      	ldr	r1, [pc, #76]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	3b01      	subs	r3, #1
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d018      	beq.n	80044cc <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800449a:	4a0b      	ldr	r2, [pc, #44]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80044b0:	4905      	ldr	r1, [pc, #20]	; (80044c8 <HAL_OSPIM_Config+0x7fc>)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	605a      	str	r2, [r3, #4]
 80044c6:	e0c5      	b.n	8004654 <HAL_OSPIM_Config+0x988>
 80044c8:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80bf 	beq.w	8004654 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80044d6:	4a6e      	ldr	r2, [pc, #440]	; (8004690 <HAL_OSPIM_Config+0x9c4>)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	3b01      	subs	r3, #1
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80044ec:	4968      	ldr	r1, [pc, #416]	; (8004690 <HAL_OSPIM_Config+0x9c4>)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	e0a7      	b.n	8004654 <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004504:	4a62      	ldr	r2, [pc, #392]	; (8004690 <HAL_OSPIM_Config+0x9c4>)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3b01      	subs	r3, #1
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f023 0203 	bic.w	r2, r3, #3
 8004516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	431a      	orrs	r2, r3
 800451c:	495c      	ldr	r1, [pc, #368]	; (8004690 <HAL_OSPIM_Config+0x9c4>)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3b01      	subs	r3, #1
 8004524:	f042 0201 	orr.w	r2, r2, #1
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	440b      	add	r3, r1
 800452c:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d014      	beq.n	8004560 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004536:	4a56      	ldr	r2, [pc, #344]	; (8004690 <HAL_OSPIM_Config+0x9c4>)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	3b01      	subs	r3, #1
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800454a:	015b      	lsls	r3, r3, #5
 800454c:	431a      	orrs	r2, r3
 800454e:	4950      	ldr	r1, [pc, #320]	; (8004690 <HAL_OSPIM_Config+0x9c4>)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	3b01      	subs	r3, #1
 8004556:	f042 0210 	orr.w	r2, r2, #16
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d019      	beq.n	80045a0 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800456c:	4a48      	ldr	r2, [pc, #288]	; (8004690 <HAL_OSPIM_Config+0x9c4>)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	3b01      	subs	r3, #1
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004584:	049b      	lsls	r3, r3, #18
 8004586:	431a      	orrs	r2, r3
 8004588:	4941      	ldr	r1, [pc, #260]	; (8004690 <HAL_OSPIM_Config+0x9c4>)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	3b01      	subs	r3, #1
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	605a      	str	r2, [r3, #4]
 800459e:	e01c      	b.n	80045da <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d018      	beq.n	80045da <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80045a8:	4a39      	ldr	r2, [pc, #228]	; (8004690 <HAL_OSPIM_Config+0x9c4>)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80045be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c0:	069b      	lsls	r3, r3, #26
 80045c2:	431a      	orrs	r2, r3
 80045c4:	4932      	ldr	r1, [pc, #200]	; (8004690 <HAL_OSPIM_Config+0x9c4>)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d019      	beq.n	800461a <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80045e6:	4a2a      	ldr	r2, [pc, #168]	; (8004690 <HAL_OSPIM_Config+0x9c4>)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80045fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045fe:	049b      	lsls	r3, r3, #18
 8004600:	431a      	orrs	r2, r3
 8004602:	4923      	ldr	r1, [pc, #140]	; (8004690 <HAL_OSPIM_Config+0x9c4>)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	3b01      	subs	r3, #1
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	605a      	str	r2, [r3, #4]
 8004618:	e01c      	b.n	8004654 <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d018      	beq.n	8004654 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8004622:	4a1b      	ldr	r2, [pc, #108]	; (8004690 <HAL_OSPIM_Config+0x9c4>)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	3b01      	subs	r3, #1
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463a:	069b      	lsls	r3, r3, #26
 800463c:	431a      	orrs	r2, r3
 800463e:	4914      	ldr	r1, [pc, #80]	; (8004690 <HAL_OSPIM_Config+0x9c4>)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	3b01      	subs	r3, #1
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004654:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <HAL_OSPIM_Config+0x9c8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a0b      	ldr	r2, [pc, #44]	; (8004694 <HAL_OSPIM_Config+0x9c8>)
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800466c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004678:	4b07      	ldr	r3, [pc, #28]	; (8004698 <HAL_OSPIM_Config+0x9cc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a06      	ldr	r2, [pc, #24]	; (8004698 <HAL_OSPIM_Config+0x9cc>)
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004684:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004688:	4618      	mov	r0, r3
 800468a:	3750      	adds	r7, #80	; 0x50
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	5200b400 	.word	0x5200b400
 8004694:	52005000 	.word	0x52005000
 8004698:	5200a000 	.word	0x5200a000

0800469c <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b8:	d122      	bne.n	8004700 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d014      	beq.n	80046f2 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2202      	movs	r2, #2
 80046ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80046de:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0202 	orr.w	r2, r2, #2
 80046ee:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 80046f0:	e00c      	b.n	800470c <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2202      	movs	r2, #2
 80046f6:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f7ff fa91 	bl	8003c20 <HAL_OSPI_AbortCpltCallback>
}
 80046fe:	e005      	b.n	800470c <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2202      	movs	r2, #2
 8004704:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff fa80 	bl	8003c0c <HAL_OSPI_ErrorCallback>
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	4613      	mov	r3, r2
 8004722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004724:	e01a      	b.n	800475c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472c:	d016      	beq.n	800475c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472e:	f7fd fb57 	bl	8001de0 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	429a      	cmp	r2, r3
 800473c:	d302      	bcc.n	8004744 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10b      	bne.n	800475c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800474a:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004750:	f043 0201 	orr.w	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e00e      	b.n	800477a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6a1a      	ldr	r2, [r3, #32]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	4013      	ands	r3, r2
 8004766:	2b00      	cmp	r3, #0
 8004768:	bf14      	ite	ne
 800476a:	2301      	movne	r3, #1
 800476c:	2300      	moveq	r3, #0
 800476e:	b2db      	uxtb	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	79fb      	ldrb	r3, [r7, #7]
 8004774:	429a      	cmp	r2, r3
 8004776:	d1d6      	bne.n	8004726 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8004784:	b480      	push	{r7}
 8004786:	b089      	sub	sp, #36	; 0x24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047a0:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10a      	bne.n	80047c0 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d114      	bne.n	80047f2 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80047d0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80047da:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80047e4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	e02c      	b.n	800484c <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d114      	bne.n	8004824 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004802:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800480c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004816:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	e013      	b.n	800484c <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800482c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004836:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004840:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800484a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004854:	431a      	orrs	r2, r3
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	2b00      	cmp	r3, #0
 8004860:	d012      	beq.n	8004888 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487a:	4319      	orrs	r1, r3
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	430b      	orrs	r3, r1
 8004882:	431a      	orrs	r2, r3
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f023 021f 	bic.w	r2, r3, #31
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004894:	431a      	orrs	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d105      	bne.n	80048b6 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3a01      	subs	r2, #1
 80048b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 8095 	beq.w	80049ea <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d053      	beq.n	8004970 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01e      	beq.n	800490e <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	4b64      	ldr	r3, [pc, #400]	; (8004a68 <OSPI_ConfigCmd+0x2e4>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	68d1      	ldr	r1, [r2, #12]
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	6952      	ldr	r2, [r2, #20]
 80048e0:	4311      	orrs	r1, r2
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	6912      	ldr	r2, [r2, #16]
 80048e6:	4311      	orrs	r1, r2
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	69d2      	ldr	r2, [r2, #28]
 80048ec:	4311      	orrs	r1, r2
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048f2:	4311      	orrs	r1, r2
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	6a12      	ldr	r2, [r2, #32]
 80048f8:	4311      	orrs	r1, r2
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048fe:	4311      	orrs	r1, r2
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004904:	430a      	orrs	r2, r1
 8004906:	431a      	orrs	r2, r3
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	e026      	b.n	800495c <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4b56      	ldr	r3, [pc, #344]	; (8004a6c <OSPI_ConfigCmd+0x2e8>)
 8004914:	4013      	ands	r3, r2
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	68d1      	ldr	r1, [r2, #12]
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	6952      	ldr	r2, [r2, #20]
 800491e:	4311      	orrs	r1, r2
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	6912      	ldr	r2, [r2, #16]
 8004924:	4311      	orrs	r1, r2
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	69d2      	ldr	r2, [r2, #28]
 800492a:	4311      	orrs	r1, r2
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004930:	4311      	orrs	r1, r2
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	6a12      	ldr	r2, [r2, #32]
 8004936:	430a      	orrs	r2, r1
 8004938:	431a      	orrs	r2, r3
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004946:	d109      	bne.n	800495c <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800494c:	2b08      	cmp	r3, #8
 800494e:	d105      	bne.n	800495c <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	6992      	ldr	r2, [r2, #24]
 800496c:	649a      	str	r2, [r3, #72]	; 0x48
 800496e:	e074      	b.n	8004a5a <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	2b00      	cmp	r3, #0
 8004976:	d015      	beq.n	80049a4 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	4b3c      	ldr	r3, [pc, #240]	; (8004a70 <OSPI_ConfigCmd+0x2ec>)
 800497e:	4013      	ands	r3, r2
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	68d1      	ldr	r1, [r2, #12]
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	6952      	ldr	r2, [r2, #20]
 8004988:	4311      	orrs	r1, r2
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	6912      	ldr	r2, [r2, #16]
 800498e:	4311      	orrs	r1, r2
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004994:	4311      	orrs	r1, r2
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800499a:	430a      	orrs	r2, r1
 800499c:	431a      	orrs	r2, r3
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	e01d      	b.n	80049e0 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68d9      	ldr	r1, [r3, #12]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	4319      	orrs	r1, r3
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	430b      	orrs	r3, r1
 80049bc:	431a      	orrs	r2, r3
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ca:	d109      	bne.n	80049e0 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d105      	bne.n	80049e0 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	e037      	b.n	8004a5a <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d02e      	beq.n	8004a50 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d015      	beq.n	8004a26 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b1d      	ldr	r3, [pc, #116]	; (8004a74 <OSPI_ConfigCmd+0x2f0>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	69d1      	ldr	r1, [r2, #28]
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a0a:	4311      	orrs	r1, r2
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	6a12      	ldr	r2, [r2, #32]
 8004a10:	4311      	orrs	r1, r2
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a16:	4311      	orrs	r1, r2
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	e00e      	b.n	8004a44 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	69d9      	ldr	r1, [r3, #28]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	4319      	orrs	r1, r3
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	6992      	ldr	r2, [r2, #24]
 8004a4c:	649a      	str	r2, [r3, #72]	; 0x48
 8004a4e:	e004      	b.n	8004a5a <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2208      	movs	r2, #8
 8004a58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8004a5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3724      	adds	r7, #36	; 0x24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	f0ffc0c0 	.word	0xf0ffc0c0
 8004a6c:	ffffc0c0 	.word	0xffffc0c0
 8004a70:	f0ffffc0 	.word	0xf0ffffc0
 8004a74:	f0ffc0ff 	.word	0xf0ffc0ff

08004a78 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	6039      	str	r1, [r7, #0]
 8004a82:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <OSPIM_GetConfig+0x26>
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d802      	bhi.n	8004a9e <OSPIM_GetConfig+0x26>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d102      	bne.n	8004aa4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	75fb      	strb	r3, [r7, #23]
 8004aa2:	e098      	b.n	8004bd6 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2200      	movs	r2, #0
 8004aae:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d10b      	bne.n	8004ae0 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8004ac8:	4b46      	ldr	r3, [pc, #280]	; (8004be4 <OSPIM_GetConfig+0x16c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004ad4:	4b44      	ldr	r3, [pc, #272]	; (8004be8 <OSPIM_GetConfig+0x170>)
 8004ad6:	613b      	str	r3, [r7, #16]
 8004ad8:	e002      	b.n	8004ae0 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8004ada:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ade:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	e074      	b.n	8004bd0 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8004ae6:	4a3f      	ldr	r2, [pc, #252]	; (8004be4 <OSPIM_GetConfig+0x16c>)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	4053      	eors	r3, r2
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d103      	bne.n	8004b12 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f003 0310 	and.w	r3, r3, #16
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	4053      	eors	r3, r2
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d103      	bne.n	8004b32 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00a      	beq.n	8004b52 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	4053      	eors	r3, r2
 8004b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d103      	bne.n	8004b52 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d018      	beq.n	8004b8e <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4053      	eors	r3, r2
 8004b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d111      	bne.n	8004b8e <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d106      	bne.n	8004b82 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3301      	adds	r3, #1
 8004b78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	60da      	str	r2, [r3, #12]
 8004b80:	e005      	b.n	8004b8e <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3301      	adds	r3, #1
 8004b86:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d018      	beq.n	8004bca <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4053      	eors	r3, r2
 8004b9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d111      	bne.n	8004bca <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d106      	bne.n	8004bbe <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	611a      	str	r2, [r3, #16]
 8004bbc:	e005      	b.n	8004bca <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d987      	bls.n	8004ae6 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8004bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	5200b400 	.word	0x5200b400
 8004be8:	04040222 	.word	0x04040222

08004bec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004bf4:	4b19      	ldr	r3, [pc, #100]	; (8004c5c <HAL_PWREx_ConfigSupply+0x70>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d00a      	beq.n	8004c16 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c00:	4b16      	ldr	r3, [pc, #88]	; (8004c5c <HAL_PWREx_ConfigSupply+0x70>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d001      	beq.n	8004c12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e01f      	b.n	8004c52 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e01d      	b.n	8004c52 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c16:	4b11      	ldr	r3, [pc, #68]	; (8004c5c <HAL_PWREx_ConfigSupply+0x70>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f023 0207 	bic.w	r2, r3, #7
 8004c1e:	490f      	ldr	r1, [pc, #60]	; (8004c5c <HAL_PWREx_ConfigSupply+0x70>)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c26:	f7fd f8db 	bl	8001de0 <HAL_GetTick>
 8004c2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c2c:	e009      	b.n	8004c42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c2e:	f7fd f8d7 	bl	8001de0 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c3c:	d901      	bls.n	8004c42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e007      	b.n	8004c52 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c42:	4b06      	ldr	r3, [pc, #24]	; (8004c5c <HAL_PWREx_ConfigSupply+0x70>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c4e:	d1ee      	bne.n	8004c2e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	58024800 	.word	0x58024800

08004c60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08c      	sub	sp, #48	; 0x30
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e39d      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 8087 	beq.w	8004d8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c80:	4b88      	ldr	r3, [pc, #544]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c8a:	4b86      	ldr	r3, [pc, #536]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c92:	2b10      	cmp	r3, #16
 8004c94:	d007      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x46>
 8004c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c98:	2b18      	cmp	r3, #24
 8004c9a:	d110      	bne.n	8004cbe <HAL_RCC_OscConfig+0x5e>
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d10b      	bne.n	8004cbe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca6:	4b7f      	ldr	r3, [pc, #508]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d06c      	beq.n	8004d8c <HAL_RCC_OscConfig+0x12c>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d168      	bne.n	8004d8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e377      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc6:	d106      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x76>
 8004cc8:	4b76      	ldr	r3, [pc, #472]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a75      	ldr	r2, [pc, #468]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	e02e      	b.n	8004d34 <HAL_RCC_OscConfig+0xd4>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x98>
 8004cde:	4b71      	ldr	r3, [pc, #452]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a70      	ldr	r2, [pc, #448]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	4b6e      	ldr	r3, [pc, #440]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a6d      	ldr	r2, [pc, #436]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e01d      	b.n	8004d34 <HAL_RCC_OscConfig+0xd4>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCC_OscConfig+0xbc>
 8004d02:	4b68      	ldr	r3, [pc, #416]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a67      	ldr	r2, [pc, #412]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	4b65      	ldr	r3, [pc, #404]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a64      	ldr	r2, [pc, #400]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	e00b      	b.n	8004d34 <HAL_RCC_OscConfig+0xd4>
 8004d1c:	4b61      	ldr	r3, [pc, #388]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a60      	ldr	r2, [pc, #384]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	4b5e      	ldr	r3, [pc, #376]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a5d      	ldr	r2, [pc, #372]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d013      	beq.n	8004d64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fd f850 	bl	8001de0 <HAL_GetTick>
 8004d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d44:	f7fd f84c 	bl	8001de0 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b64      	cmp	r3, #100	; 0x64
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e32b      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d56:	4b53      	ldr	r3, [pc, #332]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0xe4>
 8004d62:	e014      	b.n	8004d8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fd f83c 	bl	8001de0 <HAL_GetTick>
 8004d68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d6c:	f7fd f838 	bl	8001de0 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b64      	cmp	r3, #100	; 0x64
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e317      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d7e:	4b49      	ldr	r3, [pc, #292]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x10c>
 8004d8a:	e000      	b.n	8004d8e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 808c 	beq.w	8004eb4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d9c:	4b41      	ldr	r3, [pc, #260]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004da4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004da6:	4b3f      	ldr	r3, [pc, #252]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x162>
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	2b18      	cmp	r3, #24
 8004db6:	d137      	bne.n	8004e28 <HAL_RCC_OscConfig+0x1c8>
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d132      	bne.n	8004e28 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc2:	4b38      	ldr	r3, [pc, #224]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_RCC_OscConfig+0x17a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e2e9      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dda:	4b32      	ldr	r3, [pc, #200]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 0219 	bic.w	r2, r3, #25
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	492f      	ldr	r1, [pc, #188]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dec:	f7fc fff8 	bl	8001de0 <HAL_GetTick>
 8004df0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004df4:	f7fc fff4 	bl	8001de0 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e2d3      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e06:	4b27      	ldr	r3, [pc, #156]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e12:	4b24      	ldr	r3, [pc, #144]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	061b      	lsls	r3, r3, #24
 8004e20:	4920      	ldr	r1, [pc, #128]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e26:	e045      	b.n	8004eb4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d026      	beq.n	8004e7e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e30:	4b1c      	ldr	r3, [pc, #112]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f023 0219 	bic.w	r2, r3, #25
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	4919      	ldr	r1, [pc, #100]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e42:	f7fc ffcd 	bl	8001de0 <HAL_GetTick>
 8004e46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e4a:	f7fc ffc9 	bl	8001de0 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e2a8      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e5c:	4b11      	ldr	r3, [pc, #68]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e68:	4b0e      	ldr	r3, [pc, #56]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	061b      	lsls	r3, r3, #24
 8004e76:	490b      	ldr	r1, [pc, #44]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	604b      	str	r3, [r1, #4]
 8004e7c:	e01a      	b.n	8004eb4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e7e:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a08      	ldr	r2, [pc, #32]	; (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004e84:	f023 0301 	bic.w	r3, r3, #1
 8004e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8a:	f7fc ffa9 	bl	8001de0 <HAL_GetTick>
 8004e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e90:	e00a      	b.n	8004ea8 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e92:	f7fc ffa5 	bl	8001de0 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d903      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e284      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
 8004ea4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ea8:	4b96      	ldr	r3, [pc, #600]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1ee      	bne.n	8004e92 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d06a      	beq.n	8004f96 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ec0:	4b90      	ldr	r3, [pc, #576]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ec8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004eca:	4b8e      	ldr	r3, [pc, #568]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d007      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x286>
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b18      	cmp	r3, #24
 8004eda:	d11b      	bne.n	8004f14 <HAL_RCC_OscConfig+0x2b4>
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d116      	bne.n	8004f14 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ee6:	4b87      	ldr	r3, [pc, #540]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d005      	beq.n	8004efe <HAL_RCC_OscConfig+0x29e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	2b80      	cmp	r3, #128	; 0x80
 8004ef8:	d001      	beq.n	8004efe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e257      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004efe:	4b81      	ldr	r3, [pc, #516]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	061b      	lsls	r3, r3, #24
 8004f0c:	497d      	ldr	r1, [pc, #500]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f12:	e040      	b.n	8004f96 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d023      	beq.n	8004f64 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f1c:	4b79      	ldr	r3, [pc, #484]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a78      	ldr	r2, [pc, #480]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7fc ff5a 	bl	8001de0 <HAL_GetTick>
 8004f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f30:	f7fc ff56 	bl	8001de0 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e235      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f42:	4b70      	ldr	r3, [pc, #448]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0f0      	beq.n	8004f30 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f4e:	4b6d      	ldr	r3, [pc, #436]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	061b      	lsls	r3, r3, #24
 8004f5c:	4969      	ldr	r1, [pc, #420]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60cb      	str	r3, [r1, #12]
 8004f62:	e018      	b.n	8004f96 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f64:	4b67      	ldr	r3, [pc, #412]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a66      	ldr	r2, [pc, #408]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f70:	f7fc ff36 	bl	8001de0 <HAL_GetTick>
 8004f74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f78:	f7fc ff32 	bl	8001de0 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e211      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f8a:	4b5e      	ldr	r3, [pc, #376]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d036      	beq.n	8005010 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d019      	beq.n	8004fde <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004faa:	4b56      	ldr	r3, [pc, #344]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fae:	4a55      	ldr	r2, [pc, #340]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb6:	f7fc ff13 	bl	8001de0 <HAL_GetTick>
 8004fba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fbe:	f7fc ff0f 	bl	8001de0 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e1ee      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fd0:	4b4c      	ldr	r3, [pc, #304]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <HAL_RCC_OscConfig+0x35e>
 8004fdc:	e018      	b.n	8005010 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fde:	4b49      	ldr	r3, [pc, #292]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe2:	4a48      	ldr	r2, [pc, #288]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8004fe4:	f023 0301 	bic.w	r3, r3, #1
 8004fe8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fea:	f7fc fef9 	bl	8001de0 <HAL_GetTick>
 8004fee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ff2:	f7fc fef5 	bl	8001de0 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e1d4      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005004:	4b3f      	ldr	r3, [pc, #252]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8005006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1f0      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	2b00      	cmp	r3, #0
 800501a:	d036      	beq.n	800508a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d019      	beq.n	8005058 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005024:	4b37      	ldr	r3, [pc, #220]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a36      	ldr	r2, [pc, #216]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 800502a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800502e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005030:	f7fc fed6 	bl	8001de0 <HAL_GetTick>
 8005034:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005038:	f7fc fed2 	bl	8001de0 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e1b1      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800504a:	4b2e      	ldr	r3, [pc, #184]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0f0      	beq.n	8005038 <HAL_RCC_OscConfig+0x3d8>
 8005056:	e018      	b.n	800508a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005058:	4b2a      	ldr	r3, [pc, #168]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a29      	ldr	r2, [pc, #164]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 800505e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005062:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005064:	f7fc febc 	bl	8001de0 <HAL_GetTick>
 8005068:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800506c:	f7fc feb8 	bl	8001de0 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e197      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800507e:	4b21      	ldr	r3, [pc, #132]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f0      	bne.n	800506c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 8086 	beq.w	80051a4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005098:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <HAL_RCC_OscConfig+0x4a8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1a      	ldr	r2, [pc, #104]	; (8005108 <HAL_RCC_OscConfig+0x4a8>)
 800509e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050a4:	f7fc fe9c 	bl	8001de0 <HAL_GetTick>
 80050a8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050ac:	f7fc fe98 	bl	8001de0 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b64      	cmp	r3, #100	; 0x64
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e177      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050be:	4b12      	ldr	r3, [pc, #72]	; (8005108 <HAL_RCC_OscConfig+0x4a8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d106      	bne.n	80050e0 <HAL_RCC_OscConfig+0x480>
 80050d2:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	4a0b      	ldr	r2, [pc, #44]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	6713      	str	r3, [r2, #112]	; 0x70
 80050de:	e032      	b.n	8005146 <HAL_RCC_OscConfig+0x4e6>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d111      	bne.n	800510c <HAL_RCC_OscConfig+0x4ac>
 80050e8:	4b06      	ldr	r3, [pc, #24]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 80050ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ec:	4a05      	ldr	r2, [pc, #20]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 80050ee:	f023 0301 	bic.w	r3, r3, #1
 80050f2:	6713      	str	r3, [r2, #112]	; 0x70
 80050f4:	4b03      	ldr	r3, [pc, #12]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 80050f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f8:	4a02      	ldr	r2, [pc, #8]	; (8005104 <HAL_RCC_OscConfig+0x4a4>)
 80050fa:	f023 0304 	bic.w	r3, r3, #4
 80050fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005100:	e021      	b.n	8005146 <HAL_RCC_OscConfig+0x4e6>
 8005102:	bf00      	nop
 8005104:	58024400 	.word	0x58024400
 8005108:	58024800 	.word	0x58024800
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	2b05      	cmp	r3, #5
 8005112:	d10c      	bne.n	800512e <HAL_RCC_OscConfig+0x4ce>
 8005114:	4b83      	ldr	r3, [pc, #524]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	4a82      	ldr	r2, [pc, #520]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 800511a:	f043 0304 	orr.w	r3, r3, #4
 800511e:	6713      	str	r3, [r2, #112]	; 0x70
 8005120:	4b80      	ldr	r3, [pc, #512]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 8005122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005124:	4a7f      	ldr	r2, [pc, #508]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	6713      	str	r3, [r2, #112]	; 0x70
 800512c:	e00b      	b.n	8005146 <HAL_RCC_OscConfig+0x4e6>
 800512e:	4b7d      	ldr	r3, [pc, #500]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	4a7c      	ldr	r2, [pc, #496]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 8005134:	f023 0301 	bic.w	r3, r3, #1
 8005138:	6713      	str	r3, [r2, #112]	; 0x70
 800513a:	4b7a      	ldr	r3, [pc, #488]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	4a79      	ldr	r2, [pc, #484]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 8005140:	f023 0304 	bic.w	r3, r3, #4
 8005144:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d015      	beq.n	800517a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514e:	f7fc fe47 	bl	8001de0 <HAL_GetTick>
 8005152:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005154:	e00a      	b.n	800516c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005156:	f7fc fe43 	bl	8001de0 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	f241 3288 	movw	r2, #5000	; 0x1388
 8005164:	4293      	cmp	r3, r2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e120      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800516c:	4b6d      	ldr	r3, [pc, #436]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0ee      	beq.n	8005156 <HAL_RCC_OscConfig+0x4f6>
 8005178:	e014      	b.n	80051a4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517a:	f7fc fe31 	bl	8001de0 <HAL_GetTick>
 800517e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005180:	e00a      	b.n	8005198 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005182:	f7fc fe2d 	bl	8001de0 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005190:	4293      	cmp	r3, r2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e10a      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005198:	4b62      	ldr	r3, [pc, #392]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 800519a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1ee      	bne.n	8005182 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 80ff 	beq.w	80053ac <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80051ae:	4b5d      	ldr	r3, [pc, #372]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051b6:	2b18      	cmp	r3, #24
 80051b8:	f000 80ba 	beq.w	8005330 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	f040 8095 	bne.w	80052f0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c6:	4b57      	ldr	r3, [pc, #348]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a56      	ldr	r2, [pc, #344]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 80051cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d2:	f7fc fe05 	bl	8001de0 <HAL_GetTick>
 80051d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051da:	f7fc fe01 	bl	8001de0 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e0e0      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051ec:	4b4d      	ldr	r3, [pc, #308]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1f0      	bne.n	80051da <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051f8:	4b4a      	ldr	r3, [pc, #296]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 80051fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051fc:	4b4a      	ldr	r3, [pc, #296]	; (8005328 <HAL_RCC_OscConfig+0x6c8>)
 80051fe:	4013      	ands	r3, r2
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005208:	0112      	lsls	r2, r2, #4
 800520a:	430a      	orrs	r2, r1
 800520c:	4945      	ldr	r1, [pc, #276]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 800520e:	4313      	orrs	r3, r2
 8005210:	628b      	str	r3, [r1, #40]	; 0x28
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	3b01      	subs	r3, #1
 8005218:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005220:	3b01      	subs	r3, #1
 8005222:	025b      	lsls	r3, r3, #9
 8005224:	b29b      	uxth	r3, r3
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	3b01      	subs	r3, #1
 800522e:	041b      	lsls	r3, r3, #16
 8005230:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523a:	3b01      	subs	r3, #1
 800523c:	061b      	lsls	r3, r3, #24
 800523e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005242:	4938      	ldr	r1, [pc, #224]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 8005244:	4313      	orrs	r3, r2
 8005246:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005248:	4b36      	ldr	r3, [pc, #216]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	4a35      	ldr	r2, [pc, #212]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 800524e:	f023 0301 	bic.w	r3, r3, #1
 8005252:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005254:	4b33      	ldr	r3, [pc, #204]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 8005256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005258:	4b34      	ldr	r3, [pc, #208]	; (800532c <HAL_RCC_OscConfig+0x6cc>)
 800525a:	4013      	ands	r3, r2
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005260:	00d2      	lsls	r2, r2, #3
 8005262:	4930      	ldr	r1, [pc, #192]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 8005264:	4313      	orrs	r3, r2
 8005266:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005268:	4b2e      	ldr	r3, [pc, #184]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	f023 020c 	bic.w	r2, r3, #12
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	492b      	ldr	r1, [pc, #172]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 8005276:	4313      	orrs	r3, r2
 8005278:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800527a:	4b2a      	ldr	r3, [pc, #168]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	f023 0202 	bic.w	r2, r3, #2
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005286:	4927      	ldr	r1, [pc, #156]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 8005288:	4313      	orrs	r3, r2
 800528a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800528c:	4b25      	ldr	r3, [pc, #148]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	4a24      	ldr	r2, [pc, #144]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 8005292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005296:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005298:	4b22      	ldr	r3, [pc, #136]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	4a21      	ldr	r2, [pc, #132]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 800529e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80052a4:	4b1f      	ldr	r3, [pc, #124]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	4a1e      	ldr	r2, [pc, #120]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 80052aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80052b0:	4b1c      	ldr	r3, [pc, #112]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	4a1b      	ldr	r2, [pc, #108]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052bc:	4b19      	ldr	r3, [pc, #100]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a18      	ldr	r2, [pc, #96]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 80052c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c8:	f7fc fd8a 	bl	8001de0 <HAL_GetTick>
 80052cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d0:	f7fc fd86 	bl	8001de0 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e065      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052e2:	4b10      	ldr	r3, [pc, #64]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0f0      	beq.n	80052d0 <HAL_RCC_OscConfig+0x670>
 80052ee:	e05d      	b.n	80053ac <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f0:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a0b      	ldr	r2, [pc, #44]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 80052f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fc:	f7fc fd70 	bl	8001de0 <HAL_GetTick>
 8005300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005304:	f7fc fd6c 	bl	8001de0 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e04b      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005316:	4b03      	ldr	r3, [pc, #12]	; (8005324 <HAL_RCC_OscConfig+0x6c4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f0      	bne.n	8005304 <HAL_RCC_OscConfig+0x6a4>
 8005322:	e043      	b.n	80053ac <HAL_RCC_OscConfig+0x74c>
 8005324:	58024400 	.word	0x58024400
 8005328:	fffffc0c 	.word	0xfffffc0c
 800532c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005330:	4b21      	ldr	r3, [pc, #132]	; (80053b8 <HAL_RCC_OscConfig+0x758>)
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005336:	4b20      	ldr	r3, [pc, #128]	; (80053b8 <HAL_RCC_OscConfig+0x758>)
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	2b01      	cmp	r3, #1
 8005342:	d031      	beq.n	80053a8 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f003 0203 	and.w	r2, r3, #3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800534e:	429a      	cmp	r2, r3
 8005350:	d12a      	bne.n	80053a8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	091b      	lsrs	r3, r3, #4
 8005356:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800535e:	429a      	cmp	r2, r3
 8005360:	d122      	bne.n	80053a8 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800536e:	429a      	cmp	r2, r3
 8005370:	d11a      	bne.n	80053a8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	0a5b      	lsrs	r3, r3, #9
 8005376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005380:	429a      	cmp	r2, r3
 8005382:	d111      	bne.n	80053a8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	0c1b      	lsrs	r3, r3, #16
 8005388:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005392:	429a      	cmp	r2, r3
 8005394:	d108      	bne.n	80053a8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	0e1b      	lsrs	r3, r3, #24
 800539a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d001      	beq.n	80053ac <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e000      	b.n	80053ae <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3730      	adds	r7, #48	; 0x30
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	58024400 	.word	0x58024400

080053bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e19c      	b.n	800570a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053d0:	4b8a      	ldr	r3, [pc, #552]	; (80055fc <HAL_RCC_ClockConfig+0x240>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 030f 	and.w	r3, r3, #15
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d910      	bls.n	8005400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053de:	4b87      	ldr	r3, [pc, #540]	; (80055fc <HAL_RCC_ClockConfig+0x240>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f023 020f 	bic.w	r2, r3, #15
 80053e6:	4985      	ldr	r1, [pc, #532]	; (80055fc <HAL_RCC_ClockConfig+0x240>)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ee:	4b83      	ldr	r3, [pc, #524]	; (80055fc <HAL_RCC_ClockConfig+0x240>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d001      	beq.n	8005400 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e184      	b.n	800570a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b00      	cmp	r3, #0
 800540a:	d010      	beq.n	800542e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	4b7b      	ldr	r3, [pc, #492]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005418:	429a      	cmp	r2, r3
 800541a:	d908      	bls.n	800542e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800541c:	4b78      	ldr	r3, [pc, #480]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	4975      	ldr	r1, [pc, #468]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 800542a:	4313      	orrs	r3, r2
 800542c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d010      	beq.n	800545c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	695a      	ldr	r2, [r3, #20]
 800543e:	4b70      	ldr	r3, [pc, #448]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005446:	429a      	cmp	r2, r3
 8005448:	d908      	bls.n	800545c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800544a:	4b6d      	ldr	r3, [pc, #436]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	496a      	ldr	r1, [pc, #424]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 8005458:	4313      	orrs	r3, r2
 800545a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b00      	cmp	r3, #0
 8005466:	d010      	beq.n	800548a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699a      	ldr	r2, [r3, #24]
 800546c:	4b64      	ldr	r3, [pc, #400]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005474:	429a      	cmp	r2, r3
 8005476:	d908      	bls.n	800548a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005478:	4b61      	ldr	r3, [pc, #388]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	495e      	ldr	r1, [pc, #376]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 8005486:	4313      	orrs	r3, r2
 8005488:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	d010      	beq.n	80054b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69da      	ldr	r2, [r3, #28]
 800549a:	4b59      	ldr	r3, [pc, #356]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d908      	bls.n	80054b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80054a6:	4b56      	ldr	r3, [pc, #344]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	4953      	ldr	r1, [pc, #332]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d010      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	4b4d      	ldr	r3, [pc, #308]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	f003 030f 	and.w	r3, r3, #15
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d908      	bls.n	80054e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054d4:	4b4a      	ldr	r3, [pc, #296]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	f023 020f 	bic.w	r2, r3, #15
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4947      	ldr	r1, [pc, #284]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d055      	beq.n	800559e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80054f2:	4b43      	ldr	r3, [pc, #268]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	4940      	ldr	r1, [pc, #256]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 8005500:	4313      	orrs	r3, r2
 8005502:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b02      	cmp	r3, #2
 800550a:	d107      	bne.n	800551c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800550c:	4b3c      	ldr	r3, [pc, #240]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d121      	bne.n	800555c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e0f6      	b.n	800570a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b03      	cmp	r3, #3
 8005522:	d107      	bne.n	8005534 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005524:	4b36      	ldr	r3, [pc, #216]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d115      	bne.n	800555c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e0ea      	b.n	800570a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d107      	bne.n	800554c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800553c:	4b30      	ldr	r3, [pc, #192]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005544:	2b00      	cmp	r3, #0
 8005546:	d109      	bne.n	800555c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e0de      	b.n	800570a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800554c:	4b2c      	ldr	r3, [pc, #176]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0d6      	b.n	800570a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800555c:	4b28      	ldr	r3, [pc, #160]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	f023 0207 	bic.w	r2, r3, #7
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	4925      	ldr	r1, [pc, #148]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 800556a:	4313      	orrs	r3, r2
 800556c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556e:	f7fc fc37 	bl	8001de0 <HAL_GetTick>
 8005572:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005574:	e00a      	b.n	800558c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005576:	f7fc fc33 	bl	8001de0 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	f241 3288 	movw	r2, #5000	; 0x1388
 8005584:	4293      	cmp	r3, r2
 8005586:	d901      	bls.n	800558c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e0be      	b.n	800570a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558c:	4b1c      	ldr	r3, [pc, #112]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	429a      	cmp	r2, r3
 800559c:	d1eb      	bne.n	8005576 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d010      	beq.n	80055cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	4b14      	ldr	r3, [pc, #80]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d208      	bcs.n	80055cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055ba:	4b11      	ldr	r3, [pc, #68]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	f023 020f 	bic.w	r2, r3, #15
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	490e      	ldr	r1, [pc, #56]	; (8005600 <HAL_RCC_ClockConfig+0x244>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055cc:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <HAL_RCC_ClockConfig+0x240>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 030f 	and.w	r3, r3, #15
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d214      	bcs.n	8005604 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055da:	4b08      	ldr	r3, [pc, #32]	; (80055fc <HAL_RCC_ClockConfig+0x240>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f023 020f 	bic.w	r2, r3, #15
 80055e2:	4906      	ldr	r1, [pc, #24]	; (80055fc <HAL_RCC_ClockConfig+0x240>)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ea:	4b04      	ldr	r3, [pc, #16]	; (80055fc <HAL_RCC_ClockConfig+0x240>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d005      	beq.n	8005604 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e086      	b.n	800570a <HAL_RCC_ClockConfig+0x34e>
 80055fc:	52002000 	.word	0x52002000
 8005600:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	d010      	beq.n	8005632 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	4b3f      	ldr	r3, [pc, #252]	; (8005714 <HAL_RCC_ClockConfig+0x358>)
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800561c:	429a      	cmp	r2, r3
 800561e:	d208      	bcs.n	8005632 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005620:	4b3c      	ldr	r3, [pc, #240]	; (8005714 <HAL_RCC_ClockConfig+0x358>)
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	4939      	ldr	r1, [pc, #228]	; (8005714 <HAL_RCC_ClockConfig+0x358>)
 800562e:	4313      	orrs	r3, r2
 8005630:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d010      	beq.n	8005660 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695a      	ldr	r2, [r3, #20]
 8005642:	4b34      	ldr	r3, [pc, #208]	; (8005714 <HAL_RCC_ClockConfig+0x358>)
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800564a:	429a      	cmp	r2, r3
 800564c:	d208      	bcs.n	8005660 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800564e:	4b31      	ldr	r3, [pc, #196]	; (8005714 <HAL_RCC_ClockConfig+0x358>)
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	492e      	ldr	r1, [pc, #184]	; (8005714 <HAL_RCC_ClockConfig+0x358>)
 800565c:	4313      	orrs	r3, r2
 800565e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0310 	and.w	r3, r3, #16
 8005668:	2b00      	cmp	r3, #0
 800566a:	d010      	beq.n	800568e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699a      	ldr	r2, [r3, #24]
 8005670:	4b28      	ldr	r3, [pc, #160]	; (8005714 <HAL_RCC_ClockConfig+0x358>)
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005678:	429a      	cmp	r2, r3
 800567a:	d208      	bcs.n	800568e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800567c:	4b25      	ldr	r3, [pc, #148]	; (8005714 <HAL_RCC_ClockConfig+0x358>)
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	4922      	ldr	r1, [pc, #136]	; (8005714 <HAL_RCC_ClockConfig+0x358>)
 800568a:	4313      	orrs	r3, r2
 800568c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b00      	cmp	r3, #0
 8005698:	d010      	beq.n	80056bc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69da      	ldr	r2, [r3, #28]
 800569e:	4b1d      	ldr	r3, [pc, #116]	; (8005714 <HAL_RCC_ClockConfig+0x358>)
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d208      	bcs.n	80056bc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80056aa:	4b1a      	ldr	r3, [pc, #104]	; (8005714 <HAL_RCC_ClockConfig+0x358>)
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	4917      	ldr	r1, [pc, #92]	; (8005714 <HAL_RCC_ClockConfig+0x358>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80056bc:	f000 f834 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 80056c0:	4602      	mov	r2, r0
 80056c2:	4b14      	ldr	r3, [pc, #80]	; (8005714 <HAL_RCC_ClockConfig+0x358>)
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	0a1b      	lsrs	r3, r3, #8
 80056c8:	f003 030f 	and.w	r3, r3, #15
 80056cc:	4912      	ldr	r1, [pc, #72]	; (8005718 <HAL_RCC_ClockConfig+0x35c>)
 80056ce:	5ccb      	ldrb	r3, [r1, r3]
 80056d0:	f003 031f 	and.w	r3, r3, #31
 80056d4:	fa22 f303 	lsr.w	r3, r2, r3
 80056d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056da:	4b0e      	ldr	r3, [pc, #56]	; (8005714 <HAL_RCC_ClockConfig+0x358>)
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	f003 030f 	and.w	r3, r3, #15
 80056e2:	4a0d      	ldr	r2, [pc, #52]	; (8005718 <HAL_RCC_ClockConfig+0x35c>)
 80056e4:	5cd3      	ldrb	r3, [r2, r3]
 80056e6:	f003 031f 	and.w	r3, r3, #31
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	fa22 f303 	lsr.w	r3, r2, r3
 80056f0:	4a0a      	ldr	r2, [pc, #40]	; (800571c <HAL_RCC_ClockConfig+0x360>)
 80056f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056f4:	4a0a      	ldr	r2, [pc, #40]	; (8005720 <HAL_RCC_ClockConfig+0x364>)
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80056fa:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <HAL_RCC_ClockConfig+0x368>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fc fb24 	bl	8001d4c <HAL_InitTick>
 8005704:	4603      	mov	r3, r0
 8005706:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005708:	7bfb      	ldrb	r3, [r7, #15]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	58024400 	.word	0x58024400
 8005718:	0800b1b8 	.word	0x0800b1b8
 800571c:	24000108 	.word	0x24000108
 8005720:	24000104 	.word	0x24000104
 8005724:	2400010c 	.word	0x2400010c

08005728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005728:	b480      	push	{r7}
 800572a:	b089      	sub	sp, #36	; 0x24
 800572c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800572e:	4bb3      	ldr	r3, [pc, #716]	; (80059fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005736:	2b18      	cmp	r3, #24
 8005738:	f200 8155 	bhi.w	80059e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800573c:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <HAL_RCC_GetSysClockFreq+0x1c>)
 800573e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005742:	bf00      	nop
 8005744:	080057a9 	.word	0x080057a9
 8005748:	080059e7 	.word	0x080059e7
 800574c:	080059e7 	.word	0x080059e7
 8005750:	080059e7 	.word	0x080059e7
 8005754:	080059e7 	.word	0x080059e7
 8005758:	080059e7 	.word	0x080059e7
 800575c:	080059e7 	.word	0x080059e7
 8005760:	080059e7 	.word	0x080059e7
 8005764:	080057cf 	.word	0x080057cf
 8005768:	080059e7 	.word	0x080059e7
 800576c:	080059e7 	.word	0x080059e7
 8005770:	080059e7 	.word	0x080059e7
 8005774:	080059e7 	.word	0x080059e7
 8005778:	080059e7 	.word	0x080059e7
 800577c:	080059e7 	.word	0x080059e7
 8005780:	080059e7 	.word	0x080059e7
 8005784:	080057d5 	.word	0x080057d5
 8005788:	080059e7 	.word	0x080059e7
 800578c:	080059e7 	.word	0x080059e7
 8005790:	080059e7 	.word	0x080059e7
 8005794:	080059e7 	.word	0x080059e7
 8005798:	080059e7 	.word	0x080059e7
 800579c:	080059e7 	.word	0x080059e7
 80057a0:	080059e7 	.word	0x080059e7
 80057a4:	080057db 	.word	0x080057db
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057a8:	4b94      	ldr	r3, [pc, #592]	; (80059fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0320 	and.w	r3, r3, #32
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d009      	beq.n	80057c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057b4:	4b91      	ldr	r3, [pc, #580]	; (80059fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	08db      	lsrs	r3, r3, #3
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	4a90      	ldr	r2, [pc, #576]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057c0:	fa22 f303 	lsr.w	r3, r2, r3
 80057c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80057c6:	e111      	b.n	80059ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80057c8:	4b8d      	ldr	r3, [pc, #564]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057ca:	61bb      	str	r3, [r7, #24]
    break;
 80057cc:	e10e      	b.n	80059ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80057ce:	4b8d      	ldr	r3, [pc, #564]	; (8005a04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057d0:	61bb      	str	r3, [r7, #24]
    break;
 80057d2:	e10b      	b.n	80059ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80057d4:	4b8c      	ldr	r3, [pc, #560]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80057d6:	61bb      	str	r3, [r7, #24]
    break;
 80057d8:	e108      	b.n	80059ec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057da:	4b88      	ldr	r3, [pc, #544]	; (80059fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80057e4:	4b85      	ldr	r3, [pc, #532]	; (80059fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e8:	091b      	lsrs	r3, r3, #4
 80057ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80057f0:	4b82      	ldr	r3, [pc, #520]	; (80059fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80057fa:	4b80      	ldr	r3, [pc, #512]	; (80059fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fe:	08db      	lsrs	r3, r3, #3
 8005800:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	fb02 f303 	mul.w	r3, r2, r3
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005812:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 80e1 	beq.w	80059e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b02      	cmp	r3, #2
 8005822:	f000 8083 	beq.w	800592c <HAL_RCC_GetSysClockFreq+0x204>
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b02      	cmp	r3, #2
 800582a:	f200 80a1 	bhi.w	8005970 <HAL_RCC_GetSysClockFreq+0x248>
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_RCC_GetSysClockFreq+0x114>
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d056      	beq.n	80058e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800583a:	e099      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800583c:	4b6f      	ldr	r3, [pc, #444]	; (80059fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0320 	and.w	r3, r3, #32
 8005844:	2b00      	cmp	r3, #0
 8005846:	d02d      	beq.n	80058a4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005848:	4b6c      	ldr	r3, [pc, #432]	; (80059fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	08db      	lsrs	r3, r3, #3
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	4a6b      	ldr	r2, [pc, #428]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005854:	fa22 f303 	lsr.w	r3, r2, r3
 8005858:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	ee07 3a90 	vmov	s15, r3
 8005860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005872:	4b62      	ldr	r3, [pc, #392]	; (80059fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005882:	ed97 6a02 	vldr	s12, [r7, #8]
 8005886:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 800588a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800588e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800589e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80058a2:	e087      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005a10 <HAL_RCC_GetSysClockFreq+0x2e8>
 80058b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058b6:	4b51      	ldr	r3, [pc, #324]	; (80059fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 80058ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058e6:	e065      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005a14 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fa:	4b40      	ldr	r3, [pc, #256]	; (80059fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590a:	ed97 6a02 	vldr	s12, [r7, #8]
 800590e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800591e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800592a:	e043      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005936:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005a18 <HAL_RCC_GetSysClockFreq+0x2f0>
 800593a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800593e:	4b2f      	ldr	r3, [pc, #188]	; (80059fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800594e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005952:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800595e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800596e:	e021      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005a14 <HAL_RCC_GetSysClockFreq+0x2ec>
 800597e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005982:	4b1e      	ldr	r3, [pc, #120]	; (80059fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005992:	ed97 6a02 	vldr	s12, [r7, #8]
 8005996:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 800599a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800599e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059b2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80059b4:	4b11      	ldr	r3, [pc, #68]	; (80059fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b8:	0a5b      	lsrs	r3, r3, #9
 80059ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059be:	3301      	adds	r3, #1
 80059c0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	ee07 3a90 	vmov	s15, r3
 80059c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80059d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059d8:	ee17 3a90 	vmov	r3, s15
 80059dc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80059de:	e005      	b.n	80059ec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61bb      	str	r3, [r7, #24]
    break;
 80059e4:	e002      	b.n	80059ec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80059e6:	4b07      	ldr	r3, [pc, #28]	; (8005a04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059e8:	61bb      	str	r3, [r7, #24]
    break;
 80059ea:	bf00      	nop
  }

  return sysclockfreq;
 80059ec:	69bb      	ldr	r3, [r7, #24]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3724      	adds	r7, #36	; 0x24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	58024400 	.word	0x58024400
 8005a00:	03d09000 	.word	0x03d09000
 8005a04:	003d0900 	.word	0x003d0900
 8005a08:	017d7840 	.word	0x017d7840
 8005a0c:	46000000 	.word	0x46000000
 8005a10:	4c742400 	.word	0x4c742400
 8005a14:	4a742400 	.word	0x4a742400
 8005a18:	4bbebc20 	.word	0x4bbebc20

08005a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a22:	f7ff fe81 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 8005a26:	4602      	mov	r2, r0
 8005a28:	4b10      	ldr	r3, [pc, #64]	; (8005a6c <HAL_RCC_GetHCLKFreq+0x50>)
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	0a1b      	lsrs	r3, r3, #8
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	490f      	ldr	r1, [pc, #60]	; (8005a70 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a34:	5ccb      	ldrb	r3, [r1, r3]
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a40:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <HAL_RCC_GetHCLKFreq+0x50>)
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	4a09      	ldr	r2, [pc, #36]	; (8005a70 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a4a:	5cd3      	ldrb	r3, [r2, r3]
 8005a4c:	f003 031f 	and.w	r3, r3, #31
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	fa22 f303 	lsr.w	r3, r2, r3
 8005a56:	4a07      	ldr	r2, [pc, #28]	; (8005a74 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a5a:	4a07      	ldr	r2, [pc, #28]	; (8005a78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a60:	4b04      	ldr	r3, [pc, #16]	; (8005a74 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a62:	681b      	ldr	r3, [r3, #0]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	58024400 	.word	0x58024400
 8005a70:	0800b1b8 	.word	0x0800b1b8
 8005a74:	24000108 	.word	0x24000108
 8005a78:	24000104 	.word	0x24000104

08005a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a80:	f7ff ffcc 	bl	8005a1c <HAL_RCC_GetHCLKFreq>
 8005a84:	4602      	mov	r2, r0
 8005a86:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	091b      	lsrs	r3, r3, #4
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	4904      	ldr	r1, [pc, #16]	; (8005aa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a92:	5ccb      	ldrb	r3, [r1, r3]
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	58024400 	.word	0x58024400
 8005aa4:	0800b1b8 	.word	0x0800b1b8

08005aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005aac:	f7ff ffb6 	bl	8005a1c <HAL_RCC_GetHCLKFreq>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	0a1b      	lsrs	r3, r3, #8
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	4904      	ldr	r1, [pc, #16]	; (8005ad0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005abe:	5ccb      	ldrb	r3, [r1, r3]
 8005ac0:	f003 031f 	and.w	r3, r3, #31
 8005ac4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	58024400 	.word	0x58024400
 8005ad0:	0800b1b8 	.word	0x0800b1b8

08005ad4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005adc:	2300      	movs	r3, #0
 8005ade:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d03f      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005af8:	d02a      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005afa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005afe:	d824      	bhi.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b04:	d018      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b0a:	d81e      	bhi.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005b10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b14:	d007      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005b16:	e018      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b18:	4ba4      	ldr	r3, [pc, #656]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1c:	4aa3      	ldr	r2, [pc, #652]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b24:	e015      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	2102      	movs	r1, #2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f001 f989 	bl	8006e44 <RCCEx_PLL2_Config>
 8005b32:	4603      	mov	r3, r0
 8005b34:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b36:	e00c      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	3324      	adds	r3, #36	; 0x24
 8005b3c:	2102      	movs	r1, #2
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f001 fa32 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005b44:	4603      	mov	r3, r0
 8005b46:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b48:	e003      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b4e:	e000      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005b50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b52:	7dfb      	ldrb	r3, [r7, #23]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d109      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b58:	4b94      	ldr	r3, [pc, #592]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b64:	4991      	ldr	r1, [pc, #580]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	650b      	str	r3, [r1, #80]	; 0x50
 8005b6a:	e001      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
 8005b6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d03d      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d826      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005b84:	a201      	add	r2, pc, #4	; (adr r2, 8005b8c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8a:	bf00      	nop
 8005b8c:	08005ba1 	.word	0x08005ba1
 8005b90:	08005baf 	.word	0x08005baf
 8005b94:	08005bc1 	.word	0x08005bc1
 8005b98:	08005bd9 	.word	0x08005bd9
 8005b9c:	08005bd9 	.word	0x08005bd9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ba0:	4b82      	ldr	r3, [pc, #520]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba4:	4a81      	ldr	r2, [pc, #516]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005baa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bac:	e015      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f001 f945 	bl	8006e44 <RCCEx_PLL2_Config>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bbe:	e00c      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3324      	adds	r3, #36	; 0x24
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 f9ee 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bd0:	e003      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8005bd6:	e000      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d109      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005be0:	4b72      	ldr	r3, [pc, #456]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be4:	f023 0207 	bic.w	r2, r3, #7
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bec:	496f      	ldr	r1, [pc, #444]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	650b      	str	r3, [r1, #80]	; 0x50
 8005bf2:	e001      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
 8005bf6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d051      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c0a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005c0e:	d036      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005c10:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005c14:	d830      	bhi.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005c16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c1a:	d032      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005c1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c20:	d82a      	bhi.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005c22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c26:	d02e      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005c28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c2c:	d824      	bhi.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c32:	d018      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c38:	d81e      	bhi.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005c3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c42:	d007      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005c44:	e018      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c46:	4b59      	ldr	r3, [pc, #356]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4a:	4a58      	ldr	r2, [pc, #352]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c52:	e019      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3304      	adds	r3, #4
 8005c58:	2100      	movs	r1, #0
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f001 f8f2 	bl	8006e44 <RCCEx_PLL2_Config>
 8005c60:	4603      	mov	r3, r0
 8005c62:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005c64:	e010      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	3324      	adds	r3, #36	; 0x24
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 f99b 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005c72:	4603      	mov	r3, r0
 8005c74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c76:	e007      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c7c:	e004      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005c7e:	bf00      	nop
 8005c80:	e002      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005c82:	bf00      	nop
 8005c84:	e000      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005c86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c88:	7dfb      	ldrb	r3, [r7, #23]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10a      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c8e:	4b47      	ldr	r3, [pc, #284]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c92:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c9c:	4943      	ldr	r1, [pc, #268]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	658b      	str	r3, [r1, #88]	; 0x58
 8005ca2:	e001      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca4:	7dfb      	ldrb	r3, [r7, #23]
 8005ca6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d051      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cba:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005cbe:	d036      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005cc0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005cc4:	d830      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005cc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cca:	d032      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005ccc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cd0:	d82a      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005cd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cd6:	d02e      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005cd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cdc:	d824      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ce2:	d018      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005ce4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ce8:	d81e      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005cee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cf2:	d007      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005cf4:	e018      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cf6:	4b2d      	ldr	r3, [pc, #180]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfa:	4a2c      	ldr	r2, [pc, #176]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d02:	e019      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3304      	adds	r3, #4
 8005d08:	2100      	movs	r1, #0
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f001 f89a 	bl	8006e44 <RCCEx_PLL2_Config>
 8005d10:	4603      	mov	r3, r0
 8005d12:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005d14:	e010      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3324      	adds	r3, #36	; 0x24
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f001 f943 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005d22:	4603      	mov	r3, r0
 8005d24:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d26:	e007      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d2c:	e004      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005d2e:	bf00      	nop
 8005d30:	e002      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005d32:	bf00      	nop
 8005d34:	e000      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005d36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10a      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d3e:	4b1b      	ldr	r3, [pc, #108]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d42:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d4c:	4917      	ldr	r1, [pc, #92]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	658b      	str	r3, [r1, #88]	; 0x58
 8005d52:	e001      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
 8005d56:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d035      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d68:	2b30      	cmp	r3, #48	; 0x30
 8005d6a:	d01c      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d6c:	2b30      	cmp	r3, #48	; 0x30
 8005d6e:	d817      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d00c      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005d74:	2b20      	cmp	r3, #32
 8005d76:	d813      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d019      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8005d7c:	2b10      	cmp	r3, #16
 8005d7e:	d10f      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d80:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	4a09      	ldr	r2, [pc, #36]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005d8c:	e011      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3304      	adds	r3, #4
 8005d92:	2102      	movs	r1, #2
 8005d94:	4618      	mov	r0, r3
 8005d96:	f001 f855 	bl	8006e44 <RCCEx_PLL2_Config>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005d9e:	e008      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	75fb      	strb	r3, [r7, #23]
      break;
 8005da4:	e005      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8005da6:	bf00      	nop
 8005da8:	e003      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005daa:	bf00      	nop
 8005dac:	58024400 	.word	0x58024400
      break;
 8005db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005db2:	7dfb      	ldrb	r3, [r7, #23]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d109      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005db8:	4ba3      	ldr	r3, [pc, #652]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc4:	49a0      	ldr	r1, [pc, #640]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005dca:	e001      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
 8005dce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d047      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005de4:	d030      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dea:	d82a      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005dec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005df0:	d02c      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005df2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005df6:	d824      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dfc:	d018      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e02:	d81e      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e0c:	d007      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005e0e:	e018      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e10:	4b8d      	ldr	r3, [pc, #564]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	4a8c      	ldr	r2, [pc, #560]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e1c:	e017      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3304      	adds	r3, #4
 8005e22:	2100      	movs	r1, #0
 8005e24:	4618      	mov	r0, r3
 8005e26:	f001 f80d 	bl	8006e44 <RCCEx_PLL2_Config>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e2e:	e00e      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3324      	adds	r3, #36	; 0x24
 8005e34:	2100      	movs	r1, #0
 8005e36:	4618      	mov	r0, r3
 8005e38:	f001 f8b6 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e40:	e005      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	75fb      	strb	r3, [r7, #23]
      break;
 8005e46:	e002      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005e48:	bf00      	nop
 8005e4a:	e000      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e4e:	7dfb      	ldrb	r3, [r7, #23]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d109      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e54:	4b7c      	ldr	r3, [pc, #496]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e58:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e60:	4979      	ldr	r1, [pc, #484]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	650b      	str	r3, [r1, #80]	; 0x50
 8005e66:	e001      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
 8005e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d049      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e80:	d02e      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005e82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e86:	d828      	bhi.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005e88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e8c:	d02a      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005e8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e92:	d822      	bhi.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005e94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e98:	d026      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005e9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e9e:	d81c      	bhi.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ea4:	d010      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005ea6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eaa:	d816      	bhi.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01d      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb4:	d111      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	2101      	movs	r1, #1
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 ffc1 	bl	8006e44 <RCCEx_PLL2_Config>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005ec6:	e012      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3324      	adds	r3, #36	; 0x24
 8005ecc:	2101      	movs	r1, #1
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f001 f86a 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005ed8:	e009      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	75fb      	strb	r3, [r7, #23]
      break;
 8005ede:	e006      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005ee0:	bf00      	nop
 8005ee2:	e004      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005ee4:	bf00      	nop
 8005ee6:	e002      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005ee8:	bf00      	nop
 8005eea:	e000      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eee:	7dfb      	ldrb	r3, [r7, #23]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d109      	bne.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ef4:	4b54      	ldr	r3, [pc, #336]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f00:	4951      	ldr	r1, [pc, #324]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	650b      	str	r3, [r1, #80]	; 0x50
 8005f06:	e001      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
 8005f0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d04b      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f22:	d02e      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005f24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f28:	d828      	bhi.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f2e:	d02a      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f34:	d822      	bhi.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005f36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f3a:	d026      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005f3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f40:	d81c      	bhi.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f46:	d010      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8005f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f4c:	d816      	bhi.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d01d      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005f52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f56:	d111      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 ff70 	bl	8006e44 <RCCEx_PLL2_Config>
 8005f64:	4603      	mov	r3, r0
 8005f66:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005f68:	e012      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3324      	adds	r3, #36	; 0x24
 8005f6e:	2101      	movs	r1, #1
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 f819 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005f76:	4603      	mov	r3, r0
 8005f78:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005f7a:	e009      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f80:	e006      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005f82:	bf00      	nop
 8005f84:	e004      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005f86:	bf00      	nop
 8005f88:	e002      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005f96:	4b2c      	ldr	r3, [pc, #176]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005fa4:	4928      	ldr	r1, [pc, #160]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	658b      	str	r3, [r1, #88]	; 0x58
 8005faa:	e001      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
 8005fae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d02f      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fc4:	d00e      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fca:	d814      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d015      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005fd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fd4:	d10f      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fd6:	4b1c      	ldr	r3, [pc, #112]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fda:	4a1b      	ldr	r2, [pc, #108]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005fe2:	e00c      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	2101      	movs	r1, #1
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 ff2a 	bl	8006e44 <RCCEx_PLL2_Config>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ff4:	e003      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8005ffa:	e000      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d109      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006004:	4b10      	ldr	r3, [pc, #64]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8006006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006008:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006010:	490d      	ldr	r1, [pc, #52]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8006012:	4313      	orrs	r3, r2
 8006014:	650b      	str	r3, [r1, #80]	; 0x50
 8006016:	e001      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006018:	7dfb      	ldrb	r3, [r7, #23]
 800601a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d034      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602c:	2b03      	cmp	r3, #3
 800602e:	d81d      	bhi.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006030:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006036:	bf00      	nop
 8006038:	08006073 	.word	0x08006073
 800603c:	0800604d 	.word	0x0800604d
 8006040:	0800605b 	.word	0x0800605b
 8006044:	08006073 	.word	0x08006073
 8006048:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800604c:	4bb1      	ldr	r3, [pc, #708]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800604e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006050:	4ab0      	ldr	r2, [pc, #704]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006056:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006058:	e00c      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3304      	adds	r3, #4
 800605e:	2102      	movs	r1, #2
 8006060:	4618      	mov	r0, r3
 8006062:	f000 feef 	bl	8006e44 <RCCEx_PLL2_Config>
 8006066:	4603      	mov	r3, r0
 8006068:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800606a:	e003      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	75fb      	strb	r3, [r7, #23]
      break;
 8006070:	e000      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8006072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006074:	7dfb      	ldrb	r3, [r7, #23]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d109      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800607a:	4ba6      	ldr	r3, [pc, #664]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800607c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607e:	f023 0203 	bic.w	r2, r3, #3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006086:	49a3      	ldr	r1, [pc, #652]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006088:	4313      	orrs	r3, r2
 800608a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800608c:	e001      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608e:	7dfb      	ldrb	r3, [r7, #23]
 8006090:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 8086 	beq.w	80061ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060a0:	4b9d      	ldr	r3, [pc, #628]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a9c      	ldr	r2, [pc, #624]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80060a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060ac:	f7fb fe98 	bl	8001de0 <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060b2:	e009      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060b4:	f7fb fe94 	bl	8001de0 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b64      	cmp	r3, #100	; 0x64
 80060c0:	d902      	bls.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	75fb      	strb	r3, [r7, #23]
        break;
 80060c6:	e005      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060c8:	4b93      	ldr	r3, [pc, #588]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0ef      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d166      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80060da:	4b8e      	ldr	r3, [pc, #568]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80060dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80060e4:	4053      	eors	r3, r2
 80060e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d013      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060ee:	4b89      	ldr	r3, [pc, #548]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80060f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060f8:	4b86      	ldr	r3, [pc, #536]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80060fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060fc:	4a85      	ldr	r2, [pc, #532]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80060fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006102:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006104:	4b83      	ldr	r3, [pc, #524]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006108:	4a82      	ldr	r2, [pc, #520]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800610a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800610e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006110:	4a80      	ldr	r2, [pc, #512]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800611c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006120:	d115      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006122:	f7fb fe5d 	bl	8001de0 <HAL_GetTick>
 8006126:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006128:	e00b      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800612a:	f7fb fe59 	bl	8001de0 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	f241 3288 	movw	r2, #5000	; 0x1388
 8006138:	4293      	cmp	r3, r2
 800613a:	d902      	bls.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	75fb      	strb	r3, [r7, #23]
            break;
 8006140:	e005      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006142:	4b74      	ldr	r3, [pc, #464]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0ed      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800614e:	7dfb      	ldrb	r3, [r7, #23]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d126      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800615a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800615e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006162:	d10d      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8006164:	4b6b      	ldr	r3, [pc, #428]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006172:	0919      	lsrs	r1, r3, #4
 8006174:	4b69      	ldr	r3, [pc, #420]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006176:	400b      	ands	r3, r1
 8006178:	4966      	ldr	r1, [pc, #408]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800617a:	4313      	orrs	r3, r2
 800617c:	610b      	str	r3, [r1, #16]
 800617e:	e005      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8006180:	4b64      	ldr	r3, [pc, #400]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	4a63      	ldr	r2, [pc, #396]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006186:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800618a:	6113      	str	r3, [r2, #16]
 800618c:	4b61      	ldr	r3, [pc, #388]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800618e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800619a:	495e      	ldr	r1, [pc, #376]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800619c:	4313      	orrs	r3, r2
 800619e:	670b      	str	r3, [r1, #112]	; 0x70
 80061a0:	e004      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061a2:	7dfb      	ldrb	r3, [r7, #23]
 80061a4:	75bb      	strb	r3, [r7, #22]
 80061a6:	e001      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a8:	7dfb      	ldrb	r3, [r7, #23]
 80061aa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d07e      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061bc:	2b28      	cmp	r3, #40	; 0x28
 80061be:	d867      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80061c0:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80061c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c6:	bf00      	nop
 80061c8:	08006297 	.word	0x08006297
 80061cc:	08006291 	.word	0x08006291
 80061d0:	08006291 	.word	0x08006291
 80061d4:	08006291 	.word	0x08006291
 80061d8:	08006291 	.word	0x08006291
 80061dc:	08006291 	.word	0x08006291
 80061e0:	08006291 	.word	0x08006291
 80061e4:	08006291 	.word	0x08006291
 80061e8:	0800626d 	.word	0x0800626d
 80061ec:	08006291 	.word	0x08006291
 80061f0:	08006291 	.word	0x08006291
 80061f4:	08006291 	.word	0x08006291
 80061f8:	08006291 	.word	0x08006291
 80061fc:	08006291 	.word	0x08006291
 8006200:	08006291 	.word	0x08006291
 8006204:	08006291 	.word	0x08006291
 8006208:	0800627f 	.word	0x0800627f
 800620c:	08006291 	.word	0x08006291
 8006210:	08006291 	.word	0x08006291
 8006214:	08006291 	.word	0x08006291
 8006218:	08006291 	.word	0x08006291
 800621c:	08006291 	.word	0x08006291
 8006220:	08006291 	.word	0x08006291
 8006224:	08006291 	.word	0x08006291
 8006228:	08006297 	.word	0x08006297
 800622c:	08006291 	.word	0x08006291
 8006230:	08006291 	.word	0x08006291
 8006234:	08006291 	.word	0x08006291
 8006238:	08006291 	.word	0x08006291
 800623c:	08006291 	.word	0x08006291
 8006240:	08006291 	.word	0x08006291
 8006244:	08006291 	.word	0x08006291
 8006248:	08006297 	.word	0x08006297
 800624c:	08006291 	.word	0x08006291
 8006250:	08006291 	.word	0x08006291
 8006254:	08006291 	.word	0x08006291
 8006258:	08006291 	.word	0x08006291
 800625c:	08006291 	.word	0x08006291
 8006260:	08006291 	.word	0x08006291
 8006264:	08006291 	.word	0x08006291
 8006268:	08006297 	.word	0x08006297
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3304      	adds	r3, #4
 8006270:	2101      	movs	r1, #1
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fde6 	bl	8006e44 <RCCEx_PLL2_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800627c:	e00c      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3324      	adds	r3, #36	; 0x24
 8006282:	2101      	movs	r1, #1
 8006284:	4618      	mov	r0, r3
 8006286:	f000 fe8f 	bl	8006fa8 <RCCEx_PLL3_Config>
 800628a:	4603      	mov	r3, r0
 800628c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800628e:	e003      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	75fb      	strb	r3, [r7, #23]
      break;
 8006294:	e000      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8006296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006298:	7dfb      	ldrb	r3, [r7, #23]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d109      	bne.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800629e:	4b1d      	ldr	r3, [pc, #116]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80062a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062aa:	491a      	ldr	r1, [pc, #104]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	654b      	str	r3, [r1, #84]	; 0x54
 80062b0:	e001      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
 80062b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d03e      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c6:	2b05      	cmp	r3, #5
 80062c8:	d820      	bhi.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x838>
 80062ca:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	08006321 	.word	0x08006321
 80062d4:	080062e9 	.word	0x080062e9
 80062d8:	080062fb 	.word	0x080062fb
 80062dc:	08006321 	.word	0x08006321
 80062e0:	08006321 	.word	0x08006321
 80062e4:	08006321 	.word	0x08006321
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3304      	adds	r3, #4
 80062ec:	2101      	movs	r1, #1
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fda8 	bl	8006e44 <RCCEx_PLL2_Config>
 80062f4:	4603      	mov	r3, r0
 80062f6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80062f8:	e013      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3324      	adds	r3, #36	; 0x24
 80062fe:	2101      	movs	r1, #1
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fe51 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006306:	4603      	mov	r3, r0
 8006308:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800630a:	e00a      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	75fb      	strb	r3, [r7, #23]
      break;
 8006310:	e007      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8006312:	bf00      	nop
 8006314:	58024400 	.word	0x58024400
 8006318:	58024800 	.word	0x58024800
 800631c:	00ffffcf 	.word	0x00ffffcf
      break;
 8006320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d109      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006328:	4b9f      	ldr	r3, [pc, #636]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800632a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632c:	f023 0207 	bic.w	r2, r3, #7
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006334:	499c      	ldr	r1, [pc, #624]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006336:	4313      	orrs	r3, r2
 8006338:	654b      	str	r3, [r1, #84]	; 0x54
 800633a:	e001      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633c:	7dfb      	ldrb	r3, [r7, #23]
 800633e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d039      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006352:	2b05      	cmp	r3, #5
 8006354:	d820      	bhi.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8006356:	a201      	add	r2, pc, #4	; (adr r2, 800635c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	0800639f 	.word	0x0800639f
 8006360:	08006375 	.word	0x08006375
 8006364:	08006387 	.word	0x08006387
 8006368:	0800639f 	.word	0x0800639f
 800636c:	0800639f 	.word	0x0800639f
 8006370:	0800639f 	.word	0x0800639f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	3304      	adds	r3, #4
 8006378:	2101      	movs	r1, #1
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fd62 	bl	8006e44 <RCCEx_PLL2_Config>
 8006380:	4603      	mov	r3, r0
 8006382:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006384:	e00c      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3324      	adds	r3, #36	; 0x24
 800638a:	2101      	movs	r1, #1
 800638c:	4618      	mov	r0, r3
 800638e:	f000 fe0b 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006392:	4603      	mov	r3, r0
 8006394:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006396:	e003      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	75fb      	strb	r3, [r7, #23]
      break;
 800639c:	e000      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800639e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063a6:	4b80      	ldr	r3, [pc, #512]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80063a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063aa:	f023 0207 	bic.w	r2, r3, #7
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063b4:	497c      	ldr	r1, [pc, #496]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	658b      	str	r3, [r1, #88]	; 0x58
 80063ba:	e001      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063bc:	7dfb      	ldrb	r3, [r7, #23]
 80063be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0320 	and.w	r3, r3, #32
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d04b      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063d6:	d02e      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80063d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063dc:	d828      	bhi.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80063de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e2:	d02a      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x966>
 80063e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e8:	d822      	bhi.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80063ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063ee:	d026      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80063f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063f4:	d81c      	bhi.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80063f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063fa:	d010      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80063fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006400:	d816      	bhi.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d01d      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800640a:	d111      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3304      	adds	r3, #4
 8006410:	2100      	movs	r1, #0
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fd16 	bl	8006e44 <RCCEx_PLL2_Config>
 8006418:	4603      	mov	r3, r0
 800641a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800641c:	e012      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3324      	adds	r3, #36	; 0x24
 8006422:	2102      	movs	r1, #2
 8006424:	4618      	mov	r0, r3
 8006426:	f000 fdbf 	bl	8006fa8 <RCCEx_PLL3_Config>
 800642a:	4603      	mov	r3, r0
 800642c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800642e:	e009      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	75fb      	strb	r3, [r7, #23]
      break;
 8006434:	e006      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006436:	bf00      	nop
 8006438:	e004      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800643a:	bf00      	nop
 800643c:	e002      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800643e:	bf00      	nop
 8006440:	e000      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006442:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006444:	7dfb      	ldrb	r3, [r7, #23]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800644a:	4b57      	ldr	r3, [pc, #348]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800644c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006458:	4953      	ldr	r1, [pc, #332]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800645a:	4313      	orrs	r3, r2
 800645c:	654b      	str	r3, [r1, #84]	; 0x54
 800645e:	e001      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
 8006462:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646c:	2b00      	cmp	r3, #0
 800646e:	d04b      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006476:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800647a:	d02e      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800647c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006480:	d828      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006486:	d02a      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648c:	d822      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800648e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006492:	d026      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006494:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006498:	d81c      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800649a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800649e:	d010      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80064a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a4:	d816      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d01d      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80064aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ae:	d111      	bne.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3304      	adds	r3, #4
 80064b4:	2100      	movs	r1, #0
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fcc4 	bl	8006e44 <RCCEx_PLL2_Config>
 80064bc:	4603      	mov	r3, r0
 80064be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80064c0:	e012      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3324      	adds	r3, #36	; 0x24
 80064c6:	2102      	movs	r1, #2
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 fd6d 	bl	8006fa8 <RCCEx_PLL3_Config>
 80064ce:	4603      	mov	r3, r0
 80064d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80064d2:	e009      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	75fb      	strb	r3, [r7, #23]
      break;
 80064d8:	e006      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80064da:	bf00      	nop
 80064dc:	e004      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80064de:	bf00      	nop
 80064e0:	e002      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80064e2:	bf00      	nop
 80064e4:	e000      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80064e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064ee:	4b2e      	ldr	r3, [pc, #184]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80064f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064fc:	492a      	ldr	r1, [pc, #168]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	658b      	str	r3, [r1, #88]	; 0x58
 8006502:	e001      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006504:	7dfb      	ldrb	r3, [r7, #23]
 8006506:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006510:	2b00      	cmp	r3, #0
 8006512:	d04d      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800651a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800651e:	d02e      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8006520:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006524:	d828      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800652a:	d02a      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800652c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006530:	d822      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006532:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006536:	d026      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006538:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800653c:	d81c      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800653e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006542:	d010      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8006544:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006548:	d816      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d01d      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800654e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006552:	d111      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3304      	adds	r3, #4
 8006558:	2100      	movs	r1, #0
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fc72 	bl	8006e44 <RCCEx_PLL2_Config>
 8006560:	4603      	mov	r3, r0
 8006562:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006564:	e012      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3324      	adds	r3, #36	; 0x24
 800656a:	2102      	movs	r1, #2
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fd1b 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006572:	4603      	mov	r3, r0
 8006574:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006576:	e009      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	75fb      	strb	r3, [r7, #23]
      break;
 800657c:	e006      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800657e:	bf00      	nop
 8006580:	e004      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006582:	bf00      	nop
 8006584:	e002      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006586:	bf00      	nop
 8006588:	e000      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800658a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800658c:	7dfb      	ldrb	r3, [r7, #23]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10c      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006592:	4b05      	ldr	r3, [pc, #20]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065a0:	4901      	ldr	r1, [pc, #4]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	658b      	str	r3, [r1, #88]	; 0x58
 80065a6:	e003      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80065a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
 80065ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0308 	and.w	r3, r3, #8
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d018      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c4:	d10a      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3324      	adds	r3, #36	; 0x24
 80065ca:	2102      	movs	r1, #2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fceb 	bl	8006fa8 <RCCEx_PLL3_Config>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80065dc:	4b8a      	ldr	r3, [pc, #552]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80065de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e8:	4987      	ldr	r1, [pc, #540]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0310 	and.w	r3, r3, #16
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d01a      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006604:	d10a      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3324      	adds	r3, #36	; 0x24
 800660a:	2102      	movs	r1, #2
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fccb 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800661c:	4b7a      	ldr	r3, [pc, #488]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800661e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006620:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800662a:	4977      	ldr	r1, [pc, #476]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800662c:	4313      	orrs	r3, r2
 800662e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d034      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006642:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006646:	d01d      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800664c:	d817      	bhi.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006656:	d009      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006658:	e011      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	3304      	adds	r3, #4
 800665e:	2100      	movs	r1, #0
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fbef 	bl	8006e44 <RCCEx_PLL2_Config>
 8006666:	4603      	mov	r3, r0
 8006668:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800666a:	e00c      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3324      	adds	r3, #36	; 0x24
 8006670:	2102      	movs	r1, #2
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fc98 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006678:	4603      	mov	r3, r0
 800667a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800667c:	e003      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	75fb      	strb	r3, [r7, #23]
      break;
 8006682:	e000      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8006684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006686:	7dfb      	ldrb	r3, [r7, #23]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10a      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800668c:	4b5e      	ldr	r3, [pc, #376]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800668e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006690:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800669a:	495b      	ldr	r1, [pc, #364]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800669c:	4313      	orrs	r3, r2
 800669e:	658b      	str	r3, [r1, #88]	; 0x58
 80066a0:	e001      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a2:	7dfb      	ldrb	r3, [r7, #23]
 80066a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d033      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066bc:	d01c      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80066be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066c2:	d816      	bhi.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80066c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066c8:	d003      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80066ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066ce:	d007      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80066d0:	e00f      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d2:	4b4d      	ldr	r3, [pc, #308]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	4a4c      	ldr	r2, [pc, #304]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80066d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80066de:	e00c      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3324      	adds	r3, #36	; 0x24
 80066e4:	2101      	movs	r1, #1
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fc5e 	bl	8006fa8 <RCCEx_PLL3_Config>
 80066ec:	4603      	mov	r3, r0
 80066ee:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80066f0:	e003      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	75fb      	strb	r3, [r7, #23]
      break;
 80066f6:	e000      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80066f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10a      	bne.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006700:	4b41      	ldr	r3, [pc, #260]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006704:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800670e:	493e      	ldr	r1, [pc, #248]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006710:	4313      	orrs	r3, r2
 8006712:	654b      	str	r3, [r1, #84]	; 0x54
 8006714:	e001      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006716:	7dfb      	ldrb	r3, [r7, #23]
 8006718:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d029      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800672e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006732:	d007      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006734:	e00f      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006736:	4b34      	ldr	r3, [pc, #208]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673a:	4a33      	ldr	r2, [pc, #204]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800673c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006740:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006742:	e00b      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3304      	adds	r3, #4
 8006748:	2102      	movs	r1, #2
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fb7a 	bl	8006e44 <RCCEx_PLL2_Config>
 8006750:	4603      	mov	r3, r0
 8006752:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006754:	e002      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	75fb      	strb	r3, [r7, #23]
      break;
 800675a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800675c:	7dfb      	ldrb	r3, [r7, #23]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d109      	bne.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006762:	4b29      	ldr	r3, [pc, #164]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006766:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800676e:	4926      	ldr	r1, [pc, #152]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006770:	4313      	orrs	r3, r2
 8006772:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006774:	e001      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006776:	7dfb      	ldrb	r3, [r7, #23]
 8006778:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	3324      	adds	r3, #36	; 0x24
 800678a:	2102      	movs	r1, #2
 800678c:	4618      	mov	r0, r3
 800678e:	f000 fc0b 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d033      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067b0:	d017      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80067b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067b6:	d811      	bhi.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80067b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067bc:	d013      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80067be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c2:	d80b      	bhi.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d010      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80067c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067cc:	d106      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ce:	4b0e      	ldr	r3, [pc, #56]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80067d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d2:	4a0d      	ldr	r2, [pc, #52]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80067d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80067da:	e007      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	75fb      	strb	r3, [r7, #23]
      break;
 80067e0:	e004      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80067e2:	bf00      	nop
 80067e4:	e002      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80067e6:	bf00      	nop
 80067e8:	e000      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80067ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10c      	bne.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067f2:	4b05      	ldr	r3, [pc, #20]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80067f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067fe:	4902      	ldr	r1, [pc, #8]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006800:	4313      	orrs	r3, r2
 8006802:	654b      	str	r3, [r1, #84]	; 0x54
 8006804:	e004      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8006806:	bf00      	nop
 8006808:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680c:	7dfb      	ldrb	r3, [r7, #23]
 800680e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d008      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800681c:	4b29      	ldr	r3, [pc, #164]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800681e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006820:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006828:	4926      	ldr	r1, [pc, #152]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800682a:	4313      	orrs	r3, r2
 800682c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d008      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800683a:	4b22      	ldr	r3, [pc, #136]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800683c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800683e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006846:	491f      	ldr	r1, [pc, #124]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006848:	4313      	orrs	r3, r2
 800684a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00d      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006858:	4b1a      	ldr	r3, [pc, #104]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	4a19      	ldr	r2, [pc, #100]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800685e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006862:	6113      	str	r3, [r2, #16]
 8006864:	4b17      	ldr	r3, [pc, #92]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800686e:	4915      	ldr	r1, [pc, #84]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006870:	4313      	orrs	r3, r2
 8006872:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	da08      	bge.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800687c:	4b11      	ldr	r3, [pc, #68]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800687e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006880:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006888:	490e      	ldr	r1, [pc, #56]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800688a:	4313      	orrs	r3, r2
 800688c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d009      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800689a:	4b0a      	ldr	r3, [pc, #40]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800689c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068a8:	4906      	ldr	r1, [pc, #24]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80068ae:	7dbb      	ldrb	r3, [r7, #22]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	e000      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	58024400 	.word	0x58024400

080068c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80068cc:	f7ff f8a6 	bl	8005a1c <HAL_RCC_GetHCLKFreq>
 80068d0:	4602      	mov	r2, r0
 80068d2:	4b06      	ldr	r3, [pc, #24]	; (80068ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	091b      	lsrs	r3, r3, #4
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	4904      	ldr	r1, [pc, #16]	; (80068f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80068de:	5ccb      	ldrb	r3, [r1, r3]
 80068e0:	f003 031f 	and.w	r3, r3, #31
 80068e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	58024400 	.word	0x58024400
 80068f0:	0800b1b8 	.word	0x0800b1b8

080068f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b089      	sub	sp, #36	; 0x24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068fc:	4ba1      	ldr	r3, [pc, #644]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006906:	4b9f      	ldr	r3, [pc, #636]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690a:	0b1b      	lsrs	r3, r3, #12
 800690c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006910:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006912:	4b9c      	ldr	r3, [pc, #624]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006916:	091b      	lsrs	r3, r3, #4
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800691e:	4b99      	ldr	r3, [pc, #612]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006922:	08db      	lsrs	r3, r3, #3
 8006924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	fb02 f303 	mul.w	r3, r2, r3
 800692e:	ee07 3a90 	vmov	s15, r3
 8006932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006936:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 8111 	beq.w	8006b64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	2b02      	cmp	r3, #2
 8006946:	f000 8083 	beq.w	8006a50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	2b02      	cmp	r3, #2
 800694e:	f200 80a1 	bhi.w	8006a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d056      	beq.n	8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800695e:	e099      	b.n	8006a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006960:	4b88      	ldr	r3, [pc, #544]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0320 	and.w	r3, r3, #32
 8006968:	2b00      	cmp	r3, #0
 800696a:	d02d      	beq.n	80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800696c:	4b85      	ldr	r3, [pc, #532]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	08db      	lsrs	r3, r3, #3
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	4a84      	ldr	r2, [pc, #528]	; (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006978:	fa22 f303 	lsr.w	r3, r2, r3
 800697c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	ee07 3a90 	vmov	s15, r3
 8006984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006996:	4b7b      	ldr	r3, [pc, #492]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699e:	ee07 3a90 	vmov	s15, r3
 80069a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80069c6:	e087      	b.n	8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80069d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069da:	4b6a      	ldr	r3, [pc, #424]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e2:	ee07 3a90 	vmov	s15, r3
 80069e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a0a:	e065      	b.n	8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a1e:	4b59      	ldr	r3, [pc, #356]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a26:	ee07 3a90 	vmov	s15, r3
 8006a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a4e:	e043      	b.n	8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	ee07 3a90 	vmov	s15, r3
 8006a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a62:	4b48      	ldr	r3, [pc, #288]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a92:	e021      	b.n	8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aa6:	4b37      	ldr	r3, [pc, #220]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ad6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006ad8:	4b2a      	ldr	r3, [pc, #168]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	0a5b      	lsrs	r3, r3, #9
 8006ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006afe:	ee17 2a90 	vmov	r2, s15
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006b06:	4b1f      	ldr	r3, [pc, #124]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0a:	0c1b      	lsrs	r3, r3, #16
 8006b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b10:	ee07 3a90 	vmov	s15, r3
 8006b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b20:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b2c:	ee17 2a90 	vmov	r2, s15
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006b34:	4b13      	ldr	r3, [pc, #76]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b38:	0e1b      	lsrs	r3, r3, #24
 8006b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b5a:	ee17 2a90 	vmov	r2, s15
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b62:	e008      	b.n	8006b76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	609a      	str	r2, [r3, #8]
}
 8006b76:	bf00      	nop
 8006b78:	3724      	adds	r7, #36	; 0x24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	58024400 	.word	0x58024400
 8006b88:	03d09000 	.word	0x03d09000
 8006b8c:	46000000 	.word	0x46000000
 8006b90:	4c742400 	.word	0x4c742400
 8006b94:	4a742400 	.word	0x4a742400
 8006b98:	4bbebc20 	.word	0x4bbebc20

08006b9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b089      	sub	sp, #36	; 0x24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ba4:	4ba1      	ldr	r3, [pc, #644]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba8:	f003 0303 	and.w	r3, r3, #3
 8006bac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006bae:	4b9f      	ldr	r3, [pc, #636]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb2:	0d1b      	lsrs	r3, r3, #20
 8006bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bb8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006bba:	4b9c      	ldr	r3, [pc, #624]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbe:	0a1b      	lsrs	r3, r3, #8
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006bc6:	4b99      	ldr	r3, [pc, #612]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bca:	08db      	lsrs	r3, r3, #3
 8006bcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	fb02 f303 	mul.w	r3, r2, r3
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8111 	beq.w	8006e0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	f000 8083 	beq.w	8006cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	f200 80a1 	bhi.w	8006d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d056      	beq.n	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006c06:	e099      	b.n	8006d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c08:	4b88      	ldr	r3, [pc, #544]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d02d      	beq.n	8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c14:	4b85      	ldr	r3, [pc, #532]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	08db      	lsrs	r3, r3, #3
 8006c1a:	f003 0303 	and.w	r3, r3, #3
 8006c1e:	4a84      	ldr	r2, [pc, #528]	; (8006e30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006c20:	fa22 f303 	lsr.w	r3, r2, r3
 8006c24:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	ee07 3a90 	vmov	s15, r3
 8006c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c3e:	4b7b      	ldr	r3, [pc, #492]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c46:	ee07 3a90 	vmov	s15, r3
 8006c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006c6e:	e087      	b.n	8006d80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006e38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c82:	4b6a      	ldr	r3, [pc, #424]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cb2:	e065      	b.n	8006d80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006e3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cc6:	4b59      	ldr	r3, [pc, #356]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cce:	ee07 3a90 	vmov	s15, r3
 8006cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cf6:	e043      	b.n	8006d80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0a:	4b48      	ldr	r3, [pc, #288]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d3a:	e021      	b.n	8006d80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006e3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d4e:	4b37      	ldr	r3, [pc, #220]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006d80:	4b2a      	ldr	r3, [pc, #168]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	0a5b      	lsrs	r3, r3, #9
 8006d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da6:	ee17 2a90 	vmov	r2, s15
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006dae:	4b1f      	ldr	r3, [pc, #124]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	0c1b      	lsrs	r3, r3, #16
 8006db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006db8:	ee07 3a90 	vmov	s15, r3
 8006dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dd4:	ee17 2a90 	vmov	r2, s15
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006ddc:	4b13      	ldr	r3, [pc, #76]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	0e1b      	lsrs	r3, r3, #24
 8006de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006df2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006df6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e02:	ee17 2a90 	vmov	r2, s15
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006e0a:	e008      	b.n	8006e1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	609a      	str	r2, [r3, #8]
}
 8006e1e:	bf00      	nop
 8006e20:	3724      	adds	r7, #36	; 0x24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	03d09000 	.word	0x03d09000
 8006e34:	46000000 	.word	0x46000000
 8006e38:	4c742400 	.word	0x4c742400
 8006e3c:	4a742400 	.word	0x4a742400
 8006e40:	4bbebc20 	.word	0x4bbebc20

08006e44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e52:	4b53      	ldr	r3, [pc, #332]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d101      	bne.n	8006e62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e099      	b.n	8006f96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006e62:	4b4f      	ldr	r3, [pc, #316]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a4e      	ldr	r2, [pc, #312]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006e68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e6e:	f7fa ffb7 	bl	8001de0 <HAL_GetTick>
 8006e72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e74:	e008      	b.n	8006e88 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006e76:	f7fa ffb3 	bl	8001de0 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d901      	bls.n	8006e88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e086      	b.n	8006f96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e88:	4b45      	ldr	r3, [pc, #276]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1f0      	bne.n	8006e76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006e94:	4b42      	ldr	r3, [pc, #264]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	031b      	lsls	r3, r3, #12
 8006ea2:	493f      	ldr	r1, [pc, #252]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	628b      	str	r3, [r1, #40]	; 0x28
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	025b      	lsls	r3, r3, #9
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	041b      	lsls	r3, r3, #16
 8006ec6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	061b      	lsls	r3, r3, #24
 8006ed4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ed8:	4931      	ldr	r1, [pc, #196]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006ede:	4b30      	ldr	r3, [pc, #192]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	492d      	ldr	r1, [pc, #180]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ef0:	4b2b      	ldr	r3, [pc, #172]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	f023 0220 	bic.w	r2, r3, #32
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	4928      	ldr	r1, [pc, #160]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006f02:	4b27      	ldr	r3, [pc, #156]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f06:	4a26      	ldr	r2, [pc, #152]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f08:	f023 0310 	bic.w	r3, r3, #16
 8006f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f0e:	4b24      	ldr	r3, [pc, #144]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f12:	4b24      	ldr	r3, [pc, #144]	; (8006fa4 <RCCEx_PLL2_Config+0x160>)
 8006f14:	4013      	ands	r3, r2
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	69d2      	ldr	r2, [r2, #28]
 8006f1a:	00d2      	lsls	r2, r2, #3
 8006f1c:	4920      	ldr	r1, [pc, #128]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f22:	4b1f      	ldr	r3, [pc, #124]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	4a1e      	ldr	r2, [pc, #120]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f28:	f043 0310 	orr.w	r3, r3, #16
 8006f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d106      	bne.n	8006f42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f34:	4b1a      	ldr	r3, [pc, #104]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	4a19      	ldr	r2, [pc, #100]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f40:	e00f      	b.n	8006f62 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d106      	bne.n	8006f56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f48:	4b15      	ldr	r3, [pc, #84]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	4a14      	ldr	r2, [pc, #80]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f54:	e005      	b.n	8006f62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006f56:	4b12      	ldr	r3, [pc, #72]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5a:	4a11      	ldr	r2, [pc, #68]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f62:	4b0f      	ldr	r3, [pc, #60]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a0e      	ldr	r2, [pc, #56]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f6e:	f7fa ff37 	bl	8001de0 <HAL_GetTick>
 8006f72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f74:	e008      	b.n	8006f88 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006f76:	f7fa ff33 	bl	8001de0 <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d901      	bls.n	8006f88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e006      	b.n	8006f96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f88:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0f0      	beq.n	8006f76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	58024400 	.word	0x58024400
 8006fa4:	ffff0007 	.word	0xffff0007

08006fa8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fb6:	4b53      	ldr	r3, [pc, #332]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d101      	bne.n	8006fc6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e099      	b.n	80070fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006fc6:	4b4f      	ldr	r3, [pc, #316]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a4e      	ldr	r2, [pc, #312]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8006fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fd2:	f7fa ff05 	bl	8001de0 <HAL_GetTick>
 8006fd6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fd8:	e008      	b.n	8006fec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006fda:	f7fa ff01 	bl	8001de0 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d901      	bls.n	8006fec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e086      	b.n	80070fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fec:	4b45      	ldr	r3, [pc, #276]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1f0      	bne.n	8006fda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ff8:	4b42      	ldr	r3, [pc, #264]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	051b      	lsls	r3, r3, #20
 8007006:	493f      	ldr	r1, [pc, #252]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007008:	4313      	orrs	r3, r2
 800700a:	628b      	str	r3, [r1, #40]	; 0x28
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	3b01      	subs	r3, #1
 8007012:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	3b01      	subs	r3, #1
 800701c:	025b      	lsls	r3, r3, #9
 800701e:	b29b      	uxth	r3, r3
 8007020:	431a      	orrs	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	3b01      	subs	r3, #1
 8007028:	041b      	lsls	r3, r3, #16
 800702a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	3b01      	subs	r3, #1
 8007036:	061b      	lsls	r3, r3, #24
 8007038:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800703c:	4931      	ldr	r1, [pc, #196]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 800703e:	4313      	orrs	r3, r2
 8007040:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007042:	4b30      	ldr	r3, [pc, #192]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007046:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	492d      	ldr	r1, [pc, #180]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007050:	4313      	orrs	r3, r2
 8007052:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007054:	4b2b      	ldr	r3, [pc, #172]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	4928      	ldr	r1, [pc, #160]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007062:	4313      	orrs	r3, r2
 8007064:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007066:	4b27      	ldr	r3, [pc, #156]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706a:	4a26      	ldr	r2, [pc, #152]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 800706c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007070:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007072:	4b24      	ldr	r3, [pc, #144]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007076:	4b24      	ldr	r3, [pc, #144]	; (8007108 <RCCEx_PLL3_Config+0x160>)
 8007078:	4013      	ands	r3, r2
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	69d2      	ldr	r2, [r2, #28]
 800707e:	00d2      	lsls	r2, r2, #3
 8007080:	4920      	ldr	r1, [pc, #128]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007082:	4313      	orrs	r3, r2
 8007084:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007086:	4b1f      	ldr	r3, [pc, #124]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708a:	4a1e      	ldr	r2, [pc, #120]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 800708c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007090:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d106      	bne.n	80070a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007098:	4b1a      	ldr	r3, [pc, #104]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	4a19      	ldr	r2, [pc, #100]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 800709e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80070a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070a4:	e00f      	b.n	80070c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d106      	bne.n	80070ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80070ac:	4b15      	ldr	r3, [pc, #84]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b0:	4a14      	ldr	r2, [pc, #80]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070b8:	e005      	b.n	80070c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80070ba:	4b12      	ldr	r3, [pc, #72]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	4a11      	ldr	r2, [pc, #68]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80070c6:	4b0f      	ldr	r3, [pc, #60]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a0e      	ldr	r2, [pc, #56]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070d2:	f7fa fe85 	bl	8001de0 <HAL_GetTick>
 80070d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070d8:	e008      	b.n	80070ec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80070da:	f7fa fe81 	bl	8001de0 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d901      	bls.n	80070ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e006      	b.n	80070fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070ec:	4b05      	ldr	r3, [pc, #20]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0f0      	beq.n	80070da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	58024400 	.word	0x58024400
 8007108:	ffff0007 	.word	0xffff0007

0800710c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e042      	b.n	80071a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007124:	2b00      	cmp	r3, #0
 8007126:	d106      	bne.n	8007136 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7fa fbd3 	bl	80018dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2224      	movs	r2, #36	; 0x24
 800713a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 0201 	bic.w	r2, r2, #1
 800714c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f8c2 	bl	80072d8 <UART_SetConfig>
 8007154:	4603      	mov	r3, r0
 8007156:	2b01      	cmp	r3, #1
 8007158:	d101      	bne.n	800715e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e022      	b.n	80071a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 ff22 	bl	8007fb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800717a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689a      	ldr	r2, [r3, #8]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800718a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0201 	orr.w	r2, r2, #1
 800719a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 ffa9 	bl	80080f4 <UART_CheckIdleState>
 80071a2:	4603      	mov	r3, r0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08a      	sub	sp, #40	; 0x28
 80071b0:	af02      	add	r7, sp, #8
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	4613      	mov	r3, r2
 80071ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	f040 8083 	bne.w	80072ce <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d002      	beq.n	80071d4 <HAL_UART_Transmit+0x28>
 80071ce:	88fb      	ldrh	r3, [r7, #6]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d101      	bne.n	80071d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e07b      	b.n	80072d0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d101      	bne.n	80071e6 <HAL_UART_Transmit+0x3a>
 80071e2:	2302      	movs	r3, #2
 80071e4:	e074      	b.n	80072d0 <HAL_UART_Transmit+0x124>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2221      	movs	r2, #33	; 0x21
 80071fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071fe:	f7fa fdef 	bl	8001de0 <HAL_GetTick>
 8007202:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	88fa      	ldrh	r2, [r7, #6]
 8007208:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	88fa      	ldrh	r2, [r7, #6]
 8007210:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800721c:	d108      	bne.n	8007230 <HAL_UART_Transmit+0x84>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d104      	bne.n	8007230 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007226:	2300      	movs	r3, #0
 8007228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	61bb      	str	r3, [r7, #24]
 800722e:	e003      	b.n	8007238 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007234:	2300      	movs	r3, #0
 8007236:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007240:	e02c      	b.n	800729c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2200      	movs	r2, #0
 800724a:	2180      	movs	r1, #128	; 0x80
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 ff9c 	bl	800818a <UART_WaitOnFlagUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e039      	b.n	80072d0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10b      	bne.n	800727a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007270:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	3302      	adds	r3, #2
 8007276:	61bb      	str	r3, [r7, #24]
 8007278:	e007      	b.n	800728a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	781a      	ldrb	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	3301      	adds	r3, #1
 8007288:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007290:	b29b      	uxth	r3, r3
 8007292:	3b01      	subs	r3, #1
 8007294:	b29a      	uxth	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1cc      	bne.n	8007242 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2200      	movs	r2, #0
 80072b0:	2140      	movs	r1, #64	; 0x40
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 ff69 	bl	800818a <UART_WaitOnFlagUntilTimeout>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e006      	b.n	80072d0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	e000      	b.n	80072d0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80072ce:	2302      	movs	r3, #2
  }
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3720      	adds	r7, #32
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072dc:	b092      	sub	sp, #72	; 0x48
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	431a      	orrs	r2, r3
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	431a      	orrs	r2, r3
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4bbe      	ldr	r3, [pc, #760]	; (8007600 <UART_SetConfig+0x328>)
 8007308:	4013      	ands	r3, r2
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007310:	430b      	orrs	r3, r1
 8007312:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4ab3      	ldr	r2, [pc, #716]	; (8007604 <UART_SetConfig+0x32c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d004      	beq.n	8007344 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007340:	4313      	orrs	r3, r2
 8007342:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689a      	ldr	r2, [r3, #8]
 800734a:	4baf      	ldr	r3, [pc, #700]	; (8007608 <UART_SetConfig+0x330>)
 800734c:	4013      	ands	r3, r2
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	6812      	ldr	r2, [r2, #0]
 8007352:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007354:	430b      	orrs	r3, r1
 8007356:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	f023 010f 	bic.w	r1, r3, #15
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4aa6      	ldr	r2, [pc, #664]	; (800760c <UART_SetConfig+0x334>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d177      	bne.n	8007468 <UART_SetConfig+0x190>
 8007378:	4ba5      	ldr	r3, [pc, #660]	; (8007610 <UART_SetConfig+0x338>)
 800737a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800737c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007380:	2b28      	cmp	r3, #40	; 0x28
 8007382:	d86d      	bhi.n	8007460 <UART_SetConfig+0x188>
 8007384:	a201      	add	r2, pc, #4	; (adr r2, 800738c <UART_SetConfig+0xb4>)
 8007386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738a:	bf00      	nop
 800738c:	08007431 	.word	0x08007431
 8007390:	08007461 	.word	0x08007461
 8007394:	08007461 	.word	0x08007461
 8007398:	08007461 	.word	0x08007461
 800739c:	08007461 	.word	0x08007461
 80073a0:	08007461 	.word	0x08007461
 80073a4:	08007461 	.word	0x08007461
 80073a8:	08007461 	.word	0x08007461
 80073ac:	08007439 	.word	0x08007439
 80073b0:	08007461 	.word	0x08007461
 80073b4:	08007461 	.word	0x08007461
 80073b8:	08007461 	.word	0x08007461
 80073bc:	08007461 	.word	0x08007461
 80073c0:	08007461 	.word	0x08007461
 80073c4:	08007461 	.word	0x08007461
 80073c8:	08007461 	.word	0x08007461
 80073cc:	08007441 	.word	0x08007441
 80073d0:	08007461 	.word	0x08007461
 80073d4:	08007461 	.word	0x08007461
 80073d8:	08007461 	.word	0x08007461
 80073dc:	08007461 	.word	0x08007461
 80073e0:	08007461 	.word	0x08007461
 80073e4:	08007461 	.word	0x08007461
 80073e8:	08007461 	.word	0x08007461
 80073ec:	08007449 	.word	0x08007449
 80073f0:	08007461 	.word	0x08007461
 80073f4:	08007461 	.word	0x08007461
 80073f8:	08007461 	.word	0x08007461
 80073fc:	08007461 	.word	0x08007461
 8007400:	08007461 	.word	0x08007461
 8007404:	08007461 	.word	0x08007461
 8007408:	08007461 	.word	0x08007461
 800740c:	08007451 	.word	0x08007451
 8007410:	08007461 	.word	0x08007461
 8007414:	08007461 	.word	0x08007461
 8007418:	08007461 	.word	0x08007461
 800741c:	08007461 	.word	0x08007461
 8007420:	08007461 	.word	0x08007461
 8007424:	08007461 	.word	0x08007461
 8007428:	08007461 	.word	0x08007461
 800742c:	08007459 	.word	0x08007459
 8007430:	2301      	movs	r3, #1
 8007432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007436:	e326      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007438:	2304      	movs	r3, #4
 800743a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800743e:	e322      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007440:	2308      	movs	r3, #8
 8007442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007446:	e31e      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007448:	2310      	movs	r3, #16
 800744a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800744e:	e31a      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007450:	2320      	movs	r3, #32
 8007452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007456:	e316      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007458:	2340      	movs	r3, #64	; 0x40
 800745a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800745e:	e312      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007460:	2380      	movs	r3, #128	; 0x80
 8007462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007466:	e30e      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a69      	ldr	r2, [pc, #420]	; (8007614 <UART_SetConfig+0x33c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d130      	bne.n	80074d4 <UART_SetConfig+0x1fc>
 8007472:	4b67      	ldr	r3, [pc, #412]	; (8007610 <UART_SetConfig+0x338>)
 8007474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	2b05      	cmp	r3, #5
 800747c:	d826      	bhi.n	80074cc <UART_SetConfig+0x1f4>
 800747e:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <UART_SetConfig+0x1ac>)
 8007480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007484:	0800749d 	.word	0x0800749d
 8007488:	080074a5 	.word	0x080074a5
 800748c:	080074ad 	.word	0x080074ad
 8007490:	080074b5 	.word	0x080074b5
 8007494:	080074bd 	.word	0x080074bd
 8007498:	080074c5 	.word	0x080074c5
 800749c:	2300      	movs	r3, #0
 800749e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074a2:	e2f0      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80074a4:	2304      	movs	r3, #4
 80074a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074aa:	e2ec      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80074ac:	2308      	movs	r3, #8
 80074ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074b2:	e2e8      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80074b4:	2310      	movs	r3, #16
 80074b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ba:	e2e4      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80074bc:	2320      	movs	r3, #32
 80074be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074c2:	e2e0      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80074c4:	2340      	movs	r3, #64	; 0x40
 80074c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ca:	e2dc      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80074cc:	2380      	movs	r3, #128	; 0x80
 80074ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074d2:	e2d8      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a4f      	ldr	r2, [pc, #316]	; (8007618 <UART_SetConfig+0x340>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d130      	bne.n	8007540 <UART_SetConfig+0x268>
 80074de:	4b4c      	ldr	r3, [pc, #304]	; (8007610 <UART_SetConfig+0x338>)
 80074e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e2:	f003 0307 	and.w	r3, r3, #7
 80074e6:	2b05      	cmp	r3, #5
 80074e8:	d826      	bhi.n	8007538 <UART_SetConfig+0x260>
 80074ea:	a201      	add	r2, pc, #4	; (adr r2, 80074f0 <UART_SetConfig+0x218>)
 80074ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f0:	08007509 	.word	0x08007509
 80074f4:	08007511 	.word	0x08007511
 80074f8:	08007519 	.word	0x08007519
 80074fc:	08007521 	.word	0x08007521
 8007500:	08007529 	.word	0x08007529
 8007504:	08007531 	.word	0x08007531
 8007508:	2300      	movs	r3, #0
 800750a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750e:	e2ba      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007510:	2304      	movs	r3, #4
 8007512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007516:	e2b6      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007518:	2308      	movs	r3, #8
 800751a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751e:	e2b2      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007520:	2310      	movs	r3, #16
 8007522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007526:	e2ae      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007528:	2320      	movs	r3, #32
 800752a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800752e:	e2aa      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007530:	2340      	movs	r3, #64	; 0x40
 8007532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007536:	e2a6      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007538:	2380      	movs	r3, #128	; 0x80
 800753a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800753e:	e2a2      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a35      	ldr	r2, [pc, #212]	; (800761c <UART_SetConfig+0x344>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d130      	bne.n	80075ac <UART_SetConfig+0x2d4>
 800754a:	4b31      	ldr	r3, [pc, #196]	; (8007610 <UART_SetConfig+0x338>)
 800754c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754e:	f003 0307 	and.w	r3, r3, #7
 8007552:	2b05      	cmp	r3, #5
 8007554:	d826      	bhi.n	80075a4 <UART_SetConfig+0x2cc>
 8007556:	a201      	add	r2, pc, #4	; (adr r2, 800755c <UART_SetConfig+0x284>)
 8007558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755c:	08007575 	.word	0x08007575
 8007560:	0800757d 	.word	0x0800757d
 8007564:	08007585 	.word	0x08007585
 8007568:	0800758d 	.word	0x0800758d
 800756c:	08007595 	.word	0x08007595
 8007570:	0800759d 	.word	0x0800759d
 8007574:	2300      	movs	r3, #0
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757a:	e284      	b.n	8007a86 <UART_SetConfig+0x7ae>
 800757c:	2304      	movs	r3, #4
 800757e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007582:	e280      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007584:	2308      	movs	r3, #8
 8007586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800758a:	e27c      	b.n	8007a86 <UART_SetConfig+0x7ae>
 800758c:	2310      	movs	r3, #16
 800758e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007592:	e278      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007594:	2320      	movs	r3, #32
 8007596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800759a:	e274      	b.n	8007a86 <UART_SetConfig+0x7ae>
 800759c:	2340      	movs	r3, #64	; 0x40
 800759e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075a2:	e270      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80075a4:	2380      	movs	r3, #128	; 0x80
 80075a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075aa:	e26c      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a1b      	ldr	r2, [pc, #108]	; (8007620 <UART_SetConfig+0x348>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d142      	bne.n	800763c <UART_SetConfig+0x364>
 80075b6:	4b16      	ldr	r3, [pc, #88]	; (8007610 <UART_SetConfig+0x338>)
 80075b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ba:	f003 0307 	and.w	r3, r3, #7
 80075be:	2b05      	cmp	r3, #5
 80075c0:	d838      	bhi.n	8007634 <UART_SetConfig+0x35c>
 80075c2:	a201      	add	r2, pc, #4	; (adr r2, 80075c8 <UART_SetConfig+0x2f0>)
 80075c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c8:	080075e1 	.word	0x080075e1
 80075cc:	080075e9 	.word	0x080075e9
 80075d0:	080075f1 	.word	0x080075f1
 80075d4:	080075f9 	.word	0x080075f9
 80075d8:	08007625 	.word	0x08007625
 80075dc:	0800762d 	.word	0x0800762d
 80075e0:	2300      	movs	r3, #0
 80075e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075e6:	e24e      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80075e8:	2304      	movs	r3, #4
 80075ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ee:	e24a      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80075f0:	2308      	movs	r3, #8
 80075f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075f6:	e246      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80075f8:	2310      	movs	r3, #16
 80075fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075fe:	e242      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007600:	cfff69f3 	.word	0xcfff69f3
 8007604:	58000c00 	.word	0x58000c00
 8007608:	11fff4ff 	.word	0x11fff4ff
 800760c:	40011000 	.word	0x40011000
 8007610:	58024400 	.word	0x58024400
 8007614:	40004400 	.word	0x40004400
 8007618:	40004800 	.word	0x40004800
 800761c:	40004c00 	.word	0x40004c00
 8007620:	40005000 	.word	0x40005000
 8007624:	2320      	movs	r3, #32
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800762a:	e22c      	b.n	8007a86 <UART_SetConfig+0x7ae>
 800762c:	2340      	movs	r3, #64	; 0x40
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007632:	e228      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007634:	2380      	movs	r3, #128	; 0x80
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800763a:	e224      	b.n	8007a86 <UART_SetConfig+0x7ae>
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4ab1      	ldr	r2, [pc, #708]	; (8007908 <UART_SetConfig+0x630>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d176      	bne.n	8007734 <UART_SetConfig+0x45c>
 8007646:	4bb1      	ldr	r3, [pc, #708]	; (800790c <UART_SetConfig+0x634>)
 8007648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800764e:	2b28      	cmp	r3, #40	; 0x28
 8007650:	d86c      	bhi.n	800772c <UART_SetConfig+0x454>
 8007652:	a201      	add	r2, pc, #4	; (adr r2, 8007658 <UART_SetConfig+0x380>)
 8007654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007658:	080076fd 	.word	0x080076fd
 800765c:	0800772d 	.word	0x0800772d
 8007660:	0800772d 	.word	0x0800772d
 8007664:	0800772d 	.word	0x0800772d
 8007668:	0800772d 	.word	0x0800772d
 800766c:	0800772d 	.word	0x0800772d
 8007670:	0800772d 	.word	0x0800772d
 8007674:	0800772d 	.word	0x0800772d
 8007678:	08007705 	.word	0x08007705
 800767c:	0800772d 	.word	0x0800772d
 8007680:	0800772d 	.word	0x0800772d
 8007684:	0800772d 	.word	0x0800772d
 8007688:	0800772d 	.word	0x0800772d
 800768c:	0800772d 	.word	0x0800772d
 8007690:	0800772d 	.word	0x0800772d
 8007694:	0800772d 	.word	0x0800772d
 8007698:	0800770d 	.word	0x0800770d
 800769c:	0800772d 	.word	0x0800772d
 80076a0:	0800772d 	.word	0x0800772d
 80076a4:	0800772d 	.word	0x0800772d
 80076a8:	0800772d 	.word	0x0800772d
 80076ac:	0800772d 	.word	0x0800772d
 80076b0:	0800772d 	.word	0x0800772d
 80076b4:	0800772d 	.word	0x0800772d
 80076b8:	08007715 	.word	0x08007715
 80076bc:	0800772d 	.word	0x0800772d
 80076c0:	0800772d 	.word	0x0800772d
 80076c4:	0800772d 	.word	0x0800772d
 80076c8:	0800772d 	.word	0x0800772d
 80076cc:	0800772d 	.word	0x0800772d
 80076d0:	0800772d 	.word	0x0800772d
 80076d4:	0800772d 	.word	0x0800772d
 80076d8:	0800771d 	.word	0x0800771d
 80076dc:	0800772d 	.word	0x0800772d
 80076e0:	0800772d 	.word	0x0800772d
 80076e4:	0800772d 	.word	0x0800772d
 80076e8:	0800772d 	.word	0x0800772d
 80076ec:	0800772d 	.word	0x0800772d
 80076f0:	0800772d 	.word	0x0800772d
 80076f4:	0800772d 	.word	0x0800772d
 80076f8:	08007725 	.word	0x08007725
 80076fc:	2301      	movs	r3, #1
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007702:	e1c0      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007704:	2304      	movs	r3, #4
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800770a:	e1bc      	b.n	8007a86 <UART_SetConfig+0x7ae>
 800770c:	2308      	movs	r3, #8
 800770e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007712:	e1b8      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007714:	2310      	movs	r3, #16
 8007716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800771a:	e1b4      	b.n	8007a86 <UART_SetConfig+0x7ae>
 800771c:	2320      	movs	r3, #32
 800771e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007722:	e1b0      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007724:	2340      	movs	r3, #64	; 0x40
 8007726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800772a:	e1ac      	b.n	8007a86 <UART_SetConfig+0x7ae>
 800772c:	2380      	movs	r3, #128	; 0x80
 800772e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007732:	e1a8      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a75      	ldr	r2, [pc, #468]	; (8007910 <UART_SetConfig+0x638>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d130      	bne.n	80077a0 <UART_SetConfig+0x4c8>
 800773e:	4b73      	ldr	r3, [pc, #460]	; (800790c <UART_SetConfig+0x634>)
 8007740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007742:	f003 0307 	and.w	r3, r3, #7
 8007746:	2b05      	cmp	r3, #5
 8007748:	d826      	bhi.n	8007798 <UART_SetConfig+0x4c0>
 800774a:	a201      	add	r2, pc, #4	; (adr r2, 8007750 <UART_SetConfig+0x478>)
 800774c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007750:	08007769 	.word	0x08007769
 8007754:	08007771 	.word	0x08007771
 8007758:	08007779 	.word	0x08007779
 800775c:	08007781 	.word	0x08007781
 8007760:	08007789 	.word	0x08007789
 8007764:	08007791 	.word	0x08007791
 8007768:	2300      	movs	r3, #0
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800776e:	e18a      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007770:	2304      	movs	r3, #4
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007776:	e186      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007778:	2308      	movs	r3, #8
 800777a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800777e:	e182      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007780:	2310      	movs	r3, #16
 8007782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007786:	e17e      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007788:	2320      	movs	r3, #32
 800778a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800778e:	e17a      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007790:	2340      	movs	r3, #64	; 0x40
 8007792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007796:	e176      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007798:	2380      	movs	r3, #128	; 0x80
 800779a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800779e:	e172      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a5b      	ldr	r2, [pc, #364]	; (8007914 <UART_SetConfig+0x63c>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d130      	bne.n	800780c <UART_SetConfig+0x534>
 80077aa:	4b58      	ldr	r3, [pc, #352]	; (800790c <UART_SetConfig+0x634>)
 80077ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ae:	f003 0307 	and.w	r3, r3, #7
 80077b2:	2b05      	cmp	r3, #5
 80077b4:	d826      	bhi.n	8007804 <UART_SetConfig+0x52c>
 80077b6:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <UART_SetConfig+0x4e4>)
 80077b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077bc:	080077d5 	.word	0x080077d5
 80077c0:	080077dd 	.word	0x080077dd
 80077c4:	080077e5 	.word	0x080077e5
 80077c8:	080077ed 	.word	0x080077ed
 80077cc:	080077f5 	.word	0x080077f5
 80077d0:	080077fd 	.word	0x080077fd
 80077d4:	2300      	movs	r3, #0
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077da:	e154      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80077dc:	2304      	movs	r3, #4
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077e2:	e150      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80077e4:	2308      	movs	r3, #8
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ea:	e14c      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80077ec:	2310      	movs	r3, #16
 80077ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077f2:	e148      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80077f4:	2320      	movs	r3, #32
 80077f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077fa:	e144      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80077fc:	2340      	movs	r3, #64	; 0x40
 80077fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007802:	e140      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007804:	2380      	movs	r3, #128	; 0x80
 8007806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800780a:	e13c      	b.n	8007a86 <UART_SetConfig+0x7ae>
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a41      	ldr	r2, [pc, #260]	; (8007918 <UART_SetConfig+0x640>)
 8007812:	4293      	cmp	r3, r2
 8007814:	f040 8082 	bne.w	800791c <UART_SetConfig+0x644>
 8007818:	4b3c      	ldr	r3, [pc, #240]	; (800790c <UART_SetConfig+0x634>)
 800781a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007820:	2b28      	cmp	r3, #40	; 0x28
 8007822:	d86d      	bhi.n	8007900 <UART_SetConfig+0x628>
 8007824:	a201      	add	r2, pc, #4	; (adr r2, 800782c <UART_SetConfig+0x554>)
 8007826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782a:	bf00      	nop
 800782c:	080078d1 	.word	0x080078d1
 8007830:	08007901 	.word	0x08007901
 8007834:	08007901 	.word	0x08007901
 8007838:	08007901 	.word	0x08007901
 800783c:	08007901 	.word	0x08007901
 8007840:	08007901 	.word	0x08007901
 8007844:	08007901 	.word	0x08007901
 8007848:	08007901 	.word	0x08007901
 800784c:	080078d9 	.word	0x080078d9
 8007850:	08007901 	.word	0x08007901
 8007854:	08007901 	.word	0x08007901
 8007858:	08007901 	.word	0x08007901
 800785c:	08007901 	.word	0x08007901
 8007860:	08007901 	.word	0x08007901
 8007864:	08007901 	.word	0x08007901
 8007868:	08007901 	.word	0x08007901
 800786c:	080078e1 	.word	0x080078e1
 8007870:	08007901 	.word	0x08007901
 8007874:	08007901 	.word	0x08007901
 8007878:	08007901 	.word	0x08007901
 800787c:	08007901 	.word	0x08007901
 8007880:	08007901 	.word	0x08007901
 8007884:	08007901 	.word	0x08007901
 8007888:	08007901 	.word	0x08007901
 800788c:	080078e9 	.word	0x080078e9
 8007890:	08007901 	.word	0x08007901
 8007894:	08007901 	.word	0x08007901
 8007898:	08007901 	.word	0x08007901
 800789c:	08007901 	.word	0x08007901
 80078a0:	08007901 	.word	0x08007901
 80078a4:	08007901 	.word	0x08007901
 80078a8:	08007901 	.word	0x08007901
 80078ac:	080078f1 	.word	0x080078f1
 80078b0:	08007901 	.word	0x08007901
 80078b4:	08007901 	.word	0x08007901
 80078b8:	08007901 	.word	0x08007901
 80078bc:	08007901 	.word	0x08007901
 80078c0:	08007901 	.word	0x08007901
 80078c4:	08007901 	.word	0x08007901
 80078c8:	08007901 	.word	0x08007901
 80078cc:	080078f9 	.word	0x080078f9
 80078d0:	2301      	movs	r3, #1
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078d6:	e0d6      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80078d8:	2304      	movs	r3, #4
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078de:	e0d2      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80078e0:	2308      	movs	r3, #8
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078e6:	e0ce      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80078e8:	2310      	movs	r3, #16
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ee:	e0ca      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80078f0:	2320      	movs	r3, #32
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f6:	e0c6      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80078f8:	2340      	movs	r3, #64	; 0x40
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078fe:	e0c2      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007900:	2380      	movs	r3, #128	; 0x80
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007906:	e0be      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007908:	40011400 	.word	0x40011400
 800790c:	58024400 	.word	0x58024400
 8007910:	40007800 	.word	0x40007800
 8007914:	40007c00 	.word	0x40007c00
 8007918:	40011800 	.word	0x40011800
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4aad      	ldr	r2, [pc, #692]	; (8007bd8 <UART_SetConfig+0x900>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d176      	bne.n	8007a14 <UART_SetConfig+0x73c>
 8007926:	4bad      	ldr	r3, [pc, #692]	; (8007bdc <UART_SetConfig+0x904>)
 8007928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800792e:	2b28      	cmp	r3, #40	; 0x28
 8007930:	d86c      	bhi.n	8007a0c <UART_SetConfig+0x734>
 8007932:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <UART_SetConfig+0x660>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	080079dd 	.word	0x080079dd
 800793c:	08007a0d 	.word	0x08007a0d
 8007940:	08007a0d 	.word	0x08007a0d
 8007944:	08007a0d 	.word	0x08007a0d
 8007948:	08007a0d 	.word	0x08007a0d
 800794c:	08007a0d 	.word	0x08007a0d
 8007950:	08007a0d 	.word	0x08007a0d
 8007954:	08007a0d 	.word	0x08007a0d
 8007958:	080079e5 	.word	0x080079e5
 800795c:	08007a0d 	.word	0x08007a0d
 8007960:	08007a0d 	.word	0x08007a0d
 8007964:	08007a0d 	.word	0x08007a0d
 8007968:	08007a0d 	.word	0x08007a0d
 800796c:	08007a0d 	.word	0x08007a0d
 8007970:	08007a0d 	.word	0x08007a0d
 8007974:	08007a0d 	.word	0x08007a0d
 8007978:	080079ed 	.word	0x080079ed
 800797c:	08007a0d 	.word	0x08007a0d
 8007980:	08007a0d 	.word	0x08007a0d
 8007984:	08007a0d 	.word	0x08007a0d
 8007988:	08007a0d 	.word	0x08007a0d
 800798c:	08007a0d 	.word	0x08007a0d
 8007990:	08007a0d 	.word	0x08007a0d
 8007994:	08007a0d 	.word	0x08007a0d
 8007998:	080079f5 	.word	0x080079f5
 800799c:	08007a0d 	.word	0x08007a0d
 80079a0:	08007a0d 	.word	0x08007a0d
 80079a4:	08007a0d 	.word	0x08007a0d
 80079a8:	08007a0d 	.word	0x08007a0d
 80079ac:	08007a0d 	.word	0x08007a0d
 80079b0:	08007a0d 	.word	0x08007a0d
 80079b4:	08007a0d 	.word	0x08007a0d
 80079b8:	080079fd 	.word	0x080079fd
 80079bc:	08007a0d 	.word	0x08007a0d
 80079c0:	08007a0d 	.word	0x08007a0d
 80079c4:	08007a0d 	.word	0x08007a0d
 80079c8:	08007a0d 	.word	0x08007a0d
 80079cc:	08007a0d 	.word	0x08007a0d
 80079d0:	08007a0d 	.word	0x08007a0d
 80079d4:	08007a0d 	.word	0x08007a0d
 80079d8:	08007a05 	.word	0x08007a05
 80079dc:	2301      	movs	r3, #1
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079e2:	e050      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80079e4:	2304      	movs	r3, #4
 80079e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ea:	e04c      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80079ec:	2308      	movs	r3, #8
 80079ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079f2:	e048      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80079f4:	2310      	movs	r3, #16
 80079f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079fa:	e044      	b.n	8007a86 <UART_SetConfig+0x7ae>
 80079fc:	2320      	movs	r3, #32
 80079fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a02:	e040      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007a04:	2340      	movs	r3, #64	; 0x40
 8007a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a0a:	e03c      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007a0c:	2380      	movs	r3, #128	; 0x80
 8007a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a12:	e038      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a71      	ldr	r2, [pc, #452]	; (8007be0 <UART_SetConfig+0x908>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d130      	bne.n	8007a80 <UART_SetConfig+0x7a8>
 8007a1e:	4b6f      	ldr	r3, [pc, #444]	; (8007bdc <UART_SetConfig+0x904>)
 8007a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a22:	f003 0307 	and.w	r3, r3, #7
 8007a26:	2b05      	cmp	r3, #5
 8007a28:	d826      	bhi.n	8007a78 <UART_SetConfig+0x7a0>
 8007a2a:	a201      	add	r2, pc, #4	; (adr r2, 8007a30 <UART_SetConfig+0x758>)
 8007a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a30:	08007a49 	.word	0x08007a49
 8007a34:	08007a51 	.word	0x08007a51
 8007a38:	08007a59 	.word	0x08007a59
 8007a3c:	08007a61 	.word	0x08007a61
 8007a40:	08007a69 	.word	0x08007a69
 8007a44:	08007a71 	.word	0x08007a71
 8007a48:	2302      	movs	r3, #2
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a4e:	e01a      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007a50:	2304      	movs	r3, #4
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a56:	e016      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007a58:	2308      	movs	r3, #8
 8007a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a5e:	e012      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007a60:	2310      	movs	r3, #16
 8007a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a66:	e00e      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007a68:	2320      	movs	r3, #32
 8007a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a6e:	e00a      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007a70:	2340      	movs	r3, #64	; 0x40
 8007a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a76:	e006      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007a78:	2380      	movs	r3, #128	; 0x80
 8007a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a7e:	e002      	b.n	8007a86 <UART_SetConfig+0x7ae>
 8007a80:	2380      	movs	r3, #128	; 0x80
 8007a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a55      	ldr	r2, [pc, #340]	; (8007be0 <UART_SetConfig+0x908>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	f040 80f8 	bne.w	8007c82 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a96:	2b20      	cmp	r3, #32
 8007a98:	dc46      	bgt.n	8007b28 <UART_SetConfig+0x850>
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	db75      	blt.n	8007b8a <UART_SetConfig+0x8b2>
 8007a9e:	3b02      	subs	r3, #2
 8007aa0:	2b1e      	cmp	r3, #30
 8007aa2:	d872      	bhi.n	8007b8a <UART_SetConfig+0x8b2>
 8007aa4:	a201      	add	r2, pc, #4	; (adr r2, 8007aac <UART_SetConfig+0x7d4>)
 8007aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aaa:	bf00      	nop
 8007aac:	08007b2f 	.word	0x08007b2f
 8007ab0:	08007b8b 	.word	0x08007b8b
 8007ab4:	08007b37 	.word	0x08007b37
 8007ab8:	08007b8b 	.word	0x08007b8b
 8007abc:	08007b8b 	.word	0x08007b8b
 8007ac0:	08007b8b 	.word	0x08007b8b
 8007ac4:	08007b47 	.word	0x08007b47
 8007ac8:	08007b8b 	.word	0x08007b8b
 8007acc:	08007b8b 	.word	0x08007b8b
 8007ad0:	08007b8b 	.word	0x08007b8b
 8007ad4:	08007b8b 	.word	0x08007b8b
 8007ad8:	08007b8b 	.word	0x08007b8b
 8007adc:	08007b8b 	.word	0x08007b8b
 8007ae0:	08007b8b 	.word	0x08007b8b
 8007ae4:	08007b57 	.word	0x08007b57
 8007ae8:	08007b8b 	.word	0x08007b8b
 8007aec:	08007b8b 	.word	0x08007b8b
 8007af0:	08007b8b 	.word	0x08007b8b
 8007af4:	08007b8b 	.word	0x08007b8b
 8007af8:	08007b8b 	.word	0x08007b8b
 8007afc:	08007b8b 	.word	0x08007b8b
 8007b00:	08007b8b 	.word	0x08007b8b
 8007b04:	08007b8b 	.word	0x08007b8b
 8007b08:	08007b8b 	.word	0x08007b8b
 8007b0c:	08007b8b 	.word	0x08007b8b
 8007b10:	08007b8b 	.word	0x08007b8b
 8007b14:	08007b8b 	.word	0x08007b8b
 8007b18:	08007b8b 	.word	0x08007b8b
 8007b1c:	08007b8b 	.word	0x08007b8b
 8007b20:	08007b8b 	.word	0x08007b8b
 8007b24:	08007b7d 	.word	0x08007b7d
 8007b28:	2b40      	cmp	r3, #64	; 0x40
 8007b2a:	d02a      	beq.n	8007b82 <UART_SetConfig+0x8aa>
 8007b2c:	e02d      	b.n	8007b8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007b2e:	f7fe fecb 	bl	80068c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007b32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b34:	e02f      	b.n	8007b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fe feda 	bl	80068f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b44:	e027      	b.n	8007b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b46:	f107 0318 	add.w	r3, r7, #24
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7ff f826 	bl	8006b9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b54:	e01f      	b.n	8007b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b56:	4b21      	ldr	r3, [pc, #132]	; (8007bdc <UART_SetConfig+0x904>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d009      	beq.n	8007b76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b62:	4b1e      	ldr	r3, [pc, #120]	; (8007bdc <UART_SetConfig+0x904>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	08db      	lsrs	r3, r3, #3
 8007b68:	f003 0303 	and.w	r3, r3, #3
 8007b6c:	4a1d      	ldr	r2, [pc, #116]	; (8007be4 <UART_SetConfig+0x90c>)
 8007b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b74:	e00f      	b.n	8007b96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007b76:	4b1b      	ldr	r3, [pc, #108]	; (8007be4 <UART_SetConfig+0x90c>)
 8007b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b7a:	e00c      	b.n	8007b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b7c:	4b1a      	ldr	r3, [pc, #104]	; (8007be8 <UART_SetConfig+0x910>)
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b80:	e009      	b.n	8007b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b88:	e005      	b.n	8007b96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007b94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 81ee 	beq.w	8007f7a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	4a12      	ldr	r2, [pc, #72]	; (8007bec <UART_SetConfig+0x914>)
 8007ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bb0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	4413      	add	r3, r2
 8007bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d305      	bcc.n	8007bce <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d910      	bls.n	8007bf0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007bd4:	e1d1      	b.n	8007f7a <UART_SetConfig+0xca2>
 8007bd6:	bf00      	nop
 8007bd8:	40011c00 	.word	0x40011c00
 8007bdc:	58024400 	.word	0x58024400
 8007be0:	58000c00 	.word	0x58000c00
 8007be4:	03d09000 	.word	0x03d09000
 8007be8:	003d0900 	.word	0x003d0900
 8007bec:	0800b1c8 	.word	0x0800b1c8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	60bb      	str	r3, [r7, #8]
 8007bf6:	60fa      	str	r2, [r7, #12]
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfc:	4ac0      	ldr	r2, [pc, #768]	; (8007f00 <UART_SetConfig+0xc28>)
 8007bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	2200      	movs	r2, #0
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	607a      	str	r2, [r7, #4]
 8007c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c12:	f7f8 fbd5 	bl	80003c0 <__aeabi_uldivmod>
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	f04f 0200 	mov.w	r2, #0
 8007c22:	f04f 0300 	mov.w	r3, #0
 8007c26:	020b      	lsls	r3, r1, #8
 8007c28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c2c:	0202      	lsls	r2, r0, #8
 8007c2e:	6979      	ldr	r1, [r7, #20]
 8007c30:	6849      	ldr	r1, [r1, #4]
 8007c32:	0849      	lsrs	r1, r1, #1
 8007c34:	2000      	movs	r0, #0
 8007c36:	460c      	mov	r4, r1
 8007c38:	4605      	mov	r5, r0
 8007c3a:	eb12 0804 	adds.w	r8, r2, r4
 8007c3e:	eb43 0905 	adc.w	r9, r3, r5
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	469a      	mov	sl, r3
 8007c4a:	4693      	mov	fp, r2
 8007c4c:	4652      	mov	r2, sl
 8007c4e:	465b      	mov	r3, fp
 8007c50:	4640      	mov	r0, r8
 8007c52:	4649      	mov	r1, r9
 8007c54:	f7f8 fbb4 	bl	80003c0 <__aeabi_uldivmod>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c66:	d308      	bcc.n	8007c7a <UART_SetConfig+0x9a2>
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c6e:	d204      	bcs.n	8007c7a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c76:	60da      	str	r2, [r3, #12]
 8007c78:	e17f      	b.n	8007f7a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007c80:	e17b      	b.n	8007f7a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c8a:	f040 80bd 	bne.w	8007e08 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007c8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	dc48      	bgt.n	8007d28 <UART_SetConfig+0xa50>
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	db7b      	blt.n	8007d92 <UART_SetConfig+0xaba>
 8007c9a:	2b20      	cmp	r3, #32
 8007c9c:	d879      	bhi.n	8007d92 <UART_SetConfig+0xaba>
 8007c9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <UART_SetConfig+0x9cc>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007d2f 	.word	0x08007d2f
 8007ca8:	08007d37 	.word	0x08007d37
 8007cac:	08007d93 	.word	0x08007d93
 8007cb0:	08007d93 	.word	0x08007d93
 8007cb4:	08007d3f 	.word	0x08007d3f
 8007cb8:	08007d93 	.word	0x08007d93
 8007cbc:	08007d93 	.word	0x08007d93
 8007cc0:	08007d93 	.word	0x08007d93
 8007cc4:	08007d4f 	.word	0x08007d4f
 8007cc8:	08007d93 	.word	0x08007d93
 8007ccc:	08007d93 	.word	0x08007d93
 8007cd0:	08007d93 	.word	0x08007d93
 8007cd4:	08007d93 	.word	0x08007d93
 8007cd8:	08007d93 	.word	0x08007d93
 8007cdc:	08007d93 	.word	0x08007d93
 8007ce0:	08007d93 	.word	0x08007d93
 8007ce4:	08007d5f 	.word	0x08007d5f
 8007ce8:	08007d93 	.word	0x08007d93
 8007cec:	08007d93 	.word	0x08007d93
 8007cf0:	08007d93 	.word	0x08007d93
 8007cf4:	08007d93 	.word	0x08007d93
 8007cf8:	08007d93 	.word	0x08007d93
 8007cfc:	08007d93 	.word	0x08007d93
 8007d00:	08007d93 	.word	0x08007d93
 8007d04:	08007d93 	.word	0x08007d93
 8007d08:	08007d93 	.word	0x08007d93
 8007d0c:	08007d93 	.word	0x08007d93
 8007d10:	08007d93 	.word	0x08007d93
 8007d14:	08007d93 	.word	0x08007d93
 8007d18:	08007d93 	.word	0x08007d93
 8007d1c:	08007d93 	.word	0x08007d93
 8007d20:	08007d93 	.word	0x08007d93
 8007d24:	08007d85 	.word	0x08007d85
 8007d28:	2b40      	cmp	r3, #64	; 0x40
 8007d2a:	d02e      	beq.n	8007d8a <UART_SetConfig+0xab2>
 8007d2c:	e031      	b.n	8007d92 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d2e:	f7fd fea5 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 8007d32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d34:	e033      	b.n	8007d9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d36:	f7fd feb7 	bl	8005aa8 <HAL_RCC_GetPCLK2Freq>
 8007d3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d3c:	e02f      	b.n	8007d9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe fdd6 	bl	80068f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d4c:	e027      	b.n	8007d9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d4e:	f107 0318 	add.w	r3, r7, #24
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fe ff22 	bl	8006b9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d5c:	e01f      	b.n	8007d9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d5e:	4b69      	ldr	r3, [pc, #420]	; (8007f04 <UART_SetConfig+0xc2c>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0320 	and.w	r3, r3, #32
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d009      	beq.n	8007d7e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d6a:	4b66      	ldr	r3, [pc, #408]	; (8007f04 <UART_SetConfig+0xc2c>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	08db      	lsrs	r3, r3, #3
 8007d70:	f003 0303 	and.w	r3, r3, #3
 8007d74:	4a64      	ldr	r2, [pc, #400]	; (8007f08 <UART_SetConfig+0xc30>)
 8007d76:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d7c:	e00f      	b.n	8007d9e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007d7e:	4b62      	ldr	r3, [pc, #392]	; (8007f08 <UART_SetConfig+0xc30>)
 8007d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d82:	e00c      	b.n	8007d9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d84:	4b61      	ldr	r3, [pc, #388]	; (8007f0c <UART_SetConfig+0xc34>)
 8007d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d88:	e009      	b.n	8007d9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d90:	e005      	b.n	8007d9e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007d9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 80ea 	beq.w	8007f7a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	4a55      	ldr	r2, [pc, #340]	; (8007f00 <UART_SetConfig+0xc28>)
 8007dac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007db0:	461a      	mov	r2, r3
 8007db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007db8:	005a      	lsls	r2, r3, #1
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	085b      	lsrs	r3, r3, #1
 8007dc0:	441a      	add	r2, r3
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dce:	2b0f      	cmp	r3, #15
 8007dd0:	d916      	bls.n	8007e00 <UART_SetConfig+0xb28>
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dd8:	d212      	bcs.n	8007e00 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	f023 030f 	bic.w	r3, r3, #15
 8007de2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de6:	085b      	lsrs	r3, r3, #1
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	f003 0307 	and.w	r3, r3, #7
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007df2:	4313      	orrs	r3, r2
 8007df4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007dfc:	60da      	str	r2, [r3, #12]
 8007dfe:	e0bc      	b.n	8007f7a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007e06:	e0b8      	b.n	8007f7a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e0c:	2b20      	cmp	r3, #32
 8007e0e:	dc4b      	bgt.n	8007ea8 <UART_SetConfig+0xbd0>
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f2c0 8087 	blt.w	8007f24 <UART_SetConfig+0xc4c>
 8007e16:	2b20      	cmp	r3, #32
 8007e18:	f200 8084 	bhi.w	8007f24 <UART_SetConfig+0xc4c>
 8007e1c:	a201      	add	r2, pc, #4	; (adr r2, 8007e24 <UART_SetConfig+0xb4c>)
 8007e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e22:	bf00      	nop
 8007e24:	08007eaf 	.word	0x08007eaf
 8007e28:	08007eb7 	.word	0x08007eb7
 8007e2c:	08007f25 	.word	0x08007f25
 8007e30:	08007f25 	.word	0x08007f25
 8007e34:	08007ebf 	.word	0x08007ebf
 8007e38:	08007f25 	.word	0x08007f25
 8007e3c:	08007f25 	.word	0x08007f25
 8007e40:	08007f25 	.word	0x08007f25
 8007e44:	08007ecf 	.word	0x08007ecf
 8007e48:	08007f25 	.word	0x08007f25
 8007e4c:	08007f25 	.word	0x08007f25
 8007e50:	08007f25 	.word	0x08007f25
 8007e54:	08007f25 	.word	0x08007f25
 8007e58:	08007f25 	.word	0x08007f25
 8007e5c:	08007f25 	.word	0x08007f25
 8007e60:	08007f25 	.word	0x08007f25
 8007e64:	08007edf 	.word	0x08007edf
 8007e68:	08007f25 	.word	0x08007f25
 8007e6c:	08007f25 	.word	0x08007f25
 8007e70:	08007f25 	.word	0x08007f25
 8007e74:	08007f25 	.word	0x08007f25
 8007e78:	08007f25 	.word	0x08007f25
 8007e7c:	08007f25 	.word	0x08007f25
 8007e80:	08007f25 	.word	0x08007f25
 8007e84:	08007f25 	.word	0x08007f25
 8007e88:	08007f25 	.word	0x08007f25
 8007e8c:	08007f25 	.word	0x08007f25
 8007e90:	08007f25 	.word	0x08007f25
 8007e94:	08007f25 	.word	0x08007f25
 8007e98:	08007f25 	.word	0x08007f25
 8007e9c:	08007f25 	.word	0x08007f25
 8007ea0:	08007f25 	.word	0x08007f25
 8007ea4:	08007f17 	.word	0x08007f17
 8007ea8:	2b40      	cmp	r3, #64	; 0x40
 8007eaa:	d037      	beq.n	8007f1c <UART_SetConfig+0xc44>
 8007eac:	e03a      	b.n	8007f24 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eae:	f7fd fde5 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 8007eb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007eb4:	e03c      	b.n	8007f30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eb6:	f7fd fdf7 	bl	8005aa8 <HAL_RCC_GetPCLK2Freq>
 8007eba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ebc:	e038      	b.n	8007f30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe fd16 	bl	80068f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ecc:	e030      	b.n	8007f30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ece:	f107 0318 	add.w	r3, r7, #24
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fe fe62 	bl	8006b9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007edc:	e028      	b.n	8007f30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ede:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <UART_SetConfig+0xc2c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0320 	and.w	r3, r3, #32
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d012      	beq.n	8007f10 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007eea:	4b06      	ldr	r3, [pc, #24]	; (8007f04 <UART_SetConfig+0xc2c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	08db      	lsrs	r3, r3, #3
 8007ef0:	f003 0303 	and.w	r3, r3, #3
 8007ef4:	4a04      	ldr	r2, [pc, #16]	; (8007f08 <UART_SetConfig+0xc30>)
 8007ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8007efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007efc:	e018      	b.n	8007f30 <UART_SetConfig+0xc58>
 8007efe:	bf00      	nop
 8007f00:	0800b1c8 	.word	0x0800b1c8
 8007f04:	58024400 	.word	0x58024400
 8007f08:	03d09000 	.word	0x03d09000
 8007f0c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007f10:	4b24      	ldr	r3, [pc, #144]	; (8007fa4 <UART_SetConfig+0xccc>)
 8007f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f14:	e00c      	b.n	8007f30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f16:	4b24      	ldr	r3, [pc, #144]	; (8007fa8 <UART_SetConfig+0xcd0>)
 8007f18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f1a:	e009      	b.n	8007f30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f22:	e005      	b.n	8007f30 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007f2e:	bf00      	nop
    }

    if (pclk != 0U)
 8007f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d021      	beq.n	8007f7a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	4a1c      	ldr	r2, [pc, #112]	; (8007fac <UART_SetConfig+0xcd4>)
 8007f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f40:	461a      	mov	r2, r3
 8007f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f44:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	085b      	lsrs	r3, r3, #1
 8007f4e:	441a      	add	r2, r3
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f58:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	2b0f      	cmp	r3, #15
 8007f5e:	d909      	bls.n	8007f74 <UART_SetConfig+0xc9c>
 8007f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f66:	d205      	bcs.n	8007f74 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	60da      	str	r2, [r3, #12]
 8007f72:	e002      	b.n	8007f7a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	2200      	movs	r2, #0
 8007f94:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007f96:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3748      	adds	r7, #72	; 0x48
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fa4:	03d09000 	.word	0x03d09000
 8007fa8:	003d0900 	.word	0x003d0900
 8007fac:	0800b1c8 	.word	0x0800b1c8

08007fb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00a      	beq.n	8007fda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00a      	beq.n	8007ffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008000:	f003 0304 	and.w	r3, r3, #4
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00a      	beq.n	800801e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	430a      	orrs	r2, r1
 800801c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008022:	f003 0308 	and.w	r3, r3, #8
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008044:	f003 0310 	and.w	r3, r3, #16
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00a      	beq.n	8008062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	430a      	orrs	r2, r1
 8008060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008066:	f003 0320 	and.w	r3, r3, #32
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00a      	beq.n	8008084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	430a      	orrs	r2, r1
 8008082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808c:	2b00      	cmp	r3, #0
 800808e:	d01a      	beq.n	80080c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080ae:	d10a      	bne.n	80080c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00a      	beq.n	80080e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	430a      	orrs	r2, r1
 80080e6:	605a      	str	r2, [r3, #4]
  }
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af02      	add	r7, sp, #8
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008104:	f7f9 fe6c 	bl	8001de0 <HAL_GetTick>
 8008108:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0308 	and.w	r3, r3, #8
 8008114:	2b08      	cmp	r3, #8
 8008116:	d10e      	bne.n	8008136 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f82f 	bl	800818a <UART_WaitOnFlagUntilTimeout>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e025      	b.n	8008182 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b04      	cmp	r3, #4
 8008142:	d10e      	bne.n	8008162 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f819 	bl	800818a <UART_WaitOnFlagUntilTimeout>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e00f      	b.n	8008182 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2220      	movs	r2, #32
 8008166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2220      	movs	r2, #32
 800816e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b09c      	sub	sp, #112	; 0x70
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	603b      	str	r3, [r7, #0]
 8008196:	4613      	mov	r3, r2
 8008198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800819a:	e0a9      	b.n	80082f0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800819c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800819e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a2:	f000 80a5 	beq.w	80082f0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081a6:	f7f9 fe1b 	bl	8001de0 <HAL_GetTick>
 80081aa:	4602      	mov	r2, r0
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d302      	bcc.n	80081bc <UART_WaitOnFlagUntilTimeout+0x32>
 80081b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d140      	bne.n	800823e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081c4:	e853 3f00 	ldrex	r3, [r3]
 80081c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081d0:	667b      	str	r3, [r7, #100]	; 0x64
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	461a      	mov	r2, r3
 80081d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081e2:	e841 2300 	strex	r3, r2, [r1]
 80081e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80081e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1e6      	bne.n	80081bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3308      	adds	r3, #8
 80081f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008200:	f023 0301 	bic.w	r3, r3, #1
 8008204:	663b      	str	r3, [r7, #96]	; 0x60
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3308      	adds	r3, #8
 800820c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800820e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008210:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800821c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e5      	bne.n	80081ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2220      	movs	r2, #32
 8008226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2220      	movs	r2, #32
 800822e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e069      	b.n	8008312 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0304 	and.w	r3, r3, #4
 8008248:	2b00      	cmp	r3, #0
 800824a:	d051      	beq.n	80082f0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800825a:	d149      	bne.n	80082f0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008264:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826e:	e853 3f00 	ldrex	r3, [r3]
 8008272:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800827a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	461a      	mov	r2, r3
 8008282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008284:	637b      	str	r3, [r7, #52]	; 0x34
 8008286:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008288:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800828a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800828c:	e841 2300 	strex	r3, r2, [r1]
 8008290:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008294:	2b00      	cmp	r3, #0
 8008296:	d1e6      	bne.n	8008266 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3308      	adds	r3, #8
 800829e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	e853 3f00 	ldrex	r3, [r3]
 80082a6:	613b      	str	r3, [r7, #16]
   return(result);
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	f023 0301 	bic.w	r3, r3, #1
 80082ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3308      	adds	r3, #8
 80082b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082b8:	623a      	str	r2, [r7, #32]
 80082ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082bc:	69f9      	ldr	r1, [r7, #28]
 80082be:	6a3a      	ldr	r2, [r7, #32]
 80082c0:	e841 2300 	strex	r3, r2, [r1]
 80082c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1e5      	bne.n	8008298 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2220      	movs	r2, #32
 80082e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e010      	b.n	8008312 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	69da      	ldr	r2, [r3, #28]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	4013      	ands	r3, r2
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	bf0c      	ite	eq
 8008300:	2301      	moveq	r3, #1
 8008302:	2300      	movne	r3, #0
 8008304:	b2db      	uxtb	r3, r3
 8008306:	461a      	mov	r2, r3
 8008308:	79fb      	ldrb	r3, [r7, #7]
 800830a:	429a      	cmp	r2, r3
 800830c:	f43f af46 	beq.w	800819c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3770      	adds	r7, #112	; 0x70
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800831a:	b480      	push	{r7}
 800831c:	b085      	sub	sp, #20
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008328:	2b01      	cmp	r3, #1
 800832a:	d101      	bne.n	8008330 <HAL_UARTEx_DisableFifoMode+0x16>
 800832c:	2302      	movs	r3, #2
 800832e:	e027      	b.n	8008380 <HAL_UARTEx_DisableFifoMode+0x66>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2224      	movs	r2, #36	; 0x24
 800833c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f022 0201 	bic.w	r2, r2, #1
 8008356:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800835e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2220      	movs	r2, #32
 8008372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800839c:	2b01      	cmp	r3, #1
 800839e:	d101      	bne.n	80083a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80083a0:	2302      	movs	r3, #2
 80083a2:	e02d      	b.n	8008400 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2224      	movs	r2, #36	; 0x24
 80083b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f022 0201 	bic.w	r2, r2, #1
 80083ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f84f 	bl	8008484 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2220      	movs	r2, #32
 80083f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008418:	2b01      	cmp	r3, #1
 800841a:	d101      	bne.n	8008420 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800841c:	2302      	movs	r3, #2
 800841e:	e02d      	b.n	800847c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2224      	movs	r2, #36	; 0x24
 800842c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f022 0201 	bic.w	r2, r2, #1
 8008446:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f811 	bl	8008484 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2220      	movs	r2, #32
 800846e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008490:	2b00      	cmp	r3, #0
 8008492:	d108      	bne.n	80084a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80084a4:	e031      	b.n	800850a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80084a6:	2310      	movs	r3, #16
 80084a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084aa:	2310      	movs	r3, #16
 80084ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	0e5b      	lsrs	r3, r3, #25
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	f003 0307 	and.w	r3, r3, #7
 80084bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	0f5b      	lsrs	r3, r3, #29
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084ce:	7bbb      	ldrb	r3, [r7, #14]
 80084d0:	7b3a      	ldrb	r2, [r7, #12]
 80084d2:	4911      	ldr	r1, [pc, #68]	; (8008518 <UARTEx_SetNbDataToProcess+0x94>)
 80084d4:	5c8a      	ldrb	r2, [r1, r2]
 80084d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084da:	7b3a      	ldrb	r2, [r7, #12]
 80084dc:	490f      	ldr	r1, [pc, #60]	; (800851c <UARTEx_SetNbDataToProcess+0x98>)
 80084de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	7b7a      	ldrb	r2, [r7, #13]
 80084f0:	4909      	ldr	r1, [pc, #36]	; (8008518 <UARTEx_SetNbDataToProcess+0x94>)
 80084f2:	5c8a      	ldrb	r2, [r1, r2]
 80084f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084f8:	7b7a      	ldrb	r2, [r7, #13]
 80084fa:	4908      	ldr	r1, [pc, #32]	; (800851c <UARTEx_SetNbDataToProcess+0x98>)
 80084fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008502:	b29a      	uxth	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800850a:	bf00      	nop
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	0800b1e0 	.word	0x0800b1e0
 800851c:	0800b1e8 	.word	0x0800b1e8

08008520 <TMP117_setup>:
#include "TMP117.h"

#define REV16_A(X) (((X) << 8) | ((X)>>8))

void TMP117_setup(TMP117_dev * dev, I2C_Bus * bus, uint8_t addr)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	4613      	mov	r3, r2
 800852c:	71fb      	strb	r3, [r7, #7]
	dev->addr = addr;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	79fa      	ldrb	r2, [r7, #7]
 8008532:	711a      	strb	r2, [r3, #4]
	dev->bus = bus;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	601a      	str	r2, [r3, #0]
}
 800853a:	bf00      	nop
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
	...

08008548 <TMP117_read_temperature>:

int32_t TMP117_read_temperature(TMP117_dev * dev, float * temperature) {
 8008548:	b590      	push	{r4, r7, lr}
 800854a:	b087      	sub	sp, #28
 800854c:	af02      	add	r7, sp, #8
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
	int16_t data = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	81bb      	strh	r3, [r7, #12]
	uint16_t addr = (dev->addr << 1) | 0x01;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	791b      	ldrb	r3, [r3, #4]
 800855a:	005b      	lsls	r3, r3, #1
 800855c:	b21b      	sxth	r3, r3
 800855e:	f043 0301 	orr.w	r3, r3, #1
 8008562:	b21b      	sxth	r3, r3
 8008564:	81fb      	strh	r3, [r7, #14]
	if(dev->bus->read(addr, TMP117_REG_TEMP_RESULT, 2, (uint8_t *)&data, 2) == HAL_OK)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	691c      	ldr	r4, [r3, #16]
 800856c:	f107 030c 	add.w	r3, r7, #12
 8008570:	89f8      	ldrh	r0, [r7, #14]
 8008572:	2202      	movs	r2, #2
 8008574:	9200      	str	r2, [sp, #0]
 8008576:	2202      	movs	r2, #2
 8008578:	2100      	movs	r1, #0
 800857a:	47a0      	blx	r4
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d124      	bne.n	80085cc <TMP117_read_temperature+0x84>
	{
		if (data == -256) {
 8008582:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008586:	f513 7f80 	cmn.w	r3, #256	; 0x100
 800858a:	d101      	bne.n	8008590 <TMP117_read_temperature+0x48>
			//Invalid Data, TMP117 has not done a conversion yet
			return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e021      	b.n	80085d4 <TMP117_read_temperature+0x8c>
		}
		data = REV16_A(data); //switch byte order
 8008590:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008594:	021b      	lsls	r3, r3, #8
 8008596:	b21a      	sxth	r2, r3
 8008598:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800859c:	121b      	asrs	r3, r3, #8
 800859e:	b21b      	sxth	r3, r3
 80085a0:	4313      	orrs	r3, r2
 80085a2:	b21b      	sxth	r3, r3
 80085a4:	81bb      	strh	r3, [r7, #12]
		*temperature = (((float)data) * TMP117_LSB_TEMP) / 1000;
 80085a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80085aa:	ee07 3a90 	vmov	s15, r3
 80085ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085b2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80085dc <TMP117_read_temperature+0x94>
 80085b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80085ba:	eddf 6a09 	vldr	s13, [pc, #36]	; 80085e0 <TMP117_read_temperature+0x98>
 80085be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	edc3 7a00 	vstr	s15, [r3]
		return HAL_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	e003      	b.n	80085d4 <TMP117_read_temperature+0x8c>
	}
	else
	{
		*temperature = -1;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	4a05      	ldr	r2, [pc, #20]	; (80085e4 <TMP117_read_temperature+0x9c>)
 80085d0:	601a      	str	r2, [r3, #0]
		return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
	}
	return HAL_ERROR;
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd90      	pop	{r4, r7, pc}
 80085dc:	40fa0000 	.word	0x40fa0000
 80085e0:	447a0000 	.word	0x447a0000
 80085e4:	bf800000 	.word	0xbf800000

080085e8 <__errno>:
 80085e8:	4b01      	ldr	r3, [pc, #4]	; (80085f0 <__errno+0x8>)
 80085ea:	6818      	ldr	r0, [r3, #0]
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	24000114 	.word	0x24000114

080085f4 <__libc_init_array>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	4d0d      	ldr	r5, [pc, #52]	; (800862c <__libc_init_array+0x38>)
 80085f8:	4c0d      	ldr	r4, [pc, #52]	; (8008630 <__libc_init_array+0x3c>)
 80085fa:	1b64      	subs	r4, r4, r5
 80085fc:	10a4      	asrs	r4, r4, #2
 80085fe:	2600      	movs	r6, #0
 8008600:	42a6      	cmp	r6, r4
 8008602:	d109      	bne.n	8008618 <__libc_init_array+0x24>
 8008604:	4d0b      	ldr	r5, [pc, #44]	; (8008634 <__libc_init_array+0x40>)
 8008606:	4c0c      	ldr	r4, [pc, #48]	; (8008638 <__libc_init_array+0x44>)
 8008608:	f002 fd1c 	bl	800b044 <_init>
 800860c:	1b64      	subs	r4, r4, r5
 800860e:	10a4      	asrs	r4, r4, #2
 8008610:	2600      	movs	r6, #0
 8008612:	42a6      	cmp	r6, r4
 8008614:	d105      	bne.n	8008622 <__libc_init_array+0x2e>
 8008616:	bd70      	pop	{r4, r5, r6, pc}
 8008618:	f855 3b04 	ldr.w	r3, [r5], #4
 800861c:	4798      	blx	r3
 800861e:	3601      	adds	r6, #1
 8008620:	e7ee      	b.n	8008600 <__libc_init_array+0xc>
 8008622:	f855 3b04 	ldr.w	r3, [r5], #4
 8008626:	4798      	blx	r3
 8008628:	3601      	adds	r6, #1
 800862a:	e7f2      	b.n	8008612 <__libc_init_array+0x1e>
 800862c:	0800b5d4 	.word	0x0800b5d4
 8008630:	0800b5d4 	.word	0x0800b5d4
 8008634:	0800b5d4 	.word	0x0800b5d4
 8008638:	0800b5d8 	.word	0x0800b5d8

0800863c <memcpy>:
 800863c:	440a      	add	r2, r1
 800863e:	4291      	cmp	r1, r2
 8008640:	f100 33ff 	add.w	r3, r0, #4294967295
 8008644:	d100      	bne.n	8008648 <memcpy+0xc>
 8008646:	4770      	bx	lr
 8008648:	b510      	push	{r4, lr}
 800864a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800864e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008652:	4291      	cmp	r1, r2
 8008654:	d1f9      	bne.n	800864a <memcpy+0xe>
 8008656:	bd10      	pop	{r4, pc}

08008658 <memset>:
 8008658:	4402      	add	r2, r0
 800865a:	4603      	mov	r3, r0
 800865c:	4293      	cmp	r3, r2
 800865e:	d100      	bne.n	8008662 <memset+0xa>
 8008660:	4770      	bx	lr
 8008662:	f803 1b01 	strb.w	r1, [r3], #1
 8008666:	e7f9      	b.n	800865c <memset+0x4>

08008668 <__cvt>:
 8008668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800866a:	ed2d 8b02 	vpush	{d8}
 800866e:	eeb0 8b40 	vmov.f64	d8, d0
 8008672:	b085      	sub	sp, #20
 8008674:	4617      	mov	r7, r2
 8008676:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008678:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800867a:	ee18 2a90 	vmov	r2, s17
 800867e:	f025 0520 	bic.w	r5, r5, #32
 8008682:	2a00      	cmp	r2, #0
 8008684:	bfb6      	itet	lt
 8008686:	222d      	movlt	r2, #45	; 0x2d
 8008688:	2200      	movge	r2, #0
 800868a:	eeb1 8b40 	vneglt.f64	d8, d0
 800868e:	2d46      	cmp	r5, #70	; 0x46
 8008690:	460c      	mov	r4, r1
 8008692:	701a      	strb	r2, [r3, #0]
 8008694:	d004      	beq.n	80086a0 <__cvt+0x38>
 8008696:	2d45      	cmp	r5, #69	; 0x45
 8008698:	d100      	bne.n	800869c <__cvt+0x34>
 800869a:	3401      	adds	r4, #1
 800869c:	2102      	movs	r1, #2
 800869e:	e000      	b.n	80086a2 <__cvt+0x3a>
 80086a0:	2103      	movs	r1, #3
 80086a2:	ab03      	add	r3, sp, #12
 80086a4:	9301      	str	r3, [sp, #4]
 80086a6:	ab02      	add	r3, sp, #8
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	4622      	mov	r2, r4
 80086ac:	4633      	mov	r3, r6
 80086ae:	eeb0 0b48 	vmov.f64	d0, d8
 80086b2:	f000 fced 	bl	8009090 <_dtoa_r>
 80086b6:	2d47      	cmp	r5, #71	; 0x47
 80086b8:	d101      	bne.n	80086be <__cvt+0x56>
 80086ba:	07fb      	lsls	r3, r7, #31
 80086bc:	d51a      	bpl.n	80086f4 <__cvt+0x8c>
 80086be:	2d46      	cmp	r5, #70	; 0x46
 80086c0:	eb00 0204 	add.w	r2, r0, r4
 80086c4:	d10c      	bne.n	80086e0 <__cvt+0x78>
 80086c6:	7803      	ldrb	r3, [r0, #0]
 80086c8:	2b30      	cmp	r3, #48	; 0x30
 80086ca:	d107      	bne.n	80086dc <__cvt+0x74>
 80086cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80086d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d4:	bf1c      	itt	ne
 80086d6:	f1c4 0401 	rsbne	r4, r4, #1
 80086da:	6034      	strne	r4, [r6, #0]
 80086dc:	6833      	ldr	r3, [r6, #0]
 80086de:	441a      	add	r2, r3
 80086e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80086e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e8:	bf08      	it	eq
 80086ea:	9203      	streq	r2, [sp, #12]
 80086ec:	2130      	movs	r1, #48	; 0x30
 80086ee:	9b03      	ldr	r3, [sp, #12]
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d307      	bcc.n	8008704 <__cvt+0x9c>
 80086f4:	9b03      	ldr	r3, [sp, #12]
 80086f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086f8:	1a1b      	subs	r3, r3, r0
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	b005      	add	sp, #20
 80086fe:	ecbd 8b02 	vpop	{d8}
 8008702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008704:	1c5c      	adds	r4, r3, #1
 8008706:	9403      	str	r4, [sp, #12]
 8008708:	7019      	strb	r1, [r3, #0]
 800870a:	e7f0      	b.n	80086ee <__cvt+0x86>

0800870c <__exponent>:
 800870c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800870e:	4603      	mov	r3, r0
 8008710:	2900      	cmp	r1, #0
 8008712:	bfb8      	it	lt
 8008714:	4249      	neglt	r1, r1
 8008716:	f803 2b02 	strb.w	r2, [r3], #2
 800871a:	bfb4      	ite	lt
 800871c:	222d      	movlt	r2, #45	; 0x2d
 800871e:	222b      	movge	r2, #43	; 0x2b
 8008720:	2909      	cmp	r1, #9
 8008722:	7042      	strb	r2, [r0, #1]
 8008724:	dd2a      	ble.n	800877c <__exponent+0x70>
 8008726:	f10d 0407 	add.w	r4, sp, #7
 800872a:	46a4      	mov	ip, r4
 800872c:	270a      	movs	r7, #10
 800872e:	46a6      	mov	lr, r4
 8008730:	460a      	mov	r2, r1
 8008732:	fb91 f6f7 	sdiv	r6, r1, r7
 8008736:	fb07 1516 	mls	r5, r7, r6, r1
 800873a:	3530      	adds	r5, #48	; 0x30
 800873c:	2a63      	cmp	r2, #99	; 0x63
 800873e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008742:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008746:	4631      	mov	r1, r6
 8008748:	dcf1      	bgt.n	800872e <__exponent+0x22>
 800874a:	3130      	adds	r1, #48	; 0x30
 800874c:	f1ae 0502 	sub.w	r5, lr, #2
 8008750:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008754:	1c44      	adds	r4, r0, #1
 8008756:	4629      	mov	r1, r5
 8008758:	4561      	cmp	r1, ip
 800875a:	d30a      	bcc.n	8008772 <__exponent+0x66>
 800875c:	f10d 0209 	add.w	r2, sp, #9
 8008760:	eba2 020e 	sub.w	r2, r2, lr
 8008764:	4565      	cmp	r5, ip
 8008766:	bf88      	it	hi
 8008768:	2200      	movhi	r2, #0
 800876a:	4413      	add	r3, r2
 800876c:	1a18      	subs	r0, r3, r0
 800876e:	b003      	add	sp, #12
 8008770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008772:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008776:	f804 2f01 	strb.w	r2, [r4, #1]!
 800877a:	e7ed      	b.n	8008758 <__exponent+0x4c>
 800877c:	2330      	movs	r3, #48	; 0x30
 800877e:	3130      	adds	r1, #48	; 0x30
 8008780:	7083      	strb	r3, [r0, #2]
 8008782:	70c1      	strb	r1, [r0, #3]
 8008784:	1d03      	adds	r3, r0, #4
 8008786:	e7f1      	b.n	800876c <__exponent+0x60>

08008788 <_printf_float>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	b08b      	sub	sp, #44	; 0x2c
 800878e:	460c      	mov	r4, r1
 8008790:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008794:	4616      	mov	r6, r2
 8008796:	461f      	mov	r7, r3
 8008798:	4605      	mov	r5, r0
 800879a:	f001 fadd 	bl	8009d58 <_localeconv_r>
 800879e:	f8d0 b000 	ldr.w	fp, [r0]
 80087a2:	4658      	mov	r0, fp
 80087a4:	f7f7 fdb4 	bl	8000310 <strlen>
 80087a8:	2300      	movs	r3, #0
 80087aa:	9308      	str	r3, [sp, #32]
 80087ac:	f8d8 3000 	ldr.w	r3, [r8]
 80087b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80087b4:	6822      	ldr	r2, [r4, #0]
 80087b6:	3307      	adds	r3, #7
 80087b8:	f023 0307 	bic.w	r3, r3, #7
 80087bc:	f103 0108 	add.w	r1, r3, #8
 80087c0:	f8c8 1000 	str.w	r1, [r8]
 80087c4:	4682      	mov	sl, r0
 80087c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087ca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80087ce:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008a30 <_printf_float+0x2a8>
 80087d2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80087d6:	eeb0 6bc0 	vabs.f64	d6, d0
 80087da:	eeb4 6b47 	vcmp.f64	d6, d7
 80087de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e2:	dd24      	ble.n	800882e <_printf_float+0xa6>
 80087e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80087e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ec:	d502      	bpl.n	80087f4 <_printf_float+0x6c>
 80087ee:	232d      	movs	r3, #45	; 0x2d
 80087f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087f4:	4b90      	ldr	r3, [pc, #576]	; (8008a38 <_printf_float+0x2b0>)
 80087f6:	4891      	ldr	r0, [pc, #580]	; (8008a3c <_printf_float+0x2b4>)
 80087f8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80087fc:	bf94      	ite	ls
 80087fe:	4698      	movls	r8, r3
 8008800:	4680      	movhi	r8, r0
 8008802:	2303      	movs	r3, #3
 8008804:	6123      	str	r3, [r4, #16]
 8008806:	f022 0204 	bic.w	r2, r2, #4
 800880a:	2300      	movs	r3, #0
 800880c:	6022      	str	r2, [r4, #0]
 800880e:	9304      	str	r3, [sp, #16]
 8008810:	9700      	str	r7, [sp, #0]
 8008812:	4633      	mov	r3, r6
 8008814:	aa09      	add	r2, sp, #36	; 0x24
 8008816:	4621      	mov	r1, r4
 8008818:	4628      	mov	r0, r5
 800881a:	f000 f9d3 	bl	8008bc4 <_printf_common>
 800881e:	3001      	adds	r0, #1
 8008820:	f040 808a 	bne.w	8008938 <_printf_float+0x1b0>
 8008824:	f04f 30ff 	mov.w	r0, #4294967295
 8008828:	b00b      	add	sp, #44	; 0x2c
 800882a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882e:	eeb4 0b40 	vcmp.f64	d0, d0
 8008832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008836:	d709      	bvc.n	800884c <_printf_float+0xc4>
 8008838:	ee10 3a90 	vmov	r3, s1
 800883c:	2b00      	cmp	r3, #0
 800883e:	bfbc      	itt	lt
 8008840:	232d      	movlt	r3, #45	; 0x2d
 8008842:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008846:	487e      	ldr	r0, [pc, #504]	; (8008a40 <_printf_float+0x2b8>)
 8008848:	4b7e      	ldr	r3, [pc, #504]	; (8008a44 <_printf_float+0x2bc>)
 800884a:	e7d5      	b.n	80087f8 <_printf_float+0x70>
 800884c:	6863      	ldr	r3, [r4, #4]
 800884e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008852:	9104      	str	r1, [sp, #16]
 8008854:	1c59      	adds	r1, r3, #1
 8008856:	d13c      	bne.n	80088d2 <_printf_float+0x14a>
 8008858:	2306      	movs	r3, #6
 800885a:	6063      	str	r3, [r4, #4]
 800885c:	2300      	movs	r3, #0
 800885e:	9303      	str	r3, [sp, #12]
 8008860:	ab08      	add	r3, sp, #32
 8008862:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008866:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800886a:	ab07      	add	r3, sp, #28
 800886c:	6861      	ldr	r1, [r4, #4]
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	6022      	str	r2, [r4, #0]
 8008872:	f10d 031b 	add.w	r3, sp, #27
 8008876:	4628      	mov	r0, r5
 8008878:	f7ff fef6 	bl	8008668 <__cvt>
 800887c:	9b04      	ldr	r3, [sp, #16]
 800887e:	9907      	ldr	r1, [sp, #28]
 8008880:	2b47      	cmp	r3, #71	; 0x47
 8008882:	4680      	mov	r8, r0
 8008884:	d108      	bne.n	8008898 <_printf_float+0x110>
 8008886:	1cc8      	adds	r0, r1, #3
 8008888:	db02      	blt.n	8008890 <_printf_float+0x108>
 800888a:	6863      	ldr	r3, [r4, #4]
 800888c:	4299      	cmp	r1, r3
 800888e:	dd41      	ble.n	8008914 <_printf_float+0x18c>
 8008890:	f1a9 0902 	sub.w	r9, r9, #2
 8008894:	fa5f f989 	uxtb.w	r9, r9
 8008898:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800889c:	d820      	bhi.n	80088e0 <_printf_float+0x158>
 800889e:	3901      	subs	r1, #1
 80088a0:	464a      	mov	r2, r9
 80088a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088a6:	9107      	str	r1, [sp, #28]
 80088a8:	f7ff ff30 	bl	800870c <__exponent>
 80088ac:	9a08      	ldr	r2, [sp, #32]
 80088ae:	9004      	str	r0, [sp, #16]
 80088b0:	1813      	adds	r3, r2, r0
 80088b2:	2a01      	cmp	r2, #1
 80088b4:	6123      	str	r3, [r4, #16]
 80088b6:	dc02      	bgt.n	80088be <_printf_float+0x136>
 80088b8:	6822      	ldr	r2, [r4, #0]
 80088ba:	07d2      	lsls	r2, r2, #31
 80088bc:	d501      	bpl.n	80088c2 <_printf_float+0x13a>
 80088be:	3301      	adds	r3, #1
 80088c0:	6123      	str	r3, [r4, #16]
 80088c2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0a2      	beq.n	8008810 <_printf_float+0x88>
 80088ca:	232d      	movs	r3, #45	; 0x2d
 80088cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088d0:	e79e      	b.n	8008810 <_printf_float+0x88>
 80088d2:	9904      	ldr	r1, [sp, #16]
 80088d4:	2947      	cmp	r1, #71	; 0x47
 80088d6:	d1c1      	bne.n	800885c <_printf_float+0xd4>
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1bf      	bne.n	800885c <_printf_float+0xd4>
 80088dc:	2301      	movs	r3, #1
 80088de:	e7bc      	b.n	800885a <_printf_float+0xd2>
 80088e0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80088e4:	d118      	bne.n	8008918 <_printf_float+0x190>
 80088e6:	2900      	cmp	r1, #0
 80088e8:	6863      	ldr	r3, [r4, #4]
 80088ea:	dd0b      	ble.n	8008904 <_printf_float+0x17c>
 80088ec:	6121      	str	r1, [r4, #16]
 80088ee:	b913      	cbnz	r3, 80088f6 <_printf_float+0x16e>
 80088f0:	6822      	ldr	r2, [r4, #0]
 80088f2:	07d0      	lsls	r0, r2, #31
 80088f4:	d502      	bpl.n	80088fc <_printf_float+0x174>
 80088f6:	3301      	adds	r3, #1
 80088f8:	440b      	add	r3, r1
 80088fa:	6123      	str	r3, [r4, #16]
 80088fc:	2300      	movs	r3, #0
 80088fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	e7de      	b.n	80088c2 <_printf_float+0x13a>
 8008904:	b913      	cbnz	r3, 800890c <_printf_float+0x184>
 8008906:	6822      	ldr	r2, [r4, #0]
 8008908:	07d2      	lsls	r2, r2, #31
 800890a:	d501      	bpl.n	8008910 <_printf_float+0x188>
 800890c:	3302      	adds	r3, #2
 800890e:	e7f4      	b.n	80088fa <_printf_float+0x172>
 8008910:	2301      	movs	r3, #1
 8008912:	e7f2      	b.n	80088fa <_printf_float+0x172>
 8008914:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008918:	9b08      	ldr	r3, [sp, #32]
 800891a:	4299      	cmp	r1, r3
 800891c:	db05      	blt.n	800892a <_printf_float+0x1a2>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	6121      	str	r1, [r4, #16]
 8008922:	07d8      	lsls	r0, r3, #31
 8008924:	d5ea      	bpl.n	80088fc <_printf_float+0x174>
 8008926:	1c4b      	adds	r3, r1, #1
 8008928:	e7e7      	b.n	80088fa <_printf_float+0x172>
 800892a:	2900      	cmp	r1, #0
 800892c:	bfd4      	ite	le
 800892e:	f1c1 0202 	rsble	r2, r1, #2
 8008932:	2201      	movgt	r2, #1
 8008934:	4413      	add	r3, r2
 8008936:	e7e0      	b.n	80088fa <_printf_float+0x172>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	055a      	lsls	r2, r3, #21
 800893c:	d407      	bmi.n	800894e <_printf_float+0x1c6>
 800893e:	6923      	ldr	r3, [r4, #16]
 8008940:	4642      	mov	r2, r8
 8008942:	4631      	mov	r1, r6
 8008944:	4628      	mov	r0, r5
 8008946:	47b8      	blx	r7
 8008948:	3001      	adds	r0, #1
 800894a:	d12a      	bne.n	80089a2 <_printf_float+0x21a>
 800894c:	e76a      	b.n	8008824 <_printf_float+0x9c>
 800894e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008952:	f240 80e2 	bls.w	8008b1a <_printf_float+0x392>
 8008956:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800895a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800895e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008962:	d133      	bne.n	80089cc <_printf_float+0x244>
 8008964:	4a38      	ldr	r2, [pc, #224]	; (8008a48 <_printf_float+0x2c0>)
 8008966:	2301      	movs	r3, #1
 8008968:	4631      	mov	r1, r6
 800896a:	4628      	mov	r0, r5
 800896c:	47b8      	blx	r7
 800896e:	3001      	adds	r0, #1
 8008970:	f43f af58 	beq.w	8008824 <_printf_float+0x9c>
 8008974:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008978:	429a      	cmp	r2, r3
 800897a:	db02      	blt.n	8008982 <_printf_float+0x1fa>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	07d8      	lsls	r0, r3, #31
 8008980:	d50f      	bpl.n	80089a2 <_printf_float+0x21a>
 8008982:	4653      	mov	r3, sl
 8008984:	465a      	mov	r2, fp
 8008986:	4631      	mov	r1, r6
 8008988:	4628      	mov	r0, r5
 800898a:	47b8      	blx	r7
 800898c:	3001      	adds	r0, #1
 800898e:	f43f af49 	beq.w	8008824 <_printf_float+0x9c>
 8008992:	f04f 0800 	mov.w	r8, #0
 8008996:	f104 091a 	add.w	r9, r4, #26
 800899a:	9b08      	ldr	r3, [sp, #32]
 800899c:	3b01      	subs	r3, #1
 800899e:	4543      	cmp	r3, r8
 80089a0:	dc09      	bgt.n	80089b6 <_printf_float+0x22e>
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	079b      	lsls	r3, r3, #30
 80089a6:	f100 8108 	bmi.w	8008bba <_printf_float+0x432>
 80089aa:	68e0      	ldr	r0, [r4, #12]
 80089ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ae:	4298      	cmp	r0, r3
 80089b0:	bfb8      	it	lt
 80089b2:	4618      	movlt	r0, r3
 80089b4:	e738      	b.n	8008828 <_printf_float+0xa0>
 80089b6:	2301      	movs	r3, #1
 80089b8:	464a      	mov	r2, r9
 80089ba:	4631      	mov	r1, r6
 80089bc:	4628      	mov	r0, r5
 80089be:	47b8      	blx	r7
 80089c0:	3001      	adds	r0, #1
 80089c2:	f43f af2f 	beq.w	8008824 <_printf_float+0x9c>
 80089c6:	f108 0801 	add.w	r8, r8, #1
 80089ca:	e7e6      	b.n	800899a <_printf_float+0x212>
 80089cc:	9b07      	ldr	r3, [sp, #28]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	dc3c      	bgt.n	8008a4c <_printf_float+0x2c4>
 80089d2:	4a1d      	ldr	r2, [pc, #116]	; (8008a48 <_printf_float+0x2c0>)
 80089d4:	2301      	movs	r3, #1
 80089d6:	4631      	mov	r1, r6
 80089d8:	4628      	mov	r0, r5
 80089da:	47b8      	blx	r7
 80089dc:	3001      	adds	r0, #1
 80089de:	f43f af21 	beq.w	8008824 <_printf_float+0x9c>
 80089e2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	d102      	bne.n	80089f0 <_printf_float+0x268>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	07d9      	lsls	r1, r3, #31
 80089ee:	d5d8      	bpl.n	80089a2 <_printf_float+0x21a>
 80089f0:	4653      	mov	r3, sl
 80089f2:	465a      	mov	r2, fp
 80089f4:	4631      	mov	r1, r6
 80089f6:	4628      	mov	r0, r5
 80089f8:	47b8      	blx	r7
 80089fa:	3001      	adds	r0, #1
 80089fc:	f43f af12 	beq.w	8008824 <_printf_float+0x9c>
 8008a00:	f04f 0900 	mov.w	r9, #0
 8008a04:	f104 0a1a 	add.w	sl, r4, #26
 8008a08:	9b07      	ldr	r3, [sp, #28]
 8008a0a:	425b      	negs	r3, r3
 8008a0c:	454b      	cmp	r3, r9
 8008a0e:	dc01      	bgt.n	8008a14 <_printf_float+0x28c>
 8008a10:	9b08      	ldr	r3, [sp, #32]
 8008a12:	e795      	b.n	8008940 <_printf_float+0x1b8>
 8008a14:	2301      	movs	r3, #1
 8008a16:	4652      	mov	r2, sl
 8008a18:	4631      	mov	r1, r6
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	47b8      	blx	r7
 8008a1e:	3001      	adds	r0, #1
 8008a20:	f43f af00 	beq.w	8008824 <_printf_float+0x9c>
 8008a24:	f109 0901 	add.w	r9, r9, #1
 8008a28:	e7ee      	b.n	8008a08 <_printf_float+0x280>
 8008a2a:	bf00      	nop
 8008a2c:	f3af 8000 	nop.w
 8008a30:	ffffffff 	.word	0xffffffff
 8008a34:	7fefffff 	.word	0x7fefffff
 8008a38:	0800b1f4 	.word	0x0800b1f4
 8008a3c:	0800b1f8 	.word	0x0800b1f8
 8008a40:	0800b200 	.word	0x0800b200
 8008a44:	0800b1fc 	.word	0x0800b1fc
 8008a48:	0800b204 	.word	0x0800b204
 8008a4c:	9a08      	ldr	r2, [sp, #32]
 8008a4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a50:	429a      	cmp	r2, r3
 8008a52:	bfa8      	it	ge
 8008a54:	461a      	movge	r2, r3
 8008a56:	2a00      	cmp	r2, #0
 8008a58:	4691      	mov	r9, r2
 8008a5a:	dc38      	bgt.n	8008ace <_printf_float+0x346>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	9305      	str	r3, [sp, #20]
 8008a60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a64:	f104 021a 	add.w	r2, r4, #26
 8008a68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a6a:	9905      	ldr	r1, [sp, #20]
 8008a6c:	9304      	str	r3, [sp, #16]
 8008a6e:	eba3 0309 	sub.w	r3, r3, r9
 8008a72:	428b      	cmp	r3, r1
 8008a74:	dc33      	bgt.n	8008ade <_printf_float+0x356>
 8008a76:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	db3c      	blt.n	8008af8 <_printf_float+0x370>
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	07da      	lsls	r2, r3, #31
 8008a82:	d439      	bmi.n	8008af8 <_printf_float+0x370>
 8008a84:	9b08      	ldr	r3, [sp, #32]
 8008a86:	9a04      	ldr	r2, [sp, #16]
 8008a88:	9907      	ldr	r1, [sp, #28]
 8008a8a:	1a9a      	subs	r2, r3, r2
 8008a8c:	eba3 0901 	sub.w	r9, r3, r1
 8008a90:	4591      	cmp	r9, r2
 8008a92:	bfa8      	it	ge
 8008a94:	4691      	movge	r9, r2
 8008a96:	f1b9 0f00 	cmp.w	r9, #0
 8008a9a:	dc35      	bgt.n	8008b08 <_printf_float+0x380>
 8008a9c:	f04f 0800 	mov.w	r8, #0
 8008aa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008aa4:	f104 0a1a 	add.w	sl, r4, #26
 8008aa8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008aac:	1a9b      	subs	r3, r3, r2
 8008aae:	eba3 0309 	sub.w	r3, r3, r9
 8008ab2:	4543      	cmp	r3, r8
 8008ab4:	f77f af75 	ble.w	80089a2 <_printf_float+0x21a>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	4652      	mov	r2, sl
 8008abc:	4631      	mov	r1, r6
 8008abe:	4628      	mov	r0, r5
 8008ac0:	47b8      	blx	r7
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	f43f aeae 	beq.w	8008824 <_printf_float+0x9c>
 8008ac8:	f108 0801 	add.w	r8, r8, #1
 8008acc:	e7ec      	b.n	8008aa8 <_printf_float+0x320>
 8008ace:	4613      	mov	r3, r2
 8008ad0:	4631      	mov	r1, r6
 8008ad2:	4642      	mov	r2, r8
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b8      	blx	r7
 8008ad8:	3001      	adds	r0, #1
 8008ada:	d1bf      	bne.n	8008a5c <_printf_float+0x2d4>
 8008adc:	e6a2      	b.n	8008824 <_printf_float+0x9c>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	4631      	mov	r1, r6
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	9204      	str	r2, [sp, #16]
 8008ae6:	47b8      	blx	r7
 8008ae8:	3001      	adds	r0, #1
 8008aea:	f43f ae9b 	beq.w	8008824 <_printf_float+0x9c>
 8008aee:	9b05      	ldr	r3, [sp, #20]
 8008af0:	9a04      	ldr	r2, [sp, #16]
 8008af2:	3301      	adds	r3, #1
 8008af4:	9305      	str	r3, [sp, #20]
 8008af6:	e7b7      	b.n	8008a68 <_printf_float+0x2e0>
 8008af8:	4653      	mov	r3, sl
 8008afa:	465a      	mov	r2, fp
 8008afc:	4631      	mov	r1, r6
 8008afe:	4628      	mov	r0, r5
 8008b00:	47b8      	blx	r7
 8008b02:	3001      	adds	r0, #1
 8008b04:	d1be      	bne.n	8008a84 <_printf_float+0x2fc>
 8008b06:	e68d      	b.n	8008824 <_printf_float+0x9c>
 8008b08:	9a04      	ldr	r2, [sp, #16]
 8008b0a:	464b      	mov	r3, r9
 8008b0c:	4442      	add	r2, r8
 8008b0e:	4631      	mov	r1, r6
 8008b10:	4628      	mov	r0, r5
 8008b12:	47b8      	blx	r7
 8008b14:	3001      	adds	r0, #1
 8008b16:	d1c1      	bne.n	8008a9c <_printf_float+0x314>
 8008b18:	e684      	b.n	8008824 <_printf_float+0x9c>
 8008b1a:	9a08      	ldr	r2, [sp, #32]
 8008b1c:	2a01      	cmp	r2, #1
 8008b1e:	dc01      	bgt.n	8008b24 <_printf_float+0x39c>
 8008b20:	07db      	lsls	r3, r3, #31
 8008b22:	d537      	bpl.n	8008b94 <_printf_float+0x40c>
 8008b24:	2301      	movs	r3, #1
 8008b26:	4642      	mov	r2, r8
 8008b28:	4631      	mov	r1, r6
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	47b8      	blx	r7
 8008b2e:	3001      	adds	r0, #1
 8008b30:	f43f ae78 	beq.w	8008824 <_printf_float+0x9c>
 8008b34:	4653      	mov	r3, sl
 8008b36:	465a      	mov	r2, fp
 8008b38:	4631      	mov	r1, r6
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	47b8      	blx	r7
 8008b3e:	3001      	adds	r0, #1
 8008b40:	f43f ae70 	beq.w	8008824 <_printf_float+0x9c>
 8008b44:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008b48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b50:	d01b      	beq.n	8008b8a <_printf_float+0x402>
 8008b52:	9b08      	ldr	r3, [sp, #32]
 8008b54:	f108 0201 	add.w	r2, r8, #1
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	4631      	mov	r1, r6
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	47b8      	blx	r7
 8008b60:	3001      	adds	r0, #1
 8008b62:	d10e      	bne.n	8008b82 <_printf_float+0x3fa>
 8008b64:	e65e      	b.n	8008824 <_printf_float+0x9c>
 8008b66:	2301      	movs	r3, #1
 8008b68:	464a      	mov	r2, r9
 8008b6a:	4631      	mov	r1, r6
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	47b8      	blx	r7
 8008b70:	3001      	adds	r0, #1
 8008b72:	f43f ae57 	beq.w	8008824 <_printf_float+0x9c>
 8008b76:	f108 0801 	add.w	r8, r8, #1
 8008b7a:	9b08      	ldr	r3, [sp, #32]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	4543      	cmp	r3, r8
 8008b80:	dcf1      	bgt.n	8008b66 <_printf_float+0x3de>
 8008b82:	9b04      	ldr	r3, [sp, #16]
 8008b84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b88:	e6db      	b.n	8008942 <_printf_float+0x1ba>
 8008b8a:	f04f 0800 	mov.w	r8, #0
 8008b8e:	f104 091a 	add.w	r9, r4, #26
 8008b92:	e7f2      	b.n	8008b7a <_printf_float+0x3f2>
 8008b94:	2301      	movs	r3, #1
 8008b96:	4642      	mov	r2, r8
 8008b98:	e7df      	b.n	8008b5a <_printf_float+0x3d2>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	464a      	mov	r2, r9
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	47b8      	blx	r7
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	f43f ae3d 	beq.w	8008824 <_printf_float+0x9c>
 8008baa:	f108 0801 	add.w	r8, r8, #1
 8008bae:	68e3      	ldr	r3, [r4, #12]
 8008bb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bb2:	1a5b      	subs	r3, r3, r1
 8008bb4:	4543      	cmp	r3, r8
 8008bb6:	dcf0      	bgt.n	8008b9a <_printf_float+0x412>
 8008bb8:	e6f7      	b.n	80089aa <_printf_float+0x222>
 8008bba:	f04f 0800 	mov.w	r8, #0
 8008bbe:	f104 0919 	add.w	r9, r4, #25
 8008bc2:	e7f4      	b.n	8008bae <_printf_float+0x426>

08008bc4 <_printf_common>:
 8008bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc8:	4616      	mov	r6, r2
 8008bca:	4699      	mov	r9, r3
 8008bcc:	688a      	ldr	r2, [r1, #8]
 8008bce:	690b      	ldr	r3, [r1, #16]
 8008bd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	bfb8      	it	lt
 8008bd8:	4613      	movlt	r3, r2
 8008bda:	6033      	str	r3, [r6, #0]
 8008bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008be0:	4607      	mov	r7, r0
 8008be2:	460c      	mov	r4, r1
 8008be4:	b10a      	cbz	r2, 8008bea <_printf_common+0x26>
 8008be6:	3301      	adds	r3, #1
 8008be8:	6033      	str	r3, [r6, #0]
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	0699      	lsls	r1, r3, #26
 8008bee:	bf42      	ittt	mi
 8008bf0:	6833      	ldrmi	r3, [r6, #0]
 8008bf2:	3302      	addmi	r3, #2
 8008bf4:	6033      	strmi	r3, [r6, #0]
 8008bf6:	6825      	ldr	r5, [r4, #0]
 8008bf8:	f015 0506 	ands.w	r5, r5, #6
 8008bfc:	d106      	bne.n	8008c0c <_printf_common+0x48>
 8008bfe:	f104 0a19 	add.w	sl, r4, #25
 8008c02:	68e3      	ldr	r3, [r4, #12]
 8008c04:	6832      	ldr	r2, [r6, #0]
 8008c06:	1a9b      	subs	r3, r3, r2
 8008c08:	42ab      	cmp	r3, r5
 8008c0a:	dc26      	bgt.n	8008c5a <_printf_common+0x96>
 8008c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c10:	1e13      	subs	r3, r2, #0
 8008c12:	6822      	ldr	r2, [r4, #0]
 8008c14:	bf18      	it	ne
 8008c16:	2301      	movne	r3, #1
 8008c18:	0692      	lsls	r2, r2, #26
 8008c1a:	d42b      	bmi.n	8008c74 <_printf_common+0xb0>
 8008c1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c20:	4649      	mov	r1, r9
 8008c22:	4638      	mov	r0, r7
 8008c24:	47c0      	blx	r8
 8008c26:	3001      	adds	r0, #1
 8008c28:	d01e      	beq.n	8008c68 <_printf_common+0xa4>
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	68e5      	ldr	r5, [r4, #12]
 8008c2e:	6832      	ldr	r2, [r6, #0]
 8008c30:	f003 0306 	and.w	r3, r3, #6
 8008c34:	2b04      	cmp	r3, #4
 8008c36:	bf08      	it	eq
 8008c38:	1aad      	subeq	r5, r5, r2
 8008c3a:	68a3      	ldr	r3, [r4, #8]
 8008c3c:	6922      	ldr	r2, [r4, #16]
 8008c3e:	bf0c      	ite	eq
 8008c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c44:	2500      	movne	r5, #0
 8008c46:	4293      	cmp	r3, r2
 8008c48:	bfc4      	itt	gt
 8008c4a:	1a9b      	subgt	r3, r3, r2
 8008c4c:	18ed      	addgt	r5, r5, r3
 8008c4e:	2600      	movs	r6, #0
 8008c50:	341a      	adds	r4, #26
 8008c52:	42b5      	cmp	r5, r6
 8008c54:	d11a      	bne.n	8008c8c <_printf_common+0xc8>
 8008c56:	2000      	movs	r0, #0
 8008c58:	e008      	b.n	8008c6c <_printf_common+0xa8>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	4652      	mov	r2, sl
 8008c5e:	4649      	mov	r1, r9
 8008c60:	4638      	mov	r0, r7
 8008c62:	47c0      	blx	r8
 8008c64:	3001      	adds	r0, #1
 8008c66:	d103      	bne.n	8008c70 <_printf_common+0xac>
 8008c68:	f04f 30ff 	mov.w	r0, #4294967295
 8008c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c70:	3501      	adds	r5, #1
 8008c72:	e7c6      	b.n	8008c02 <_printf_common+0x3e>
 8008c74:	18e1      	adds	r1, r4, r3
 8008c76:	1c5a      	adds	r2, r3, #1
 8008c78:	2030      	movs	r0, #48	; 0x30
 8008c7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c7e:	4422      	add	r2, r4
 8008c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c88:	3302      	adds	r3, #2
 8008c8a:	e7c7      	b.n	8008c1c <_printf_common+0x58>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	4622      	mov	r2, r4
 8008c90:	4649      	mov	r1, r9
 8008c92:	4638      	mov	r0, r7
 8008c94:	47c0      	blx	r8
 8008c96:	3001      	adds	r0, #1
 8008c98:	d0e6      	beq.n	8008c68 <_printf_common+0xa4>
 8008c9a:	3601      	adds	r6, #1
 8008c9c:	e7d9      	b.n	8008c52 <_printf_common+0x8e>
	...

08008ca0 <_printf_i>:
 8008ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca4:	7e0f      	ldrb	r7, [r1, #24]
 8008ca6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ca8:	2f78      	cmp	r7, #120	; 0x78
 8008caa:	4691      	mov	r9, r2
 8008cac:	4680      	mov	r8, r0
 8008cae:	460c      	mov	r4, r1
 8008cb0:	469a      	mov	sl, r3
 8008cb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cb6:	d807      	bhi.n	8008cc8 <_printf_i+0x28>
 8008cb8:	2f62      	cmp	r7, #98	; 0x62
 8008cba:	d80a      	bhi.n	8008cd2 <_printf_i+0x32>
 8008cbc:	2f00      	cmp	r7, #0
 8008cbe:	f000 80d8 	beq.w	8008e72 <_printf_i+0x1d2>
 8008cc2:	2f58      	cmp	r7, #88	; 0x58
 8008cc4:	f000 80a3 	beq.w	8008e0e <_printf_i+0x16e>
 8008cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cd0:	e03a      	b.n	8008d48 <_printf_i+0xa8>
 8008cd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cd6:	2b15      	cmp	r3, #21
 8008cd8:	d8f6      	bhi.n	8008cc8 <_printf_i+0x28>
 8008cda:	a101      	add	r1, pc, #4	; (adr r1, 8008ce0 <_printf_i+0x40>)
 8008cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ce0:	08008d39 	.word	0x08008d39
 8008ce4:	08008d4d 	.word	0x08008d4d
 8008ce8:	08008cc9 	.word	0x08008cc9
 8008cec:	08008cc9 	.word	0x08008cc9
 8008cf0:	08008cc9 	.word	0x08008cc9
 8008cf4:	08008cc9 	.word	0x08008cc9
 8008cf8:	08008d4d 	.word	0x08008d4d
 8008cfc:	08008cc9 	.word	0x08008cc9
 8008d00:	08008cc9 	.word	0x08008cc9
 8008d04:	08008cc9 	.word	0x08008cc9
 8008d08:	08008cc9 	.word	0x08008cc9
 8008d0c:	08008e59 	.word	0x08008e59
 8008d10:	08008d7d 	.word	0x08008d7d
 8008d14:	08008e3b 	.word	0x08008e3b
 8008d18:	08008cc9 	.word	0x08008cc9
 8008d1c:	08008cc9 	.word	0x08008cc9
 8008d20:	08008e7b 	.word	0x08008e7b
 8008d24:	08008cc9 	.word	0x08008cc9
 8008d28:	08008d7d 	.word	0x08008d7d
 8008d2c:	08008cc9 	.word	0x08008cc9
 8008d30:	08008cc9 	.word	0x08008cc9
 8008d34:	08008e43 	.word	0x08008e43
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	1d1a      	adds	r2, r3, #4
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	602a      	str	r2, [r5, #0]
 8008d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e0a3      	b.n	8008e94 <_printf_i+0x1f4>
 8008d4c:	6820      	ldr	r0, [r4, #0]
 8008d4e:	6829      	ldr	r1, [r5, #0]
 8008d50:	0606      	lsls	r6, r0, #24
 8008d52:	f101 0304 	add.w	r3, r1, #4
 8008d56:	d50a      	bpl.n	8008d6e <_printf_i+0xce>
 8008d58:	680e      	ldr	r6, [r1, #0]
 8008d5a:	602b      	str	r3, [r5, #0]
 8008d5c:	2e00      	cmp	r6, #0
 8008d5e:	da03      	bge.n	8008d68 <_printf_i+0xc8>
 8008d60:	232d      	movs	r3, #45	; 0x2d
 8008d62:	4276      	negs	r6, r6
 8008d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d68:	485e      	ldr	r0, [pc, #376]	; (8008ee4 <_printf_i+0x244>)
 8008d6a:	230a      	movs	r3, #10
 8008d6c:	e019      	b.n	8008da2 <_printf_i+0x102>
 8008d6e:	680e      	ldr	r6, [r1, #0]
 8008d70:	602b      	str	r3, [r5, #0]
 8008d72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d76:	bf18      	it	ne
 8008d78:	b236      	sxthne	r6, r6
 8008d7a:	e7ef      	b.n	8008d5c <_printf_i+0xbc>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	6820      	ldr	r0, [r4, #0]
 8008d80:	1d19      	adds	r1, r3, #4
 8008d82:	6029      	str	r1, [r5, #0]
 8008d84:	0601      	lsls	r1, r0, #24
 8008d86:	d501      	bpl.n	8008d8c <_printf_i+0xec>
 8008d88:	681e      	ldr	r6, [r3, #0]
 8008d8a:	e002      	b.n	8008d92 <_printf_i+0xf2>
 8008d8c:	0646      	lsls	r6, r0, #25
 8008d8e:	d5fb      	bpl.n	8008d88 <_printf_i+0xe8>
 8008d90:	881e      	ldrh	r6, [r3, #0]
 8008d92:	4854      	ldr	r0, [pc, #336]	; (8008ee4 <_printf_i+0x244>)
 8008d94:	2f6f      	cmp	r7, #111	; 0x6f
 8008d96:	bf0c      	ite	eq
 8008d98:	2308      	moveq	r3, #8
 8008d9a:	230a      	movne	r3, #10
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008da2:	6865      	ldr	r5, [r4, #4]
 8008da4:	60a5      	str	r5, [r4, #8]
 8008da6:	2d00      	cmp	r5, #0
 8008da8:	bfa2      	ittt	ge
 8008daa:	6821      	ldrge	r1, [r4, #0]
 8008dac:	f021 0104 	bicge.w	r1, r1, #4
 8008db0:	6021      	strge	r1, [r4, #0]
 8008db2:	b90e      	cbnz	r6, 8008db8 <_printf_i+0x118>
 8008db4:	2d00      	cmp	r5, #0
 8008db6:	d04d      	beq.n	8008e54 <_printf_i+0x1b4>
 8008db8:	4615      	mov	r5, r2
 8008dba:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dbe:	fb03 6711 	mls	r7, r3, r1, r6
 8008dc2:	5dc7      	ldrb	r7, [r0, r7]
 8008dc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008dc8:	4637      	mov	r7, r6
 8008dca:	42bb      	cmp	r3, r7
 8008dcc:	460e      	mov	r6, r1
 8008dce:	d9f4      	bls.n	8008dba <_printf_i+0x11a>
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d10b      	bne.n	8008dec <_printf_i+0x14c>
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	07de      	lsls	r6, r3, #31
 8008dd8:	d508      	bpl.n	8008dec <_printf_i+0x14c>
 8008dda:	6923      	ldr	r3, [r4, #16]
 8008ddc:	6861      	ldr	r1, [r4, #4]
 8008dde:	4299      	cmp	r1, r3
 8008de0:	bfde      	ittt	le
 8008de2:	2330      	movle	r3, #48	; 0x30
 8008de4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008de8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dec:	1b52      	subs	r2, r2, r5
 8008dee:	6122      	str	r2, [r4, #16]
 8008df0:	f8cd a000 	str.w	sl, [sp]
 8008df4:	464b      	mov	r3, r9
 8008df6:	aa03      	add	r2, sp, #12
 8008df8:	4621      	mov	r1, r4
 8008dfa:	4640      	mov	r0, r8
 8008dfc:	f7ff fee2 	bl	8008bc4 <_printf_common>
 8008e00:	3001      	adds	r0, #1
 8008e02:	d14c      	bne.n	8008e9e <_printf_i+0x1fe>
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295
 8008e08:	b004      	add	sp, #16
 8008e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0e:	4835      	ldr	r0, [pc, #212]	; (8008ee4 <_printf_i+0x244>)
 8008e10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e14:	6829      	ldr	r1, [r5, #0]
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e1c:	6029      	str	r1, [r5, #0]
 8008e1e:	061d      	lsls	r5, r3, #24
 8008e20:	d514      	bpl.n	8008e4c <_printf_i+0x1ac>
 8008e22:	07df      	lsls	r7, r3, #31
 8008e24:	bf44      	itt	mi
 8008e26:	f043 0320 	orrmi.w	r3, r3, #32
 8008e2a:	6023      	strmi	r3, [r4, #0]
 8008e2c:	b91e      	cbnz	r6, 8008e36 <_printf_i+0x196>
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	f023 0320 	bic.w	r3, r3, #32
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	2310      	movs	r3, #16
 8008e38:	e7b0      	b.n	8008d9c <_printf_i+0xfc>
 8008e3a:	6823      	ldr	r3, [r4, #0]
 8008e3c:	f043 0320 	orr.w	r3, r3, #32
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	2378      	movs	r3, #120	; 0x78
 8008e44:	4828      	ldr	r0, [pc, #160]	; (8008ee8 <_printf_i+0x248>)
 8008e46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e4a:	e7e3      	b.n	8008e14 <_printf_i+0x174>
 8008e4c:	0659      	lsls	r1, r3, #25
 8008e4e:	bf48      	it	mi
 8008e50:	b2b6      	uxthmi	r6, r6
 8008e52:	e7e6      	b.n	8008e22 <_printf_i+0x182>
 8008e54:	4615      	mov	r5, r2
 8008e56:	e7bb      	b.n	8008dd0 <_printf_i+0x130>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	6826      	ldr	r6, [r4, #0]
 8008e5c:	6961      	ldr	r1, [r4, #20]
 8008e5e:	1d18      	adds	r0, r3, #4
 8008e60:	6028      	str	r0, [r5, #0]
 8008e62:	0635      	lsls	r5, r6, #24
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	d501      	bpl.n	8008e6c <_printf_i+0x1cc>
 8008e68:	6019      	str	r1, [r3, #0]
 8008e6a:	e002      	b.n	8008e72 <_printf_i+0x1d2>
 8008e6c:	0670      	lsls	r0, r6, #25
 8008e6e:	d5fb      	bpl.n	8008e68 <_printf_i+0x1c8>
 8008e70:	8019      	strh	r1, [r3, #0]
 8008e72:	2300      	movs	r3, #0
 8008e74:	6123      	str	r3, [r4, #16]
 8008e76:	4615      	mov	r5, r2
 8008e78:	e7ba      	b.n	8008df0 <_printf_i+0x150>
 8008e7a:	682b      	ldr	r3, [r5, #0]
 8008e7c:	1d1a      	adds	r2, r3, #4
 8008e7e:	602a      	str	r2, [r5, #0]
 8008e80:	681d      	ldr	r5, [r3, #0]
 8008e82:	6862      	ldr	r2, [r4, #4]
 8008e84:	2100      	movs	r1, #0
 8008e86:	4628      	mov	r0, r5
 8008e88:	f7f7 fa4a 	bl	8000320 <memchr>
 8008e8c:	b108      	cbz	r0, 8008e92 <_printf_i+0x1f2>
 8008e8e:	1b40      	subs	r0, r0, r5
 8008e90:	6060      	str	r0, [r4, #4]
 8008e92:	6863      	ldr	r3, [r4, #4]
 8008e94:	6123      	str	r3, [r4, #16]
 8008e96:	2300      	movs	r3, #0
 8008e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e9c:	e7a8      	b.n	8008df0 <_printf_i+0x150>
 8008e9e:	6923      	ldr	r3, [r4, #16]
 8008ea0:	462a      	mov	r2, r5
 8008ea2:	4649      	mov	r1, r9
 8008ea4:	4640      	mov	r0, r8
 8008ea6:	47d0      	blx	sl
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	d0ab      	beq.n	8008e04 <_printf_i+0x164>
 8008eac:	6823      	ldr	r3, [r4, #0]
 8008eae:	079b      	lsls	r3, r3, #30
 8008eb0:	d413      	bmi.n	8008eda <_printf_i+0x23a>
 8008eb2:	68e0      	ldr	r0, [r4, #12]
 8008eb4:	9b03      	ldr	r3, [sp, #12]
 8008eb6:	4298      	cmp	r0, r3
 8008eb8:	bfb8      	it	lt
 8008eba:	4618      	movlt	r0, r3
 8008ebc:	e7a4      	b.n	8008e08 <_printf_i+0x168>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	4632      	mov	r2, r6
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	4640      	mov	r0, r8
 8008ec6:	47d0      	blx	sl
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d09b      	beq.n	8008e04 <_printf_i+0x164>
 8008ecc:	3501      	adds	r5, #1
 8008ece:	68e3      	ldr	r3, [r4, #12]
 8008ed0:	9903      	ldr	r1, [sp, #12]
 8008ed2:	1a5b      	subs	r3, r3, r1
 8008ed4:	42ab      	cmp	r3, r5
 8008ed6:	dcf2      	bgt.n	8008ebe <_printf_i+0x21e>
 8008ed8:	e7eb      	b.n	8008eb2 <_printf_i+0x212>
 8008eda:	2500      	movs	r5, #0
 8008edc:	f104 0619 	add.w	r6, r4, #25
 8008ee0:	e7f5      	b.n	8008ece <_printf_i+0x22e>
 8008ee2:	bf00      	nop
 8008ee4:	0800b206 	.word	0x0800b206
 8008ee8:	0800b217 	.word	0x0800b217

08008eec <iprintf>:
 8008eec:	b40f      	push	{r0, r1, r2, r3}
 8008eee:	4b0a      	ldr	r3, [pc, #40]	; (8008f18 <iprintf+0x2c>)
 8008ef0:	b513      	push	{r0, r1, r4, lr}
 8008ef2:	681c      	ldr	r4, [r3, #0]
 8008ef4:	b124      	cbz	r4, 8008f00 <iprintf+0x14>
 8008ef6:	69a3      	ldr	r3, [r4, #24]
 8008ef8:	b913      	cbnz	r3, 8008f00 <iprintf+0x14>
 8008efa:	4620      	mov	r0, r4
 8008efc:	f000 fe8e 	bl	8009c1c <__sinit>
 8008f00:	ab05      	add	r3, sp, #20
 8008f02:	9a04      	ldr	r2, [sp, #16]
 8008f04:	68a1      	ldr	r1, [r4, #8]
 8008f06:	9301      	str	r3, [sp, #4]
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f001 fbd9 	bl	800a6c0 <_vfiprintf_r>
 8008f0e:	b002      	add	sp, #8
 8008f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f14:	b004      	add	sp, #16
 8008f16:	4770      	bx	lr
 8008f18:	24000114 	.word	0x24000114

08008f1c <putchar>:
 8008f1c:	4b09      	ldr	r3, [pc, #36]	; (8008f44 <putchar+0x28>)
 8008f1e:	b513      	push	{r0, r1, r4, lr}
 8008f20:	681c      	ldr	r4, [r3, #0]
 8008f22:	4601      	mov	r1, r0
 8008f24:	b134      	cbz	r4, 8008f34 <putchar+0x18>
 8008f26:	69a3      	ldr	r3, [r4, #24]
 8008f28:	b923      	cbnz	r3, 8008f34 <putchar+0x18>
 8008f2a:	9001      	str	r0, [sp, #4]
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f000 fe75 	bl	8009c1c <__sinit>
 8008f32:	9901      	ldr	r1, [sp, #4]
 8008f34:	68a2      	ldr	r2, [r4, #8]
 8008f36:	4620      	mov	r0, r4
 8008f38:	b002      	add	sp, #8
 8008f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f3e:	f001 bcef 	b.w	800a920 <_putc_r>
 8008f42:	bf00      	nop
 8008f44:	24000114 	.word	0x24000114

08008f48 <viprintf>:
 8008f48:	b513      	push	{r0, r1, r4, lr}
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	4909      	ldr	r1, [pc, #36]	; (8008f74 <viprintf+0x2c>)
 8008f4e:	680c      	ldr	r4, [r1, #0]
 8008f50:	4602      	mov	r2, r0
 8008f52:	b144      	cbz	r4, 8008f66 <viprintf+0x1e>
 8008f54:	69a1      	ldr	r1, [r4, #24]
 8008f56:	b931      	cbnz	r1, 8008f66 <viprintf+0x1e>
 8008f58:	e9cd 0300 	strd	r0, r3, [sp]
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f000 fe5d 	bl	8009c1c <__sinit>
 8008f62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f66:	68a1      	ldr	r1, [r4, #8]
 8008f68:	4620      	mov	r0, r4
 8008f6a:	b002      	add	sp, #8
 8008f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f70:	f001 bba6 	b.w	800a6c0 <_vfiprintf_r>
 8008f74:	24000114 	.word	0x24000114

08008f78 <quorem>:
 8008f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7c:	6903      	ldr	r3, [r0, #16]
 8008f7e:	690c      	ldr	r4, [r1, #16]
 8008f80:	42a3      	cmp	r3, r4
 8008f82:	4607      	mov	r7, r0
 8008f84:	f2c0 8081 	blt.w	800908a <quorem+0x112>
 8008f88:	3c01      	subs	r4, #1
 8008f8a:	f101 0814 	add.w	r8, r1, #20
 8008f8e:	f100 0514 	add.w	r5, r0, #20
 8008f92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f96:	9301      	str	r3, [sp, #4]
 8008f98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008fa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fac:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fb0:	d331      	bcc.n	8009016 <quorem+0x9e>
 8008fb2:	f04f 0e00 	mov.w	lr, #0
 8008fb6:	4640      	mov	r0, r8
 8008fb8:	46ac      	mov	ip, r5
 8008fba:	46f2      	mov	sl, lr
 8008fbc:	f850 2b04 	ldr.w	r2, [r0], #4
 8008fc0:	b293      	uxth	r3, r2
 8008fc2:	fb06 e303 	mla	r3, r6, r3, lr
 8008fc6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	ebaa 0303 	sub.w	r3, sl, r3
 8008fd0:	f8dc a000 	ldr.w	sl, [ip]
 8008fd4:	0c12      	lsrs	r2, r2, #16
 8008fd6:	fa13 f38a 	uxtah	r3, r3, sl
 8008fda:	fb06 e202 	mla	r2, r6, r2, lr
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	9b00      	ldr	r3, [sp, #0]
 8008fe2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008fe6:	b292      	uxth	r2, r2
 8008fe8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008fec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ff0:	f8bd 3000 	ldrh.w	r3, [sp]
 8008ff4:	4581      	cmp	r9, r0
 8008ff6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ffa:	f84c 3b04 	str.w	r3, [ip], #4
 8008ffe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009002:	d2db      	bcs.n	8008fbc <quorem+0x44>
 8009004:	f855 300b 	ldr.w	r3, [r5, fp]
 8009008:	b92b      	cbnz	r3, 8009016 <quorem+0x9e>
 800900a:	9b01      	ldr	r3, [sp, #4]
 800900c:	3b04      	subs	r3, #4
 800900e:	429d      	cmp	r5, r3
 8009010:	461a      	mov	r2, r3
 8009012:	d32e      	bcc.n	8009072 <quorem+0xfa>
 8009014:	613c      	str	r4, [r7, #16]
 8009016:	4638      	mov	r0, r7
 8009018:	f001 f930 	bl	800a27c <__mcmp>
 800901c:	2800      	cmp	r0, #0
 800901e:	db24      	blt.n	800906a <quorem+0xf2>
 8009020:	3601      	adds	r6, #1
 8009022:	4628      	mov	r0, r5
 8009024:	f04f 0c00 	mov.w	ip, #0
 8009028:	f858 2b04 	ldr.w	r2, [r8], #4
 800902c:	f8d0 e000 	ldr.w	lr, [r0]
 8009030:	b293      	uxth	r3, r2
 8009032:	ebac 0303 	sub.w	r3, ip, r3
 8009036:	0c12      	lsrs	r2, r2, #16
 8009038:	fa13 f38e 	uxtah	r3, r3, lr
 800903c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009040:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009044:	b29b      	uxth	r3, r3
 8009046:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800904a:	45c1      	cmp	r9, r8
 800904c:	f840 3b04 	str.w	r3, [r0], #4
 8009050:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009054:	d2e8      	bcs.n	8009028 <quorem+0xb0>
 8009056:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800905a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800905e:	b922      	cbnz	r2, 800906a <quorem+0xf2>
 8009060:	3b04      	subs	r3, #4
 8009062:	429d      	cmp	r5, r3
 8009064:	461a      	mov	r2, r3
 8009066:	d30a      	bcc.n	800907e <quorem+0x106>
 8009068:	613c      	str	r4, [r7, #16]
 800906a:	4630      	mov	r0, r6
 800906c:	b003      	add	sp, #12
 800906e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009072:	6812      	ldr	r2, [r2, #0]
 8009074:	3b04      	subs	r3, #4
 8009076:	2a00      	cmp	r2, #0
 8009078:	d1cc      	bne.n	8009014 <quorem+0x9c>
 800907a:	3c01      	subs	r4, #1
 800907c:	e7c7      	b.n	800900e <quorem+0x96>
 800907e:	6812      	ldr	r2, [r2, #0]
 8009080:	3b04      	subs	r3, #4
 8009082:	2a00      	cmp	r2, #0
 8009084:	d1f0      	bne.n	8009068 <quorem+0xf0>
 8009086:	3c01      	subs	r4, #1
 8009088:	e7eb      	b.n	8009062 <quorem+0xea>
 800908a:	2000      	movs	r0, #0
 800908c:	e7ee      	b.n	800906c <quorem+0xf4>
	...

08009090 <_dtoa_r>:
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	ed2d 8b02 	vpush	{d8}
 8009098:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800909a:	b091      	sub	sp, #68	; 0x44
 800909c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80090a0:	ec59 8b10 	vmov	r8, r9, d0
 80090a4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80090a6:	9106      	str	r1, [sp, #24]
 80090a8:	4606      	mov	r6, r0
 80090aa:	9208      	str	r2, [sp, #32]
 80090ac:	930c      	str	r3, [sp, #48]	; 0x30
 80090ae:	b975      	cbnz	r5, 80090ce <_dtoa_r+0x3e>
 80090b0:	2010      	movs	r0, #16
 80090b2:	f000 fe59 	bl	8009d68 <malloc>
 80090b6:	4602      	mov	r2, r0
 80090b8:	6270      	str	r0, [r6, #36]	; 0x24
 80090ba:	b920      	cbnz	r0, 80090c6 <_dtoa_r+0x36>
 80090bc:	4baa      	ldr	r3, [pc, #680]	; (8009368 <_dtoa_r+0x2d8>)
 80090be:	21ea      	movs	r1, #234	; 0xea
 80090c0:	48aa      	ldr	r0, [pc, #680]	; (800936c <_dtoa_r+0x2dc>)
 80090c2:	f001 fd9b 	bl	800abfc <__assert_func>
 80090c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80090ca:	6005      	str	r5, [r0, #0]
 80090cc:	60c5      	str	r5, [r0, #12]
 80090ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80090d0:	6819      	ldr	r1, [r3, #0]
 80090d2:	b151      	cbz	r1, 80090ea <_dtoa_r+0x5a>
 80090d4:	685a      	ldr	r2, [r3, #4]
 80090d6:	604a      	str	r2, [r1, #4]
 80090d8:	2301      	movs	r3, #1
 80090da:	4093      	lsls	r3, r2
 80090dc:	608b      	str	r3, [r1, #8]
 80090de:	4630      	mov	r0, r6
 80090e0:	f000 fe8a 	bl	8009df8 <_Bfree>
 80090e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80090e6:	2200      	movs	r2, #0
 80090e8:	601a      	str	r2, [r3, #0]
 80090ea:	f1b9 0300 	subs.w	r3, r9, #0
 80090ee:	bfbb      	ittet	lt
 80090f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80090f4:	9303      	strlt	r3, [sp, #12]
 80090f6:	2300      	movge	r3, #0
 80090f8:	2201      	movlt	r2, #1
 80090fa:	bfac      	ite	ge
 80090fc:	6023      	strge	r3, [r4, #0]
 80090fe:	6022      	strlt	r2, [r4, #0]
 8009100:	4b9b      	ldr	r3, [pc, #620]	; (8009370 <_dtoa_r+0x2e0>)
 8009102:	9c03      	ldr	r4, [sp, #12]
 8009104:	43a3      	bics	r3, r4
 8009106:	d11c      	bne.n	8009142 <_dtoa_r+0xb2>
 8009108:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800910a:	f242 730f 	movw	r3, #9999	; 0x270f
 800910e:	6013      	str	r3, [r2, #0]
 8009110:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009114:	ea53 0308 	orrs.w	r3, r3, r8
 8009118:	f000 84fd 	beq.w	8009b16 <_dtoa_r+0xa86>
 800911c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800911e:	b963      	cbnz	r3, 800913a <_dtoa_r+0xaa>
 8009120:	4b94      	ldr	r3, [pc, #592]	; (8009374 <_dtoa_r+0x2e4>)
 8009122:	e01f      	b.n	8009164 <_dtoa_r+0xd4>
 8009124:	4b94      	ldr	r3, [pc, #592]	; (8009378 <_dtoa_r+0x2e8>)
 8009126:	9301      	str	r3, [sp, #4]
 8009128:	3308      	adds	r3, #8
 800912a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800912c:	6013      	str	r3, [r2, #0]
 800912e:	9801      	ldr	r0, [sp, #4]
 8009130:	b011      	add	sp, #68	; 0x44
 8009132:	ecbd 8b02 	vpop	{d8}
 8009136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913a:	4b8e      	ldr	r3, [pc, #568]	; (8009374 <_dtoa_r+0x2e4>)
 800913c:	9301      	str	r3, [sp, #4]
 800913e:	3303      	adds	r3, #3
 8009140:	e7f3      	b.n	800912a <_dtoa_r+0x9a>
 8009142:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009146:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800914a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800914e:	d10b      	bne.n	8009168 <_dtoa_r+0xd8>
 8009150:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009152:	2301      	movs	r3, #1
 8009154:	6013      	str	r3, [r2, #0]
 8009156:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 84d9 	beq.w	8009b10 <_dtoa_r+0xa80>
 800915e:	4887      	ldr	r0, [pc, #540]	; (800937c <_dtoa_r+0x2ec>)
 8009160:	6018      	str	r0, [r3, #0]
 8009162:	1e43      	subs	r3, r0, #1
 8009164:	9301      	str	r3, [sp, #4]
 8009166:	e7e2      	b.n	800912e <_dtoa_r+0x9e>
 8009168:	a90f      	add	r1, sp, #60	; 0x3c
 800916a:	aa0e      	add	r2, sp, #56	; 0x38
 800916c:	4630      	mov	r0, r6
 800916e:	eeb0 0b48 	vmov.f64	d0, d8
 8009172:	f001 f929 	bl	800a3c8 <__d2b>
 8009176:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800917a:	4605      	mov	r5, r0
 800917c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800917e:	2900      	cmp	r1, #0
 8009180:	d046      	beq.n	8009210 <_dtoa_r+0x180>
 8009182:	ee18 4a90 	vmov	r4, s17
 8009186:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800918a:	ec53 2b18 	vmov	r2, r3, d8
 800918e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009192:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009196:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800919a:	2400      	movs	r4, #0
 800919c:	ec43 2b16 	vmov	d6, r2, r3
 80091a0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80091a4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009350 <_dtoa_r+0x2c0>
 80091a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80091ac:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009358 <_dtoa_r+0x2c8>
 80091b0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80091b4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009360 <_dtoa_r+0x2d0>
 80091b8:	ee07 1a90 	vmov	s15, r1
 80091bc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80091c0:	eeb0 7b46 	vmov.f64	d7, d6
 80091c4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80091c8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80091cc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80091d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d4:	ee16 ba90 	vmov	fp, s13
 80091d8:	940a      	str	r4, [sp, #40]	; 0x28
 80091da:	d508      	bpl.n	80091ee <_dtoa_r+0x15e>
 80091dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80091e0:	eeb4 6b47 	vcmp.f64	d6, d7
 80091e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091e8:	bf18      	it	ne
 80091ea:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80091ee:	f1bb 0f16 	cmp.w	fp, #22
 80091f2:	d82f      	bhi.n	8009254 <_dtoa_r+0x1c4>
 80091f4:	4b62      	ldr	r3, [pc, #392]	; (8009380 <_dtoa_r+0x2f0>)
 80091f6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80091fa:	ed93 7b00 	vldr	d7, [r3]
 80091fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009206:	d501      	bpl.n	800920c <_dtoa_r+0x17c>
 8009208:	f10b 3bff 	add.w	fp, fp, #4294967295
 800920c:	2300      	movs	r3, #0
 800920e:	e022      	b.n	8009256 <_dtoa_r+0x1c6>
 8009210:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009212:	4401      	add	r1, r0
 8009214:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009218:	2b20      	cmp	r3, #32
 800921a:	bfc1      	itttt	gt
 800921c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009220:	fa04 f303 	lslgt.w	r3, r4, r3
 8009224:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009228:	fa28 f804 	lsrgt.w	r8, r8, r4
 800922c:	bfd6      	itet	le
 800922e:	f1c3 0320 	rsble	r3, r3, #32
 8009232:	ea43 0808 	orrgt.w	r8, r3, r8
 8009236:	fa08 f803 	lslle.w	r8, r8, r3
 800923a:	ee07 8a90 	vmov	s15, r8
 800923e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009242:	3901      	subs	r1, #1
 8009244:	ee17 4a90 	vmov	r4, s15
 8009248:	ec53 2b17 	vmov	r2, r3, d7
 800924c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009250:	2401      	movs	r4, #1
 8009252:	e7a3      	b.n	800919c <_dtoa_r+0x10c>
 8009254:	2301      	movs	r3, #1
 8009256:	930b      	str	r3, [sp, #44]	; 0x2c
 8009258:	1a43      	subs	r3, r0, r1
 800925a:	1e5a      	subs	r2, r3, #1
 800925c:	bf45      	ittet	mi
 800925e:	f1c3 0301 	rsbmi	r3, r3, #1
 8009262:	9304      	strmi	r3, [sp, #16]
 8009264:	2300      	movpl	r3, #0
 8009266:	2300      	movmi	r3, #0
 8009268:	9205      	str	r2, [sp, #20]
 800926a:	bf54      	ite	pl
 800926c:	9304      	strpl	r3, [sp, #16]
 800926e:	9305      	strmi	r3, [sp, #20]
 8009270:	f1bb 0f00 	cmp.w	fp, #0
 8009274:	db18      	blt.n	80092a8 <_dtoa_r+0x218>
 8009276:	9b05      	ldr	r3, [sp, #20]
 8009278:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800927c:	445b      	add	r3, fp
 800927e:	9305      	str	r3, [sp, #20]
 8009280:	2300      	movs	r3, #0
 8009282:	9a06      	ldr	r2, [sp, #24]
 8009284:	2a09      	cmp	r2, #9
 8009286:	d849      	bhi.n	800931c <_dtoa_r+0x28c>
 8009288:	2a05      	cmp	r2, #5
 800928a:	bfc4      	itt	gt
 800928c:	3a04      	subgt	r2, #4
 800928e:	9206      	strgt	r2, [sp, #24]
 8009290:	9a06      	ldr	r2, [sp, #24]
 8009292:	f1a2 0202 	sub.w	r2, r2, #2
 8009296:	bfcc      	ite	gt
 8009298:	2400      	movgt	r4, #0
 800929a:	2401      	movle	r4, #1
 800929c:	2a03      	cmp	r2, #3
 800929e:	d848      	bhi.n	8009332 <_dtoa_r+0x2a2>
 80092a0:	e8df f002 	tbb	[pc, r2]
 80092a4:	3a2c2e0b 	.word	0x3a2c2e0b
 80092a8:	9b04      	ldr	r3, [sp, #16]
 80092aa:	2200      	movs	r2, #0
 80092ac:	eba3 030b 	sub.w	r3, r3, fp
 80092b0:	9304      	str	r3, [sp, #16]
 80092b2:	9209      	str	r2, [sp, #36]	; 0x24
 80092b4:	f1cb 0300 	rsb	r3, fp, #0
 80092b8:	e7e3      	b.n	8009282 <_dtoa_r+0x1f2>
 80092ba:	2200      	movs	r2, #0
 80092bc:	9207      	str	r2, [sp, #28]
 80092be:	9a08      	ldr	r2, [sp, #32]
 80092c0:	2a00      	cmp	r2, #0
 80092c2:	dc39      	bgt.n	8009338 <_dtoa_r+0x2a8>
 80092c4:	f04f 0a01 	mov.w	sl, #1
 80092c8:	46d1      	mov	r9, sl
 80092ca:	4652      	mov	r2, sl
 80092cc:	f8cd a020 	str.w	sl, [sp, #32]
 80092d0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80092d2:	2100      	movs	r1, #0
 80092d4:	6079      	str	r1, [r7, #4]
 80092d6:	2004      	movs	r0, #4
 80092d8:	f100 0c14 	add.w	ip, r0, #20
 80092dc:	4594      	cmp	ip, r2
 80092de:	6879      	ldr	r1, [r7, #4]
 80092e0:	d92f      	bls.n	8009342 <_dtoa_r+0x2b2>
 80092e2:	4630      	mov	r0, r6
 80092e4:	930d      	str	r3, [sp, #52]	; 0x34
 80092e6:	f000 fd47 	bl	8009d78 <_Balloc>
 80092ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092ec:	9001      	str	r0, [sp, #4]
 80092ee:	4602      	mov	r2, r0
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d149      	bne.n	8009388 <_dtoa_r+0x2f8>
 80092f4:	4b23      	ldr	r3, [pc, #140]	; (8009384 <_dtoa_r+0x2f4>)
 80092f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80092fa:	e6e1      	b.n	80090c0 <_dtoa_r+0x30>
 80092fc:	2201      	movs	r2, #1
 80092fe:	e7dd      	b.n	80092bc <_dtoa_r+0x22c>
 8009300:	2200      	movs	r2, #0
 8009302:	9207      	str	r2, [sp, #28]
 8009304:	9a08      	ldr	r2, [sp, #32]
 8009306:	eb0b 0a02 	add.w	sl, fp, r2
 800930a:	f10a 0901 	add.w	r9, sl, #1
 800930e:	464a      	mov	r2, r9
 8009310:	2a01      	cmp	r2, #1
 8009312:	bfb8      	it	lt
 8009314:	2201      	movlt	r2, #1
 8009316:	e7db      	b.n	80092d0 <_dtoa_r+0x240>
 8009318:	2201      	movs	r2, #1
 800931a:	e7f2      	b.n	8009302 <_dtoa_r+0x272>
 800931c:	2401      	movs	r4, #1
 800931e:	2200      	movs	r2, #0
 8009320:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009324:	f04f 3aff 	mov.w	sl, #4294967295
 8009328:	2100      	movs	r1, #0
 800932a:	46d1      	mov	r9, sl
 800932c:	2212      	movs	r2, #18
 800932e:	9108      	str	r1, [sp, #32]
 8009330:	e7ce      	b.n	80092d0 <_dtoa_r+0x240>
 8009332:	2201      	movs	r2, #1
 8009334:	9207      	str	r2, [sp, #28]
 8009336:	e7f5      	b.n	8009324 <_dtoa_r+0x294>
 8009338:	f8dd a020 	ldr.w	sl, [sp, #32]
 800933c:	46d1      	mov	r9, sl
 800933e:	4652      	mov	r2, sl
 8009340:	e7c6      	b.n	80092d0 <_dtoa_r+0x240>
 8009342:	3101      	adds	r1, #1
 8009344:	6079      	str	r1, [r7, #4]
 8009346:	0040      	lsls	r0, r0, #1
 8009348:	e7c6      	b.n	80092d8 <_dtoa_r+0x248>
 800934a:	bf00      	nop
 800934c:	f3af 8000 	nop.w
 8009350:	636f4361 	.word	0x636f4361
 8009354:	3fd287a7 	.word	0x3fd287a7
 8009358:	8b60c8b3 	.word	0x8b60c8b3
 800935c:	3fc68a28 	.word	0x3fc68a28
 8009360:	509f79fb 	.word	0x509f79fb
 8009364:	3fd34413 	.word	0x3fd34413
 8009368:	0800b235 	.word	0x0800b235
 800936c:	0800b24c 	.word	0x0800b24c
 8009370:	7ff00000 	.word	0x7ff00000
 8009374:	0800b231 	.word	0x0800b231
 8009378:	0800b228 	.word	0x0800b228
 800937c:	0800b205 	.word	0x0800b205
 8009380:	0800b3a0 	.word	0x0800b3a0
 8009384:	0800b2a7 	.word	0x0800b2a7
 8009388:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800938a:	9901      	ldr	r1, [sp, #4]
 800938c:	6011      	str	r1, [r2, #0]
 800938e:	f1b9 0f0e 	cmp.w	r9, #14
 8009392:	d86c      	bhi.n	800946e <_dtoa_r+0x3de>
 8009394:	2c00      	cmp	r4, #0
 8009396:	d06a      	beq.n	800946e <_dtoa_r+0x3de>
 8009398:	f1bb 0f00 	cmp.w	fp, #0
 800939c:	f340 80a0 	ble.w	80094e0 <_dtoa_r+0x450>
 80093a0:	49c1      	ldr	r1, [pc, #772]	; (80096a8 <_dtoa_r+0x618>)
 80093a2:	f00b 020f 	and.w	r2, fp, #15
 80093a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80093aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80093ae:	ed92 7b00 	vldr	d7, [r2]
 80093b2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80093b6:	f000 8087 	beq.w	80094c8 <_dtoa_r+0x438>
 80093ba:	4abc      	ldr	r2, [pc, #752]	; (80096ac <_dtoa_r+0x61c>)
 80093bc:	ed92 6b08 	vldr	d6, [r2, #32]
 80093c0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80093c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80093c8:	f001 010f 	and.w	r1, r1, #15
 80093cc:	2203      	movs	r2, #3
 80093ce:	48b7      	ldr	r0, [pc, #732]	; (80096ac <_dtoa_r+0x61c>)
 80093d0:	2900      	cmp	r1, #0
 80093d2:	d17b      	bne.n	80094cc <_dtoa_r+0x43c>
 80093d4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80093d8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80093dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80093e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093e2:	2900      	cmp	r1, #0
 80093e4:	f000 80a2 	beq.w	800952c <_dtoa_r+0x49c>
 80093e8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80093ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80093f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093f8:	f140 8098 	bpl.w	800952c <_dtoa_r+0x49c>
 80093fc:	f1b9 0f00 	cmp.w	r9, #0
 8009400:	f000 8094 	beq.w	800952c <_dtoa_r+0x49c>
 8009404:	f1ba 0f00 	cmp.w	sl, #0
 8009408:	dd2f      	ble.n	800946a <_dtoa_r+0x3da>
 800940a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800940e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009412:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009416:	f10b 37ff 	add.w	r7, fp, #4294967295
 800941a:	3201      	adds	r2, #1
 800941c:	4650      	mov	r0, sl
 800941e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009422:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009426:	ee07 2a90 	vmov	s15, r2
 800942a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800942e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009432:	ee15 4a90 	vmov	r4, s11
 8009436:	ec52 1b15 	vmov	r1, r2, d5
 800943a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800943e:	2800      	cmp	r0, #0
 8009440:	d177      	bne.n	8009532 <_dtoa_r+0x4a2>
 8009442:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009446:	ee36 6b47 	vsub.f64	d6, d6, d7
 800944a:	ec42 1b17 	vmov	d7, r1, r2
 800944e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009456:	f300 8263 	bgt.w	8009920 <_dtoa_r+0x890>
 800945a:	eeb1 7b47 	vneg.f64	d7, d7
 800945e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009466:	f100 8258 	bmi.w	800991a <_dtoa_r+0x88a>
 800946a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800946e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009470:	2a00      	cmp	r2, #0
 8009472:	f2c0 811d 	blt.w	80096b0 <_dtoa_r+0x620>
 8009476:	f1bb 0f0e 	cmp.w	fp, #14
 800947a:	f300 8119 	bgt.w	80096b0 <_dtoa_r+0x620>
 800947e:	4b8a      	ldr	r3, [pc, #552]	; (80096a8 <_dtoa_r+0x618>)
 8009480:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009484:	ed93 6b00 	vldr	d6, [r3]
 8009488:	9b08      	ldr	r3, [sp, #32]
 800948a:	2b00      	cmp	r3, #0
 800948c:	f280 80b7 	bge.w	80095fe <_dtoa_r+0x56e>
 8009490:	f1b9 0f00 	cmp.w	r9, #0
 8009494:	f300 80b3 	bgt.w	80095fe <_dtoa_r+0x56e>
 8009498:	f040 823f 	bne.w	800991a <_dtoa_r+0x88a>
 800949c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80094a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80094a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80094ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094b0:	464c      	mov	r4, r9
 80094b2:	464f      	mov	r7, r9
 80094b4:	f280 8215 	bge.w	80098e2 <_dtoa_r+0x852>
 80094b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80094bc:	2331      	movs	r3, #49	; 0x31
 80094be:	f808 3b01 	strb.w	r3, [r8], #1
 80094c2:	f10b 0b01 	add.w	fp, fp, #1
 80094c6:	e211      	b.n	80098ec <_dtoa_r+0x85c>
 80094c8:	2202      	movs	r2, #2
 80094ca:	e780      	b.n	80093ce <_dtoa_r+0x33e>
 80094cc:	07cc      	lsls	r4, r1, #31
 80094ce:	d504      	bpl.n	80094da <_dtoa_r+0x44a>
 80094d0:	ed90 6b00 	vldr	d6, [r0]
 80094d4:	3201      	adds	r2, #1
 80094d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80094da:	1049      	asrs	r1, r1, #1
 80094dc:	3008      	adds	r0, #8
 80094de:	e777      	b.n	80093d0 <_dtoa_r+0x340>
 80094e0:	d022      	beq.n	8009528 <_dtoa_r+0x498>
 80094e2:	f1cb 0100 	rsb	r1, fp, #0
 80094e6:	4a70      	ldr	r2, [pc, #448]	; (80096a8 <_dtoa_r+0x618>)
 80094e8:	f001 000f 	and.w	r0, r1, #15
 80094ec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80094f0:	ed92 7b00 	vldr	d7, [r2]
 80094f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80094f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80094fc:	486b      	ldr	r0, [pc, #428]	; (80096ac <_dtoa_r+0x61c>)
 80094fe:	1109      	asrs	r1, r1, #4
 8009500:	2400      	movs	r4, #0
 8009502:	2202      	movs	r2, #2
 8009504:	b929      	cbnz	r1, 8009512 <_dtoa_r+0x482>
 8009506:	2c00      	cmp	r4, #0
 8009508:	f43f af6a 	beq.w	80093e0 <_dtoa_r+0x350>
 800950c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009510:	e766      	b.n	80093e0 <_dtoa_r+0x350>
 8009512:	07cf      	lsls	r7, r1, #31
 8009514:	d505      	bpl.n	8009522 <_dtoa_r+0x492>
 8009516:	ed90 6b00 	vldr	d6, [r0]
 800951a:	3201      	adds	r2, #1
 800951c:	2401      	movs	r4, #1
 800951e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009522:	1049      	asrs	r1, r1, #1
 8009524:	3008      	adds	r0, #8
 8009526:	e7ed      	b.n	8009504 <_dtoa_r+0x474>
 8009528:	2202      	movs	r2, #2
 800952a:	e759      	b.n	80093e0 <_dtoa_r+0x350>
 800952c:	465f      	mov	r7, fp
 800952e:	4648      	mov	r0, r9
 8009530:	e775      	b.n	800941e <_dtoa_r+0x38e>
 8009532:	ec42 1b17 	vmov	d7, r1, r2
 8009536:	4a5c      	ldr	r2, [pc, #368]	; (80096a8 <_dtoa_r+0x618>)
 8009538:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800953c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009540:	9a01      	ldr	r2, [sp, #4]
 8009542:	1814      	adds	r4, r2, r0
 8009544:	9a07      	ldr	r2, [sp, #28]
 8009546:	b352      	cbz	r2, 800959e <_dtoa_r+0x50e>
 8009548:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800954c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009550:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009554:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009558:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800955c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009560:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009564:	ee14 2a90 	vmov	r2, s9
 8009568:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800956c:	3230      	adds	r2, #48	; 0x30
 800956e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009572:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800957a:	f808 2b01 	strb.w	r2, [r8], #1
 800957e:	d439      	bmi.n	80095f4 <_dtoa_r+0x564>
 8009580:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009584:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800958c:	d472      	bmi.n	8009674 <_dtoa_r+0x5e4>
 800958e:	45a0      	cmp	r8, r4
 8009590:	f43f af6b 	beq.w	800946a <_dtoa_r+0x3da>
 8009594:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009598:	ee26 6b03 	vmul.f64	d6, d6, d3
 800959c:	e7e0      	b.n	8009560 <_dtoa_r+0x4d0>
 800959e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80095a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80095a6:	4621      	mov	r1, r4
 80095a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80095ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80095b0:	ee14 2a90 	vmov	r2, s9
 80095b4:	3230      	adds	r2, #48	; 0x30
 80095b6:	f808 2b01 	strb.w	r2, [r8], #1
 80095ba:	45a0      	cmp	r8, r4
 80095bc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80095c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80095c4:	d118      	bne.n	80095f8 <_dtoa_r+0x568>
 80095c6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80095ca:	ee37 4b05 	vadd.f64	d4, d7, d5
 80095ce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80095d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d6:	dc4d      	bgt.n	8009674 <_dtoa_r+0x5e4>
 80095d8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80095dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80095e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095e4:	f57f af41 	bpl.w	800946a <_dtoa_r+0x3da>
 80095e8:	4688      	mov	r8, r1
 80095ea:	3901      	subs	r1, #1
 80095ec:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80095f0:	2b30      	cmp	r3, #48	; 0x30
 80095f2:	d0f9      	beq.n	80095e8 <_dtoa_r+0x558>
 80095f4:	46bb      	mov	fp, r7
 80095f6:	e02a      	b.n	800964e <_dtoa_r+0x5be>
 80095f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80095fc:	e7d6      	b.n	80095ac <_dtoa_r+0x51c>
 80095fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009602:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009606:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800960a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800960e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009612:	ee15 3a10 	vmov	r3, s10
 8009616:	3330      	adds	r3, #48	; 0x30
 8009618:	f808 3b01 	strb.w	r3, [r8], #1
 800961c:	9b01      	ldr	r3, [sp, #4]
 800961e:	eba8 0303 	sub.w	r3, r8, r3
 8009622:	4599      	cmp	r9, r3
 8009624:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009628:	eea3 7b46 	vfms.f64	d7, d3, d6
 800962c:	d133      	bne.n	8009696 <_dtoa_r+0x606>
 800962e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009632:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800963a:	dc1a      	bgt.n	8009672 <_dtoa_r+0x5e2>
 800963c:	eeb4 7b46 	vcmp.f64	d7, d6
 8009640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009644:	d103      	bne.n	800964e <_dtoa_r+0x5be>
 8009646:	ee15 3a10 	vmov	r3, s10
 800964a:	07d9      	lsls	r1, r3, #31
 800964c:	d411      	bmi.n	8009672 <_dtoa_r+0x5e2>
 800964e:	4629      	mov	r1, r5
 8009650:	4630      	mov	r0, r6
 8009652:	f000 fbd1 	bl	8009df8 <_Bfree>
 8009656:	2300      	movs	r3, #0
 8009658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800965a:	f888 3000 	strb.w	r3, [r8]
 800965e:	f10b 0301 	add.w	r3, fp, #1
 8009662:	6013      	str	r3, [r2, #0]
 8009664:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009666:	2b00      	cmp	r3, #0
 8009668:	f43f ad61 	beq.w	800912e <_dtoa_r+0x9e>
 800966c:	f8c3 8000 	str.w	r8, [r3]
 8009670:	e55d      	b.n	800912e <_dtoa_r+0x9e>
 8009672:	465f      	mov	r7, fp
 8009674:	4643      	mov	r3, r8
 8009676:	4698      	mov	r8, r3
 8009678:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800967c:	2a39      	cmp	r2, #57	; 0x39
 800967e:	d106      	bne.n	800968e <_dtoa_r+0x5fe>
 8009680:	9a01      	ldr	r2, [sp, #4]
 8009682:	429a      	cmp	r2, r3
 8009684:	d1f7      	bne.n	8009676 <_dtoa_r+0x5e6>
 8009686:	9901      	ldr	r1, [sp, #4]
 8009688:	2230      	movs	r2, #48	; 0x30
 800968a:	3701      	adds	r7, #1
 800968c:	700a      	strb	r2, [r1, #0]
 800968e:	781a      	ldrb	r2, [r3, #0]
 8009690:	3201      	adds	r2, #1
 8009692:	701a      	strb	r2, [r3, #0]
 8009694:	e7ae      	b.n	80095f4 <_dtoa_r+0x564>
 8009696:	ee27 7b04 	vmul.f64	d7, d7, d4
 800969a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800969e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a2:	d1b2      	bne.n	800960a <_dtoa_r+0x57a>
 80096a4:	e7d3      	b.n	800964e <_dtoa_r+0x5be>
 80096a6:	bf00      	nop
 80096a8:	0800b3a0 	.word	0x0800b3a0
 80096ac:	0800b378 	.word	0x0800b378
 80096b0:	9907      	ldr	r1, [sp, #28]
 80096b2:	2900      	cmp	r1, #0
 80096b4:	f000 80d0 	beq.w	8009858 <_dtoa_r+0x7c8>
 80096b8:	9906      	ldr	r1, [sp, #24]
 80096ba:	2901      	cmp	r1, #1
 80096bc:	f300 80b4 	bgt.w	8009828 <_dtoa_r+0x798>
 80096c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096c2:	2900      	cmp	r1, #0
 80096c4:	f000 80ac 	beq.w	8009820 <_dtoa_r+0x790>
 80096c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80096cc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80096d0:	461c      	mov	r4, r3
 80096d2:	930a      	str	r3, [sp, #40]	; 0x28
 80096d4:	9b04      	ldr	r3, [sp, #16]
 80096d6:	4413      	add	r3, r2
 80096d8:	9304      	str	r3, [sp, #16]
 80096da:	9b05      	ldr	r3, [sp, #20]
 80096dc:	2101      	movs	r1, #1
 80096de:	4413      	add	r3, r2
 80096e0:	4630      	mov	r0, r6
 80096e2:	9305      	str	r3, [sp, #20]
 80096e4:	f000 fc40 	bl	8009f68 <__i2b>
 80096e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096ea:	4607      	mov	r7, r0
 80096ec:	f1b8 0f00 	cmp.w	r8, #0
 80096f0:	dd0d      	ble.n	800970e <_dtoa_r+0x67e>
 80096f2:	9a05      	ldr	r2, [sp, #20]
 80096f4:	2a00      	cmp	r2, #0
 80096f6:	dd0a      	ble.n	800970e <_dtoa_r+0x67e>
 80096f8:	4542      	cmp	r2, r8
 80096fa:	9904      	ldr	r1, [sp, #16]
 80096fc:	bfa8      	it	ge
 80096fe:	4642      	movge	r2, r8
 8009700:	1a89      	subs	r1, r1, r2
 8009702:	9104      	str	r1, [sp, #16]
 8009704:	9905      	ldr	r1, [sp, #20]
 8009706:	eba8 0802 	sub.w	r8, r8, r2
 800970a:	1a8a      	subs	r2, r1, r2
 800970c:	9205      	str	r2, [sp, #20]
 800970e:	b303      	cbz	r3, 8009752 <_dtoa_r+0x6c2>
 8009710:	9a07      	ldr	r2, [sp, #28]
 8009712:	2a00      	cmp	r2, #0
 8009714:	f000 80a5 	beq.w	8009862 <_dtoa_r+0x7d2>
 8009718:	2c00      	cmp	r4, #0
 800971a:	dd13      	ble.n	8009744 <_dtoa_r+0x6b4>
 800971c:	4639      	mov	r1, r7
 800971e:	4622      	mov	r2, r4
 8009720:	4630      	mov	r0, r6
 8009722:	930d      	str	r3, [sp, #52]	; 0x34
 8009724:	f000 fce0 	bl	800a0e8 <__pow5mult>
 8009728:	462a      	mov	r2, r5
 800972a:	4601      	mov	r1, r0
 800972c:	4607      	mov	r7, r0
 800972e:	4630      	mov	r0, r6
 8009730:	f000 fc30 	bl	8009f94 <__multiply>
 8009734:	4629      	mov	r1, r5
 8009736:	900a      	str	r0, [sp, #40]	; 0x28
 8009738:	4630      	mov	r0, r6
 800973a:	f000 fb5d 	bl	8009df8 <_Bfree>
 800973e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009742:	4615      	mov	r5, r2
 8009744:	1b1a      	subs	r2, r3, r4
 8009746:	d004      	beq.n	8009752 <_dtoa_r+0x6c2>
 8009748:	4629      	mov	r1, r5
 800974a:	4630      	mov	r0, r6
 800974c:	f000 fccc 	bl	800a0e8 <__pow5mult>
 8009750:	4605      	mov	r5, r0
 8009752:	2101      	movs	r1, #1
 8009754:	4630      	mov	r0, r6
 8009756:	f000 fc07 	bl	8009f68 <__i2b>
 800975a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800975c:	2b00      	cmp	r3, #0
 800975e:	4604      	mov	r4, r0
 8009760:	f340 8081 	ble.w	8009866 <_dtoa_r+0x7d6>
 8009764:	461a      	mov	r2, r3
 8009766:	4601      	mov	r1, r0
 8009768:	4630      	mov	r0, r6
 800976a:	f000 fcbd 	bl	800a0e8 <__pow5mult>
 800976e:	9b06      	ldr	r3, [sp, #24]
 8009770:	2b01      	cmp	r3, #1
 8009772:	4604      	mov	r4, r0
 8009774:	dd7a      	ble.n	800986c <_dtoa_r+0x7dc>
 8009776:	2300      	movs	r3, #0
 8009778:	930a      	str	r3, [sp, #40]	; 0x28
 800977a:	6922      	ldr	r2, [r4, #16]
 800977c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009780:	6910      	ldr	r0, [r2, #16]
 8009782:	f000 fba1 	bl	8009ec8 <__hi0bits>
 8009786:	f1c0 0020 	rsb	r0, r0, #32
 800978a:	9b05      	ldr	r3, [sp, #20]
 800978c:	4418      	add	r0, r3
 800978e:	f010 001f 	ands.w	r0, r0, #31
 8009792:	f000 808c 	beq.w	80098ae <_dtoa_r+0x81e>
 8009796:	f1c0 0220 	rsb	r2, r0, #32
 800979a:	2a04      	cmp	r2, #4
 800979c:	f340 8085 	ble.w	80098aa <_dtoa_r+0x81a>
 80097a0:	f1c0 001c 	rsb	r0, r0, #28
 80097a4:	9b04      	ldr	r3, [sp, #16]
 80097a6:	4403      	add	r3, r0
 80097a8:	9304      	str	r3, [sp, #16]
 80097aa:	9b05      	ldr	r3, [sp, #20]
 80097ac:	4403      	add	r3, r0
 80097ae:	4480      	add	r8, r0
 80097b0:	9305      	str	r3, [sp, #20]
 80097b2:	9b04      	ldr	r3, [sp, #16]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	dd05      	ble.n	80097c4 <_dtoa_r+0x734>
 80097b8:	4629      	mov	r1, r5
 80097ba:	461a      	mov	r2, r3
 80097bc:	4630      	mov	r0, r6
 80097be:	f000 fced 	bl	800a19c <__lshift>
 80097c2:	4605      	mov	r5, r0
 80097c4:	9b05      	ldr	r3, [sp, #20]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	dd05      	ble.n	80097d6 <_dtoa_r+0x746>
 80097ca:	4621      	mov	r1, r4
 80097cc:	461a      	mov	r2, r3
 80097ce:	4630      	mov	r0, r6
 80097d0:	f000 fce4 	bl	800a19c <__lshift>
 80097d4:	4604      	mov	r4, r0
 80097d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d06a      	beq.n	80098b2 <_dtoa_r+0x822>
 80097dc:	4621      	mov	r1, r4
 80097de:	4628      	mov	r0, r5
 80097e0:	f000 fd4c 	bl	800a27c <__mcmp>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	da64      	bge.n	80098b2 <_dtoa_r+0x822>
 80097e8:	2300      	movs	r3, #0
 80097ea:	4629      	mov	r1, r5
 80097ec:	220a      	movs	r2, #10
 80097ee:	4630      	mov	r0, r6
 80097f0:	f000 fb24 	bl	8009e3c <__multadd>
 80097f4:	9b07      	ldr	r3, [sp, #28]
 80097f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80097fa:	4605      	mov	r5, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f000 8191 	beq.w	8009b24 <_dtoa_r+0xa94>
 8009802:	4639      	mov	r1, r7
 8009804:	2300      	movs	r3, #0
 8009806:	220a      	movs	r2, #10
 8009808:	4630      	mov	r0, r6
 800980a:	f000 fb17 	bl	8009e3c <__multadd>
 800980e:	f1ba 0f00 	cmp.w	sl, #0
 8009812:	4607      	mov	r7, r0
 8009814:	f300 808d 	bgt.w	8009932 <_dtoa_r+0x8a2>
 8009818:	9b06      	ldr	r3, [sp, #24]
 800981a:	2b02      	cmp	r3, #2
 800981c:	dc50      	bgt.n	80098c0 <_dtoa_r+0x830>
 800981e:	e088      	b.n	8009932 <_dtoa_r+0x8a2>
 8009820:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009822:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009826:	e751      	b.n	80096cc <_dtoa_r+0x63c>
 8009828:	f109 34ff 	add.w	r4, r9, #4294967295
 800982c:	42a3      	cmp	r3, r4
 800982e:	bfbf      	itttt	lt
 8009830:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009832:	1ae3      	sublt	r3, r4, r3
 8009834:	18d2      	addlt	r2, r2, r3
 8009836:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009838:	bfb6      	itet	lt
 800983a:	4623      	movlt	r3, r4
 800983c:	1b1c      	subge	r4, r3, r4
 800983e:	2400      	movlt	r4, #0
 8009840:	f1b9 0f00 	cmp.w	r9, #0
 8009844:	bfb5      	itete	lt
 8009846:	9a04      	ldrlt	r2, [sp, #16]
 8009848:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800984c:	eba2 0809 	sublt.w	r8, r2, r9
 8009850:	464a      	movge	r2, r9
 8009852:	bfb8      	it	lt
 8009854:	2200      	movlt	r2, #0
 8009856:	e73c      	b.n	80096d2 <_dtoa_r+0x642>
 8009858:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800985c:	9f07      	ldr	r7, [sp, #28]
 800985e:	461c      	mov	r4, r3
 8009860:	e744      	b.n	80096ec <_dtoa_r+0x65c>
 8009862:	461a      	mov	r2, r3
 8009864:	e770      	b.n	8009748 <_dtoa_r+0x6b8>
 8009866:	9b06      	ldr	r3, [sp, #24]
 8009868:	2b01      	cmp	r3, #1
 800986a:	dc18      	bgt.n	800989e <_dtoa_r+0x80e>
 800986c:	9b02      	ldr	r3, [sp, #8]
 800986e:	b9b3      	cbnz	r3, 800989e <_dtoa_r+0x80e>
 8009870:	9b03      	ldr	r3, [sp, #12]
 8009872:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009876:	b9a2      	cbnz	r2, 80098a2 <_dtoa_r+0x812>
 8009878:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800987c:	0d12      	lsrs	r2, r2, #20
 800987e:	0512      	lsls	r2, r2, #20
 8009880:	b18a      	cbz	r2, 80098a6 <_dtoa_r+0x816>
 8009882:	9b04      	ldr	r3, [sp, #16]
 8009884:	3301      	adds	r3, #1
 8009886:	9304      	str	r3, [sp, #16]
 8009888:	9b05      	ldr	r3, [sp, #20]
 800988a:	3301      	adds	r3, #1
 800988c:	9305      	str	r3, [sp, #20]
 800988e:	2301      	movs	r3, #1
 8009890:	930a      	str	r3, [sp, #40]	; 0x28
 8009892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009894:	2b00      	cmp	r3, #0
 8009896:	f47f af70 	bne.w	800977a <_dtoa_r+0x6ea>
 800989a:	2001      	movs	r0, #1
 800989c:	e775      	b.n	800978a <_dtoa_r+0x6fa>
 800989e:	2300      	movs	r3, #0
 80098a0:	e7f6      	b.n	8009890 <_dtoa_r+0x800>
 80098a2:	9b02      	ldr	r3, [sp, #8]
 80098a4:	e7f4      	b.n	8009890 <_dtoa_r+0x800>
 80098a6:	920a      	str	r2, [sp, #40]	; 0x28
 80098a8:	e7f3      	b.n	8009892 <_dtoa_r+0x802>
 80098aa:	d082      	beq.n	80097b2 <_dtoa_r+0x722>
 80098ac:	4610      	mov	r0, r2
 80098ae:	301c      	adds	r0, #28
 80098b0:	e778      	b.n	80097a4 <_dtoa_r+0x714>
 80098b2:	f1b9 0f00 	cmp.w	r9, #0
 80098b6:	dc37      	bgt.n	8009928 <_dtoa_r+0x898>
 80098b8:	9b06      	ldr	r3, [sp, #24]
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	dd34      	ble.n	8009928 <_dtoa_r+0x898>
 80098be:	46ca      	mov	sl, r9
 80098c0:	f1ba 0f00 	cmp.w	sl, #0
 80098c4:	d10d      	bne.n	80098e2 <_dtoa_r+0x852>
 80098c6:	4621      	mov	r1, r4
 80098c8:	4653      	mov	r3, sl
 80098ca:	2205      	movs	r2, #5
 80098cc:	4630      	mov	r0, r6
 80098ce:	f000 fab5 	bl	8009e3c <__multadd>
 80098d2:	4601      	mov	r1, r0
 80098d4:	4604      	mov	r4, r0
 80098d6:	4628      	mov	r0, r5
 80098d8:	f000 fcd0 	bl	800a27c <__mcmp>
 80098dc:	2800      	cmp	r0, #0
 80098de:	f73f adeb 	bgt.w	80094b8 <_dtoa_r+0x428>
 80098e2:	9b08      	ldr	r3, [sp, #32]
 80098e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80098e8:	ea6f 0b03 	mvn.w	fp, r3
 80098ec:	f04f 0900 	mov.w	r9, #0
 80098f0:	4621      	mov	r1, r4
 80098f2:	4630      	mov	r0, r6
 80098f4:	f000 fa80 	bl	8009df8 <_Bfree>
 80098f8:	2f00      	cmp	r7, #0
 80098fa:	f43f aea8 	beq.w	800964e <_dtoa_r+0x5be>
 80098fe:	f1b9 0f00 	cmp.w	r9, #0
 8009902:	d005      	beq.n	8009910 <_dtoa_r+0x880>
 8009904:	45b9      	cmp	r9, r7
 8009906:	d003      	beq.n	8009910 <_dtoa_r+0x880>
 8009908:	4649      	mov	r1, r9
 800990a:	4630      	mov	r0, r6
 800990c:	f000 fa74 	bl	8009df8 <_Bfree>
 8009910:	4639      	mov	r1, r7
 8009912:	4630      	mov	r0, r6
 8009914:	f000 fa70 	bl	8009df8 <_Bfree>
 8009918:	e699      	b.n	800964e <_dtoa_r+0x5be>
 800991a:	2400      	movs	r4, #0
 800991c:	4627      	mov	r7, r4
 800991e:	e7e0      	b.n	80098e2 <_dtoa_r+0x852>
 8009920:	46bb      	mov	fp, r7
 8009922:	4604      	mov	r4, r0
 8009924:	4607      	mov	r7, r0
 8009926:	e5c7      	b.n	80094b8 <_dtoa_r+0x428>
 8009928:	9b07      	ldr	r3, [sp, #28]
 800992a:	46ca      	mov	sl, r9
 800992c:	2b00      	cmp	r3, #0
 800992e:	f000 8100 	beq.w	8009b32 <_dtoa_r+0xaa2>
 8009932:	f1b8 0f00 	cmp.w	r8, #0
 8009936:	dd05      	ble.n	8009944 <_dtoa_r+0x8b4>
 8009938:	4639      	mov	r1, r7
 800993a:	4642      	mov	r2, r8
 800993c:	4630      	mov	r0, r6
 800993e:	f000 fc2d 	bl	800a19c <__lshift>
 8009942:	4607      	mov	r7, r0
 8009944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009946:	2b00      	cmp	r3, #0
 8009948:	d05d      	beq.n	8009a06 <_dtoa_r+0x976>
 800994a:	6879      	ldr	r1, [r7, #4]
 800994c:	4630      	mov	r0, r6
 800994e:	f000 fa13 	bl	8009d78 <_Balloc>
 8009952:	4680      	mov	r8, r0
 8009954:	b928      	cbnz	r0, 8009962 <_dtoa_r+0x8d2>
 8009956:	4b82      	ldr	r3, [pc, #520]	; (8009b60 <_dtoa_r+0xad0>)
 8009958:	4602      	mov	r2, r0
 800995a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800995e:	f7ff bbaf 	b.w	80090c0 <_dtoa_r+0x30>
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	3202      	adds	r2, #2
 8009966:	0092      	lsls	r2, r2, #2
 8009968:	f107 010c 	add.w	r1, r7, #12
 800996c:	300c      	adds	r0, #12
 800996e:	f7fe fe65 	bl	800863c <memcpy>
 8009972:	2201      	movs	r2, #1
 8009974:	4641      	mov	r1, r8
 8009976:	4630      	mov	r0, r6
 8009978:	f000 fc10 	bl	800a19c <__lshift>
 800997c:	9b01      	ldr	r3, [sp, #4]
 800997e:	3301      	adds	r3, #1
 8009980:	9304      	str	r3, [sp, #16]
 8009982:	9b01      	ldr	r3, [sp, #4]
 8009984:	4453      	add	r3, sl
 8009986:	9308      	str	r3, [sp, #32]
 8009988:	9b02      	ldr	r3, [sp, #8]
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	46b9      	mov	r9, r7
 8009990:	9307      	str	r3, [sp, #28]
 8009992:	4607      	mov	r7, r0
 8009994:	9b04      	ldr	r3, [sp, #16]
 8009996:	4621      	mov	r1, r4
 8009998:	3b01      	subs	r3, #1
 800999a:	4628      	mov	r0, r5
 800999c:	9302      	str	r3, [sp, #8]
 800999e:	f7ff faeb 	bl	8008f78 <quorem>
 80099a2:	4603      	mov	r3, r0
 80099a4:	3330      	adds	r3, #48	; 0x30
 80099a6:	9005      	str	r0, [sp, #20]
 80099a8:	4649      	mov	r1, r9
 80099aa:	4628      	mov	r0, r5
 80099ac:	9309      	str	r3, [sp, #36]	; 0x24
 80099ae:	f000 fc65 	bl	800a27c <__mcmp>
 80099b2:	463a      	mov	r2, r7
 80099b4:	4682      	mov	sl, r0
 80099b6:	4621      	mov	r1, r4
 80099b8:	4630      	mov	r0, r6
 80099ba:	f000 fc7b 	bl	800a2b4 <__mdiff>
 80099be:	68c2      	ldr	r2, [r0, #12]
 80099c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c2:	4680      	mov	r8, r0
 80099c4:	bb0a      	cbnz	r2, 8009a0a <_dtoa_r+0x97a>
 80099c6:	4601      	mov	r1, r0
 80099c8:	4628      	mov	r0, r5
 80099ca:	f000 fc57 	bl	800a27c <__mcmp>
 80099ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d0:	4602      	mov	r2, r0
 80099d2:	4641      	mov	r1, r8
 80099d4:	4630      	mov	r0, r6
 80099d6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80099da:	f000 fa0d 	bl	8009df8 <_Bfree>
 80099de:	9b06      	ldr	r3, [sp, #24]
 80099e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099e2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80099e6:	ea43 0102 	orr.w	r1, r3, r2
 80099ea:	9b07      	ldr	r3, [sp, #28]
 80099ec:	430b      	orrs	r3, r1
 80099ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099f0:	d10d      	bne.n	8009a0e <_dtoa_r+0x97e>
 80099f2:	2b39      	cmp	r3, #57	; 0x39
 80099f4:	d029      	beq.n	8009a4a <_dtoa_r+0x9ba>
 80099f6:	f1ba 0f00 	cmp.w	sl, #0
 80099fa:	dd01      	ble.n	8009a00 <_dtoa_r+0x970>
 80099fc:	9b05      	ldr	r3, [sp, #20]
 80099fe:	3331      	adds	r3, #49	; 0x31
 8009a00:	9a02      	ldr	r2, [sp, #8]
 8009a02:	7013      	strb	r3, [r2, #0]
 8009a04:	e774      	b.n	80098f0 <_dtoa_r+0x860>
 8009a06:	4638      	mov	r0, r7
 8009a08:	e7b8      	b.n	800997c <_dtoa_r+0x8ec>
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	e7e1      	b.n	80099d2 <_dtoa_r+0x942>
 8009a0e:	f1ba 0f00 	cmp.w	sl, #0
 8009a12:	db06      	blt.n	8009a22 <_dtoa_r+0x992>
 8009a14:	9906      	ldr	r1, [sp, #24]
 8009a16:	ea41 0a0a 	orr.w	sl, r1, sl
 8009a1a:	9907      	ldr	r1, [sp, #28]
 8009a1c:	ea5a 0101 	orrs.w	r1, sl, r1
 8009a20:	d120      	bne.n	8009a64 <_dtoa_r+0x9d4>
 8009a22:	2a00      	cmp	r2, #0
 8009a24:	ddec      	ble.n	8009a00 <_dtoa_r+0x970>
 8009a26:	4629      	mov	r1, r5
 8009a28:	2201      	movs	r2, #1
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	9304      	str	r3, [sp, #16]
 8009a2e:	f000 fbb5 	bl	800a19c <__lshift>
 8009a32:	4621      	mov	r1, r4
 8009a34:	4605      	mov	r5, r0
 8009a36:	f000 fc21 	bl	800a27c <__mcmp>
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	9b04      	ldr	r3, [sp, #16]
 8009a3e:	dc02      	bgt.n	8009a46 <_dtoa_r+0x9b6>
 8009a40:	d1de      	bne.n	8009a00 <_dtoa_r+0x970>
 8009a42:	07da      	lsls	r2, r3, #31
 8009a44:	d5dc      	bpl.n	8009a00 <_dtoa_r+0x970>
 8009a46:	2b39      	cmp	r3, #57	; 0x39
 8009a48:	d1d8      	bne.n	80099fc <_dtoa_r+0x96c>
 8009a4a:	9a02      	ldr	r2, [sp, #8]
 8009a4c:	2339      	movs	r3, #57	; 0x39
 8009a4e:	7013      	strb	r3, [r2, #0]
 8009a50:	4643      	mov	r3, r8
 8009a52:	4698      	mov	r8, r3
 8009a54:	3b01      	subs	r3, #1
 8009a56:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009a5a:	2a39      	cmp	r2, #57	; 0x39
 8009a5c:	d051      	beq.n	8009b02 <_dtoa_r+0xa72>
 8009a5e:	3201      	adds	r2, #1
 8009a60:	701a      	strb	r2, [r3, #0]
 8009a62:	e745      	b.n	80098f0 <_dtoa_r+0x860>
 8009a64:	2a00      	cmp	r2, #0
 8009a66:	dd03      	ble.n	8009a70 <_dtoa_r+0x9e0>
 8009a68:	2b39      	cmp	r3, #57	; 0x39
 8009a6a:	d0ee      	beq.n	8009a4a <_dtoa_r+0x9ba>
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	e7c7      	b.n	8009a00 <_dtoa_r+0x970>
 8009a70:	9a04      	ldr	r2, [sp, #16]
 8009a72:	9908      	ldr	r1, [sp, #32]
 8009a74:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009a78:	428a      	cmp	r2, r1
 8009a7a:	d02b      	beq.n	8009ad4 <_dtoa_r+0xa44>
 8009a7c:	4629      	mov	r1, r5
 8009a7e:	2300      	movs	r3, #0
 8009a80:	220a      	movs	r2, #10
 8009a82:	4630      	mov	r0, r6
 8009a84:	f000 f9da 	bl	8009e3c <__multadd>
 8009a88:	45b9      	cmp	r9, r7
 8009a8a:	4605      	mov	r5, r0
 8009a8c:	f04f 0300 	mov.w	r3, #0
 8009a90:	f04f 020a 	mov.w	r2, #10
 8009a94:	4649      	mov	r1, r9
 8009a96:	4630      	mov	r0, r6
 8009a98:	d107      	bne.n	8009aaa <_dtoa_r+0xa1a>
 8009a9a:	f000 f9cf 	bl	8009e3c <__multadd>
 8009a9e:	4681      	mov	r9, r0
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	9b04      	ldr	r3, [sp, #16]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	9304      	str	r3, [sp, #16]
 8009aa8:	e774      	b.n	8009994 <_dtoa_r+0x904>
 8009aaa:	f000 f9c7 	bl	8009e3c <__multadd>
 8009aae:	4639      	mov	r1, r7
 8009ab0:	4681      	mov	r9, r0
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	220a      	movs	r2, #10
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f000 f9c0 	bl	8009e3c <__multadd>
 8009abc:	4607      	mov	r7, r0
 8009abe:	e7f0      	b.n	8009aa2 <_dtoa_r+0xa12>
 8009ac0:	f1ba 0f00 	cmp.w	sl, #0
 8009ac4:	9a01      	ldr	r2, [sp, #4]
 8009ac6:	bfcc      	ite	gt
 8009ac8:	46d0      	movgt	r8, sl
 8009aca:	f04f 0801 	movle.w	r8, #1
 8009ace:	4490      	add	r8, r2
 8009ad0:	f04f 0900 	mov.w	r9, #0
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	4630      	mov	r0, r6
 8009ada:	9302      	str	r3, [sp, #8]
 8009adc:	f000 fb5e 	bl	800a19c <__lshift>
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	4605      	mov	r5, r0
 8009ae4:	f000 fbca 	bl	800a27c <__mcmp>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	dcb1      	bgt.n	8009a50 <_dtoa_r+0x9c0>
 8009aec:	d102      	bne.n	8009af4 <_dtoa_r+0xa64>
 8009aee:	9b02      	ldr	r3, [sp, #8]
 8009af0:	07db      	lsls	r3, r3, #31
 8009af2:	d4ad      	bmi.n	8009a50 <_dtoa_r+0x9c0>
 8009af4:	4643      	mov	r3, r8
 8009af6:	4698      	mov	r8, r3
 8009af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009afc:	2a30      	cmp	r2, #48	; 0x30
 8009afe:	d0fa      	beq.n	8009af6 <_dtoa_r+0xa66>
 8009b00:	e6f6      	b.n	80098f0 <_dtoa_r+0x860>
 8009b02:	9a01      	ldr	r2, [sp, #4]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d1a4      	bne.n	8009a52 <_dtoa_r+0x9c2>
 8009b08:	f10b 0b01 	add.w	fp, fp, #1
 8009b0c:	2331      	movs	r3, #49	; 0x31
 8009b0e:	e778      	b.n	8009a02 <_dtoa_r+0x972>
 8009b10:	4b14      	ldr	r3, [pc, #80]	; (8009b64 <_dtoa_r+0xad4>)
 8009b12:	f7ff bb27 	b.w	8009164 <_dtoa_r+0xd4>
 8009b16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f47f ab03 	bne.w	8009124 <_dtoa_r+0x94>
 8009b1e:	4b12      	ldr	r3, [pc, #72]	; (8009b68 <_dtoa_r+0xad8>)
 8009b20:	f7ff bb20 	b.w	8009164 <_dtoa_r+0xd4>
 8009b24:	f1ba 0f00 	cmp.w	sl, #0
 8009b28:	dc03      	bgt.n	8009b32 <_dtoa_r+0xaa2>
 8009b2a:	9b06      	ldr	r3, [sp, #24]
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	f73f aec7 	bgt.w	80098c0 <_dtoa_r+0x830>
 8009b32:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b36:	4621      	mov	r1, r4
 8009b38:	4628      	mov	r0, r5
 8009b3a:	f7ff fa1d 	bl	8008f78 <quorem>
 8009b3e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009b42:	f808 3b01 	strb.w	r3, [r8], #1
 8009b46:	9a01      	ldr	r2, [sp, #4]
 8009b48:	eba8 0202 	sub.w	r2, r8, r2
 8009b4c:	4592      	cmp	sl, r2
 8009b4e:	ddb7      	ble.n	8009ac0 <_dtoa_r+0xa30>
 8009b50:	4629      	mov	r1, r5
 8009b52:	2300      	movs	r3, #0
 8009b54:	220a      	movs	r2, #10
 8009b56:	4630      	mov	r0, r6
 8009b58:	f000 f970 	bl	8009e3c <__multadd>
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	e7ea      	b.n	8009b36 <_dtoa_r+0xaa6>
 8009b60:	0800b2a7 	.word	0x0800b2a7
 8009b64:	0800b204 	.word	0x0800b204
 8009b68:	0800b228 	.word	0x0800b228

08009b6c <std>:
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	b510      	push	{r4, lr}
 8009b70:	4604      	mov	r4, r0
 8009b72:	e9c0 3300 	strd	r3, r3, [r0]
 8009b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b7a:	6083      	str	r3, [r0, #8]
 8009b7c:	8181      	strh	r1, [r0, #12]
 8009b7e:	6643      	str	r3, [r0, #100]	; 0x64
 8009b80:	81c2      	strh	r2, [r0, #14]
 8009b82:	6183      	str	r3, [r0, #24]
 8009b84:	4619      	mov	r1, r3
 8009b86:	2208      	movs	r2, #8
 8009b88:	305c      	adds	r0, #92	; 0x5c
 8009b8a:	f7fe fd65 	bl	8008658 <memset>
 8009b8e:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <std+0x38>)
 8009b90:	6263      	str	r3, [r4, #36]	; 0x24
 8009b92:	4b05      	ldr	r3, [pc, #20]	; (8009ba8 <std+0x3c>)
 8009b94:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b96:	4b05      	ldr	r3, [pc, #20]	; (8009bac <std+0x40>)
 8009b98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b9a:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <std+0x44>)
 8009b9c:	6224      	str	r4, [r4, #32]
 8009b9e:	6323      	str	r3, [r4, #48]	; 0x30
 8009ba0:	bd10      	pop	{r4, pc}
 8009ba2:	bf00      	nop
 8009ba4:	0800a9d1 	.word	0x0800a9d1
 8009ba8:	0800a9f3 	.word	0x0800a9f3
 8009bac:	0800aa2b 	.word	0x0800aa2b
 8009bb0:	0800aa4f 	.word	0x0800aa4f

08009bb4 <_cleanup_r>:
 8009bb4:	4901      	ldr	r1, [pc, #4]	; (8009bbc <_cleanup_r+0x8>)
 8009bb6:	f000 b8af 	b.w	8009d18 <_fwalk_reent>
 8009bba:	bf00      	nop
 8009bbc:	0800ad65 	.word	0x0800ad65

08009bc0 <__sfmoreglue>:
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	2268      	movs	r2, #104	; 0x68
 8009bc4:	1e4d      	subs	r5, r1, #1
 8009bc6:	4355      	muls	r5, r2
 8009bc8:	460e      	mov	r6, r1
 8009bca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bce:	f000 fcd9 	bl	800a584 <_malloc_r>
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	b140      	cbz	r0, 8009be8 <__sfmoreglue+0x28>
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	e9c0 1600 	strd	r1, r6, [r0]
 8009bdc:	300c      	adds	r0, #12
 8009bde:	60a0      	str	r0, [r4, #8]
 8009be0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009be4:	f7fe fd38 	bl	8008658 <memset>
 8009be8:	4620      	mov	r0, r4
 8009bea:	bd70      	pop	{r4, r5, r6, pc}

08009bec <__sfp_lock_acquire>:
 8009bec:	4801      	ldr	r0, [pc, #4]	; (8009bf4 <__sfp_lock_acquire+0x8>)
 8009bee:	f000 b8b8 	b.w	8009d62 <__retarget_lock_acquire_recursive>
 8009bf2:	bf00      	nop
 8009bf4:	24000535 	.word	0x24000535

08009bf8 <__sfp_lock_release>:
 8009bf8:	4801      	ldr	r0, [pc, #4]	; (8009c00 <__sfp_lock_release+0x8>)
 8009bfa:	f000 b8b3 	b.w	8009d64 <__retarget_lock_release_recursive>
 8009bfe:	bf00      	nop
 8009c00:	24000535 	.word	0x24000535

08009c04 <__sinit_lock_acquire>:
 8009c04:	4801      	ldr	r0, [pc, #4]	; (8009c0c <__sinit_lock_acquire+0x8>)
 8009c06:	f000 b8ac 	b.w	8009d62 <__retarget_lock_acquire_recursive>
 8009c0a:	bf00      	nop
 8009c0c:	24000536 	.word	0x24000536

08009c10 <__sinit_lock_release>:
 8009c10:	4801      	ldr	r0, [pc, #4]	; (8009c18 <__sinit_lock_release+0x8>)
 8009c12:	f000 b8a7 	b.w	8009d64 <__retarget_lock_release_recursive>
 8009c16:	bf00      	nop
 8009c18:	24000536 	.word	0x24000536

08009c1c <__sinit>:
 8009c1c:	b510      	push	{r4, lr}
 8009c1e:	4604      	mov	r4, r0
 8009c20:	f7ff fff0 	bl	8009c04 <__sinit_lock_acquire>
 8009c24:	69a3      	ldr	r3, [r4, #24]
 8009c26:	b11b      	cbz	r3, 8009c30 <__sinit+0x14>
 8009c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c2c:	f7ff bff0 	b.w	8009c10 <__sinit_lock_release>
 8009c30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c34:	6523      	str	r3, [r4, #80]	; 0x50
 8009c36:	4b13      	ldr	r3, [pc, #76]	; (8009c84 <__sinit+0x68>)
 8009c38:	4a13      	ldr	r2, [pc, #76]	; (8009c88 <__sinit+0x6c>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c3e:	42a3      	cmp	r3, r4
 8009c40:	bf04      	itt	eq
 8009c42:	2301      	moveq	r3, #1
 8009c44:	61a3      	streq	r3, [r4, #24]
 8009c46:	4620      	mov	r0, r4
 8009c48:	f000 f820 	bl	8009c8c <__sfp>
 8009c4c:	6060      	str	r0, [r4, #4]
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f000 f81c 	bl	8009c8c <__sfp>
 8009c54:	60a0      	str	r0, [r4, #8]
 8009c56:	4620      	mov	r0, r4
 8009c58:	f000 f818 	bl	8009c8c <__sfp>
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	60e0      	str	r0, [r4, #12]
 8009c60:	2104      	movs	r1, #4
 8009c62:	6860      	ldr	r0, [r4, #4]
 8009c64:	f7ff ff82 	bl	8009b6c <std>
 8009c68:	68a0      	ldr	r0, [r4, #8]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	2109      	movs	r1, #9
 8009c6e:	f7ff ff7d 	bl	8009b6c <std>
 8009c72:	68e0      	ldr	r0, [r4, #12]
 8009c74:	2202      	movs	r2, #2
 8009c76:	2112      	movs	r1, #18
 8009c78:	f7ff ff78 	bl	8009b6c <std>
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	61a3      	str	r3, [r4, #24]
 8009c80:	e7d2      	b.n	8009c28 <__sinit+0xc>
 8009c82:	bf00      	nop
 8009c84:	0800b1f0 	.word	0x0800b1f0
 8009c88:	08009bb5 	.word	0x08009bb5

08009c8c <__sfp>:
 8009c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8e:	4607      	mov	r7, r0
 8009c90:	f7ff ffac 	bl	8009bec <__sfp_lock_acquire>
 8009c94:	4b1e      	ldr	r3, [pc, #120]	; (8009d10 <__sfp+0x84>)
 8009c96:	681e      	ldr	r6, [r3, #0]
 8009c98:	69b3      	ldr	r3, [r6, #24]
 8009c9a:	b913      	cbnz	r3, 8009ca2 <__sfp+0x16>
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	f7ff ffbd 	bl	8009c1c <__sinit>
 8009ca2:	3648      	adds	r6, #72	; 0x48
 8009ca4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	d503      	bpl.n	8009cb4 <__sfp+0x28>
 8009cac:	6833      	ldr	r3, [r6, #0]
 8009cae:	b30b      	cbz	r3, 8009cf4 <__sfp+0x68>
 8009cb0:	6836      	ldr	r6, [r6, #0]
 8009cb2:	e7f7      	b.n	8009ca4 <__sfp+0x18>
 8009cb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009cb8:	b9d5      	cbnz	r5, 8009cf0 <__sfp+0x64>
 8009cba:	4b16      	ldr	r3, [pc, #88]	; (8009d14 <__sfp+0x88>)
 8009cbc:	60e3      	str	r3, [r4, #12]
 8009cbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cc2:	6665      	str	r5, [r4, #100]	; 0x64
 8009cc4:	f000 f84c 	bl	8009d60 <__retarget_lock_init_recursive>
 8009cc8:	f7ff ff96 	bl	8009bf8 <__sfp_lock_release>
 8009ccc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009cd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009cd4:	6025      	str	r5, [r4, #0]
 8009cd6:	61a5      	str	r5, [r4, #24]
 8009cd8:	2208      	movs	r2, #8
 8009cda:	4629      	mov	r1, r5
 8009cdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ce0:	f7fe fcba 	bl	8008658 <memset>
 8009ce4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ce8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cec:	4620      	mov	r0, r4
 8009cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cf0:	3468      	adds	r4, #104	; 0x68
 8009cf2:	e7d9      	b.n	8009ca8 <__sfp+0x1c>
 8009cf4:	2104      	movs	r1, #4
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	f7ff ff62 	bl	8009bc0 <__sfmoreglue>
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	6030      	str	r0, [r6, #0]
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d1d5      	bne.n	8009cb0 <__sfp+0x24>
 8009d04:	f7ff ff78 	bl	8009bf8 <__sfp_lock_release>
 8009d08:	230c      	movs	r3, #12
 8009d0a:	603b      	str	r3, [r7, #0]
 8009d0c:	e7ee      	b.n	8009cec <__sfp+0x60>
 8009d0e:	bf00      	nop
 8009d10:	0800b1f0 	.word	0x0800b1f0
 8009d14:	ffff0001 	.word	0xffff0001

08009d18 <_fwalk_reent>:
 8009d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d1c:	4606      	mov	r6, r0
 8009d1e:	4688      	mov	r8, r1
 8009d20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d24:	2700      	movs	r7, #0
 8009d26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d2a:	f1b9 0901 	subs.w	r9, r9, #1
 8009d2e:	d505      	bpl.n	8009d3c <_fwalk_reent+0x24>
 8009d30:	6824      	ldr	r4, [r4, #0]
 8009d32:	2c00      	cmp	r4, #0
 8009d34:	d1f7      	bne.n	8009d26 <_fwalk_reent+0xe>
 8009d36:	4638      	mov	r0, r7
 8009d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d3c:	89ab      	ldrh	r3, [r5, #12]
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d907      	bls.n	8009d52 <_fwalk_reent+0x3a>
 8009d42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d46:	3301      	adds	r3, #1
 8009d48:	d003      	beq.n	8009d52 <_fwalk_reent+0x3a>
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	47c0      	blx	r8
 8009d50:	4307      	orrs	r7, r0
 8009d52:	3568      	adds	r5, #104	; 0x68
 8009d54:	e7e9      	b.n	8009d2a <_fwalk_reent+0x12>
	...

08009d58 <_localeconv_r>:
 8009d58:	4800      	ldr	r0, [pc, #0]	; (8009d5c <_localeconv_r+0x4>)
 8009d5a:	4770      	bx	lr
 8009d5c:	24000268 	.word	0x24000268

08009d60 <__retarget_lock_init_recursive>:
 8009d60:	4770      	bx	lr

08009d62 <__retarget_lock_acquire_recursive>:
 8009d62:	4770      	bx	lr

08009d64 <__retarget_lock_release_recursive>:
 8009d64:	4770      	bx	lr
	...

08009d68 <malloc>:
 8009d68:	4b02      	ldr	r3, [pc, #8]	; (8009d74 <malloc+0xc>)
 8009d6a:	4601      	mov	r1, r0
 8009d6c:	6818      	ldr	r0, [r3, #0]
 8009d6e:	f000 bc09 	b.w	800a584 <_malloc_r>
 8009d72:	bf00      	nop
 8009d74:	24000114 	.word	0x24000114

08009d78 <_Balloc>:
 8009d78:	b570      	push	{r4, r5, r6, lr}
 8009d7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	460d      	mov	r5, r1
 8009d80:	b976      	cbnz	r6, 8009da0 <_Balloc+0x28>
 8009d82:	2010      	movs	r0, #16
 8009d84:	f7ff fff0 	bl	8009d68 <malloc>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	6260      	str	r0, [r4, #36]	; 0x24
 8009d8c:	b920      	cbnz	r0, 8009d98 <_Balloc+0x20>
 8009d8e:	4b18      	ldr	r3, [pc, #96]	; (8009df0 <_Balloc+0x78>)
 8009d90:	4818      	ldr	r0, [pc, #96]	; (8009df4 <_Balloc+0x7c>)
 8009d92:	2166      	movs	r1, #102	; 0x66
 8009d94:	f000 ff32 	bl	800abfc <__assert_func>
 8009d98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d9c:	6006      	str	r6, [r0, #0]
 8009d9e:	60c6      	str	r6, [r0, #12]
 8009da0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009da2:	68f3      	ldr	r3, [r6, #12]
 8009da4:	b183      	cbz	r3, 8009dc8 <_Balloc+0x50>
 8009da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009dae:	b9b8      	cbnz	r0, 8009de0 <_Balloc+0x68>
 8009db0:	2101      	movs	r1, #1
 8009db2:	fa01 f605 	lsl.w	r6, r1, r5
 8009db6:	1d72      	adds	r2, r6, #5
 8009db8:	0092      	lsls	r2, r2, #2
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f000 fb60 	bl	800a480 <_calloc_r>
 8009dc0:	b160      	cbz	r0, 8009ddc <_Balloc+0x64>
 8009dc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009dc6:	e00e      	b.n	8009de6 <_Balloc+0x6e>
 8009dc8:	2221      	movs	r2, #33	; 0x21
 8009dca:	2104      	movs	r1, #4
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f000 fb57 	bl	800a480 <_calloc_r>
 8009dd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dd4:	60f0      	str	r0, [r6, #12]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1e4      	bne.n	8009da6 <_Balloc+0x2e>
 8009ddc:	2000      	movs	r0, #0
 8009dde:	bd70      	pop	{r4, r5, r6, pc}
 8009de0:	6802      	ldr	r2, [r0, #0]
 8009de2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009de6:	2300      	movs	r3, #0
 8009de8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009dec:	e7f7      	b.n	8009dde <_Balloc+0x66>
 8009dee:	bf00      	nop
 8009df0:	0800b235 	.word	0x0800b235
 8009df4:	0800b318 	.word	0x0800b318

08009df8 <_Bfree>:
 8009df8:	b570      	push	{r4, r5, r6, lr}
 8009dfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	460c      	mov	r4, r1
 8009e00:	b976      	cbnz	r6, 8009e20 <_Bfree+0x28>
 8009e02:	2010      	movs	r0, #16
 8009e04:	f7ff ffb0 	bl	8009d68 <malloc>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	6268      	str	r0, [r5, #36]	; 0x24
 8009e0c:	b920      	cbnz	r0, 8009e18 <_Bfree+0x20>
 8009e0e:	4b09      	ldr	r3, [pc, #36]	; (8009e34 <_Bfree+0x3c>)
 8009e10:	4809      	ldr	r0, [pc, #36]	; (8009e38 <_Bfree+0x40>)
 8009e12:	218a      	movs	r1, #138	; 0x8a
 8009e14:	f000 fef2 	bl	800abfc <__assert_func>
 8009e18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e1c:	6006      	str	r6, [r0, #0]
 8009e1e:	60c6      	str	r6, [r0, #12]
 8009e20:	b13c      	cbz	r4, 8009e32 <_Bfree+0x3a>
 8009e22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e24:	6862      	ldr	r2, [r4, #4]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e2c:	6021      	str	r1, [r4, #0]
 8009e2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e32:	bd70      	pop	{r4, r5, r6, pc}
 8009e34:	0800b235 	.word	0x0800b235
 8009e38:	0800b318 	.word	0x0800b318

08009e3c <__multadd>:
 8009e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e40:	690d      	ldr	r5, [r1, #16]
 8009e42:	4607      	mov	r7, r0
 8009e44:	460c      	mov	r4, r1
 8009e46:	461e      	mov	r6, r3
 8009e48:	f101 0c14 	add.w	ip, r1, #20
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	f8dc 3000 	ldr.w	r3, [ip]
 8009e52:	b299      	uxth	r1, r3
 8009e54:	fb02 6101 	mla	r1, r2, r1, r6
 8009e58:	0c1e      	lsrs	r6, r3, #16
 8009e5a:	0c0b      	lsrs	r3, r1, #16
 8009e5c:	fb02 3306 	mla	r3, r2, r6, r3
 8009e60:	b289      	uxth	r1, r1
 8009e62:	3001      	adds	r0, #1
 8009e64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e68:	4285      	cmp	r5, r0
 8009e6a:	f84c 1b04 	str.w	r1, [ip], #4
 8009e6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e72:	dcec      	bgt.n	8009e4e <__multadd+0x12>
 8009e74:	b30e      	cbz	r6, 8009eba <__multadd+0x7e>
 8009e76:	68a3      	ldr	r3, [r4, #8]
 8009e78:	42ab      	cmp	r3, r5
 8009e7a:	dc19      	bgt.n	8009eb0 <__multadd+0x74>
 8009e7c:	6861      	ldr	r1, [r4, #4]
 8009e7e:	4638      	mov	r0, r7
 8009e80:	3101      	adds	r1, #1
 8009e82:	f7ff ff79 	bl	8009d78 <_Balloc>
 8009e86:	4680      	mov	r8, r0
 8009e88:	b928      	cbnz	r0, 8009e96 <__multadd+0x5a>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	4b0c      	ldr	r3, [pc, #48]	; (8009ec0 <__multadd+0x84>)
 8009e8e:	480d      	ldr	r0, [pc, #52]	; (8009ec4 <__multadd+0x88>)
 8009e90:	21b5      	movs	r1, #181	; 0xb5
 8009e92:	f000 feb3 	bl	800abfc <__assert_func>
 8009e96:	6922      	ldr	r2, [r4, #16]
 8009e98:	3202      	adds	r2, #2
 8009e9a:	f104 010c 	add.w	r1, r4, #12
 8009e9e:	0092      	lsls	r2, r2, #2
 8009ea0:	300c      	adds	r0, #12
 8009ea2:	f7fe fbcb 	bl	800863c <memcpy>
 8009ea6:	4621      	mov	r1, r4
 8009ea8:	4638      	mov	r0, r7
 8009eaa:	f7ff ffa5 	bl	8009df8 <_Bfree>
 8009eae:	4644      	mov	r4, r8
 8009eb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009eb4:	3501      	adds	r5, #1
 8009eb6:	615e      	str	r6, [r3, #20]
 8009eb8:	6125      	str	r5, [r4, #16]
 8009eba:	4620      	mov	r0, r4
 8009ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ec0:	0800b2a7 	.word	0x0800b2a7
 8009ec4:	0800b318 	.word	0x0800b318

08009ec8 <__hi0bits>:
 8009ec8:	0c03      	lsrs	r3, r0, #16
 8009eca:	041b      	lsls	r3, r3, #16
 8009ecc:	b9d3      	cbnz	r3, 8009f04 <__hi0bits+0x3c>
 8009ece:	0400      	lsls	r0, r0, #16
 8009ed0:	2310      	movs	r3, #16
 8009ed2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ed6:	bf04      	itt	eq
 8009ed8:	0200      	lsleq	r0, r0, #8
 8009eda:	3308      	addeq	r3, #8
 8009edc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009ee0:	bf04      	itt	eq
 8009ee2:	0100      	lsleq	r0, r0, #4
 8009ee4:	3304      	addeq	r3, #4
 8009ee6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009eea:	bf04      	itt	eq
 8009eec:	0080      	lsleq	r0, r0, #2
 8009eee:	3302      	addeq	r3, #2
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	db05      	blt.n	8009f00 <__hi0bits+0x38>
 8009ef4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ef8:	f103 0301 	add.w	r3, r3, #1
 8009efc:	bf08      	it	eq
 8009efe:	2320      	moveq	r3, #32
 8009f00:	4618      	mov	r0, r3
 8009f02:	4770      	bx	lr
 8009f04:	2300      	movs	r3, #0
 8009f06:	e7e4      	b.n	8009ed2 <__hi0bits+0xa>

08009f08 <__lo0bits>:
 8009f08:	6803      	ldr	r3, [r0, #0]
 8009f0a:	f013 0207 	ands.w	r2, r3, #7
 8009f0e:	4601      	mov	r1, r0
 8009f10:	d00b      	beq.n	8009f2a <__lo0bits+0x22>
 8009f12:	07da      	lsls	r2, r3, #31
 8009f14:	d423      	bmi.n	8009f5e <__lo0bits+0x56>
 8009f16:	0798      	lsls	r0, r3, #30
 8009f18:	bf49      	itett	mi
 8009f1a:	085b      	lsrmi	r3, r3, #1
 8009f1c:	089b      	lsrpl	r3, r3, #2
 8009f1e:	2001      	movmi	r0, #1
 8009f20:	600b      	strmi	r3, [r1, #0]
 8009f22:	bf5c      	itt	pl
 8009f24:	600b      	strpl	r3, [r1, #0]
 8009f26:	2002      	movpl	r0, #2
 8009f28:	4770      	bx	lr
 8009f2a:	b298      	uxth	r0, r3
 8009f2c:	b9a8      	cbnz	r0, 8009f5a <__lo0bits+0x52>
 8009f2e:	0c1b      	lsrs	r3, r3, #16
 8009f30:	2010      	movs	r0, #16
 8009f32:	b2da      	uxtb	r2, r3
 8009f34:	b90a      	cbnz	r2, 8009f3a <__lo0bits+0x32>
 8009f36:	3008      	adds	r0, #8
 8009f38:	0a1b      	lsrs	r3, r3, #8
 8009f3a:	071a      	lsls	r2, r3, #28
 8009f3c:	bf04      	itt	eq
 8009f3e:	091b      	lsreq	r3, r3, #4
 8009f40:	3004      	addeq	r0, #4
 8009f42:	079a      	lsls	r2, r3, #30
 8009f44:	bf04      	itt	eq
 8009f46:	089b      	lsreq	r3, r3, #2
 8009f48:	3002      	addeq	r0, #2
 8009f4a:	07da      	lsls	r2, r3, #31
 8009f4c:	d403      	bmi.n	8009f56 <__lo0bits+0x4e>
 8009f4e:	085b      	lsrs	r3, r3, #1
 8009f50:	f100 0001 	add.w	r0, r0, #1
 8009f54:	d005      	beq.n	8009f62 <__lo0bits+0x5a>
 8009f56:	600b      	str	r3, [r1, #0]
 8009f58:	4770      	bx	lr
 8009f5a:	4610      	mov	r0, r2
 8009f5c:	e7e9      	b.n	8009f32 <__lo0bits+0x2a>
 8009f5e:	2000      	movs	r0, #0
 8009f60:	4770      	bx	lr
 8009f62:	2020      	movs	r0, #32
 8009f64:	4770      	bx	lr
	...

08009f68 <__i2b>:
 8009f68:	b510      	push	{r4, lr}
 8009f6a:	460c      	mov	r4, r1
 8009f6c:	2101      	movs	r1, #1
 8009f6e:	f7ff ff03 	bl	8009d78 <_Balloc>
 8009f72:	4602      	mov	r2, r0
 8009f74:	b928      	cbnz	r0, 8009f82 <__i2b+0x1a>
 8009f76:	4b05      	ldr	r3, [pc, #20]	; (8009f8c <__i2b+0x24>)
 8009f78:	4805      	ldr	r0, [pc, #20]	; (8009f90 <__i2b+0x28>)
 8009f7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009f7e:	f000 fe3d 	bl	800abfc <__assert_func>
 8009f82:	2301      	movs	r3, #1
 8009f84:	6144      	str	r4, [r0, #20]
 8009f86:	6103      	str	r3, [r0, #16]
 8009f88:	bd10      	pop	{r4, pc}
 8009f8a:	bf00      	nop
 8009f8c:	0800b2a7 	.word	0x0800b2a7
 8009f90:	0800b318 	.word	0x0800b318

08009f94 <__multiply>:
 8009f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f98:	4691      	mov	r9, r2
 8009f9a:	690a      	ldr	r2, [r1, #16]
 8009f9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	bfb8      	it	lt
 8009fa4:	460b      	movlt	r3, r1
 8009fa6:	460c      	mov	r4, r1
 8009fa8:	bfbc      	itt	lt
 8009faa:	464c      	movlt	r4, r9
 8009fac:	4699      	movlt	r9, r3
 8009fae:	6927      	ldr	r7, [r4, #16]
 8009fb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009fb4:	68a3      	ldr	r3, [r4, #8]
 8009fb6:	6861      	ldr	r1, [r4, #4]
 8009fb8:	eb07 060a 	add.w	r6, r7, sl
 8009fbc:	42b3      	cmp	r3, r6
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	bfb8      	it	lt
 8009fc2:	3101      	addlt	r1, #1
 8009fc4:	f7ff fed8 	bl	8009d78 <_Balloc>
 8009fc8:	b930      	cbnz	r0, 8009fd8 <__multiply+0x44>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	4b44      	ldr	r3, [pc, #272]	; (800a0e0 <__multiply+0x14c>)
 8009fce:	4845      	ldr	r0, [pc, #276]	; (800a0e4 <__multiply+0x150>)
 8009fd0:	f240 115d 	movw	r1, #349	; 0x15d
 8009fd4:	f000 fe12 	bl	800abfc <__assert_func>
 8009fd8:	f100 0514 	add.w	r5, r0, #20
 8009fdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009fe0:	462b      	mov	r3, r5
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	4543      	cmp	r3, r8
 8009fe6:	d321      	bcc.n	800a02c <__multiply+0x98>
 8009fe8:	f104 0314 	add.w	r3, r4, #20
 8009fec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ff0:	f109 0314 	add.w	r3, r9, #20
 8009ff4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ff8:	9202      	str	r2, [sp, #8]
 8009ffa:	1b3a      	subs	r2, r7, r4
 8009ffc:	3a15      	subs	r2, #21
 8009ffe:	f022 0203 	bic.w	r2, r2, #3
 800a002:	3204      	adds	r2, #4
 800a004:	f104 0115 	add.w	r1, r4, #21
 800a008:	428f      	cmp	r7, r1
 800a00a:	bf38      	it	cc
 800a00c:	2204      	movcc	r2, #4
 800a00e:	9201      	str	r2, [sp, #4]
 800a010:	9a02      	ldr	r2, [sp, #8]
 800a012:	9303      	str	r3, [sp, #12]
 800a014:	429a      	cmp	r2, r3
 800a016:	d80c      	bhi.n	800a032 <__multiply+0x9e>
 800a018:	2e00      	cmp	r6, #0
 800a01a:	dd03      	ble.n	800a024 <__multiply+0x90>
 800a01c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a020:	2b00      	cmp	r3, #0
 800a022:	d05a      	beq.n	800a0da <__multiply+0x146>
 800a024:	6106      	str	r6, [r0, #16]
 800a026:	b005      	add	sp, #20
 800a028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02c:	f843 2b04 	str.w	r2, [r3], #4
 800a030:	e7d8      	b.n	8009fe4 <__multiply+0x50>
 800a032:	f8b3 a000 	ldrh.w	sl, [r3]
 800a036:	f1ba 0f00 	cmp.w	sl, #0
 800a03a:	d024      	beq.n	800a086 <__multiply+0xf2>
 800a03c:	f104 0e14 	add.w	lr, r4, #20
 800a040:	46a9      	mov	r9, r5
 800a042:	f04f 0c00 	mov.w	ip, #0
 800a046:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a04a:	f8d9 1000 	ldr.w	r1, [r9]
 800a04e:	fa1f fb82 	uxth.w	fp, r2
 800a052:	b289      	uxth	r1, r1
 800a054:	fb0a 110b 	mla	r1, sl, fp, r1
 800a058:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a05c:	f8d9 2000 	ldr.w	r2, [r9]
 800a060:	4461      	add	r1, ip
 800a062:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a066:	fb0a c20b 	mla	r2, sl, fp, ip
 800a06a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a06e:	b289      	uxth	r1, r1
 800a070:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a074:	4577      	cmp	r7, lr
 800a076:	f849 1b04 	str.w	r1, [r9], #4
 800a07a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a07e:	d8e2      	bhi.n	800a046 <__multiply+0xb2>
 800a080:	9a01      	ldr	r2, [sp, #4]
 800a082:	f845 c002 	str.w	ip, [r5, r2]
 800a086:	9a03      	ldr	r2, [sp, #12]
 800a088:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a08c:	3304      	adds	r3, #4
 800a08e:	f1b9 0f00 	cmp.w	r9, #0
 800a092:	d020      	beq.n	800a0d6 <__multiply+0x142>
 800a094:	6829      	ldr	r1, [r5, #0]
 800a096:	f104 0c14 	add.w	ip, r4, #20
 800a09a:	46ae      	mov	lr, r5
 800a09c:	f04f 0a00 	mov.w	sl, #0
 800a0a0:	f8bc b000 	ldrh.w	fp, [ip]
 800a0a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a0a8:	fb09 220b 	mla	r2, r9, fp, r2
 800a0ac:	4492      	add	sl, r2
 800a0ae:	b289      	uxth	r1, r1
 800a0b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a0b4:	f84e 1b04 	str.w	r1, [lr], #4
 800a0b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a0bc:	f8be 1000 	ldrh.w	r1, [lr]
 800a0c0:	0c12      	lsrs	r2, r2, #16
 800a0c2:	fb09 1102 	mla	r1, r9, r2, r1
 800a0c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a0ca:	4567      	cmp	r7, ip
 800a0cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a0d0:	d8e6      	bhi.n	800a0a0 <__multiply+0x10c>
 800a0d2:	9a01      	ldr	r2, [sp, #4]
 800a0d4:	50a9      	str	r1, [r5, r2]
 800a0d6:	3504      	adds	r5, #4
 800a0d8:	e79a      	b.n	800a010 <__multiply+0x7c>
 800a0da:	3e01      	subs	r6, #1
 800a0dc:	e79c      	b.n	800a018 <__multiply+0x84>
 800a0de:	bf00      	nop
 800a0e0:	0800b2a7 	.word	0x0800b2a7
 800a0e4:	0800b318 	.word	0x0800b318

0800a0e8 <__pow5mult>:
 800a0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0ec:	4615      	mov	r5, r2
 800a0ee:	f012 0203 	ands.w	r2, r2, #3
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	460f      	mov	r7, r1
 800a0f6:	d007      	beq.n	800a108 <__pow5mult+0x20>
 800a0f8:	4c25      	ldr	r4, [pc, #148]	; (800a190 <__pow5mult+0xa8>)
 800a0fa:	3a01      	subs	r2, #1
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a102:	f7ff fe9b 	bl	8009e3c <__multadd>
 800a106:	4607      	mov	r7, r0
 800a108:	10ad      	asrs	r5, r5, #2
 800a10a:	d03d      	beq.n	800a188 <__pow5mult+0xa0>
 800a10c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a10e:	b97c      	cbnz	r4, 800a130 <__pow5mult+0x48>
 800a110:	2010      	movs	r0, #16
 800a112:	f7ff fe29 	bl	8009d68 <malloc>
 800a116:	4602      	mov	r2, r0
 800a118:	6270      	str	r0, [r6, #36]	; 0x24
 800a11a:	b928      	cbnz	r0, 800a128 <__pow5mult+0x40>
 800a11c:	4b1d      	ldr	r3, [pc, #116]	; (800a194 <__pow5mult+0xac>)
 800a11e:	481e      	ldr	r0, [pc, #120]	; (800a198 <__pow5mult+0xb0>)
 800a120:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a124:	f000 fd6a 	bl	800abfc <__assert_func>
 800a128:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a12c:	6004      	str	r4, [r0, #0]
 800a12e:	60c4      	str	r4, [r0, #12]
 800a130:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a134:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a138:	b94c      	cbnz	r4, 800a14e <__pow5mult+0x66>
 800a13a:	f240 2171 	movw	r1, #625	; 0x271
 800a13e:	4630      	mov	r0, r6
 800a140:	f7ff ff12 	bl	8009f68 <__i2b>
 800a144:	2300      	movs	r3, #0
 800a146:	f8c8 0008 	str.w	r0, [r8, #8]
 800a14a:	4604      	mov	r4, r0
 800a14c:	6003      	str	r3, [r0, #0]
 800a14e:	f04f 0900 	mov.w	r9, #0
 800a152:	07eb      	lsls	r3, r5, #31
 800a154:	d50a      	bpl.n	800a16c <__pow5mult+0x84>
 800a156:	4639      	mov	r1, r7
 800a158:	4622      	mov	r2, r4
 800a15a:	4630      	mov	r0, r6
 800a15c:	f7ff ff1a 	bl	8009f94 <__multiply>
 800a160:	4639      	mov	r1, r7
 800a162:	4680      	mov	r8, r0
 800a164:	4630      	mov	r0, r6
 800a166:	f7ff fe47 	bl	8009df8 <_Bfree>
 800a16a:	4647      	mov	r7, r8
 800a16c:	106d      	asrs	r5, r5, #1
 800a16e:	d00b      	beq.n	800a188 <__pow5mult+0xa0>
 800a170:	6820      	ldr	r0, [r4, #0]
 800a172:	b938      	cbnz	r0, 800a184 <__pow5mult+0x9c>
 800a174:	4622      	mov	r2, r4
 800a176:	4621      	mov	r1, r4
 800a178:	4630      	mov	r0, r6
 800a17a:	f7ff ff0b 	bl	8009f94 <__multiply>
 800a17e:	6020      	str	r0, [r4, #0]
 800a180:	f8c0 9000 	str.w	r9, [r0]
 800a184:	4604      	mov	r4, r0
 800a186:	e7e4      	b.n	800a152 <__pow5mult+0x6a>
 800a188:	4638      	mov	r0, r7
 800a18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a18e:	bf00      	nop
 800a190:	0800b468 	.word	0x0800b468
 800a194:	0800b235 	.word	0x0800b235
 800a198:	0800b318 	.word	0x0800b318

0800a19c <__lshift>:
 800a19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	6849      	ldr	r1, [r1, #4]
 800a1a4:	6923      	ldr	r3, [r4, #16]
 800a1a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1aa:	68a3      	ldr	r3, [r4, #8]
 800a1ac:	4607      	mov	r7, r0
 800a1ae:	4691      	mov	r9, r2
 800a1b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1b4:	f108 0601 	add.w	r6, r8, #1
 800a1b8:	42b3      	cmp	r3, r6
 800a1ba:	db0b      	blt.n	800a1d4 <__lshift+0x38>
 800a1bc:	4638      	mov	r0, r7
 800a1be:	f7ff fddb 	bl	8009d78 <_Balloc>
 800a1c2:	4605      	mov	r5, r0
 800a1c4:	b948      	cbnz	r0, 800a1da <__lshift+0x3e>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	4b2a      	ldr	r3, [pc, #168]	; (800a274 <__lshift+0xd8>)
 800a1ca:	482b      	ldr	r0, [pc, #172]	; (800a278 <__lshift+0xdc>)
 800a1cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a1d0:	f000 fd14 	bl	800abfc <__assert_func>
 800a1d4:	3101      	adds	r1, #1
 800a1d6:	005b      	lsls	r3, r3, #1
 800a1d8:	e7ee      	b.n	800a1b8 <__lshift+0x1c>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f100 0114 	add.w	r1, r0, #20
 800a1e0:	f100 0210 	add.w	r2, r0, #16
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	4553      	cmp	r3, sl
 800a1e8:	db37      	blt.n	800a25a <__lshift+0xbe>
 800a1ea:	6920      	ldr	r0, [r4, #16]
 800a1ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1f0:	f104 0314 	add.w	r3, r4, #20
 800a1f4:	f019 091f 	ands.w	r9, r9, #31
 800a1f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a200:	d02f      	beq.n	800a262 <__lshift+0xc6>
 800a202:	f1c9 0e20 	rsb	lr, r9, #32
 800a206:	468a      	mov	sl, r1
 800a208:	f04f 0c00 	mov.w	ip, #0
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	fa02 f209 	lsl.w	r2, r2, r9
 800a212:	ea42 020c 	orr.w	r2, r2, ip
 800a216:	f84a 2b04 	str.w	r2, [sl], #4
 800a21a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a21e:	4298      	cmp	r0, r3
 800a220:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a224:	d8f2      	bhi.n	800a20c <__lshift+0x70>
 800a226:	1b03      	subs	r3, r0, r4
 800a228:	3b15      	subs	r3, #21
 800a22a:	f023 0303 	bic.w	r3, r3, #3
 800a22e:	3304      	adds	r3, #4
 800a230:	f104 0215 	add.w	r2, r4, #21
 800a234:	4290      	cmp	r0, r2
 800a236:	bf38      	it	cc
 800a238:	2304      	movcc	r3, #4
 800a23a:	f841 c003 	str.w	ip, [r1, r3]
 800a23e:	f1bc 0f00 	cmp.w	ip, #0
 800a242:	d001      	beq.n	800a248 <__lshift+0xac>
 800a244:	f108 0602 	add.w	r6, r8, #2
 800a248:	3e01      	subs	r6, #1
 800a24a:	4638      	mov	r0, r7
 800a24c:	612e      	str	r6, [r5, #16]
 800a24e:	4621      	mov	r1, r4
 800a250:	f7ff fdd2 	bl	8009df8 <_Bfree>
 800a254:	4628      	mov	r0, r5
 800a256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a25a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a25e:	3301      	adds	r3, #1
 800a260:	e7c1      	b.n	800a1e6 <__lshift+0x4a>
 800a262:	3904      	subs	r1, #4
 800a264:	f853 2b04 	ldr.w	r2, [r3], #4
 800a268:	f841 2f04 	str.w	r2, [r1, #4]!
 800a26c:	4298      	cmp	r0, r3
 800a26e:	d8f9      	bhi.n	800a264 <__lshift+0xc8>
 800a270:	e7ea      	b.n	800a248 <__lshift+0xac>
 800a272:	bf00      	nop
 800a274:	0800b2a7 	.word	0x0800b2a7
 800a278:	0800b318 	.word	0x0800b318

0800a27c <__mcmp>:
 800a27c:	b530      	push	{r4, r5, lr}
 800a27e:	6902      	ldr	r2, [r0, #16]
 800a280:	690c      	ldr	r4, [r1, #16]
 800a282:	1b12      	subs	r2, r2, r4
 800a284:	d10e      	bne.n	800a2a4 <__mcmp+0x28>
 800a286:	f100 0314 	add.w	r3, r0, #20
 800a28a:	3114      	adds	r1, #20
 800a28c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a290:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a294:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a298:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a29c:	42a5      	cmp	r5, r4
 800a29e:	d003      	beq.n	800a2a8 <__mcmp+0x2c>
 800a2a0:	d305      	bcc.n	800a2ae <__mcmp+0x32>
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	4610      	mov	r0, r2
 800a2a6:	bd30      	pop	{r4, r5, pc}
 800a2a8:	4283      	cmp	r3, r0
 800a2aa:	d3f3      	bcc.n	800a294 <__mcmp+0x18>
 800a2ac:	e7fa      	b.n	800a2a4 <__mcmp+0x28>
 800a2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b2:	e7f7      	b.n	800a2a4 <__mcmp+0x28>

0800a2b4 <__mdiff>:
 800a2b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b8:	460c      	mov	r4, r1
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	4611      	mov	r1, r2
 800a2be:	4620      	mov	r0, r4
 800a2c0:	4690      	mov	r8, r2
 800a2c2:	f7ff ffdb 	bl	800a27c <__mcmp>
 800a2c6:	1e05      	subs	r5, r0, #0
 800a2c8:	d110      	bne.n	800a2ec <__mdiff+0x38>
 800a2ca:	4629      	mov	r1, r5
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	f7ff fd53 	bl	8009d78 <_Balloc>
 800a2d2:	b930      	cbnz	r0, 800a2e2 <__mdiff+0x2e>
 800a2d4:	4b3a      	ldr	r3, [pc, #232]	; (800a3c0 <__mdiff+0x10c>)
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	f240 2132 	movw	r1, #562	; 0x232
 800a2dc:	4839      	ldr	r0, [pc, #228]	; (800a3c4 <__mdiff+0x110>)
 800a2de:	f000 fc8d 	bl	800abfc <__assert_func>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ec:	bfa4      	itt	ge
 800a2ee:	4643      	movge	r3, r8
 800a2f0:	46a0      	movge	r8, r4
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a2f8:	bfa6      	itte	ge
 800a2fa:	461c      	movge	r4, r3
 800a2fc:	2500      	movge	r5, #0
 800a2fe:	2501      	movlt	r5, #1
 800a300:	f7ff fd3a 	bl	8009d78 <_Balloc>
 800a304:	b920      	cbnz	r0, 800a310 <__mdiff+0x5c>
 800a306:	4b2e      	ldr	r3, [pc, #184]	; (800a3c0 <__mdiff+0x10c>)
 800a308:	4602      	mov	r2, r0
 800a30a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a30e:	e7e5      	b.n	800a2dc <__mdiff+0x28>
 800a310:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a314:	6926      	ldr	r6, [r4, #16]
 800a316:	60c5      	str	r5, [r0, #12]
 800a318:	f104 0914 	add.w	r9, r4, #20
 800a31c:	f108 0514 	add.w	r5, r8, #20
 800a320:	f100 0e14 	add.w	lr, r0, #20
 800a324:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a328:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a32c:	f108 0210 	add.w	r2, r8, #16
 800a330:	46f2      	mov	sl, lr
 800a332:	2100      	movs	r1, #0
 800a334:	f859 3b04 	ldr.w	r3, [r9], #4
 800a338:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a33c:	fa1f f883 	uxth.w	r8, r3
 800a340:	fa11 f18b 	uxtah	r1, r1, fp
 800a344:	0c1b      	lsrs	r3, r3, #16
 800a346:	eba1 0808 	sub.w	r8, r1, r8
 800a34a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a34e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a352:	fa1f f888 	uxth.w	r8, r8
 800a356:	1419      	asrs	r1, r3, #16
 800a358:	454e      	cmp	r6, r9
 800a35a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a35e:	f84a 3b04 	str.w	r3, [sl], #4
 800a362:	d8e7      	bhi.n	800a334 <__mdiff+0x80>
 800a364:	1b33      	subs	r3, r6, r4
 800a366:	3b15      	subs	r3, #21
 800a368:	f023 0303 	bic.w	r3, r3, #3
 800a36c:	3304      	adds	r3, #4
 800a36e:	3415      	adds	r4, #21
 800a370:	42a6      	cmp	r6, r4
 800a372:	bf38      	it	cc
 800a374:	2304      	movcc	r3, #4
 800a376:	441d      	add	r5, r3
 800a378:	4473      	add	r3, lr
 800a37a:	469e      	mov	lr, r3
 800a37c:	462e      	mov	r6, r5
 800a37e:	4566      	cmp	r6, ip
 800a380:	d30e      	bcc.n	800a3a0 <__mdiff+0xec>
 800a382:	f10c 0203 	add.w	r2, ip, #3
 800a386:	1b52      	subs	r2, r2, r5
 800a388:	f022 0203 	bic.w	r2, r2, #3
 800a38c:	3d03      	subs	r5, #3
 800a38e:	45ac      	cmp	ip, r5
 800a390:	bf38      	it	cc
 800a392:	2200      	movcc	r2, #0
 800a394:	441a      	add	r2, r3
 800a396:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a39a:	b17b      	cbz	r3, 800a3bc <__mdiff+0x108>
 800a39c:	6107      	str	r7, [r0, #16]
 800a39e:	e7a3      	b.n	800a2e8 <__mdiff+0x34>
 800a3a0:	f856 8b04 	ldr.w	r8, [r6], #4
 800a3a4:	fa11 f288 	uxtah	r2, r1, r8
 800a3a8:	1414      	asrs	r4, r2, #16
 800a3aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a3ae:	b292      	uxth	r2, r2
 800a3b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a3b4:	f84e 2b04 	str.w	r2, [lr], #4
 800a3b8:	1421      	asrs	r1, r4, #16
 800a3ba:	e7e0      	b.n	800a37e <__mdiff+0xca>
 800a3bc:	3f01      	subs	r7, #1
 800a3be:	e7ea      	b.n	800a396 <__mdiff+0xe2>
 800a3c0:	0800b2a7 	.word	0x0800b2a7
 800a3c4:	0800b318 	.word	0x0800b318

0800a3c8 <__d2b>:
 800a3c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a3cc:	4689      	mov	r9, r1
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	ec57 6b10 	vmov	r6, r7, d0
 800a3d4:	4690      	mov	r8, r2
 800a3d6:	f7ff fccf 	bl	8009d78 <_Balloc>
 800a3da:	4604      	mov	r4, r0
 800a3dc:	b930      	cbnz	r0, 800a3ec <__d2b+0x24>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	4b25      	ldr	r3, [pc, #148]	; (800a478 <__d2b+0xb0>)
 800a3e2:	4826      	ldr	r0, [pc, #152]	; (800a47c <__d2b+0xb4>)
 800a3e4:	f240 310a 	movw	r1, #778	; 0x30a
 800a3e8:	f000 fc08 	bl	800abfc <__assert_func>
 800a3ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a3f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a3f4:	bb35      	cbnz	r5, 800a444 <__d2b+0x7c>
 800a3f6:	2e00      	cmp	r6, #0
 800a3f8:	9301      	str	r3, [sp, #4]
 800a3fa:	d028      	beq.n	800a44e <__d2b+0x86>
 800a3fc:	4668      	mov	r0, sp
 800a3fe:	9600      	str	r6, [sp, #0]
 800a400:	f7ff fd82 	bl	8009f08 <__lo0bits>
 800a404:	9900      	ldr	r1, [sp, #0]
 800a406:	b300      	cbz	r0, 800a44a <__d2b+0x82>
 800a408:	9a01      	ldr	r2, [sp, #4]
 800a40a:	f1c0 0320 	rsb	r3, r0, #32
 800a40e:	fa02 f303 	lsl.w	r3, r2, r3
 800a412:	430b      	orrs	r3, r1
 800a414:	40c2      	lsrs	r2, r0
 800a416:	6163      	str	r3, [r4, #20]
 800a418:	9201      	str	r2, [sp, #4]
 800a41a:	9b01      	ldr	r3, [sp, #4]
 800a41c:	61a3      	str	r3, [r4, #24]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	bf14      	ite	ne
 800a422:	2202      	movne	r2, #2
 800a424:	2201      	moveq	r2, #1
 800a426:	6122      	str	r2, [r4, #16]
 800a428:	b1d5      	cbz	r5, 800a460 <__d2b+0x98>
 800a42a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a42e:	4405      	add	r5, r0
 800a430:	f8c9 5000 	str.w	r5, [r9]
 800a434:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a438:	f8c8 0000 	str.w	r0, [r8]
 800a43c:	4620      	mov	r0, r4
 800a43e:	b003      	add	sp, #12
 800a440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a448:	e7d5      	b.n	800a3f6 <__d2b+0x2e>
 800a44a:	6161      	str	r1, [r4, #20]
 800a44c:	e7e5      	b.n	800a41a <__d2b+0x52>
 800a44e:	a801      	add	r0, sp, #4
 800a450:	f7ff fd5a 	bl	8009f08 <__lo0bits>
 800a454:	9b01      	ldr	r3, [sp, #4]
 800a456:	6163      	str	r3, [r4, #20]
 800a458:	2201      	movs	r2, #1
 800a45a:	6122      	str	r2, [r4, #16]
 800a45c:	3020      	adds	r0, #32
 800a45e:	e7e3      	b.n	800a428 <__d2b+0x60>
 800a460:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a464:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a468:	f8c9 0000 	str.w	r0, [r9]
 800a46c:	6918      	ldr	r0, [r3, #16]
 800a46e:	f7ff fd2b 	bl	8009ec8 <__hi0bits>
 800a472:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a476:	e7df      	b.n	800a438 <__d2b+0x70>
 800a478:	0800b2a7 	.word	0x0800b2a7
 800a47c:	0800b318 	.word	0x0800b318

0800a480 <_calloc_r>:
 800a480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a482:	fba1 2402 	umull	r2, r4, r1, r2
 800a486:	b94c      	cbnz	r4, 800a49c <_calloc_r+0x1c>
 800a488:	4611      	mov	r1, r2
 800a48a:	9201      	str	r2, [sp, #4]
 800a48c:	f000 f87a 	bl	800a584 <_malloc_r>
 800a490:	9a01      	ldr	r2, [sp, #4]
 800a492:	4605      	mov	r5, r0
 800a494:	b930      	cbnz	r0, 800a4a4 <_calloc_r+0x24>
 800a496:	4628      	mov	r0, r5
 800a498:	b003      	add	sp, #12
 800a49a:	bd30      	pop	{r4, r5, pc}
 800a49c:	220c      	movs	r2, #12
 800a49e:	6002      	str	r2, [r0, #0]
 800a4a0:	2500      	movs	r5, #0
 800a4a2:	e7f8      	b.n	800a496 <_calloc_r+0x16>
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	f7fe f8d7 	bl	8008658 <memset>
 800a4aa:	e7f4      	b.n	800a496 <_calloc_r+0x16>

0800a4ac <_free_r>:
 800a4ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4ae:	2900      	cmp	r1, #0
 800a4b0:	d044      	beq.n	800a53c <_free_r+0x90>
 800a4b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4b6:	9001      	str	r0, [sp, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f1a1 0404 	sub.w	r4, r1, #4
 800a4be:	bfb8      	it	lt
 800a4c0:	18e4      	addlt	r4, r4, r3
 800a4c2:	f000 fd27 	bl	800af14 <__malloc_lock>
 800a4c6:	4a1e      	ldr	r2, [pc, #120]	; (800a540 <_free_r+0x94>)
 800a4c8:	9801      	ldr	r0, [sp, #4]
 800a4ca:	6813      	ldr	r3, [r2, #0]
 800a4cc:	b933      	cbnz	r3, 800a4dc <_free_r+0x30>
 800a4ce:	6063      	str	r3, [r4, #4]
 800a4d0:	6014      	str	r4, [r2, #0]
 800a4d2:	b003      	add	sp, #12
 800a4d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4d8:	f000 bd22 	b.w	800af20 <__malloc_unlock>
 800a4dc:	42a3      	cmp	r3, r4
 800a4de:	d908      	bls.n	800a4f2 <_free_r+0x46>
 800a4e0:	6825      	ldr	r5, [r4, #0]
 800a4e2:	1961      	adds	r1, r4, r5
 800a4e4:	428b      	cmp	r3, r1
 800a4e6:	bf01      	itttt	eq
 800a4e8:	6819      	ldreq	r1, [r3, #0]
 800a4ea:	685b      	ldreq	r3, [r3, #4]
 800a4ec:	1949      	addeq	r1, r1, r5
 800a4ee:	6021      	streq	r1, [r4, #0]
 800a4f0:	e7ed      	b.n	800a4ce <_free_r+0x22>
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	b10b      	cbz	r3, 800a4fc <_free_r+0x50>
 800a4f8:	42a3      	cmp	r3, r4
 800a4fa:	d9fa      	bls.n	800a4f2 <_free_r+0x46>
 800a4fc:	6811      	ldr	r1, [r2, #0]
 800a4fe:	1855      	adds	r5, r2, r1
 800a500:	42a5      	cmp	r5, r4
 800a502:	d10b      	bne.n	800a51c <_free_r+0x70>
 800a504:	6824      	ldr	r4, [r4, #0]
 800a506:	4421      	add	r1, r4
 800a508:	1854      	adds	r4, r2, r1
 800a50a:	42a3      	cmp	r3, r4
 800a50c:	6011      	str	r1, [r2, #0]
 800a50e:	d1e0      	bne.n	800a4d2 <_free_r+0x26>
 800a510:	681c      	ldr	r4, [r3, #0]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	6053      	str	r3, [r2, #4]
 800a516:	4421      	add	r1, r4
 800a518:	6011      	str	r1, [r2, #0]
 800a51a:	e7da      	b.n	800a4d2 <_free_r+0x26>
 800a51c:	d902      	bls.n	800a524 <_free_r+0x78>
 800a51e:	230c      	movs	r3, #12
 800a520:	6003      	str	r3, [r0, #0]
 800a522:	e7d6      	b.n	800a4d2 <_free_r+0x26>
 800a524:	6825      	ldr	r5, [r4, #0]
 800a526:	1961      	adds	r1, r4, r5
 800a528:	428b      	cmp	r3, r1
 800a52a:	bf04      	itt	eq
 800a52c:	6819      	ldreq	r1, [r3, #0]
 800a52e:	685b      	ldreq	r3, [r3, #4]
 800a530:	6063      	str	r3, [r4, #4]
 800a532:	bf04      	itt	eq
 800a534:	1949      	addeq	r1, r1, r5
 800a536:	6021      	streq	r1, [r4, #0]
 800a538:	6054      	str	r4, [r2, #4]
 800a53a:	e7ca      	b.n	800a4d2 <_free_r+0x26>
 800a53c:	b003      	add	sp, #12
 800a53e:	bd30      	pop	{r4, r5, pc}
 800a540:	24000538 	.word	0x24000538

0800a544 <sbrk_aligned>:
 800a544:	b570      	push	{r4, r5, r6, lr}
 800a546:	4e0e      	ldr	r6, [pc, #56]	; (800a580 <sbrk_aligned+0x3c>)
 800a548:	460c      	mov	r4, r1
 800a54a:	6831      	ldr	r1, [r6, #0]
 800a54c:	4605      	mov	r5, r0
 800a54e:	b911      	cbnz	r1, 800a556 <sbrk_aligned+0x12>
 800a550:	f000 fa2e 	bl	800a9b0 <_sbrk_r>
 800a554:	6030      	str	r0, [r6, #0]
 800a556:	4621      	mov	r1, r4
 800a558:	4628      	mov	r0, r5
 800a55a:	f000 fa29 	bl	800a9b0 <_sbrk_r>
 800a55e:	1c43      	adds	r3, r0, #1
 800a560:	d00a      	beq.n	800a578 <sbrk_aligned+0x34>
 800a562:	1cc4      	adds	r4, r0, #3
 800a564:	f024 0403 	bic.w	r4, r4, #3
 800a568:	42a0      	cmp	r0, r4
 800a56a:	d007      	beq.n	800a57c <sbrk_aligned+0x38>
 800a56c:	1a21      	subs	r1, r4, r0
 800a56e:	4628      	mov	r0, r5
 800a570:	f000 fa1e 	bl	800a9b0 <_sbrk_r>
 800a574:	3001      	adds	r0, #1
 800a576:	d101      	bne.n	800a57c <sbrk_aligned+0x38>
 800a578:	f04f 34ff 	mov.w	r4, #4294967295
 800a57c:	4620      	mov	r0, r4
 800a57e:	bd70      	pop	{r4, r5, r6, pc}
 800a580:	2400053c 	.word	0x2400053c

0800a584 <_malloc_r>:
 800a584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a588:	1ccd      	adds	r5, r1, #3
 800a58a:	f025 0503 	bic.w	r5, r5, #3
 800a58e:	3508      	adds	r5, #8
 800a590:	2d0c      	cmp	r5, #12
 800a592:	bf38      	it	cc
 800a594:	250c      	movcc	r5, #12
 800a596:	2d00      	cmp	r5, #0
 800a598:	4607      	mov	r7, r0
 800a59a:	db01      	blt.n	800a5a0 <_malloc_r+0x1c>
 800a59c:	42a9      	cmp	r1, r5
 800a59e:	d905      	bls.n	800a5ac <_malloc_r+0x28>
 800a5a0:	230c      	movs	r3, #12
 800a5a2:	603b      	str	r3, [r7, #0]
 800a5a4:	2600      	movs	r6, #0
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ac:	4e2e      	ldr	r6, [pc, #184]	; (800a668 <_malloc_r+0xe4>)
 800a5ae:	f000 fcb1 	bl	800af14 <__malloc_lock>
 800a5b2:	6833      	ldr	r3, [r6, #0]
 800a5b4:	461c      	mov	r4, r3
 800a5b6:	bb34      	cbnz	r4, 800a606 <_malloc_r+0x82>
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	f7ff ffc2 	bl	800a544 <sbrk_aligned>
 800a5c0:	1c43      	adds	r3, r0, #1
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	d14d      	bne.n	800a662 <_malloc_r+0xde>
 800a5c6:	6834      	ldr	r4, [r6, #0]
 800a5c8:	4626      	mov	r6, r4
 800a5ca:	2e00      	cmp	r6, #0
 800a5cc:	d140      	bne.n	800a650 <_malloc_r+0xcc>
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	4631      	mov	r1, r6
 800a5d2:	4638      	mov	r0, r7
 800a5d4:	eb04 0803 	add.w	r8, r4, r3
 800a5d8:	f000 f9ea 	bl	800a9b0 <_sbrk_r>
 800a5dc:	4580      	cmp	r8, r0
 800a5de:	d13a      	bne.n	800a656 <_malloc_r+0xd2>
 800a5e0:	6821      	ldr	r1, [r4, #0]
 800a5e2:	3503      	adds	r5, #3
 800a5e4:	1a6d      	subs	r5, r5, r1
 800a5e6:	f025 0503 	bic.w	r5, r5, #3
 800a5ea:	3508      	adds	r5, #8
 800a5ec:	2d0c      	cmp	r5, #12
 800a5ee:	bf38      	it	cc
 800a5f0:	250c      	movcc	r5, #12
 800a5f2:	4629      	mov	r1, r5
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	f7ff ffa5 	bl	800a544 <sbrk_aligned>
 800a5fa:	3001      	adds	r0, #1
 800a5fc:	d02b      	beq.n	800a656 <_malloc_r+0xd2>
 800a5fe:	6823      	ldr	r3, [r4, #0]
 800a600:	442b      	add	r3, r5
 800a602:	6023      	str	r3, [r4, #0]
 800a604:	e00e      	b.n	800a624 <_malloc_r+0xa0>
 800a606:	6822      	ldr	r2, [r4, #0]
 800a608:	1b52      	subs	r2, r2, r5
 800a60a:	d41e      	bmi.n	800a64a <_malloc_r+0xc6>
 800a60c:	2a0b      	cmp	r2, #11
 800a60e:	d916      	bls.n	800a63e <_malloc_r+0xba>
 800a610:	1961      	adds	r1, r4, r5
 800a612:	42a3      	cmp	r3, r4
 800a614:	6025      	str	r5, [r4, #0]
 800a616:	bf18      	it	ne
 800a618:	6059      	strne	r1, [r3, #4]
 800a61a:	6863      	ldr	r3, [r4, #4]
 800a61c:	bf08      	it	eq
 800a61e:	6031      	streq	r1, [r6, #0]
 800a620:	5162      	str	r2, [r4, r5]
 800a622:	604b      	str	r3, [r1, #4]
 800a624:	4638      	mov	r0, r7
 800a626:	f104 060b 	add.w	r6, r4, #11
 800a62a:	f000 fc79 	bl	800af20 <__malloc_unlock>
 800a62e:	f026 0607 	bic.w	r6, r6, #7
 800a632:	1d23      	adds	r3, r4, #4
 800a634:	1af2      	subs	r2, r6, r3
 800a636:	d0b6      	beq.n	800a5a6 <_malloc_r+0x22>
 800a638:	1b9b      	subs	r3, r3, r6
 800a63a:	50a3      	str	r3, [r4, r2]
 800a63c:	e7b3      	b.n	800a5a6 <_malloc_r+0x22>
 800a63e:	6862      	ldr	r2, [r4, #4]
 800a640:	42a3      	cmp	r3, r4
 800a642:	bf0c      	ite	eq
 800a644:	6032      	streq	r2, [r6, #0]
 800a646:	605a      	strne	r2, [r3, #4]
 800a648:	e7ec      	b.n	800a624 <_malloc_r+0xa0>
 800a64a:	4623      	mov	r3, r4
 800a64c:	6864      	ldr	r4, [r4, #4]
 800a64e:	e7b2      	b.n	800a5b6 <_malloc_r+0x32>
 800a650:	4634      	mov	r4, r6
 800a652:	6876      	ldr	r6, [r6, #4]
 800a654:	e7b9      	b.n	800a5ca <_malloc_r+0x46>
 800a656:	230c      	movs	r3, #12
 800a658:	603b      	str	r3, [r7, #0]
 800a65a:	4638      	mov	r0, r7
 800a65c:	f000 fc60 	bl	800af20 <__malloc_unlock>
 800a660:	e7a1      	b.n	800a5a6 <_malloc_r+0x22>
 800a662:	6025      	str	r5, [r4, #0]
 800a664:	e7de      	b.n	800a624 <_malloc_r+0xa0>
 800a666:	bf00      	nop
 800a668:	24000538 	.word	0x24000538

0800a66c <__sfputc_r>:
 800a66c:	6893      	ldr	r3, [r2, #8]
 800a66e:	3b01      	subs	r3, #1
 800a670:	2b00      	cmp	r3, #0
 800a672:	b410      	push	{r4}
 800a674:	6093      	str	r3, [r2, #8]
 800a676:	da08      	bge.n	800a68a <__sfputc_r+0x1e>
 800a678:	6994      	ldr	r4, [r2, #24]
 800a67a:	42a3      	cmp	r3, r4
 800a67c:	db01      	blt.n	800a682 <__sfputc_r+0x16>
 800a67e:	290a      	cmp	r1, #10
 800a680:	d103      	bne.n	800a68a <__sfputc_r+0x1e>
 800a682:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a686:	f000 b9e7 	b.w	800aa58 <__swbuf_r>
 800a68a:	6813      	ldr	r3, [r2, #0]
 800a68c:	1c58      	adds	r0, r3, #1
 800a68e:	6010      	str	r0, [r2, #0]
 800a690:	7019      	strb	r1, [r3, #0]
 800a692:	4608      	mov	r0, r1
 800a694:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a698:	4770      	bx	lr

0800a69a <__sfputs_r>:
 800a69a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69c:	4606      	mov	r6, r0
 800a69e:	460f      	mov	r7, r1
 800a6a0:	4614      	mov	r4, r2
 800a6a2:	18d5      	adds	r5, r2, r3
 800a6a4:	42ac      	cmp	r4, r5
 800a6a6:	d101      	bne.n	800a6ac <__sfputs_r+0x12>
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	e007      	b.n	800a6bc <__sfputs_r+0x22>
 800a6ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6b0:	463a      	mov	r2, r7
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	f7ff ffda 	bl	800a66c <__sfputc_r>
 800a6b8:	1c43      	adds	r3, r0, #1
 800a6ba:	d1f3      	bne.n	800a6a4 <__sfputs_r+0xa>
 800a6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6c0 <_vfiprintf_r>:
 800a6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c4:	460d      	mov	r5, r1
 800a6c6:	b09d      	sub	sp, #116	; 0x74
 800a6c8:	4614      	mov	r4, r2
 800a6ca:	4698      	mov	r8, r3
 800a6cc:	4606      	mov	r6, r0
 800a6ce:	b118      	cbz	r0, 800a6d8 <_vfiprintf_r+0x18>
 800a6d0:	6983      	ldr	r3, [r0, #24]
 800a6d2:	b90b      	cbnz	r3, 800a6d8 <_vfiprintf_r+0x18>
 800a6d4:	f7ff faa2 	bl	8009c1c <__sinit>
 800a6d8:	4b89      	ldr	r3, [pc, #548]	; (800a900 <_vfiprintf_r+0x240>)
 800a6da:	429d      	cmp	r5, r3
 800a6dc:	d11b      	bne.n	800a716 <_vfiprintf_r+0x56>
 800a6de:	6875      	ldr	r5, [r6, #4]
 800a6e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6e2:	07d9      	lsls	r1, r3, #31
 800a6e4:	d405      	bmi.n	800a6f2 <_vfiprintf_r+0x32>
 800a6e6:	89ab      	ldrh	r3, [r5, #12]
 800a6e8:	059a      	lsls	r2, r3, #22
 800a6ea:	d402      	bmi.n	800a6f2 <_vfiprintf_r+0x32>
 800a6ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6ee:	f7ff fb38 	bl	8009d62 <__retarget_lock_acquire_recursive>
 800a6f2:	89ab      	ldrh	r3, [r5, #12]
 800a6f4:	071b      	lsls	r3, r3, #28
 800a6f6:	d501      	bpl.n	800a6fc <_vfiprintf_r+0x3c>
 800a6f8:	692b      	ldr	r3, [r5, #16]
 800a6fa:	b9eb      	cbnz	r3, 800a738 <_vfiprintf_r+0x78>
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	4630      	mov	r0, r6
 800a700:	f000 fa0e 	bl	800ab20 <__swsetup_r>
 800a704:	b1c0      	cbz	r0, 800a738 <_vfiprintf_r+0x78>
 800a706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a708:	07dc      	lsls	r4, r3, #31
 800a70a:	d50e      	bpl.n	800a72a <_vfiprintf_r+0x6a>
 800a70c:	f04f 30ff 	mov.w	r0, #4294967295
 800a710:	b01d      	add	sp, #116	; 0x74
 800a712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a716:	4b7b      	ldr	r3, [pc, #492]	; (800a904 <_vfiprintf_r+0x244>)
 800a718:	429d      	cmp	r5, r3
 800a71a:	d101      	bne.n	800a720 <_vfiprintf_r+0x60>
 800a71c:	68b5      	ldr	r5, [r6, #8]
 800a71e:	e7df      	b.n	800a6e0 <_vfiprintf_r+0x20>
 800a720:	4b79      	ldr	r3, [pc, #484]	; (800a908 <_vfiprintf_r+0x248>)
 800a722:	429d      	cmp	r5, r3
 800a724:	bf08      	it	eq
 800a726:	68f5      	ldreq	r5, [r6, #12]
 800a728:	e7da      	b.n	800a6e0 <_vfiprintf_r+0x20>
 800a72a:	89ab      	ldrh	r3, [r5, #12]
 800a72c:	0598      	lsls	r0, r3, #22
 800a72e:	d4ed      	bmi.n	800a70c <_vfiprintf_r+0x4c>
 800a730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a732:	f7ff fb17 	bl	8009d64 <__retarget_lock_release_recursive>
 800a736:	e7e9      	b.n	800a70c <_vfiprintf_r+0x4c>
 800a738:	2300      	movs	r3, #0
 800a73a:	9309      	str	r3, [sp, #36]	; 0x24
 800a73c:	2320      	movs	r3, #32
 800a73e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a742:	f8cd 800c 	str.w	r8, [sp, #12]
 800a746:	2330      	movs	r3, #48	; 0x30
 800a748:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a90c <_vfiprintf_r+0x24c>
 800a74c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a750:	f04f 0901 	mov.w	r9, #1
 800a754:	4623      	mov	r3, r4
 800a756:	469a      	mov	sl, r3
 800a758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a75c:	b10a      	cbz	r2, 800a762 <_vfiprintf_r+0xa2>
 800a75e:	2a25      	cmp	r2, #37	; 0x25
 800a760:	d1f9      	bne.n	800a756 <_vfiprintf_r+0x96>
 800a762:	ebba 0b04 	subs.w	fp, sl, r4
 800a766:	d00b      	beq.n	800a780 <_vfiprintf_r+0xc0>
 800a768:	465b      	mov	r3, fp
 800a76a:	4622      	mov	r2, r4
 800a76c:	4629      	mov	r1, r5
 800a76e:	4630      	mov	r0, r6
 800a770:	f7ff ff93 	bl	800a69a <__sfputs_r>
 800a774:	3001      	adds	r0, #1
 800a776:	f000 80aa 	beq.w	800a8ce <_vfiprintf_r+0x20e>
 800a77a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a77c:	445a      	add	r2, fp
 800a77e:	9209      	str	r2, [sp, #36]	; 0x24
 800a780:	f89a 3000 	ldrb.w	r3, [sl]
 800a784:	2b00      	cmp	r3, #0
 800a786:	f000 80a2 	beq.w	800a8ce <_vfiprintf_r+0x20e>
 800a78a:	2300      	movs	r3, #0
 800a78c:	f04f 32ff 	mov.w	r2, #4294967295
 800a790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a794:	f10a 0a01 	add.w	sl, sl, #1
 800a798:	9304      	str	r3, [sp, #16]
 800a79a:	9307      	str	r3, [sp, #28]
 800a79c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7a0:	931a      	str	r3, [sp, #104]	; 0x68
 800a7a2:	4654      	mov	r4, sl
 800a7a4:	2205      	movs	r2, #5
 800a7a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7aa:	4858      	ldr	r0, [pc, #352]	; (800a90c <_vfiprintf_r+0x24c>)
 800a7ac:	f7f5 fdb8 	bl	8000320 <memchr>
 800a7b0:	9a04      	ldr	r2, [sp, #16]
 800a7b2:	b9d8      	cbnz	r0, 800a7ec <_vfiprintf_r+0x12c>
 800a7b4:	06d1      	lsls	r1, r2, #27
 800a7b6:	bf44      	itt	mi
 800a7b8:	2320      	movmi	r3, #32
 800a7ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7be:	0713      	lsls	r3, r2, #28
 800a7c0:	bf44      	itt	mi
 800a7c2:	232b      	movmi	r3, #43	; 0x2b
 800a7c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a7cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ce:	d015      	beq.n	800a7fc <_vfiprintf_r+0x13c>
 800a7d0:	9a07      	ldr	r2, [sp, #28]
 800a7d2:	4654      	mov	r4, sl
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	f04f 0c0a 	mov.w	ip, #10
 800a7da:	4621      	mov	r1, r4
 800a7dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7e0:	3b30      	subs	r3, #48	; 0x30
 800a7e2:	2b09      	cmp	r3, #9
 800a7e4:	d94e      	bls.n	800a884 <_vfiprintf_r+0x1c4>
 800a7e6:	b1b0      	cbz	r0, 800a816 <_vfiprintf_r+0x156>
 800a7e8:	9207      	str	r2, [sp, #28]
 800a7ea:	e014      	b.n	800a816 <_vfiprintf_r+0x156>
 800a7ec:	eba0 0308 	sub.w	r3, r0, r8
 800a7f0:	fa09 f303 	lsl.w	r3, r9, r3
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	9304      	str	r3, [sp, #16]
 800a7f8:	46a2      	mov	sl, r4
 800a7fa:	e7d2      	b.n	800a7a2 <_vfiprintf_r+0xe2>
 800a7fc:	9b03      	ldr	r3, [sp, #12]
 800a7fe:	1d19      	adds	r1, r3, #4
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	9103      	str	r1, [sp, #12]
 800a804:	2b00      	cmp	r3, #0
 800a806:	bfbb      	ittet	lt
 800a808:	425b      	neglt	r3, r3
 800a80a:	f042 0202 	orrlt.w	r2, r2, #2
 800a80e:	9307      	strge	r3, [sp, #28]
 800a810:	9307      	strlt	r3, [sp, #28]
 800a812:	bfb8      	it	lt
 800a814:	9204      	strlt	r2, [sp, #16]
 800a816:	7823      	ldrb	r3, [r4, #0]
 800a818:	2b2e      	cmp	r3, #46	; 0x2e
 800a81a:	d10c      	bne.n	800a836 <_vfiprintf_r+0x176>
 800a81c:	7863      	ldrb	r3, [r4, #1]
 800a81e:	2b2a      	cmp	r3, #42	; 0x2a
 800a820:	d135      	bne.n	800a88e <_vfiprintf_r+0x1ce>
 800a822:	9b03      	ldr	r3, [sp, #12]
 800a824:	1d1a      	adds	r2, r3, #4
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	9203      	str	r2, [sp, #12]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	bfb8      	it	lt
 800a82e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a832:	3402      	adds	r4, #2
 800a834:	9305      	str	r3, [sp, #20]
 800a836:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a91c <_vfiprintf_r+0x25c>
 800a83a:	7821      	ldrb	r1, [r4, #0]
 800a83c:	2203      	movs	r2, #3
 800a83e:	4650      	mov	r0, sl
 800a840:	f7f5 fd6e 	bl	8000320 <memchr>
 800a844:	b140      	cbz	r0, 800a858 <_vfiprintf_r+0x198>
 800a846:	2340      	movs	r3, #64	; 0x40
 800a848:	eba0 000a 	sub.w	r0, r0, sl
 800a84c:	fa03 f000 	lsl.w	r0, r3, r0
 800a850:	9b04      	ldr	r3, [sp, #16]
 800a852:	4303      	orrs	r3, r0
 800a854:	3401      	adds	r4, #1
 800a856:	9304      	str	r3, [sp, #16]
 800a858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a85c:	482c      	ldr	r0, [pc, #176]	; (800a910 <_vfiprintf_r+0x250>)
 800a85e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a862:	2206      	movs	r2, #6
 800a864:	f7f5 fd5c 	bl	8000320 <memchr>
 800a868:	2800      	cmp	r0, #0
 800a86a:	d03f      	beq.n	800a8ec <_vfiprintf_r+0x22c>
 800a86c:	4b29      	ldr	r3, [pc, #164]	; (800a914 <_vfiprintf_r+0x254>)
 800a86e:	bb1b      	cbnz	r3, 800a8b8 <_vfiprintf_r+0x1f8>
 800a870:	9b03      	ldr	r3, [sp, #12]
 800a872:	3307      	adds	r3, #7
 800a874:	f023 0307 	bic.w	r3, r3, #7
 800a878:	3308      	adds	r3, #8
 800a87a:	9303      	str	r3, [sp, #12]
 800a87c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a87e:	443b      	add	r3, r7
 800a880:	9309      	str	r3, [sp, #36]	; 0x24
 800a882:	e767      	b.n	800a754 <_vfiprintf_r+0x94>
 800a884:	fb0c 3202 	mla	r2, ip, r2, r3
 800a888:	460c      	mov	r4, r1
 800a88a:	2001      	movs	r0, #1
 800a88c:	e7a5      	b.n	800a7da <_vfiprintf_r+0x11a>
 800a88e:	2300      	movs	r3, #0
 800a890:	3401      	adds	r4, #1
 800a892:	9305      	str	r3, [sp, #20]
 800a894:	4619      	mov	r1, r3
 800a896:	f04f 0c0a 	mov.w	ip, #10
 800a89a:	4620      	mov	r0, r4
 800a89c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8a0:	3a30      	subs	r2, #48	; 0x30
 800a8a2:	2a09      	cmp	r2, #9
 800a8a4:	d903      	bls.n	800a8ae <_vfiprintf_r+0x1ee>
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d0c5      	beq.n	800a836 <_vfiprintf_r+0x176>
 800a8aa:	9105      	str	r1, [sp, #20]
 800a8ac:	e7c3      	b.n	800a836 <_vfiprintf_r+0x176>
 800a8ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e7f0      	b.n	800a89a <_vfiprintf_r+0x1da>
 800a8b8:	ab03      	add	r3, sp, #12
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	462a      	mov	r2, r5
 800a8be:	4b16      	ldr	r3, [pc, #88]	; (800a918 <_vfiprintf_r+0x258>)
 800a8c0:	a904      	add	r1, sp, #16
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	f7fd ff60 	bl	8008788 <_printf_float>
 800a8c8:	4607      	mov	r7, r0
 800a8ca:	1c78      	adds	r0, r7, #1
 800a8cc:	d1d6      	bne.n	800a87c <_vfiprintf_r+0x1bc>
 800a8ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8d0:	07d9      	lsls	r1, r3, #31
 800a8d2:	d405      	bmi.n	800a8e0 <_vfiprintf_r+0x220>
 800a8d4:	89ab      	ldrh	r3, [r5, #12]
 800a8d6:	059a      	lsls	r2, r3, #22
 800a8d8:	d402      	bmi.n	800a8e0 <_vfiprintf_r+0x220>
 800a8da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8dc:	f7ff fa42 	bl	8009d64 <__retarget_lock_release_recursive>
 800a8e0:	89ab      	ldrh	r3, [r5, #12]
 800a8e2:	065b      	lsls	r3, r3, #25
 800a8e4:	f53f af12 	bmi.w	800a70c <_vfiprintf_r+0x4c>
 800a8e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8ea:	e711      	b.n	800a710 <_vfiprintf_r+0x50>
 800a8ec:	ab03      	add	r3, sp, #12
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	462a      	mov	r2, r5
 800a8f2:	4b09      	ldr	r3, [pc, #36]	; (800a918 <_vfiprintf_r+0x258>)
 800a8f4:	a904      	add	r1, sp, #16
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	f7fe f9d2 	bl	8008ca0 <_printf_i>
 800a8fc:	e7e4      	b.n	800a8c8 <_vfiprintf_r+0x208>
 800a8fe:	bf00      	nop
 800a900:	0800b2d8 	.word	0x0800b2d8
 800a904:	0800b2f8 	.word	0x0800b2f8
 800a908:	0800b2b8 	.word	0x0800b2b8
 800a90c:	0800b474 	.word	0x0800b474
 800a910:	0800b47e 	.word	0x0800b47e
 800a914:	08008789 	.word	0x08008789
 800a918:	0800a69b 	.word	0x0800a69b
 800a91c:	0800b47a 	.word	0x0800b47a

0800a920 <_putc_r>:
 800a920:	b570      	push	{r4, r5, r6, lr}
 800a922:	460d      	mov	r5, r1
 800a924:	4614      	mov	r4, r2
 800a926:	4606      	mov	r6, r0
 800a928:	b118      	cbz	r0, 800a932 <_putc_r+0x12>
 800a92a:	6983      	ldr	r3, [r0, #24]
 800a92c:	b90b      	cbnz	r3, 800a932 <_putc_r+0x12>
 800a92e:	f7ff f975 	bl	8009c1c <__sinit>
 800a932:	4b1c      	ldr	r3, [pc, #112]	; (800a9a4 <_putc_r+0x84>)
 800a934:	429c      	cmp	r4, r3
 800a936:	d124      	bne.n	800a982 <_putc_r+0x62>
 800a938:	6874      	ldr	r4, [r6, #4]
 800a93a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a93c:	07d8      	lsls	r0, r3, #31
 800a93e:	d405      	bmi.n	800a94c <_putc_r+0x2c>
 800a940:	89a3      	ldrh	r3, [r4, #12]
 800a942:	0599      	lsls	r1, r3, #22
 800a944:	d402      	bmi.n	800a94c <_putc_r+0x2c>
 800a946:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a948:	f7ff fa0b 	bl	8009d62 <__retarget_lock_acquire_recursive>
 800a94c:	68a3      	ldr	r3, [r4, #8]
 800a94e:	3b01      	subs	r3, #1
 800a950:	2b00      	cmp	r3, #0
 800a952:	60a3      	str	r3, [r4, #8]
 800a954:	da05      	bge.n	800a962 <_putc_r+0x42>
 800a956:	69a2      	ldr	r2, [r4, #24]
 800a958:	4293      	cmp	r3, r2
 800a95a:	db1c      	blt.n	800a996 <_putc_r+0x76>
 800a95c:	b2eb      	uxtb	r3, r5
 800a95e:	2b0a      	cmp	r3, #10
 800a960:	d019      	beq.n	800a996 <_putc_r+0x76>
 800a962:	6823      	ldr	r3, [r4, #0]
 800a964:	1c5a      	adds	r2, r3, #1
 800a966:	6022      	str	r2, [r4, #0]
 800a968:	701d      	strb	r5, [r3, #0]
 800a96a:	b2ed      	uxtb	r5, r5
 800a96c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a96e:	07da      	lsls	r2, r3, #31
 800a970:	d405      	bmi.n	800a97e <_putc_r+0x5e>
 800a972:	89a3      	ldrh	r3, [r4, #12]
 800a974:	059b      	lsls	r3, r3, #22
 800a976:	d402      	bmi.n	800a97e <_putc_r+0x5e>
 800a978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a97a:	f7ff f9f3 	bl	8009d64 <__retarget_lock_release_recursive>
 800a97e:	4628      	mov	r0, r5
 800a980:	bd70      	pop	{r4, r5, r6, pc}
 800a982:	4b09      	ldr	r3, [pc, #36]	; (800a9a8 <_putc_r+0x88>)
 800a984:	429c      	cmp	r4, r3
 800a986:	d101      	bne.n	800a98c <_putc_r+0x6c>
 800a988:	68b4      	ldr	r4, [r6, #8]
 800a98a:	e7d6      	b.n	800a93a <_putc_r+0x1a>
 800a98c:	4b07      	ldr	r3, [pc, #28]	; (800a9ac <_putc_r+0x8c>)
 800a98e:	429c      	cmp	r4, r3
 800a990:	bf08      	it	eq
 800a992:	68f4      	ldreq	r4, [r6, #12]
 800a994:	e7d1      	b.n	800a93a <_putc_r+0x1a>
 800a996:	4629      	mov	r1, r5
 800a998:	4622      	mov	r2, r4
 800a99a:	4630      	mov	r0, r6
 800a99c:	f000 f85c 	bl	800aa58 <__swbuf_r>
 800a9a0:	4605      	mov	r5, r0
 800a9a2:	e7e3      	b.n	800a96c <_putc_r+0x4c>
 800a9a4:	0800b2d8 	.word	0x0800b2d8
 800a9a8:	0800b2f8 	.word	0x0800b2f8
 800a9ac:	0800b2b8 	.word	0x0800b2b8

0800a9b0 <_sbrk_r>:
 800a9b0:	b538      	push	{r3, r4, r5, lr}
 800a9b2:	4d06      	ldr	r5, [pc, #24]	; (800a9cc <_sbrk_r+0x1c>)
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	4608      	mov	r0, r1
 800a9ba:	602b      	str	r3, [r5, #0]
 800a9bc:	f7f6 fe94 	bl	80016e8 <_sbrk>
 800a9c0:	1c43      	adds	r3, r0, #1
 800a9c2:	d102      	bne.n	800a9ca <_sbrk_r+0x1a>
 800a9c4:	682b      	ldr	r3, [r5, #0]
 800a9c6:	b103      	cbz	r3, 800a9ca <_sbrk_r+0x1a>
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	bd38      	pop	{r3, r4, r5, pc}
 800a9cc:	24000540 	.word	0x24000540

0800a9d0 <__sread>:
 800a9d0:	b510      	push	{r4, lr}
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d8:	f000 faa8 	bl	800af2c <_read_r>
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	bfab      	itete	ge
 800a9e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9e2:	89a3      	ldrhlt	r3, [r4, #12]
 800a9e4:	181b      	addge	r3, r3, r0
 800a9e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9ea:	bfac      	ite	ge
 800a9ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9ee:	81a3      	strhlt	r3, [r4, #12]
 800a9f0:	bd10      	pop	{r4, pc}

0800a9f2 <__swrite>:
 800a9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f6:	461f      	mov	r7, r3
 800a9f8:	898b      	ldrh	r3, [r1, #12]
 800a9fa:	05db      	lsls	r3, r3, #23
 800a9fc:	4605      	mov	r5, r0
 800a9fe:	460c      	mov	r4, r1
 800aa00:	4616      	mov	r6, r2
 800aa02:	d505      	bpl.n	800aa10 <__swrite+0x1e>
 800aa04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa08:	2302      	movs	r3, #2
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f000 f9f8 	bl	800ae00 <_lseek_r>
 800aa10:	89a3      	ldrh	r3, [r4, #12]
 800aa12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa1a:	81a3      	strh	r3, [r4, #12]
 800aa1c:	4632      	mov	r2, r6
 800aa1e:	463b      	mov	r3, r7
 800aa20:	4628      	mov	r0, r5
 800aa22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa26:	f000 b869 	b.w	800aafc <_write_r>

0800aa2a <__sseek>:
 800aa2a:	b510      	push	{r4, lr}
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa32:	f000 f9e5 	bl	800ae00 <_lseek_r>
 800aa36:	1c43      	adds	r3, r0, #1
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	bf15      	itete	ne
 800aa3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa46:	81a3      	strheq	r3, [r4, #12]
 800aa48:	bf18      	it	ne
 800aa4a:	81a3      	strhne	r3, [r4, #12]
 800aa4c:	bd10      	pop	{r4, pc}

0800aa4e <__sclose>:
 800aa4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa52:	f000 b8f1 	b.w	800ac38 <_close_r>
	...

0800aa58 <__swbuf_r>:
 800aa58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5a:	460e      	mov	r6, r1
 800aa5c:	4614      	mov	r4, r2
 800aa5e:	4605      	mov	r5, r0
 800aa60:	b118      	cbz	r0, 800aa6a <__swbuf_r+0x12>
 800aa62:	6983      	ldr	r3, [r0, #24]
 800aa64:	b90b      	cbnz	r3, 800aa6a <__swbuf_r+0x12>
 800aa66:	f7ff f8d9 	bl	8009c1c <__sinit>
 800aa6a:	4b21      	ldr	r3, [pc, #132]	; (800aaf0 <__swbuf_r+0x98>)
 800aa6c:	429c      	cmp	r4, r3
 800aa6e:	d12b      	bne.n	800aac8 <__swbuf_r+0x70>
 800aa70:	686c      	ldr	r4, [r5, #4]
 800aa72:	69a3      	ldr	r3, [r4, #24]
 800aa74:	60a3      	str	r3, [r4, #8]
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	071a      	lsls	r2, r3, #28
 800aa7a:	d52f      	bpl.n	800aadc <__swbuf_r+0x84>
 800aa7c:	6923      	ldr	r3, [r4, #16]
 800aa7e:	b36b      	cbz	r3, 800aadc <__swbuf_r+0x84>
 800aa80:	6923      	ldr	r3, [r4, #16]
 800aa82:	6820      	ldr	r0, [r4, #0]
 800aa84:	1ac0      	subs	r0, r0, r3
 800aa86:	6963      	ldr	r3, [r4, #20]
 800aa88:	b2f6      	uxtb	r6, r6
 800aa8a:	4283      	cmp	r3, r0
 800aa8c:	4637      	mov	r7, r6
 800aa8e:	dc04      	bgt.n	800aa9a <__swbuf_r+0x42>
 800aa90:	4621      	mov	r1, r4
 800aa92:	4628      	mov	r0, r5
 800aa94:	f000 f966 	bl	800ad64 <_fflush_r>
 800aa98:	bb30      	cbnz	r0, 800aae8 <__swbuf_r+0x90>
 800aa9a:	68a3      	ldr	r3, [r4, #8]
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	60a3      	str	r3, [r4, #8]
 800aaa0:	6823      	ldr	r3, [r4, #0]
 800aaa2:	1c5a      	adds	r2, r3, #1
 800aaa4:	6022      	str	r2, [r4, #0]
 800aaa6:	701e      	strb	r6, [r3, #0]
 800aaa8:	6963      	ldr	r3, [r4, #20]
 800aaaa:	3001      	adds	r0, #1
 800aaac:	4283      	cmp	r3, r0
 800aaae:	d004      	beq.n	800aaba <__swbuf_r+0x62>
 800aab0:	89a3      	ldrh	r3, [r4, #12]
 800aab2:	07db      	lsls	r3, r3, #31
 800aab4:	d506      	bpl.n	800aac4 <__swbuf_r+0x6c>
 800aab6:	2e0a      	cmp	r6, #10
 800aab8:	d104      	bne.n	800aac4 <__swbuf_r+0x6c>
 800aaba:	4621      	mov	r1, r4
 800aabc:	4628      	mov	r0, r5
 800aabe:	f000 f951 	bl	800ad64 <_fflush_r>
 800aac2:	b988      	cbnz	r0, 800aae8 <__swbuf_r+0x90>
 800aac4:	4638      	mov	r0, r7
 800aac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aac8:	4b0a      	ldr	r3, [pc, #40]	; (800aaf4 <__swbuf_r+0x9c>)
 800aaca:	429c      	cmp	r4, r3
 800aacc:	d101      	bne.n	800aad2 <__swbuf_r+0x7a>
 800aace:	68ac      	ldr	r4, [r5, #8]
 800aad0:	e7cf      	b.n	800aa72 <__swbuf_r+0x1a>
 800aad2:	4b09      	ldr	r3, [pc, #36]	; (800aaf8 <__swbuf_r+0xa0>)
 800aad4:	429c      	cmp	r4, r3
 800aad6:	bf08      	it	eq
 800aad8:	68ec      	ldreq	r4, [r5, #12]
 800aada:	e7ca      	b.n	800aa72 <__swbuf_r+0x1a>
 800aadc:	4621      	mov	r1, r4
 800aade:	4628      	mov	r0, r5
 800aae0:	f000 f81e 	bl	800ab20 <__swsetup_r>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d0cb      	beq.n	800aa80 <__swbuf_r+0x28>
 800aae8:	f04f 37ff 	mov.w	r7, #4294967295
 800aaec:	e7ea      	b.n	800aac4 <__swbuf_r+0x6c>
 800aaee:	bf00      	nop
 800aaf0:	0800b2d8 	.word	0x0800b2d8
 800aaf4:	0800b2f8 	.word	0x0800b2f8
 800aaf8:	0800b2b8 	.word	0x0800b2b8

0800aafc <_write_r>:
 800aafc:	b538      	push	{r3, r4, r5, lr}
 800aafe:	4d07      	ldr	r5, [pc, #28]	; (800ab1c <_write_r+0x20>)
 800ab00:	4604      	mov	r4, r0
 800ab02:	4608      	mov	r0, r1
 800ab04:	4611      	mov	r1, r2
 800ab06:	2200      	movs	r2, #0
 800ab08:	602a      	str	r2, [r5, #0]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	f7f6 fd9b 	bl	8001646 <_write>
 800ab10:	1c43      	adds	r3, r0, #1
 800ab12:	d102      	bne.n	800ab1a <_write_r+0x1e>
 800ab14:	682b      	ldr	r3, [r5, #0]
 800ab16:	b103      	cbz	r3, 800ab1a <_write_r+0x1e>
 800ab18:	6023      	str	r3, [r4, #0]
 800ab1a:	bd38      	pop	{r3, r4, r5, pc}
 800ab1c:	24000540 	.word	0x24000540

0800ab20 <__swsetup_r>:
 800ab20:	4b32      	ldr	r3, [pc, #200]	; (800abec <__swsetup_r+0xcc>)
 800ab22:	b570      	push	{r4, r5, r6, lr}
 800ab24:	681d      	ldr	r5, [r3, #0]
 800ab26:	4606      	mov	r6, r0
 800ab28:	460c      	mov	r4, r1
 800ab2a:	b125      	cbz	r5, 800ab36 <__swsetup_r+0x16>
 800ab2c:	69ab      	ldr	r3, [r5, #24]
 800ab2e:	b913      	cbnz	r3, 800ab36 <__swsetup_r+0x16>
 800ab30:	4628      	mov	r0, r5
 800ab32:	f7ff f873 	bl	8009c1c <__sinit>
 800ab36:	4b2e      	ldr	r3, [pc, #184]	; (800abf0 <__swsetup_r+0xd0>)
 800ab38:	429c      	cmp	r4, r3
 800ab3a:	d10f      	bne.n	800ab5c <__swsetup_r+0x3c>
 800ab3c:	686c      	ldr	r4, [r5, #4]
 800ab3e:	89a3      	ldrh	r3, [r4, #12]
 800ab40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab44:	0719      	lsls	r1, r3, #28
 800ab46:	d42c      	bmi.n	800aba2 <__swsetup_r+0x82>
 800ab48:	06dd      	lsls	r5, r3, #27
 800ab4a:	d411      	bmi.n	800ab70 <__swsetup_r+0x50>
 800ab4c:	2309      	movs	r3, #9
 800ab4e:	6033      	str	r3, [r6, #0]
 800ab50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab54:	81a3      	strh	r3, [r4, #12]
 800ab56:	f04f 30ff 	mov.w	r0, #4294967295
 800ab5a:	e03e      	b.n	800abda <__swsetup_r+0xba>
 800ab5c:	4b25      	ldr	r3, [pc, #148]	; (800abf4 <__swsetup_r+0xd4>)
 800ab5e:	429c      	cmp	r4, r3
 800ab60:	d101      	bne.n	800ab66 <__swsetup_r+0x46>
 800ab62:	68ac      	ldr	r4, [r5, #8]
 800ab64:	e7eb      	b.n	800ab3e <__swsetup_r+0x1e>
 800ab66:	4b24      	ldr	r3, [pc, #144]	; (800abf8 <__swsetup_r+0xd8>)
 800ab68:	429c      	cmp	r4, r3
 800ab6a:	bf08      	it	eq
 800ab6c:	68ec      	ldreq	r4, [r5, #12]
 800ab6e:	e7e6      	b.n	800ab3e <__swsetup_r+0x1e>
 800ab70:	0758      	lsls	r0, r3, #29
 800ab72:	d512      	bpl.n	800ab9a <__swsetup_r+0x7a>
 800ab74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab76:	b141      	cbz	r1, 800ab8a <__swsetup_r+0x6a>
 800ab78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab7c:	4299      	cmp	r1, r3
 800ab7e:	d002      	beq.n	800ab86 <__swsetup_r+0x66>
 800ab80:	4630      	mov	r0, r6
 800ab82:	f7ff fc93 	bl	800a4ac <_free_r>
 800ab86:	2300      	movs	r3, #0
 800ab88:	6363      	str	r3, [r4, #52]	; 0x34
 800ab8a:	89a3      	ldrh	r3, [r4, #12]
 800ab8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab90:	81a3      	strh	r3, [r4, #12]
 800ab92:	2300      	movs	r3, #0
 800ab94:	6063      	str	r3, [r4, #4]
 800ab96:	6923      	ldr	r3, [r4, #16]
 800ab98:	6023      	str	r3, [r4, #0]
 800ab9a:	89a3      	ldrh	r3, [r4, #12]
 800ab9c:	f043 0308 	orr.w	r3, r3, #8
 800aba0:	81a3      	strh	r3, [r4, #12]
 800aba2:	6923      	ldr	r3, [r4, #16]
 800aba4:	b94b      	cbnz	r3, 800abba <__swsetup_r+0x9a>
 800aba6:	89a3      	ldrh	r3, [r4, #12]
 800aba8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800abac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abb0:	d003      	beq.n	800abba <__swsetup_r+0x9a>
 800abb2:	4621      	mov	r1, r4
 800abb4:	4630      	mov	r0, r6
 800abb6:	f000 f95b 	bl	800ae70 <__smakebuf_r>
 800abba:	89a0      	ldrh	r0, [r4, #12]
 800abbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abc0:	f010 0301 	ands.w	r3, r0, #1
 800abc4:	d00a      	beq.n	800abdc <__swsetup_r+0xbc>
 800abc6:	2300      	movs	r3, #0
 800abc8:	60a3      	str	r3, [r4, #8]
 800abca:	6963      	ldr	r3, [r4, #20]
 800abcc:	425b      	negs	r3, r3
 800abce:	61a3      	str	r3, [r4, #24]
 800abd0:	6923      	ldr	r3, [r4, #16]
 800abd2:	b943      	cbnz	r3, 800abe6 <__swsetup_r+0xc6>
 800abd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800abd8:	d1ba      	bne.n	800ab50 <__swsetup_r+0x30>
 800abda:	bd70      	pop	{r4, r5, r6, pc}
 800abdc:	0781      	lsls	r1, r0, #30
 800abde:	bf58      	it	pl
 800abe0:	6963      	ldrpl	r3, [r4, #20]
 800abe2:	60a3      	str	r3, [r4, #8]
 800abe4:	e7f4      	b.n	800abd0 <__swsetup_r+0xb0>
 800abe6:	2000      	movs	r0, #0
 800abe8:	e7f7      	b.n	800abda <__swsetup_r+0xba>
 800abea:	bf00      	nop
 800abec:	24000114 	.word	0x24000114
 800abf0:	0800b2d8 	.word	0x0800b2d8
 800abf4:	0800b2f8 	.word	0x0800b2f8
 800abf8:	0800b2b8 	.word	0x0800b2b8

0800abfc <__assert_func>:
 800abfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abfe:	4614      	mov	r4, r2
 800ac00:	461a      	mov	r2, r3
 800ac02:	4b09      	ldr	r3, [pc, #36]	; (800ac28 <__assert_func+0x2c>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4605      	mov	r5, r0
 800ac08:	68d8      	ldr	r0, [r3, #12]
 800ac0a:	b14c      	cbz	r4, 800ac20 <__assert_func+0x24>
 800ac0c:	4b07      	ldr	r3, [pc, #28]	; (800ac2c <__assert_func+0x30>)
 800ac0e:	9100      	str	r1, [sp, #0]
 800ac10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac14:	4906      	ldr	r1, [pc, #24]	; (800ac30 <__assert_func+0x34>)
 800ac16:	462b      	mov	r3, r5
 800ac18:	f000 f8e0 	bl	800addc <fiprintf>
 800ac1c:	f000 f9a5 	bl	800af6a <abort>
 800ac20:	4b04      	ldr	r3, [pc, #16]	; (800ac34 <__assert_func+0x38>)
 800ac22:	461c      	mov	r4, r3
 800ac24:	e7f3      	b.n	800ac0e <__assert_func+0x12>
 800ac26:	bf00      	nop
 800ac28:	24000114 	.word	0x24000114
 800ac2c:	0800b485 	.word	0x0800b485
 800ac30:	0800b492 	.word	0x0800b492
 800ac34:	0800b4c0 	.word	0x0800b4c0

0800ac38 <_close_r>:
 800ac38:	b538      	push	{r3, r4, r5, lr}
 800ac3a:	4d06      	ldr	r5, [pc, #24]	; (800ac54 <_close_r+0x1c>)
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	4604      	mov	r4, r0
 800ac40:	4608      	mov	r0, r1
 800ac42:	602b      	str	r3, [r5, #0]
 800ac44:	f7f6 fd1b 	bl	800167e <_close>
 800ac48:	1c43      	adds	r3, r0, #1
 800ac4a:	d102      	bne.n	800ac52 <_close_r+0x1a>
 800ac4c:	682b      	ldr	r3, [r5, #0]
 800ac4e:	b103      	cbz	r3, 800ac52 <_close_r+0x1a>
 800ac50:	6023      	str	r3, [r4, #0]
 800ac52:	bd38      	pop	{r3, r4, r5, pc}
 800ac54:	24000540 	.word	0x24000540

0800ac58 <__sflush_r>:
 800ac58:	898a      	ldrh	r2, [r1, #12]
 800ac5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5e:	4605      	mov	r5, r0
 800ac60:	0710      	lsls	r0, r2, #28
 800ac62:	460c      	mov	r4, r1
 800ac64:	d458      	bmi.n	800ad18 <__sflush_r+0xc0>
 800ac66:	684b      	ldr	r3, [r1, #4]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	dc05      	bgt.n	800ac78 <__sflush_r+0x20>
 800ac6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	dc02      	bgt.n	800ac78 <__sflush_r+0x20>
 800ac72:	2000      	movs	r0, #0
 800ac74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac7a:	2e00      	cmp	r6, #0
 800ac7c:	d0f9      	beq.n	800ac72 <__sflush_r+0x1a>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac84:	682f      	ldr	r7, [r5, #0]
 800ac86:	602b      	str	r3, [r5, #0]
 800ac88:	d032      	beq.n	800acf0 <__sflush_r+0x98>
 800ac8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac8c:	89a3      	ldrh	r3, [r4, #12]
 800ac8e:	075a      	lsls	r2, r3, #29
 800ac90:	d505      	bpl.n	800ac9e <__sflush_r+0x46>
 800ac92:	6863      	ldr	r3, [r4, #4]
 800ac94:	1ac0      	subs	r0, r0, r3
 800ac96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac98:	b10b      	cbz	r3, 800ac9e <__sflush_r+0x46>
 800ac9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac9c:	1ac0      	subs	r0, r0, r3
 800ac9e:	2300      	movs	r3, #0
 800aca0:	4602      	mov	r2, r0
 800aca2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aca4:	6a21      	ldr	r1, [r4, #32]
 800aca6:	4628      	mov	r0, r5
 800aca8:	47b0      	blx	r6
 800acaa:	1c43      	adds	r3, r0, #1
 800acac:	89a3      	ldrh	r3, [r4, #12]
 800acae:	d106      	bne.n	800acbe <__sflush_r+0x66>
 800acb0:	6829      	ldr	r1, [r5, #0]
 800acb2:	291d      	cmp	r1, #29
 800acb4:	d82c      	bhi.n	800ad10 <__sflush_r+0xb8>
 800acb6:	4a2a      	ldr	r2, [pc, #168]	; (800ad60 <__sflush_r+0x108>)
 800acb8:	40ca      	lsrs	r2, r1
 800acba:	07d6      	lsls	r6, r2, #31
 800acbc:	d528      	bpl.n	800ad10 <__sflush_r+0xb8>
 800acbe:	2200      	movs	r2, #0
 800acc0:	6062      	str	r2, [r4, #4]
 800acc2:	04d9      	lsls	r1, r3, #19
 800acc4:	6922      	ldr	r2, [r4, #16]
 800acc6:	6022      	str	r2, [r4, #0]
 800acc8:	d504      	bpl.n	800acd4 <__sflush_r+0x7c>
 800acca:	1c42      	adds	r2, r0, #1
 800accc:	d101      	bne.n	800acd2 <__sflush_r+0x7a>
 800acce:	682b      	ldr	r3, [r5, #0]
 800acd0:	b903      	cbnz	r3, 800acd4 <__sflush_r+0x7c>
 800acd2:	6560      	str	r0, [r4, #84]	; 0x54
 800acd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acd6:	602f      	str	r7, [r5, #0]
 800acd8:	2900      	cmp	r1, #0
 800acda:	d0ca      	beq.n	800ac72 <__sflush_r+0x1a>
 800acdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ace0:	4299      	cmp	r1, r3
 800ace2:	d002      	beq.n	800acea <__sflush_r+0x92>
 800ace4:	4628      	mov	r0, r5
 800ace6:	f7ff fbe1 	bl	800a4ac <_free_r>
 800acea:	2000      	movs	r0, #0
 800acec:	6360      	str	r0, [r4, #52]	; 0x34
 800acee:	e7c1      	b.n	800ac74 <__sflush_r+0x1c>
 800acf0:	6a21      	ldr	r1, [r4, #32]
 800acf2:	2301      	movs	r3, #1
 800acf4:	4628      	mov	r0, r5
 800acf6:	47b0      	blx	r6
 800acf8:	1c41      	adds	r1, r0, #1
 800acfa:	d1c7      	bne.n	800ac8c <__sflush_r+0x34>
 800acfc:	682b      	ldr	r3, [r5, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d0c4      	beq.n	800ac8c <__sflush_r+0x34>
 800ad02:	2b1d      	cmp	r3, #29
 800ad04:	d001      	beq.n	800ad0a <__sflush_r+0xb2>
 800ad06:	2b16      	cmp	r3, #22
 800ad08:	d101      	bne.n	800ad0e <__sflush_r+0xb6>
 800ad0a:	602f      	str	r7, [r5, #0]
 800ad0c:	e7b1      	b.n	800ac72 <__sflush_r+0x1a>
 800ad0e:	89a3      	ldrh	r3, [r4, #12]
 800ad10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad14:	81a3      	strh	r3, [r4, #12]
 800ad16:	e7ad      	b.n	800ac74 <__sflush_r+0x1c>
 800ad18:	690f      	ldr	r7, [r1, #16]
 800ad1a:	2f00      	cmp	r7, #0
 800ad1c:	d0a9      	beq.n	800ac72 <__sflush_r+0x1a>
 800ad1e:	0793      	lsls	r3, r2, #30
 800ad20:	680e      	ldr	r6, [r1, #0]
 800ad22:	bf08      	it	eq
 800ad24:	694b      	ldreq	r3, [r1, #20]
 800ad26:	600f      	str	r7, [r1, #0]
 800ad28:	bf18      	it	ne
 800ad2a:	2300      	movne	r3, #0
 800ad2c:	eba6 0807 	sub.w	r8, r6, r7
 800ad30:	608b      	str	r3, [r1, #8]
 800ad32:	f1b8 0f00 	cmp.w	r8, #0
 800ad36:	dd9c      	ble.n	800ac72 <__sflush_r+0x1a>
 800ad38:	6a21      	ldr	r1, [r4, #32]
 800ad3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad3c:	4643      	mov	r3, r8
 800ad3e:	463a      	mov	r2, r7
 800ad40:	4628      	mov	r0, r5
 800ad42:	47b0      	blx	r6
 800ad44:	2800      	cmp	r0, #0
 800ad46:	dc06      	bgt.n	800ad56 <__sflush_r+0xfe>
 800ad48:	89a3      	ldrh	r3, [r4, #12]
 800ad4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad4e:	81a3      	strh	r3, [r4, #12]
 800ad50:	f04f 30ff 	mov.w	r0, #4294967295
 800ad54:	e78e      	b.n	800ac74 <__sflush_r+0x1c>
 800ad56:	4407      	add	r7, r0
 800ad58:	eba8 0800 	sub.w	r8, r8, r0
 800ad5c:	e7e9      	b.n	800ad32 <__sflush_r+0xda>
 800ad5e:	bf00      	nop
 800ad60:	20400001 	.word	0x20400001

0800ad64 <_fflush_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	690b      	ldr	r3, [r1, #16]
 800ad68:	4605      	mov	r5, r0
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	b913      	cbnz	r3, 800ad74 <_fflush_r+0x10>
 800ad6e:	2500      	movs	r5, #0
 800ad70:	4628      	mov	r0, r5
 800ad72:	bd38      	pop	{r3, r4, r5, pc}
 800ad74:	b118      	cbz	r0, 800ad7e <_fflush_r+0x1a>
 800ad76:	6983      	ldr	r3, [r0, #24]
 800ad78:	b90b      	cbnz	r3, 800ad7e <_fflush_r+0x1a>
 800ad7a:	f7fe ff4f 	bl	8009c1c <__sinit>
 800ad7e:	4b14      	ldr	r3, [pc, #80]	; (800add0 <_fflush_r+0x6c>)
 800ad80:	429c      	cmp	r4, r3
 800ad82:	d11b      	bne.n	800adbc <_fflush_r+0x58>
 800ad84:	686c      	ldr	r4, [r5, #4]
 800ad86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d0ef      	beq.n	800ad6e <_fflush_r+0xa>
 800ad8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad90:	07d0      	lsls	r0, r2, #31
 800ad92:	d404      	bmi.n	800ad9e <_fflush_r+0x3a>
 800ad94:	0599      	lsls	r1, r3, #22
 800ad96:	d402      	bmi.n	800ad9e <_fflush_r+0x3a>
 800ad98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad9a:	f7fe ffe2 	bl	8009d62 <__retarget_lock_acquire_recursive>
 800ad9e:	4628      	mov	r0, r5
 800ada0:	4621      	mov	r1, r4
 800ada2:	f7ff ff59 	bl	800ac58 <__sflush_r>
 800ada6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ada8:	07da      	lsls	r2, r3, #31
 800adaa:	4605      	mov	r5, r0
 800adac:	d4e0      	bmi.n	800ad70 <_fflush_r+0xc>
 800adae:	89a3      	ldrh	r3, [r4, #12]
 800adb0:	059b      	lsls	r3, r3, #22
 800adb2:	d4dd      	bmi.n	800ad70 <_fflush_r+0xc>
 800adb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adb6:	f7fe ffd5 	bl	8009d64 <__retarget_lock_release_recursive>
 800adba:	e7d9      	b.n	800ad70 <_fflush_r+0xc>
 800adbc:	4b05      	ldr	r3, [pc, #20]	; (800add4 <_fflush_r+0x70>)
 800adbe:	429c      	cmp	r4, r3
 800adc0:	d101      	bne.n	800adc6 <_fflush_r+0x62>
 800adc2:	68ac      	ldr	r4, [r5, #8]
 800adc4:	e7df      	b.n	800ad86 <_fflush_r+0x22>
 800adc6:	4b04      	ldr	r3, [pc, #16]	; (800add8 <_fflush_r+0x74>)
 800adc8:	429c      	cmp	r4, r3
 800adca:	bf08      	it	eq
 800adcc:	68ec      	ldreq	r4, [r5, #12]
 800adce:	e7da      	b.n	800ad86 <_fflush_r+0x22>
 800add0:	0800b2d8 	.word	0x0800b2d8
 800add4:	0800b2f8 	.word	0x0800b2f8
 800add8:	0800b2b8 	.word	0x0800b2b8

0800addc <fiprintf>:
 800addc:	b40e      	push	{r1, r2, r3}
 800adde:	b503      	push	{r0, r1, lr}
 800ade0:	4601      	mov	r1, r0
 800ade2:	ab03      	add	r3, sp, #12
 800ade4:	4805      	ldr	r0, [pc, #20]	; (800adfc <fiprintf+0x20>)
 800ade6:	f853 2b04 	ldr.w	r2, [r3], #4
 800adea:	6800      	ldr	r0, [r0, #0]
 800adec:	9301      	str	r3, [sp, #4]
 800adee:	f7ff fc67 	bl	800a6c0 <_vfiprintf_r>
 800adf2:	b002      	add	sp, #8
 800adf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800adf8:	b003      	add	sp, #12
 800adfa:	4770      	bx	lr
 800adfc:	24000114 	.word	0x24000114

0800ae00 <_lseek_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	4d07      	ldr	r5, [pc, #28]	; (800ae20 <_lseek_r+0x20>)
 800ae04:	4604      	mov	r4, r0
 800ae06:	4608      	mov	r0, r1
 800ae08:	4611      	mov	r1, r2
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	602a      	str	r2, [r5, #0]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	f7f6 fc5c 	bl	80016cc <_lseek>
 800ae14:	1c43      	adds	r3, r0, #1
 800ae16:	d102      	bne.n	800ae1e <_lseek_r+0x1e>
 800ae18:	682b      	ldr	r3, [r5, #0]
 800ae1a:	b103      	cbz	r3, 800ae1e <_lseek_r+0x1e>
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	bd38      	pop	{r3, r4, r5, pc}
 800ae20:	24000540 	.word	0x24000540

0800ae24 <__swhatbuf_r>:
 800ae24:	b570      	push	{r4, r5, r6, lr}
 800ae26:	460e      	mov	r6, r1
 800ae28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae2c:	2900      	cmp	r1, #0
 800ae2e:	b096      	sub	sp, #88	; 0x58
 800ae30:	4614      	mov	r4, r2
 800ae32:	461d      	mov	r5, r3
 800ae34:	da08      	bge.n	800ae48 <__swhatbuf_r+0x24>
 800ae36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	602a      	str	r2, [r5, #0]
 800ae3e:	061a      	lsls	r2, r3, #24
 800ae40:	d410      	bmi.n	800ae64 <__swhatbuf_r+0x40>
 800ae42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae46:	e00e      	b.n	800ae66 <__swhatbuf_r+0x42>
 800ae48:	466a      	mov	r2, sp
 800ae4a:	f000 f895 	bl	800af78 <_fstat_r>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	dbf1      	blt.n	800ae36 <__swhatbuf_r+0x12>
 800ae52:	9a01      	ldr	r2, [sp, #4]
 800ae54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae5c:	425a      	negs	r2, r3
 800ae5e:	415a      	adcs	r2, r3
 800ae60:	602a      	str	r2, [r5, #0]
 800ae62:	e7ee      	b.n	800ae42 <__swhatbuf_r+0x1e>
 800ae64:	2340      	movs	r3, #64	; 0x40
 800ae66:	2000      	movs	r0, #0
 800ae68:	6023      	str	r3, [r4, #0]
 800ae6a:	b016      	add	sp, #88	; 0x58
 800ae6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae70 <__smakebuf_r>:
 800ae70:	898b      	ldrh	r3, [r1, #12]
 800ae72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae74:	079d      	lsls	r5, r3, #30
 800ae76:	4606      	mov	r6, r0
 800ae78:	460c      	mov	r4, r1
 800ae7a:	d507      	bpl.n	800ae8c <__smakebuf_r+0x1c>
 800ae7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	6123      	str	r3, [r4, #16]
 800ae84:	2301      	movs	r3, #1
 800ae86:	6163      	str	r3, [r4, #20]
 800ae88:	b002      	add	sp, #8
 800ae8a:	bd70      	pop	{r4, r5, r6, pc}
 800ae8c:	ab01      	add	r3, sp, #4
 800ae8e:	466a      	mov	r2, sp
 800ae90:	f7ff ffc8 	bl	800ae24 <__swhatbuf_r>
 800ae94:	9900      	ldr	r1, [sp, #0]
 800ae96:	4605      	mov	r5, r0
 800ae98:	4630      	mov	r0, r6
 800ae9a:	f7ff fb73 	bl	800a584 <_malloc_r>
 800ae9e:	b948      	cbnz	r0, 800aeb4 <__smakebuf_r+0x44>
 800aea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aea4:	059a      	lsls	r2, r3, #22
 800aea6:	d4ef      	bmi.n	800ae88 <__smakebuf_r+0x18>
 800aea8:	f023 0303 	bic.w	r3, r3, #3
 800aeac:	f043 0302 	orr.w	r3, r3, #2
 800aeb0:	81a3      	strh	r3, [r4, #12]
 800aeb2:	e7e3      	b.n	800ae7c <__smakebuf_r+0xc>
 800aeb4:	4b0d      	ldr	r3, [pc, #52]	; (800aeec <__smakebuf_r+0x7c>)
 800aeb6:	62b3      	str	r3, [r6, #40]	; 0x28
 800aeb8:	89a3      	ldrh	r3, [r4, #12]
 800aeba:	6020      	str	r0, [r4, #0]
 800aebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aec0:	81a3      	strh	r3, [r4, #12]
 800aec2:	9b00      	ldr	r3, [sp, #0]
 800aec4:	6163      	str	r3, [r4, #20]
 800aec6:	9b01      	ldr	r3, [sp, #4]
 800aec8:	6120      	str	r0, [r4, #16]
 800aeca:	b15b      	cbz	r3, 800aee4 <__smakebuf_r+0x74>
 800aecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aed0:	4630      	mov	r0, r6
 800aed2:	f000 f863 	bl	800af9c <_isatty_r>
 800aed6:	b128      	cbz	r0, 800aee4 <__smakebuf_r+0x74>
 800aed8:	89a3      	ldrh	r3, [r4, #12]
 800aeda:	f023 0303 	bic.w	r3, r3, #3
 800aede:	f043 0301 	orr.w	r3, r3, #1
 800aee2:	81a3      	strh	r3, [r4, #12]
 800aee4:	89a0      	ldrh	r0, [r4, #12]
 800aee6:	4305      	orrs	r5, r0
 800aee8:	81a5      	strh	r5, [r4, #12]
 800aeea:	e7cd      	b.n	800ae88 <__smakebuf_r+0x18>
 800aeec:	08009bb5 	.word	0x08009bb5

0800aef0 <__ascii_mbtowc>:
 800aef0:	b082      	sub	sp, #8
 800aef2:	b901      	cbnz	r1, 800aef6 <__ascii_mbtowc+0x6>
 800aef4:	a901      	add	r1, sp, #4
 800aef6:	b142      	cbz	r2, 800af0a <__ascii_mbtowc+0x1a>
 800aef8:	b14b      	cbz	r3, 800af0e <__ascii_mbtowc+0x1e>
 800aefa:	7813      	ldrb	r3, [r2, #0]
 800aefc:	600b      	str	r3, [r1, #0]
 800aefe:	7812      	ldrb	r2, [r2, #0]
 800af00:	1e10      	subs	r0, r2, #0
 800af02:	bf18      	it	ne
 800af04:	2001      	movne	r0, #1
 800af06:	b002      	add	sp, #8
 800af08:	4770      	bx	lr
 800af0a:	4610      	mov	r0, r2
 800af0c:	e7fb      	b.n	800af06 <__ascii_mbtowc+0x16>
 800af0e:	f06f 0001 	mvn.w	r0, #1
 800af12:	e7f8      	b.n	800af06 <__ascii_mbtowc+0x16>

0800af14 <__malloc_lock>:
 800af14:	4801      	ldr	r0, [pc, #4]	; (800af1c <__malloc_lock+0x8>)
 800af16:	f7fe bf24 	b.w	8009d62 <__retarget_lock_acquire_recursive>
 800af1a:	bf00      	nop
 800af1c:	24000534 	.word	0x24000534

0800af20 <__malloc_unlock>:
 800af20:	4801      	ldr	r0, [pc, #4]	; (800af28 <__malloc_unlock+0x8>)
 800af22:	f7fe bf1f 	b.w	8009d64 <__retarget_lock_release_recursive>
 800af26:	bf00      	nop
 800af28:	24000534 	.word	0x24000534

0800af2c <_read_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	4d07      	ldr	r5, [pc, #28]	; (800af4c <_read_r+0x20>)
 800af30:	4604      	mov	r4, r0
 800af32:	4608      	mov	r0, r1
 800af34:	4611      	mov	r1, r2
 800af36:	2200      	movs	r2, #0
 800af38:	602a      	str	r2, [r5, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	f7f6 fb66 	bl	800160c <_read>
 800af40:	1c43      	adds	r3, r0, #1
 800af42:	d102      	bne.n	800af4a <_read_r+0x1e>
 800af44:	682b      	ldr	r3, [r5, #0]
 800af46:	b103      	cbz	r3, 800af4a <_read_r+0x1e>
 800af48:	6023      	str	r3, [r4, #0]
 800af4a:	bd38      	pop	{r3, r4, r5, pc}
 800af4c:	24000540 	.word	0x24000540

0800af50 <__ascii_wctomb>:
 800af50:	b149      	cbz	r1, 800af66 <__ascii_wctomb+0x16>
 800af52:	2aff      	cmp	r2, #255	; 0xff
 800af54:	bf85      	ittet	hi
 800af56:	238a      	movhi	r3, #138	; 0x8a
 800af58:	6003      	strhi	r3, [r0, #0]
 800af5a:	700a      	strbls	r2, [r1, #0]
 800af5c:	f04f 30ff 	movhi.w	r0, #4294967295
 800af60:	bf98      	it	ls
 800af62:	2001      	movls	r0, #1
 800af64:	4770      	bx	lr
 800af66:	4608      	mov	r0, r1
 800af68:	4770      	bx	lr

0800af6a <abort>:
 800af6a:	b508      	push	{r3, lr}
 800af6c:	2006      	movs	r0, #6
 800af6e:	f000 f84d 	bl	800b00c <raise>
 800af72:	2001      	movs	r0, #1
 800af74:	f7f6 fb40 	bl	80015f8 <_exit>

0800af78 <_fstat_r>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	4d07      	ldr	r5, [pc, #28]	; (800af98 <_fstat_r+0x20>)
 800af7c:	2300      	movs	r3, #0
 800af7e:	4604      	mov	r4, r0
 800af80:	4608      	mov	r0, r1
 800af82:	4611      	mov	r1, r2
 800af84:	602b      	str	r3, [r5, #0]
 800af86:	f7f6 fb86 	bl	8001696 <_fstat>
 800af8a:	1c43      	adds	r3, r0, #1
 800af8c:	d102      	bne.n	800af94 <_fstat_r+0x1c>
 800af8e:	682b      	ldr	r3, [r5, #0]
 800af90:	b103      	cbz	r3, 800af94 <_fstat_r+0x1c>
 800af92:	6023      	str	r3, [r4, #0]
 800af94:	bd38      	pop	{r3, r4, r5, pc}
 800af96:	bf00      	nop
 800af98:	24000540 	.word	0x24000540

0800af9c <_isatty_r>:
 800af9c:	b538      	push	{r3, r4, r5, lr}
 800af9e:	4d06      	ldr	r5, [pc, #24]	; (800afb8 <_isatty_r+0x1c>)
 800afa0:	2300      	movs	r3, #0
 800afa2:	4604      	mov	r4, r0
 800afa4:	4608      	mov	r0, r1
 800afa6:	602b      	str	r3, [r5, #0]
 800afa8:	f7f6 fb85 	bl	80016b6 <_isatty>
 800afac:	1c43      	adds	r3, r0, #1
 800afae:	d102      	bne.n	800afb6 <_isatty_r+0x1a>
 800afb0:	682b      	ldr	r3, [r5, #0]
 800afb2:	b103      	cbz	r3, 800afb6 <_isatty_r+0x1a>
 800afb4:	6023      	str	r3, [r4, #0]
 800afb6:	bd38      	pop	{r3, r4, r5, pc}
 800afb8:	24000540 	.word	0x24000540

0800afbc <_raise_r>:
 800afbc:	291f      	cmp	r1, #31
 800afbe:	b538      	push	{r3, r4, r5, lr}
 800afc0:	4604      	mov	r4, r0
 800afc2:	460d      	mov	r5, r1
 800afc4:	d904      	bls.n	800afd0 <_raise_r+0x14>
 800afc6:	2316      	movs	r3, #22
 800afc8:	6003      	str	r3, [r0, #0]
 800afca:	f04f 30ff 	mov.w	r0, #4294967295
 800afce:	bd38      	pop	{r3, r4, r5, pc}
 800afd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800afd2:	b112      	cbz	r2, 800afda <_raise_r+0x1e>
 800afd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afd8:	b94b      	cbnz	r3, 800afee <_raise_r+0x32>
 800afda:	4620      	mov	r0, r4
 800afdc:	f000 f830 	bl	800b040 <_getpid_r>
 800afe0:	462a      	mov	r2, r5
 800afe2:	4601      	mov	r1, r0
 800afe4:	4620      	mov	r0, r4
 800afe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afea:	f000 b817 	b.w	800b01c <_kill_r>
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d00a      	beq.n	800b008 <_raise_r+0x4c>
 800aff2:	1c59      	adds	r1, r3, #1
 800aff4:	d103      	bne.n	800affe <_raise_r+0x42>
 800aff6:	2316      	movs	r3, #22
 800aff8:	6003      	str	r3, [r0, #0]
 800affa:	2001      	movs	r0, #1
 800affc:	e7e7      	b.n	800afce <_raise_r+0x12>
 800affe:	2400      	movs	r4, #0
 800b000:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b004:	4628      	mov	r0, r5
 800b006:	4798      	blx	r3
 800b008:	2000      	movs	r0, #0
 800b00a:	e7e0      	b.n	800afce <_raise_r+0x12>

0800b00c <raise>:
 800b00c:	4b02      	ldr	r3, [pc, #8]	; (800b018 <raise+0xc>)
 800b00e:	4601      	mov	r1, r0
 800b010:	6818      	ldr	r0, [r3, #0]
 800b012:	f7ff bfd3 	b.w	800afbc <_raise_r>
 800b016:	bf00      	nop
 800b018:	24000114 	.word	0x24000114

0800b01c <_kill_r>:
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4d07      	ldr	r5, [pc, #28]	; (800b03c <_kill_r+0x20>)
 800b020:	2300      	movs	r3, #0
 800b022:	4604      	mov	r4, r0
 800b024:	4608      	mov	r0, r1
 800b026:	4611      	mov	r1, r2
 800b028:	602b      	str	r3, [r5, #0]
 800b02a:	f7f6 fad5 	bl	80015d8 <_kill>
 800b02e:	1c43      	adds	r3, r0, #1
 800b030:	d102      	bne.n	800b038 <_kill_r+0x1c>
 800b032:	682b      	ldr	r3, [r5, #0]
 800b034:	b103      	cbz	r3, 800b038 <_kill_r+0x1c>
 800b036:	6023      	str	r3, [r4, #0]
 800b038:	bd38      	pop	{r3, r4, r5, pc}
 800b03a:	bf00      	nop
 800b03c:	24000540 	.word	0x24000540

0800b040 <_getpid_r>:
 800b040:	f7f6 bac2 	b.w	80015c8 <_getpid>

0800b044 <_init>:
 800b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b046:	bf00      	nop
 800b048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b04a:	bc08      	pop	{r3}
 800b04c:	469e      	mov	lr, r3
 800b04e:	4770      	bx	lr

0800b050 <_fini>:
 800b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b052:	bf00      	nop
 800b054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b056:	bc08      	pop	{r3}
 800b058:	469e      	mov	lr, r3
 800b05a:	4770      	bx	lr
