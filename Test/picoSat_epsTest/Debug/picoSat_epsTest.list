
picoSat_epsTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006af8  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08006da8  08006da8  00016da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006f48  08006f48  00016f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006f50  08006f50  00016f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08006f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000140  24000074  08006fcc  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240001b4  08006fcc  000201b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001529c  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c47  00000000  00000000  0003533e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f70  00000000  00000000  00037f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e28  00000000  00000000  00038ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003183d  00000000  00000000  00039d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001687b  00000000  00000000  0006b55d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136f5d  00000000  00000000  00081dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001b8d35  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004758  00000000  00000000  001b8d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08006d90 	.word	0x08006d90

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	08006d90 	.word	0x08006d90

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08e      	sub	sp, #56	; 0x38
 8000698:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b80      	ldr	r3, [pc, #512]	; (80008ac <MX_GPIO_Init+0x218>)
 80006ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006b0:	4a7e      	ldr	r2, [pc, #504]	; (80008ac <MX_GPIO_Init+0x218>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006ba:	4b7c      	ldr	r3, [pc, #496]	; (80008ac <MX_GPIO_Init+0x218>)
 80006bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	623b      	str	r3, [r7, #32]
 80006c6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c8:	4b78      	ldr	r3, [pc, #480]	; (80008ac <MX_GPIO_Init+0x218>)
 80006ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ce:	4a77      	ldr	r2, [pc, #476]	; (80008ac <MX_GPIO_Init+0x218>)
 80006d0:	f043 0320 	orr.w	r3, r3, #32
 80006d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006d8:	4b74      	ldr	r3, [pc, #464]	; (80008ac <MX_GPIO_Init+0x218>)
 80006da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006de:	f003 0320 	and.w	r3, r3, #32
 80006e2:	61fb      	str	r3, [r7, #28]
 80006e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	4b71      	ldr	r3, [pc, #452]	; (80008ac <MX_GPIO_Init+0x218>)
 80006e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ec:	4a6f      	ldr	r2, [pc, #444]	; (80008ac <MX_GPIO_Init+0x218>)
 80006ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006f6:	4b6d      	ldr	r3, [pc, #436]	; (80008ac <MX_GPIO_Init+0x218>)
 80006f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000700:	61bb      	str	r3, [r7, #24]
 8000702:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000704:	4b69      	ldr	r3, [pc, #420]	; (80008ac <MX_GPIO_Init+0x218>)
 8000706:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800070a:	4a68      	ldr	r2, [pc, #416]	; (80008ac <MX_GPIO_Init+0x218>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000714:	4b65      	ldr	r3, [pc, #404]	; (80008ac <MX_GPIO_Init+0x218>)
 8000716:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000722:	4b62      	ldr	r3, [pc, #392]	; (80008ac <MX_GPIO_Init+0x218>)
 8000724:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000728:	4a60      	ldr	r2, [pc, #384]	; (80008ac <MX_GPIO_Init+0x218>)
 800072a:	f043 0308 	orr.w	r3, r3, #8
 800072e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000732:	4b5e      	ldr	r3, [pc, #376]	; (80008ac <MX_GPIO_Init+0x218>)
 8000734:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000738:	f003 0308 	and.w	r3, r3, #8
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000740:	4b5a      	ldr	r3, [pc, #360]	; (80008ac <MX_GPIO_Init+0x218>)
 8000742:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000746:	4a59      	ldr	r2, [pc, #356]	; (80008ac <MX_GPIO_Init+0x218>)
 8000748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000750:	4b56      	ldr	r3, [pc, #344]	; (80008ac <MX_GPIO_Init+0x218>)
 8000752:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b53      	ldr	r3, [pc, #332]	; (80008ac <MX_GPIO_Init+0x218>)
 8000760:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000764:	4a51      	ldr	r2, [pc, #324]	; (80008ac <MX_GPIO_Init+0x218>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800076e:	4b4f      	ldr	r3, [pc, #316]	; (80008ac <MX_GPIO_Init+0x218>)
 8000770:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800077c:	4b4b      	ldr	r3, [pc, #300]	; (80008ac <MX_GPIO_Init+0x218>)
 800077e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000782:	4a4a      	ldr	r2, [pc, #296]	; (80008ac <MX_GPIO_Init+0x218>)
 8000784:	f043 0310 	orr.w	r3, r3, #16
 8000788:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800078c:	4b47      	ldr	r3, [pc, #284]	; (80008ac <MX_GPIO_Init+0x218>)
 800078e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000792:	f003 0310 	and.w	r3, r3, #16
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a0:	4843      	ldr	r0, [pc, #268]	; (80008b0 <MX_GPIO_Init+0x21c>)
 80007a2:	f001 f8a5 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f244 0101 	movw	r1, #16385	; 0x4001
 80007ac:	4841      	ldr	r0, [pc, #260]	; (80008b4 <MX_GPIO_Init+0x220>)
 80007ae:	f001 f89f 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2102      	movs	r1, #2
 80007b6:	4840      	ldr	r0, [pc, #256]	; (80008b8 <MX_GPIO_Init+0x224>)
 80007b8:	f001 f89a 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	4619      	mov	r1, r3
 80007d0:	483a      	ldr	r0, [pc, #232]	; (80008bc <MX_GPIO_Init+0x228>)
 80007d2:	f000 fedd 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80007d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ec:	4619      	mov	r1, r3
 80007ee:	4830      	ldr	r0, [pc, #192]	; (80008b0 <MX_GPIO_Init+0x21c>)
 80007f0:	f000 fece 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80007f4:	f244 0301 	movw	r3, #16385	; 0x4001
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	4619      	mov	r1, r3
 800080c:	4829      	ldr	r0, [pc, #164]	; (80008b4 <MX_GPIO_Init+0x220>)
 800080e:	f000 febf 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000816:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000824:	4619      	mov	r1, r3
 8000826:	4826      	ldr	r0, [pc, #152]	; (80008c0 <MX_GPIO_Init+0x22c>)
 8000828:	f000 feb2 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800082c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	4619      	mov	r1, r3
 8000840:	4820      	ldr	r0, [pc, #128]	; (80008c4 <MX_GPIO_Init+0x230>)
 8000842:	f000 fea5 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000858:	230a      	movs	r3, #10
 800085a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000860:	4619      	mov	r1, r3
 8000862:	4818      	ldr	r0, [pc, #96]	; (80008c4 <MX_GPIO_Init+0x230>)
 8000864:	f000 fe94 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000868:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087e:	4619      	mov	r1, r3
 8000880:	4810      	ldr	r0, [pc, #64]	; (80008c4 <MX_GPIO_Init+0x230>)
 8000882:	f000 fe85 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000886:	2302      	movs	r3, #2
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	4619      	mov	r1, r3
 800089c:	4806      	ldr	r0, [pc, #24]	; (80008b8 <MX_GPIO_Init+0x224>)
 800089e:	f000 fe77 	bl	8001590 <HAL_GPIO_Init>

}
 80008a2:	bf00      	nop
 80008a4:	3738      	adds	r7, #56	; 0x38
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	58024400 	.word	0x58024400
 80008b0:	58021400 	.word	0x58021400
 80008b4:	58020400 	.word	0x58020400
 80008b8:	58021000 	.word	0x58021000
 80008bc:	58020800 	.word	0x58020800
 80008c0:	58021800 	.word	0x58021800
 80008c4:	58020000 	.word	0x58020000

080008c8 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_I2C4_Init+0x74>)
 80008ce:	4a1c      	ldr	r2, [pc, #112]	; (8000940 <MX_I2C4_Init+0x78>)
 80008d0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10B0DCFB;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_I2C4_Init+0x74>)
 80008d4:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <MX_I2C4_Init+0x7c>)
 80008d6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_I2C4_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_I2C4_Init+0x74>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_I2C4_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_I2C4_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_I2C4_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_I2C4_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_I2C4_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000902:	480e      	ldr	r0, [pc, #56]	; (800093c <MX_I2C4_Init+0x74>)
 8000904:	f001 f80e 	bl	8001924 <HAL_I2C_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800090e:	f000 fa29 	bl	8000d64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000912:	2100      	movs	r1, #0
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <MX_I2C4_Init+0x74>)
 8000916:	f001 fc0d 	bl	8002134 <HAL_I2CEx_ConfigAnalogFilter>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000920:	f000 fa20 	bl	8000d64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000924:	2100      	movs	r1, #0
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_I2C4_Init+0x74>)
 8000928:	f001 fc4f 	bl	80021ca <HAL_I2CEx_ConfigDigitalFilter>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000932:	f000 fa17 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	24000090 	.word	0x24000090
 8000940:	58001c00 	.word	0x58001c00
 8000944:	10b0dcfb 	.word	0x10b0dcfb

08000948 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b0b8      	sub	sp, #224	; 0xe0
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	22b8      	movs	r2, #184	; 0xb8
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f005 fa05 	bl	8005d78 <memset>
  if(i2cHandle->Instance==I2C4)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a25      	ldr	r2, [pc, #148]	; (8000a08 <HAL_I2C_MspInit+0xc0>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d142      	bne.n	80009fe <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000978:	2310      	movs	r3, #16
 800097a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800097c:	2300      	movs	r3, #0
 800097e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4618      	mov	r0, r3
 8000988:	f002 fc94 	bl	80032b4 <HAL_RCCEx_PeriphCLKConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000992:	f000 f9e7 	bl	8000d64 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000996:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <HAL_I2C_MspInit+0xc4>)
 8000998:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800099c:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <HAL_I2C_MspInit+0xc4>)
 800099e:	f043 0320 	orr.w	r3, r3, #32
 80009a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <HAL_I2C_MspInit+0xc4>)
 80009a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ac:	f003 0320 	and.w	r3, r3, #32
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80009b4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009bc:	2312      	movs	r3, #18
 80009be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80009ce:	2304      	movs	r3, #4
 80009d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80009d8:	4619      	mov	r1, r3
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <HAL_I2C_MspInit+0xc8>)
 80009dc:	f000 fdd8 	bl	8001590 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <HAL_I2C_MspInit+0xc4>)
 80009e2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80009e6:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <HAL_I2C_MspInit+0xc4>)
 80009e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ec:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_I2C_MspInit+0xc4>)
 80009f2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80009f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80009fe:	bf00      	nop
 8000a00:	37e0      	adds	r7, #224	; 0xe0
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	58001c00 	.word	0x58001c00
 8000a0c:	58024400 	.word	0x58024400
 8000a10:	58021400 	.word	0x58021400

08000a14 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af02      	add	r7, sp, #8
 8000a1a:	60ba      	str	r2, [r7, #8]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4603      	mov	r3, r0
 8000a20:	81fb      	strh	r3, [r7, #14]
 8000a22:	460b      	mov	r3, r1
 8000a24:	81bb      	strh	r3, [r7, #12]
 8000a26:	4613      	mov	r3, r2
 8000a28:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8000a2a:	89b9      	ldrh	r1, [r7, #12]
 8000a2c:	89f8      	ldrh	r0, [r7, #14]
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	2202      	movs	r2, #2
 8000a36:	f000 f813 	bl	8000a60 <I2C4_ReadReg>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d102      	bne.n	8000a46 <BSP_I2C4_ReadReg16+0x32>
  {
    ret = HAL_OK;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	e004      	b.n	8000a50 <BSP_I2C4_ReadReg16+0x3c>
  }
  else
  {
	ret  = HAL_I2C_GetError(&hi2c4);
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <BSP_I2C4_ReadReg16+0x48>)
 8000a48:	f001 f916 	bl	8001c78 <HAL_I2C_GetError>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8000a50:	697b      	ldr	r3, [r7, #20]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	24000090 	.word	0x24000090

08000a60 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af04      	add	r7, sp, #16
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	4603      	mov	r3, r0
 8000a6a:	81fb      	strh	r3, [r7, #14]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	81bb      	strh	r3, [r7, #12]
 8000a70:	4613      	mov	r3, r2
 8000a72:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hi2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8000a74:	8978      	ldrh	r0, [r7, #10]
 8000a76:	89ba      	ldrh	r2, [r7, #12]
 8000a78:	89f9      	ldrh	r1, [r7, #14]
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	9302      	str	r3, [sp, #8]
 8000a80:	8b3b      	ldrh	r3, [r7, #24]
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	4603      	mov	r3, r0
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <I2C4_ReadReg+0x44>)
 8000a8c:	f000 ffda 	bl	8001a44 <HAL_I2C_Mem_Read>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d101      	bne.n	8000a9a <I2C4_ReadReg+0x3a>
  {
    return HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e000      	b.n	8000a9c <I2C4_ReadReg+0x3c>
  }

  return HAL_I2C_STATE_ERROR;
 8000a9a:	23e0      	movs	r3, #224	; 0xe0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	24000090 	.word	0x24000090

08000aa8 <__io_putchar>:
#include "log.h"

PUTCHAR_PROTOTYPE
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ab0:	1d39      	adds	r1, r7, #4
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <__io_putchar+0x20>)
 8000aba:	f003 ff79 	bl	80049b0 <HAL_UART_Transmit>
  return ch;
 8000abe:	687b      	ldr	r3, [r7, #4]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	24000110 	.word	0x24000110

08000acc <log_format>:

void log_format(const char* tag, const char* message, va_list args)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	uint32_t time = HAL_GetTick();
 8000ad8:	f000 fc46 	bl	8001368 <HAL_GetTick>
 8000adc:	6178      	str	r0, [r7, #20]
	printf("%u [%s] ", (unsigned int)time, tag);
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	6979      	ldr	r1, [r7, #20]
 8000ae2:	4807      	ldr	r0, [pc, #28]	; (8000b00 <log_format+0x34>)
 8000ae4:	f005 f950 	bl	8005d88 <iprintf>
	vprintf(message, args);
 8000ae8:	6879      	ldr	r1, [r7, #4]
 8000aea:	68b8      	ldr	r0, [r7, #8]
 8000aec:	f005 f97a 	bl	8005de4 <viprintf>
	printf("\n");
 8000af0:	200a      	movs	r0, #10
 8000af2:	f005 f961 	bl	8005db8 <putchar>
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	08006da8 	.word	0x08006da8

08000b04 <log_error>:

void log_error(const char* message, ...)
{
 8000b04:	b40f      	push	{r0, r1, r2, r3}
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	607b      	str	r3, [r7, #4]
	log_format("error", message, args);
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	6939      	ldr	r1, [r7, #16]
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <log_error+0x28>)
 8000b18:	f7ff ffd8 	bl	8000acc <log_format>
	va_end(args);
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b26:	b004      	add	sp, #16
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	08006db4 	.word	0x08006db4

08000b30 <log_info>:

void log_info(const char* message, ...)
{
 8000b30:	b40f      	push	{r0, r1, r2, r3}
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	607b      	str	r3, [r7, #4]
	log_format("info", message, args);
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	6939      	ldr	r1, [r7, #16]
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <log_info+0x28>)
 8000b44:	f7ff ffc2 	bl	8000acc <log_format>
	va_end(args);
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b52:	b004      	add	sp, #16
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	08006dbc 	.word	0x08006dbc

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b62:	f000 fb7b 	bl	800125c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b66:	f000 f887 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6a:	f7ff fd93 	bl	8000694 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b6e:	f000 fa91 	bl	8001094 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000b72:	f000 fb41 	bl	80011f8 <MX_USB_OTG_HS_USB_Init>
  MX_I2C4_Init();
 8000b76:	f7ff fea7 	bl	80008c8 <MX_I2C4_Init>
  MX_RAMECC_Init();
 8000b7a:	f000 f8f9 	bl	8000d70 <MX_RAMECC_Init>
  /* USER CODE BEGIN 2 */
  log_info("Main Init");
 8000b7e:	4836      	ldr	r0, [pc, #216]	; (8000c58 <main+0xfc>)
 8000b80:	f7ff ffd6 	bl	8000b30 <log_info>
  /* USER CODE END 2 */
  uint16_t bat_version = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	817b      	strh	r3, [r7, #10]
  if (BSP_I2C4_ReadReg16(MAX17048_I2C_ADDR, MAX17048_VERSION, (uint8_t *)&bat_version, 2) != HAL_OK) {
 8000b88:	f107 020a 	add.w	r2, r7, #10
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	2108      	movs	r1, #8
 8000b90:	2036      	movs	r0, #54	; 0x36
 8000b92:	f7ff ff3f 	bl	8000a14 <BSP_I2C4_ReadReg16>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <main+0x46>
	  log_error("Error reading from MAX17048");
 8000b9c:	482f      	ldr	r0, [pc, #188]	; (8000c5c <main+0x100>)
 8000b9e:	f7ff ffb1 	bl	8000b04 <log_error>
  }
  if (bat_version & 0x0010) {
 8000ba2:	897b      	ldrh	r3, [r7, #10]
 8000ba4:	f003 0310 	and.w	r3, r3, #16
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d005      	beq.n	8000bb8 <main+0x5c>
	  log_error("Error reading from MAX17048, version: %hu", bat_version);
 8000bac:	897b      	ldrh	r3, [r7, #10]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	482b      	ldr	r0, [pc, #172]	; (8000c60 <main+0x104>)
 8000bb2:	f7ff ffa7 	bl	8000b04 <log_error>
 8000bb6:	e004      	b.n	8000bc2 <main+0x66>
  }
  else {
	  log_info("Success reading from MAX17048, version: %hu", bat_version);
 8000bb8:	897b      	ldrh	r3, [r7, #10]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4829      	ldr	r0, [pc, #164]	; (8000c64 <main+0x108>)
 8000bbe:	f7ff ffb7 	bl	8000b30 <log_info>
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	uint16_t soc = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	813b      	strh	r3, [r7, #8]
	float socf = 0;
 8000bc6:	f04f 0300 	mov.w	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
	BSP_I2C4_ReadReg16(MAX17048_I2C_ADDR, MAX17048_VERSION, (uint8_t *)&soc, 2);
 8000bcc:	f107 0208 	add.w	r2, r7, #8
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	2108      	movs	r1, #8
 8000bd4:	2036      	movs	r0, #54	; 0x36
 8000bd6:	f7ff ff1d 	bl	8000a14 <BSP_I2C4_ReadReg16>
	soc = REV16_A(soc);
 8000bda:	893b      	ldrh	r3, [r7, #8]
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	b21a      	sxth	r2, r3
 8000be0:	893b      	ldrh	r3, [r7, #8]
 8000be2:	0a1b      	lsrs	r3, r3, #8
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	813b      	strh	r3, [r7, #8]
	socf = (float)soc / 256.f;
 8000bf0:	893b      	ldrh	r3, [r7, #8]
 8000bf2:	ee07 3a90 	vmov	s15, r3
 8000bf6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bfa:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000c68 <main+0x10c>
 8000bfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c02:	edc7 7a03 	vstr	s15, [r7, #12]

	log_info("SOC %f", socf);
 8000c06:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c0e:	ec53 2b17 	vmov	r2, r3, d7
 8000c12:	4816      	ldr	r0, [pc, #88]	; (8000c6c <main+0x110>)
 8000c14:	f7ff ff8c 	bl	8000b30 <log_info>

	uint16_t power = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	80fb      	strh	r3, [r7, #6]
	int16_t current = 0; //2's compliment
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	80bb      	strh	r3, [r7, #4]
	BSP_I2C4_ReadReg16(INA219_I2C_ADR_LOW, INA219_POWER, (uint8_t *)&power, 2);
 8000c20:	1dba      	adds	r2, r7, #6
 8000c22:	2302      	movs	r3, #2
 8000c24:	2103      	movs	r1, #3
 8000c26:	2040      	movs	r0, #64	; 0x40
 8000c28:	f7ff fef4 	bl	8000a14 <BSP_I2C4_ReadReg16>
	BSP_I2C4_ReadReg16(INA219_I2C_ADR_LOW, INA219_CURRENT, (uint8_t *)&current, 2);
 8000c2c:	1d3a      	adds	r2, r7, #4
 8000c2e:	2302      	movs	r3, #2
 8000c30:	2104      	movs	r1, #4
 8000c32:	2040      	movs	r0, #64	; 0x40
 8000c34:	f7ff feee 	bl	8000a14 <BSP_I2C4_ReadReg16>
	log_info("Power: %hu mW", power);
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <main+0x114>)
 8000c3e:	f7ff ff77 	bl	8000b30 <log_info>
	log_info("Current %hi amps", current);
 8000c42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c46:	4619      	mov	r1, r3
 8000c48:	480a      	ldr	r0, [pc, #40]	; (8000c74 <main+0x118>)
 8000c4a:	f7ff ff71 	bl	8000b30 <log_info>
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 8000c4e:	2064      	movs	r0, #100	; 0x64
 8000c50:	f000 fb96 	bl	8001380 <HAL_Delay>
  {
 8000c54:	e7b5      	b.n	8000bc2 <main+0x66>
 8000c56:	bf00      	nop
 8000c58:	08006dcc 	.word	0x08006dcc
 8000c5c:	08006dd8 	.word	0x08006dd8
 8000c60:	08006df4 	.word	0x08006df4
 8000c64:	08006e20 	.word	0x08006e20
 8000c68:	43800000 	.word	0x43800000
 8000c6c:	08006e4c 	.word	0x08006e4c
 8000c70:	08006e54 	.word	0x08006e54
 8000c74:	08006e64 	.word	0x08006e64

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b09c      	sub	sp, #112	; 0x70
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	224c      	movs	r2, #76	; 0x4c
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f005 f876 	bl	8005d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2220      	movs	r2, #32
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f005 f870 	bl	8005d78 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000c98:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <SystemClock_Config+0xe4>)
 8000c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ca2:	2004      	movs	r0, #4
 8000ca4:	f001 fade 	bl	8002264 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ca8:	2300      	movs	r3, #0
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <SystemClock_Config+0xe8>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a2b      	ldr	r2, [pc, #172]	; (8000d60 <SystemClock_Config+0xe8>)
 8000cb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <SystemClock_Config+0xe8>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cc4:	bf00      	nop
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <SystemClock_Config+0xe8>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cd2:	d1f8      	bne.n	8000cc6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000cd4:	2321      	movs	r3, #33	; 0x21
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cd8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000cee:	2318      	movs	r3, #24
 8000cf0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cfe:	230c      	movs	r3, #12
 8000d00:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fb40 	bl	8002394 <HAL_RCC_OscConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d1a:	f000 f823 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1e:	233f      	movs	r3, #63	; 0x3f
 8000d20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d22:	2303      	movs	r3, #3
 8000d24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2102      	movs	r1, #2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 ff2a 	bl	8002b9c <HAL_RCC_ClockConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000d4e:	f000 f809 	bl	8000d64 <Error_Handler>
  }
}
 8000d52:	bf00      	nop
 8000d54:	3770      	adds	r7, #112	; 0x70
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	58024400 	.word	0x58024400
 8000d60:	58024800 	.word	0x58024800

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <Error_Handler+0x8>
	...

08000d70 <MX_RAMECC_Init>:
RAMECC_HandleTypeDef hramecc_m2;
RAMECC_HandleTypeDef hramecc_m3;

/* RAMECC init function */
void MX_RAMECC_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END RAMECC_Init 1 */

  /** Initialize RAMECC M1 : ITCM-RAM
  */
  hramecc_m1.Instance = RAMECC_Monitor1;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_RAMECC_Init+0x4c>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <MX_RAMECC_Init+0x50>)
 8000d78:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc_m1) != HAL_OK)
 8000d7a:	4810      	ldr	r0, [pc, #64]	; (8000dbc <MX_RAMECC_Init+0x4c>)
 8000d7c:	f001 facc 	bl	8002318 <HAL_RAMECC_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_RAMECC_Init+0x1a>
  {
    Error_Handler();
 8000d86:	f7ff ffed 	bl	8000d64 <Error_Handler>
  }

  /** Initialize RAMECC M2 : D0TCM-RAM
  */
  hramecc_m2.Instance = RAMECC_Monitor2;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_RAMECC_Init+0x54>)
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <MX_RAMECC_Init+0x58>)
 8000d8e:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc_m2) != HAL_OK)
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <MX_RAMECC_Init+0x54>)
 8000d92:	f001 fac1 	bl	8002318 <HAL_RAMECC_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_RAMECC_Init+0x30>
  {
    Error_Handler();
 8000d9c:	f7ff ffe2 	bl	8000d64 <Error_Handler>
  }

  /** Initialize RAMECC M3 : D1TCM-RAM
  */
  hramecc_m3.Instance = RAMECC_Monitor3;
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <MX_RAMECC_Init+0x5c>)
 8000da2:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <MX_RAMECC_Init+0x60>)
 8000da4:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc_m3) != HAL_OK)
 8000da6:	4809      	ldr	r0, [pc, #36]	; (8000dcc <MX_RAMECC_Init+0x5c>)
 8000da8:	f001 fab6 	bl	8002318 <HAL_RAMECC_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_RAMECC_Init+0x46>
  {
    Error_Handler();
 8000db2:	f7ff ffd7 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN RAMECC_Init 2 */

  /* USER CODE END RAMECC_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	240000dc 	.word	0x240000dc
 8000dc0:	52009020 	.word	0x52009020
 8000dc4:	240000ec 	.word	0x240000ec
 8000dc8:	52009040 	.word	0x52009040
 8000dcc:	240000fc 	.word	0x240000fc
 8000dd0:	52009060 	.word	0x52009060

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_MspInit+0x30>)
 8000ddc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000de0:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <HAL_MspInit+0x30>)
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_MspInit+0x30>)
 8000dec:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	58024400 	.word	0x58024400

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <NMI_Handler+0x4>

08000e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e54:	f000 fa74 	bl	8001340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	e00a      	b.n	8000e84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e6e:	f3af 8000 	nop.w
 8000e72:	4601      	mov	r1, r0
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60ba      	str	r2, [r7, #8]
 8000e7a:	b2ca      	uxtb	r2, r1
 8000e7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf0      	blt.n	8000e6e <_read+0x12>
	}

return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	e009      	b.n	8000ebc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	60ba      	str	r2, [r7, #8]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fdf9 	bl	8000aa8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	dbf1      	blt.n	8000ea8 <_write+0x12>
	}
	return len;
 8000ec4:	687b      	ldr	r3, [r7, #4]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <_close>:

int _close(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <_isatty>:

int _isatty(int file)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
	return 0;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f68:	f004 fedc 	bl	8005d24 <__errno>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	220c      	movs	r2, #12
 8000f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	e009      	b.n	8000f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <_sbrk+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	24100000 	.word	0x24100000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	2400010c 	.word	0x2400010c
 8000fa0:	240001b8 	.word	0x240001b8

08000fa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b32      	ldr	r3, [pc, #200]	; (8001074 <SystemInit+0xd0>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fae:	4a31      	ldr	r2, [pc, #196]	; (8001074 <SystemInit+0xd0>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fb8:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <SystemInit+0xd4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d807      	bhi.n	8000fd4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <SystemInit+0xd4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f023 030f 	bic.w	r3, r3, #15
 8000fcc:	4a2a      	ldr	r2, [pc, #168]	; (8001078 <SystemInit+0xd4>)
 8000fce:	f043 0303 	orr.w	r3, r3, #3
 8000fd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fd4:	4b29      	ldr	r3, [pc, #164]	; (800107c <SystemInit+0xd8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a28      	ldr	r2, [pc, #160]	; (800107c <SystemInit+0xd8>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fe0:	4b26      	ldr	r3, [pc, #152]	; (800107c <SystemInit+0xd8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <SystemInit+0xd8>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4924      	ldr	r1, [pc, #144]	; (800107c <SystemInit+0xd8>)
 8000fec:	4b24      	ldr	r3, [pc, #144]	; (8001080 <SystemInit+0xdc>)
 8000fee:	4013      	ands	r3, r2
 8000ff0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <SystemInit+0xd4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d007      	beq.n	800100e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <SystemInit+0xd4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f023 030f 	bic.w	r3, r3, #15
 8001006:	4a1c      	ldr	r2, [pc, #112]	; (8001078 <SystemInit+0xd4>)
 8001008:	f043 0303 	orr.w	r3, r3, #3
 800100c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <SystemInit+0xd8>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <SystemInit+0xd8>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <SystemInit+0xd8>)
 800101c:	2200      	movs	r2, #0
 800101e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <SystemInit+0xd8>)
 8001022:	4a18      	ldr	r2, [pc, #96]	; (8001084 <SystemInit+0xe0>)
 8001024:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <SystemInit+0xd8>)
 8001028:	4a17      	ldr	r2, [pc, #92]	; (8001088 <SystemInit+0xe4>)
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <SystemInit+0xd8>)
 800102e:	4a17      	ldr	r2, [pc, #92]	; (800108c <SystemInit+0xe8>)
 8001030:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <SystemInit+0xd8>)
 8001034:	2200      	movs	r2, #0
 8001036:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <SystemInit+0xd8>)
 800103a:	4a14      	ldr	r2, [pc, #80]	; (800108c <SystemInit+0xe8>)
 800103c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <SystemInit+0xd8>)
 8001040:	2200      	movs	r2, #0
 8001042:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <SystemInit+0xd8>)
 8001046:	4a11      	ldr	r2, [pc, #68]	; (800108c <SystemInit+0xe8>)
 8001048:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <SystemInit+0xd8>)
 800104c:	2200      	movs	r2, #0
 800104e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <SystemInit+0xd8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a09      	ldr	r2, [pc, #36]	; (800107c <SystemInit+0xd8>)
 8001056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800105a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <SystemInit+0xd8>)
 800105e:	2200      	movs	r2, #0
 8001060:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <SystemInit+0xec>)
 8001064:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001068:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00
 8001078:	52002000 	.word	0x52002000
 800107c:	58024400 	.word	0x58024400
 8001080:	eaf6ed7f 	.word	0xeaf6ed7f
 8001084:	02020200 	.word	0x02020200
 8001088:	01ff0000 	.word	0x01ff0000
 800108c:	01010280 	.word	0x01010280
 8001090:	52004000 	.word	0x52004000

08001094 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001098:	4b22      	ldr	r3, [pc, #136]	; (8001124 <MX_USART3_UART_Init+0x90>)
 800109a:	4a23      	ldr	r2, [pc, #140]	; (8001128 <MX_USART3_UART_Init+0x94>)
 800109c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010dc:	4811      	ldr	r0, [pc, #68]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010de:	f003 fc17 	bl	8004910 <HAL_UART_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010e8:	f7ff fe3c 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ec:	2100      	movs	r1, #0
 80010ee:	480d      	ldr	r0, [pc, #52]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010f0:	f004 fd4e 	bl	8005b90 <HAL_UARTEx_SetTxFifoThreshold>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010fa:	f7ff fe33 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010fe:	2100      	movs	r1, #0
 8001100:	4808      	ldr	r0, [pc, #32]	; (8001124 <MX_USART3_UART_Init+0x90>)
 8001102:	f004 fd83 	bl	8005c0c <HAL_UARTEx_SetRxFifoThreshold>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800110c:	f7ff fe2a 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_USART3_UART_Init+0x90>)
 8001112:	f004 fd04 	bl	8005b1e <HAL_UARTEx_DisableFifoMode>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800111c:	f7ff fe22 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	24000110 	.word	0x24000110
 8001128:	40004800 	.word	0x40004800

0800112c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b0b8      	sub	sp, #224	; 0xe0
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	22b8      	movs	r2, #184	; 0xb8
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f004 fe13 	bl	8005d78 <memset>
  if(uartHandle->Instance==USART3)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a25      	ldr	r2, [pc, #148]	; (80011ec <HAL_UART_MspInit+0xc0>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d142      	bne.n	80011e2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800115c:	2302      	movs	r3, #2
 800115e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4618      	mov	r0, r3
 800116c:	f002 f8a2 	bl	80032b4 <HAL_RCCEx_PeriphCLKConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001176:	f7ff fdf5 	bl	8000d64 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <HAL_UART_MspInit+0xc4>)
 800117c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001180:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <HAL_UART_MspInit+0xc4>)
 8001182:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001186:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_UART_MspInit+0xc4>)
 800118c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_UART_MspInit+0xc4>)
 800119a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800119e:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <HAL_UART_MspInit+0xc4>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <HAL_UART_MspInit+0xc4>)
 80011aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011d0:	2307      	movs	r3, #7
 80011d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011da:	4619      	mov	r1, r3
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <HAL_UART_MspInit+0xc8>)
 80011de:	f000 f9d7 	bl	8001590 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011e2:	bf00      	nop
 80011e4:	37e0      	adds	r7, #224	; 0xe0
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40004800 	.word	0x40004800
 80011f0:	58024400 	.word	0x58024400
 80011f4:	58020c00 	.word	0x58020c00

080011f8 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001240 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800120c:	f7ff feca 	bl	8000fa4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	; (8001248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	; (8001254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001236:	f004 fd7b 	bl	8005d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123a:	f7ff fc8f 	bl	8000b5c <main>
  bx  lr
 800123e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001240:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001244:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001248:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 800124c:	08006f58 	.word	0x08006f58
  ldr r2, =_sbss
 8001250:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001254:	240001b4 	.word	0x240001b4

08001258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC_IRQHandler>
	...

0800125c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001262:	2003      	movs	r0, #3
 8001264:	f000 f962 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001268:	f001 fe4e 	bl	8002f08 <HAL_RCC_GetSysClockFreq>
 800126c:	4602      	mov	r2, r0
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_Init+0x68>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	0a1b      	lsrs	r3, r3, #8
 8001274:	f003 030f 	and.w	r3, r3, #15
 8001278:	4913      	ldr	r1, [pc, #76]	; (80012c8 <HAL_Init+0x6c>)
 800127a:	5ccb      	ldrb	r3, [r1, r3]
 800127c:	f003 031f 	and.w	r3, r3, #31
 8001280:	fa22 f303 	lsr.w	r3, r2, r3
 8001284:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_Init+0x68>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <HAL_Init+0x6c>)
 8001290:	5cd3      	ldrb	r3, [r2, r3]
 8001292:	f003 031f 	and.w	r3, r3, #31
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	fa22 f303 	lsr.w	r3, r2, r3
 800129c:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <HAL_Init+0x70>)
 800129e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012a0:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_Init+0x74>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a6:	200f      	movs	r0, #15
 80012a8:	f000 f814 	bl	80012d4 <HAL_InitTick>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e002      	b.n	80012bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012b6:	f7ff fd8d 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	58024400 	.word	0x58024400
 80012c8:	08006e78 	.word	0x08006e78
 80012cc:	24000004 	.word	0x24000004
 80012d0:	24000000 	.word	0x24000000

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_InitTick+0x60>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e021      	b.n	800132c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <HAL_InitTick+0x64>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_InitTick+0x60>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f939 	bl	8001576 <HAL_SYSTICK_Config>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e00e      	b.n	800132c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d80a      	bhi.n	800132a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f000 f911 	bl	8001542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001320:	4a06      	ldr	r2, [pc, #24]	; (800133c <HAL_InitTick+0x68>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e000      	b.n	800132c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	2400000c 	.word	0x2400000c
 8001338:	24000000 	.word	0x24000000
 800133c:	24000008 	.word	0x24000008

08001340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x20>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x24>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <HAL_IncTick+0x24>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	2400000c 	.word	0x2400000c
 8001364:	240001a0 	.word	0x240001a0

08001368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	240001a0 	.word	0x240001a0

08001380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff ffee 	bl	8001368 <HAL_GetTick>
 800138c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001398:	d005      	beq.n	80013a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_Delay+0x44>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013a6:	bf00      	nop
 80013a8:	f7ff ffde 	bl	8001368 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d8f7      	bhi.n	80013a8 <HAL_Delay+0x28>
  {
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2400000c 	.word	0x2400000c

080013c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <__NVIC_SetPriorityGrouping+0x40>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <__NVIC_SetPriorityGrouping+0x40>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00
 800140c:	05fa0000 	.word	0x05fa0000

08001410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	; (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <__NVIC_SetPriority+0x50>)
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f7ff ff8e 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff47 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001550:	f7ff ff5e 	bl	8001410 <__NVIC_GetPriorityGrouping>
 8001554:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	6978      	ldr	r0, [r7, #20]
 800155c:	f7ff ff90 	bl	8001480 <NVIC_EncodePriority>
 8001560:	4602      	mov	r2, r0
 8001562:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff5f 	bl	800142c <__NVIC_SetPriority>
}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffb2 	bl	80014e8 <SysTick_Config>
 8001584:	4603      	mov	r3, r0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800159e:	4b89      	ldr	r3, [pc, #548]	; (80017c4 <HAL_GPIO_Init+0x234>)
 80015a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015a2:	e194      	b.n	80018ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	2101      	movs	r1, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 8186 	beq.w	80018c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d005      	beq.n	80015d4 <HAL_GPIO_Init+0x44>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d130      	bne.n	8001636 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800160a:	2201      	movs	r2, #1
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	091b      	lsrs	r3, r3, #4
 8001620:	f003 0201 	and.w	r2, r3, #1
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	2b03      	cmp	r3, #3
 8001640:	d017      	beq.n	8001672 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	2203      	movs	r2, #3
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d123      	bne.n	80016c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	08da      	lsrs	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3208      	adds	r2, #8
 8001686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	220f      	movs	r2, #15
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	691a      	ldr	r2, [r3, #16]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	08da      	lsrs	r2, r3, #3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3208      	adds	r2, #8
 80016c0:	69b9      	ldr	r1, [r7, #24]
 80016c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	2203      	movs	r2, #3
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0203 	and.w	r2, r3, #3
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 80e0 	beq.w	80018c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001708:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <HAL_GPIO_Init+0x238>)
 800170a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800170e:	4a2e      	ldr	r2, [pc, #184]	; (80017c8 <HAL_GPIO_Init+0x238>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001718:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <HAL_GPIO_Init+0x238>)
 800171a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001726:	4a29      	ldr	r2, [pc, #164]	; (80017cc <HAL_GPIO_Init+0x23c>)
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	3302      	adds	r3, #2
 800172e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	220f      	movs	r2, #15
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a20      	ldr	r2, [pc, #128]	; (80017d0 <HAL_GPIO_Init+0x240>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d052      	beq.n	80017f8 <HAL_GPIO_Init+0x268>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a1f      	ldr	r2, [pc, #124]	; (80017d4 <HAL_GPIO_Init+0x244>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d031      	beq.n	80017be <HAL_GPIO_Init+0x22e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a1e      	ldr	r2, [pc, #120]	; (80017d8 <HAL_GPIO_Init+0x248>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d02b      	beq.n	80017ba <HAL_GPIO_Init+0x22a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <HAL_GPIO_Init+0x24c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d025      	beq.n	80017b6 <HAL_GPIO_Init+0x226>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a1c      	ldr	r2, [pc, #112]	; (80017e0 <HAL_GPIO_Init+0x250>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d01f      	beq.n	80017b2 <HAL_GPIO_Init+0x222>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a1b      	ldr	r2, [pc, #108]	; (80017e4 <HAL_GPIO_Init+0x254>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d019      	beq.n	80017ae <HAL_GPIO_Init+0x21e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a1a      	ldr	r2, [pc, #104]	; (80017e8 <HAL_GPIO_Init+0x258>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d013      	beq.n	80017aa <HAL_GPIO_Init+0x21a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a19      	ldr	r2, [pc, #100]	; (80017ec <HAL_GPIO_Init+0x25c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d00d      	beq.n	80017a6 <HAL_GPIO_Init+0x216>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a18      	ldr	r2, [pc, #96]	; (80017f0 <HAL_GPIO_Init+0x260>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d007      	beq.n	80017a2 <HAL_GPIO_Init+0x212>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a17      	ldr	r2, [pc, #92]	; (80017f4 <HAL_GPIO_Init+0x264>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_GPIO_Init+0x20e>
 800179a:	2309      	movs	r3, #9
 800179c:	e02d      	b.n	80017fa <HAL_GPIO_Init+0x26a>
 800179e:	230a      	movs	r3, #10
 80017a0:	e02b      	b.n	80017fa <HAL_GPIO_Init+0x26a>
 80017a2:	2308      	movs	r3, #8
 80017a4:	e029      	b.n	80017fa <HAL_GPIO_Init+0x26a>
 80017a6:	2307      	movs	r3, #7
 80017a8:	e027      	b.n	80017fa <HAL_GPIO_Init+0x26a>
 80017aa:	2306      	movs	r3, #6
 80017ac:	e025      	b.n	80017fa <HAL_GPIO_Init+0x26a>
 80017ae:	2305      	movs	r3, #5
 80017b0:	e023      	b.n	80017fa <HAL_GPIO_Init+0x26a>
 80017b2:	2304      	movs	r3, #4
 80017b4:	e021      	b.n	80017fa <HAL_GPIO_Init+0x26a>
 80017b6:	2303      	movs	r3, #3
 80017b8:	e01f      	b.n	80017fa <HAL_GPIO_Init+0x26a>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e01d      	b.n	80017fa <HAL_GPIO_Init+0x26a>
 80017be:	2301      	movs	r3, #1
 80017c0:	e01b      	b.n	80017fa <HAL_GPIO_Init+0x26a>
 80017c2:	bf00      	nop
 80017c4:	58000080 	.word	0x58000080
 80017c8:	58024400 	.word	0x58024400
 80017cc:	58000400 	.word	0x58000400
 80017d0:	58020000 	.word	0x58020000
 80017d4:	58020400 	.word	0x58020400
 80017d8:	58020800 	.word	0x58020800
 80017dc:	58020c00 	.word	0x58020c00
 80017e0:	58021000 	.word	0x58021000
 80017e4:	58021400 	.word	0x58021400
 80017e8:	58021800 	.word	0x58021800
 80017ec:	58021c00 	.word	0x58021c00
 80017f0:	58022000 	.word	0x58022000
 80017f4:	58022400 	.word	0x58022400
 80017f8:	2300      	movs	r3, #0
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	f002 0203 	and.w	r2, r2, #3
 8001800:	0092      	lsls	r2, r2, #2
 8001802:	4093      	lsls	r3, r2
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800180a:	4938      	ldr	r1, [pc, #224]	; (80018ec <HAL_GPIO_Init+0x35c>)
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	3302      	adds	r3, #2
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800183e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800186c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	3301      	adds	r3, #1
 80018cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f47f ae63 	bne.w	80015a4 <HAL_GPIO_Init+0x14>
  }
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	3724      	adds	r7, #36	; 0x24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	58000400 	.word	0x58000400

080018f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
 80018fc:	4613      	mov	r3, r2
 80018fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001900:	787b      	ldrb	r3, [r7, #1]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001906:	887a      	ldrh	r2, [r7, #2]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800190c:	e003      	b.n	8001916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800190e:	887b      	ldrh	r3, [r7, #2]
 8001910:	041a      	lsls	r2, r3, #16
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	619a      	str	r2, [r3, #24]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e07f      	b.n	8001a36 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d106      	bne.n	8001950 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7fe fffc 	bl	8000948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2224      	movs	r2, #36	; 0x24
 8001954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001974:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001984:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d107      	bne.n	800199e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	e006      	b.n	80019ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d104      	bne.n	80019be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_I2C_Init+0x11c>)
 80019ca:	430b      	orrs	r3, r1
 80019cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691a      	ldr	r2, [r3, #16]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69d9      	ldr	r1, [r3, #28]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1a      	ldr	r2, [r3, #32]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2220      	movs	r2, #32
 8001a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	02008000 	.word	0x02008000

08001a44 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	4611      	mov	r1, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	4603      	mov	r3, r0
 8001a54:	817b      	strh	r3, [r7, #10]
 8001a56:	460b      	mov	r3, r1
 8001a58:	813b      	strh	r3, [r7, #8]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b20      	cmp	r3, #32
 8001a68:	f040 80fd 	bne.w	8001c66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <HAL_I2C_Mem_Read+0x34>
 8001a72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d105      	bne.n	8001a84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0f1      	b.n	8001c68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_I2C_Mem_Read+0x4e>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e0ea      	b.n	8001c68 <HAL_I2C_Mem_Read+0x224>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a9a:	f7ff fc65 	bl	8001368 <HAL_GetTick>
 8001a9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2319      	movs	r3, #25
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 f967 	bl	8001d80 <I2C_WaitOnFlagUntilTimeout>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0d5      	b.n	8001c68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2222      	movs	r2, #34	; 0x22
 8001ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2240      	movs	r2, #64	; 0x40
 8001ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6a3a      	ldr	r2, [r7, #32]
 8001ad6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001adc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ae4:	88f8      	ldrh	r0, [r7, #6]
 8001ae6:	893a      	ldrh	r2, [r7, #8]
 8001ae8:	8979      	ldrh	r1, [r7, #10]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	4603      	mov	r3, r0
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 f8cb 	bl	8001c90 <I2C_RequestMemoryRead>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0ad      	b.n	8001c68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2bff      	cmp	r3, #255	; 0xff
 8001b14:	d90e      	bls.n	8001b34 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	22ff      	movs	r2, #255	; 0xff
 8001b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	8979      	ldrh	r1, [r7, #10]
 8001b24:	4b52      	ldr	r3, [pc, #328]	; (8001c70 <HAL_I2C_Mem_Read+0x22c>)
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 facf 	bl	80020d0 <I2C_TransferConfig>
 8001b32:	e00f      	b.n	8001b54 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	8979      	ldrh	r1, [r7, #10]
 8001b46:	4b4a      	ldr	r3, [pc, #296]	; (8001c70 <HAL_I2C_Mem_Read+0x22c>)
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 fabe 	bl	80020d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2104      	movs	r1, #4
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 f90e 	bl	8001d80 <I2C_WaitOnFlagUntilTimeout>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e07c      	b.n	8001c68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d034      	beq.n	8001c14 <HAL_I2C_Mem_Read+0x1d0>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d130      	bne.n	8001c14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2180      	movs	r1, #128	; 0x80
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f000 f8df 	bl	8001d80 <I2C_WaitOnFlagUntilTimeout>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e04d      	b.n	8001c68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	2bff      	cmp	r3, #255	; 0xff
 8001bd4:	d90e      	bls.n	8001bf4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	22ff      	movs	r2, #255	; 0xff
 8001bda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	8979      	ldrh	r1, [r7, #10]
 8001be4:	2300      	movs	r3, #0
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 fa6f 	bl	80020d0 <I2C_TransferConfig>
 8001bf2:	e00f      	b.n	8001c14 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	8979      	ldrh	r1, [r7, #10]
 8001c06:	2300      	movs	r3, #0
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 fa5e 	bl	80020d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d19a      	bne.n	8001b54 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 f92c 	bl	8001e80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e01a      	b.n	8001c68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2220      	movs	r2, #32
 8001c38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6859      	ldr	r1, [r3, #4]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_I2C_Mem_Read+0x230>)
 8001c46:	400b      	ands	r3, r1
 8001c48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	e000      	b.n	8001c68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001c66:	2302      	movs	r3, #2
  }
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	80002400 	.word	0x80002400
 8001c74:	fe00e800 	.word	0xfe00e800

08001c78 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	4608      	mov	r0, r1
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	817b      	strh	r3, [r7, #10]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	813b      	strh	r3, [r7, #8]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	8979      	ldrh	r1, [r7, #10]
 8001cb0:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <I2C_RequestMemoryRead+0xa4>)
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 fa0a 	bl	80020d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	69b9      	ldr	r1, [r7, #24]
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 f89d 	bl	8001e00 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e02c      	b.n	8001d2a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d105      	bne.n	8001ce2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cd6:	893b      	ldrh	r3, [r7, #8]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
 8001ce0:	e015      	b.n	8001d0e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ce2:	893b      	ldrh	r3, [r7, #8]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	69b9      	ldr	r1, [r7, #24]
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 f883 	bl	8001e00 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e012      	b.n	8001d2a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d04:	893b      	ldrh	r3, [r7, #8]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	2200      	movs	r2, #0
 8001d16:	2140      	movs	r1, #64	; 0x40
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 f831 	bl	8001d80 <I2C_WaitOnFlagUntilTimeout>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	80002000 	.word	0x80002000

08001d38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d103      	bne.n	8001d56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2200      	movs	r2, #0
 8001d54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d007      	beq.n	8001d74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	699a      	ldr	r2, [r3, #24]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	619a      	str	r2, [r3, #24]
  }
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d90:	e022      	b.n	8001dd8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d01e      	beq.n	8001dd8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d9a:	f7ff fae5 	bl	8001368 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d302      	bcc.n	8001db0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d113      	bne.n	8001dd8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	f043 0220 	orr.w	r2, r3, #32
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e00f      	b.n	8001df8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699a      	ldr	r2, [r3, #24]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	4013      	ands	r3, r2
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	bf0c      	ite	eq
 8001de8:	2301      	moveq	r3, #1
 8001dea:	2300      	movne	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d0cd      	beq.n	8001d92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e0c:	e02c      	b.n	8001e68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 f870 	bl	8001ef8 <I2C_IsErrorOccurred>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e02a      	b.n	8001e78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e28:	d01e      	beq.n	8001e68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e2a:	f7ff fa9d 	bl	8001368 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d302      	bcc.n	8001e40 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d113      	bne.n	8001e68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	f043 0220 	orr.w	r2, r3, #32
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e007      	b.n	8001e78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d1cb      	bne.n	8001e0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e8c:	e028      	b.n	8001ee0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f830 	bl	8001ef8 <I2C_IsErrorOccurred>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e026      	b.n	8001ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ea2:	f7ff fa61 	bl	8001368 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d302      	bcc.n	8001eb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d113      	bne.n	8001ee0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	f043 0220 	orr.w	r2, r3, #32
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e007      	b.n	8001ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f003 0320 	and.w	r3, r3, #32
 8001eea:	2b20      	cmp	r3, #32
 8001eec:	d1cf      	bne.n	8001e8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d075      	beq.n	8002010 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2210      	movs	r2, #16
 8001f2a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f2c:	e056      	b.n	8001fdc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f34:	d052      	beq.n	8001fdc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f36:	f7ff fa17 	bl	8001368 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d302      	bcc.n	8001f4c <I2C_IsErrorOccurred+0x54>
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d147      	bne.n	8001fdc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f5e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f6e:	d12e      	bne.n	8001fce <I2C_IsErrorOccurred+0xd6>
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f76:	d02a      	beq.n	8001fce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001f78:	7cfb      	ldrb	r3, [r7, #19]
 8001f7a:	2b20      	cmp	r3, #32
 8001f7c:	d027      	beq.n	8001fce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f8c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f8e:	f7ff f9eb 	bl	8001368 <HAL_GetTick>
 8001f92:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f94:	e01b      	b.n	8001fce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f96:	f7ff f9e7 	bl	8001368 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b19      	cmp	r3, #25
 8001fa2:	d914      	bls.n	8001fce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa8:	f043 0220 	orr.w	r2, r3, #32
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	d1dc      	bne.n	8001f96 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	d003      	beq.n	8001ff2 <I2C_IsErrorOccurred+0xfa>
 8001fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d09d      	beq.n	8001f2e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ff2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d103      	bne.n	8002002 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2220      	movs	r2, #32
 8002000:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	f043 0304 	orr.w	r3, r3, #4
 8002008:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002032:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00b      	beq.n	800205c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	f043 0308 	orr.w	r3, r3, #8
 800204a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002054:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002076:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800207e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002082:	2b00      	cmp	r3, #0
 8002084:	d01c      	beq.n	80020c0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f7ff fe56 	bl	8001d38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6859      	ldr	r1, [r3, #4]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <I2C_IsErrorOccurred+0x1d4>)
 8002098:	400b      	ands	r3, r1
 800209a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80020c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3728      	adds	r7, #40	; 0x28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	fe00e800 	.word	0xfe00e800

080020d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b087      	sub	sp, #28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	817b      	strh	r3, [r7, #10]
 80020de:	4613      	mov	r3, r2
 80020e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020e2:	897b      	ldrh	r3, [r7, #10]
 80020e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020e8:	7a7b      	ldrb	r3, [r7, #9]
 80020ea:	041b      	lsls	r3, r3, #16
 80020ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020f0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020fe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	0d5b      	lsrs	r3, r3, #21
 800210a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <I2C_TransferConfig+0x60>)
 8002110:	430b      	orrs	r3, r1
 8002112:	43db      	mvns	r3, r3
 8002114:	ea02 0103 	and.w	r1, r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	430a      	orrs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002122:	bf00      	nop
 8002124:	371c      	adds	r7, #28
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	03ff63ff 	.word	0x03ff63ff

08002134 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b20      	cmp	r3, #32
 8002148:	d138      	bne.n	80021bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002154:	2302      	movs	r3, #2
 8002156:	e032      	b.n	80021be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2224      	movs	r2, #36	; 0x24
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002186:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6819      	ldr	r1, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0201 	orr.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	e000      	b.n	80021be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021bc:	2302      	movs	r3, #2
  }
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b085      	sub	sp, #20
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b20      	cmp	r3, #32
 80021de:	d139      	bne.n	8002254 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e033      	b.n	8002256 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2224      	movs	r2, #36	; 0x24
 80021fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0201 	bic.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800221c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0201 	orr.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	e000      	b.n	8002256 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002254:	2302      	movs	r3, #2
  }
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800226c:	4b29      	ldr	r3, [pc, #164]	; (8002314 <HAL_PWREx_ConfigSupply+0xb0>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	2b06      	cmp	r3, #6
 8002276:	d00a      	beq.n	800228e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002278:	4b26      	ldr	r3, [pc, #152]	; (8002314 <HAL_PWREx_ConfigSupply+0xb0>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	429a      	cmp	r2, r3
 8002284:	d001      	beq.n	800228a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e040      	b.n	800230c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e03e      	b.n	800230c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800228e:	4b21      	ldr	r3, [pc, #132]	; (8002314 <HAL_PWREx_ConfigSupply+0xb0>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002296:	491f      	ldr	r1, [pc, #124]	; (8002314 <HAL_PWREx_ConfigSupply+0xb0>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4313      	orrs	r3, r2
 800229c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800229e:	f7ff f863 	bl	8001368 <HAL_GetTick>
 80022a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022a4:	e009      	b.n	80022ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022a6:	f7ff f85f 	bl	8001368 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022b4:	d901      	bls.n	80022ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e028      	b.n	800230c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022ba:	4b16      	ldr	r3, [pc, #88]	; (8002314 <HAL_PWREx_ConfigSupply+0xb0>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022c6:	d1ee      	bne.n	80022a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b1e      	cmp	r3, #30
 80022cc:	d008      	beq.n	80022e0 <HAL_PWREx_ConfigSupply+0x7c>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b2e      	cmp	r3, #46	; 0x2e
 80022d2:	d005      	beq.n	80022e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b1d      	cmp	r3, #29
 80022d8:	d002      	beq.n	80022e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b2d      	cmp	r3, #45	; 0x2d
 80022de:	d114      	bne.n	800230a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80022e0:	f7ff f842 	bl	8001368 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80022e6:	e009      	b.n	80022fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022e8:	f7ff f83e 	bl	8001368 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022f6:	d901      	bls.n	80022fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e007      	b.n	800230c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_PWREx_ConfigSupply+0xb0>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002308:	d1ee      	bne.n	80022e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	58024800 	.word	0x58024800

08002318 <HAL_RAMECC_Init>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init (RAMECC_HandleTypeDef *hramecc)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RAMECC_Init+0x12>
  {
    /* Return HAL status */
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e02d      	b.n	8002386 <HAL_RAMECC_Init+0x6e>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2202      	movs	r2, #2
 800232e:	711a      	strb	r2, [r3, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0220 	bic.w	r2, r2, #32
 800233e:	601a      	str	r2, [r3, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002352:	f023 030f 	bic.w	r3, r3, #15
 8002356:	6013      	str	r3, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 021c 	bic.w	r2, r2, #28
 8002366:	601a      	str	r2, [r3, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0207 	bic.w	r2, r2, #7
 8002376:	605a      	str	r2, [r3, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08c      	sub	sp, #48	; 0x30
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e3f4      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80b3 	beq.w	800251a <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b4:	4b95      	ldr	r3, [pc, #596]	; (800260c <HAL_RCC_OscConfig+0x278>)
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023be:	4b93      	ldr	r3, [pc, #588]	; (800260c <HAL_RCC_OscConfig+0x278>)
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c6:	2b10      	cmp	r3, #16
 80023c8:	d007      	beq.n	80023da <HAL_RCC_OscConfig+0x46>
 80023ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023cc:	2b18      	cmp	r3, #24
 80023ce:	d112      	bne.n	80023f6 <HAL_RCC_OscConfig+0x62>
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d10d      	bne.n	80023f6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023da:	4b8c      	ldr	r3, [pc, #560]	; (800260c <HAL_RCC_OscConfig+0x278>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8098 	beq.w	8002518 <HAL_RCC_OscConfig+0x184>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f040 8093 	bne.w	8002518 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e3cc      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fe:	d106      	bne.n	800240e <HAL_RCC_OscConfig+0x7a>
 8002400:	4b82      	ldr	r3, [pc, #520]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a81      	ldr	r2, [pc, #516]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	e058      	b.n	80024c0 <HAL_RCC_OscConfig+0x12c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d112      	bne.n	800243c <HAL_RCC_OscConfig+0xa8>
 8002416:	4b7d      	ldr	r3, [pc, #500]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a7c      	ldr	r2, [pc, #496]	; (800260c <HAL_RCC_OscConfig+0x278>)
 800241c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	4b7a      	ldr	r3, [pc, #488]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a79      	ldr	r2, [pc, #484]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002428:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b77      	ldr	r3, [pc, #476]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a76      	ldr	r2, [pc, #472]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e041      	b.n	80024c0 <HAL_RCC_OscConfig+0x12c>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002444:	d112      	bne.n	800246c <HAL_RCC_OscConfig+0xd8>
 8002446:	4b71      	ldr	r3, [pc, #452]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a70      	ldr	r2, [pc, #448]	; (800260c <HAL_RCC_OscConfig+0x278>)
 800244c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b6e      	ldr	r3, [pc, #440]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a6d      	ldr	r2, [pc, #436]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002458:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b6b      	ldr	r3, [pc, #428]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a6a      	ldr	r2, [pc, #424]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e029      	b.n	80024c0 <HAL_RCC_OscConfig+0x12c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002474:	d112      	bne.n	800249c <HAL_RCC_OscConfig+0x108>
 8002476:	4b65      	ldr	r3, [pc, #404]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a64      	ldr	r2, [pc, #400]	; (800260c <HAL_RCC_OscConfig+0x278>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b62      	ldr	r3, [pc, #392]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a61      	ldr	r2, [pc, #388]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002488:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	4b5f      	ldr	r3, [pc, #380]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a5e      	ldr	r2, [pc, #376]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e011      	b.n	80024c0 <HAL_RCC_OscConfig+0x12c>
 800249c:	4b5b      	ldr	r3, [pc, #364]	; (800260c <HAL_RCC_OscConfig+0x278>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a5a      	ldr	r2, [pc, #360]	; (800260c <HAL_RCC_OscConfig+0x278>)
 80024a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b58      	ldr	r3, [pc, #352]	; (800260c <HAL_RCC_OscConfig+0x278>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a57      	ldr	r2, [pc, #348]	; (800260c <HAL_RCC_OscConfig+0x278>)
 80024ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b55      	ldr	r3, [pc, #340]	; (800260c <HAL_RCC_OscConfig+0x278>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a54      	ldr	r2, [pc, #336]	; (800260c <HAL_RCC_OscConfig+0x278>)
 80024ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80024be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe ff4e 	bl	8001368 <HAL_GetTick>
 80024cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d0:	f7fe ff4a 	bl	8001368 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e356      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024e2:	4b4a      	ldr	r3, [pc, #296]	; (800260c <HAL_RCC_OscConfig+0x278>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x13c>
 80024ee:	e014      	b.n	800251a <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe ff3a 	bl	8001368 <HAL_GetTick>
 80024f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f8:	f7fe ff36 	bl	8001368 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e342      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800250a:	4b40      	ldr	r3, [pc, #256]	; (800260c <HAL_RCC_OscConfig+0x278>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x164>
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 808d 	beq.w	8002642 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002528:	4b38      	ldr	r3, [pc, #224]	; (800260c <HAL_RCC_OscConfig+0x278>)
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002530:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002532:	4b36      	ldr	r3, [pc, #216]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d007      	beq.n	800254e <HAL_RCC_OscConfig+0x1ba>
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	2b18      	cmp	r3, #24
 8002542:	d137      	bne.n	80025b4 <HAL_RCC_OscConfig+0x220>
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d132      	bne.n	80025b4 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800254e:	4b2f      	ldr	r3, [pc, #188]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_RCC_OscConfig+0x1d2>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e314      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002566:	4b29      	ldr	r3, [pc, #164]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 0219 	bic.w	r2, r3, #25
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	4926      	ldr	r1, [pc, #152]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002574:	4313      	orrs	r3, r2
 8002576:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002578:	f7fe fef6 	bl	8001368 <HAL_GetTick>
 800257c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002580:	f7fe fef2 	bl	8001368 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e2fe      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002592:	4b1e      	ldr	r3, [pc, #120]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259e:	4b1b      	ldr	r3, [pc, #108]	; (800260c <HAL_RCC_OscConfig+0x278>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	061b      	lsls	r3, r3, #24
 80025ac:	4917      	ldr	r1, [pc, #92]	; (800260c <HAL_RCC_OscConfig+0x278>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b2:	e046      	b.n	8002642 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d029      	beq.n	8002610 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025bc:	4b13      	ldr	r3, [pc, #76]	; (800260c <HAL_RCC_OscConfig+0x278>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 0219 	bic.w	r2, r3, #25
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4910      	ldr	r1, [pc, #64]	; (800260c <HAL_RCC_OscConfig+0x278>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ce:	f7fe fecb 	bl	8001368 <HAL_GetTick>
 80025d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d6:	f7fe fec7 	bl	8001368 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e2d3      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <HAL_RCC_OscConfig+0x278>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_RCC_OscConfig+0x278>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	4902      	ldr	r1, [pc, #8]	; (800260c <HAL_RCC_OscConfig+0x278>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
 8002608:	e01b      	b.n	8002642 <HAL_RCC_OscConfig+0x2ae>
 800260a:	bf00      	nop
 800260c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002610:	4b97      	ldr	r3, [pc, #604]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a96      	ldr	r2, [pc, #600]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 8002616:	f023 0301 	bic.w	r3, r3, #1
 800261a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7fe fea4 	bl	8001368 <HAL_GetTick>
 8002620:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002624:	f7fe fea0 	bl	8001368 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e2ac      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002636:	4b8e      	ldr	r3, [pc, #568]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b00      	cmp	r3, #0
 800264c:	d06a      	beq.n	8002724 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264e:	4b88      	ldr	r3, [pc, #544]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002656:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002658:	4b85      	ldr	r3, [pc, #532]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d007      	beq.n	8002674 <HAL_RCC_OscConfig+0x2e0>
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b18      	cmp	r3, #24
 8002668:	d11b      	bne.n	80026a2 <HAL_RCC_OscConfig+0x30e>
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b01      	cmp	r3, #1
 8002672:	d116      	bne.n	80026a2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002674:	4b7e      	ldr	r3, [pc, #504]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_OscConfig+0x2f8>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	2b80      	cmp	r3, #128	; 0x80
 8002686:	d001      	beq.n	800268c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e281      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800268c:	4b78      	ldr	r3, [pc, #480]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	061b      	lsls	r3, r3, #24
 800269a:	4975      	ldr	r1, [pc, #468]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 800269c:	4313      	orrs	r3, r2
 800269e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026a0:	e040      	b.n	8002724 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d023      	beq.n	80026f2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026aa:	4b71      	ldr	r3, [pc, #452]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a70      	ldr	r2, [pc, #448]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 80026b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b6:	f7fe fe57 	bl	8001368 <HAL_GetTick>
 80026ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80026be:	f7fe fe53 	bl	8001368 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e25f      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026d0:	4b67      	ldr	r3, [pc, #412]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026dc:	4b64      	ldr	r3, [pc, #400]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	061b      	lsls	r3, r3, #24
 80026ea:	4961      	ldr	r1, [pc, #388]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60cb      	str	r3, [r1, #12]
 80026f0:	e018      	b.n	8002724 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80026f2:	4b5f      	ldr	r3, [pc, #380]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a5e      	ldr	r2, [pc, #376]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 80026f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fe:	f7fe fe33 	bl	8001368 <HAL_GetTick>
 8002702:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002706:	f7fe fe2f 	bl	8001368 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e23b      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002718:	4b55      	ldr	r3, [pc, #340]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f0      	bne.n	8002706 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d036      	beq.n	800279e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d019      	beq.n	800276c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002738:	4b4d      	ldr	r3, [pc, #308]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 800273a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273c:	4a4c      	ldr	r2, [pc, #304]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7fe fe10 	bl	8001368 <HAL_GetTick>
 8002748:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800274c:	f7fe fe0c 	bl	8001368 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e218      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800275e:	4b44      	ldr	r3, [pc, #272]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 8002760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x3b8>
 800276a:	e018      	b.n	800279e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800276c:	4b40      	ldr	r3, [pc, #256]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 800276e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002770:	4a3f      	ldr	r2, [pc, #252]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002778:	f7fe fdf6 	bl	8001368 <HAL_GetTick>
 800277c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002780:	f7fe fdf2 	bl	8001368 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e1fe      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002792:	4b37      	ldr	r3, [pc, #220]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 8002794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d036      	beq.n	8002818 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d019      	beq.n	80027e6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027b2:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a2e      	ldr	r2, [pc, #184]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 80027b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027be:	f7fe fdd3 	bl	8001368 <HAL_GetTick>
 80027c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80027c6:	f7fe fdcf 	bl	8001368 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e1db      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027d8:	4b25      	ldr	r3, [pc, #148]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x432>
 80027e4:	e018      	b.n	8002818 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027e6:	4b22      	ldr	r3, [pc, #136]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a21      	ldr	r2, [pc, #132]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 80027ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027f2:	f7fe fdb9 	bl	8001368 <HAL_GetTick>
 80027f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80027fa:	f7fe fdb5 	bl	8001368 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e1c1      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800280c:	4b18      	ldr	r3, [pc, #96]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80af 	beq.w	8002984 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002826:	4b13      	ldr	r3, [pc, #76]	; (8002874 <HAL_RCC_OscConfig+0x4e0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a12      	ldr	r2, [pc, #72]	; (8002874 <HAL_RCC_OscConfig+0x4e0>)
 800282c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002830:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002832:	f7fe fd99 	bl	8001368 <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800283a:	f7fe fd95 	bl	8001368 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b64      	cmp	r3, #100	; 0x64
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e1a1      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_RCC_OscConfig+0x4e0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d10b      	bne.n	8002878 <HAL_RCC_OscConfig+0x4e4>
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002864:	4a02      	ldr	r2, [pc, #8]	; (8002870 <HAL_RCC_OscConfig+0x4dc>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6713      	str	r3, [r2, #112]	; 0x70
 800286c:	e05b      	b.n	8002926 <HAL_RCC_OscConfig+0x592>
 800286e:	bf00      	nop
 8002870:	58024400 	.word	0x58024400
 8002874:	58024800 	.word	0x58024800
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d112      	bne.n	80028a6 <HAL_RCC_OscConfig+0x512>
 8002880:	4b9d      	ldr	r3, [pc, #628]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002884:	4a9c      	ldr	r2, [pc, #624]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002886:	f023 0301 	bic.w	r3, r3, #1
 800288a:	6713      	str	r3, [r2, #112]	; 0x70
 800288c:	4b9a      	ldr	r3, [pc, #616]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	4a99      	ldr	r2, [pc, #612]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002896:	6713      	str	r3, [r2, #112]	; 0x70
 8002898:	4b97      	ldr	r3, [pc, #604]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	4a96      	ldr	r2, [pc, #600]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 800289e:	f023 0304 	bic.w	r3, r3, #4
 80028a2:	6713      	str	r3, [r2, #112]	; 0x70
 80028a4:	e03f      	b.n	8002926 <HAL_RCC_OscConfig+0x592>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b05      	cmp	r3, #5
 80028ac:	d112      	bne.n	80028d4 <HAL_RCC_OscConfig+0x540>
 80028ae:	4b92      	ldr	r3, [pc, #584]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	4a91      	ldr	r2, [pc, #580]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ba:	4b8f      	ldr	r3, [pc, #572]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	4a8e      	ldr	r2, [pc, #568]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 80028c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c4:	6713      	str	r3, [r2, #112]	; 0x70
 80028c6:	4b8c      	ldr	r3, [pc, #560]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ca:	4a8b      	ldr	r2, [pc, #556]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6713      	str	r3, [r2, #112]	; 0x70
 80028d2:	e028      	b.n	8002926 <HAL_RCC_OscConfig+0x592>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b85      	cmp	r3, #133	; 0x85
 80028da:	d112      	bne.n	8002902 <HAL_RCC_OscConfig+0x56e>
 80028dc:	4b86      	ldr	r3, [pc, #536]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a85      	ldr	r2, [pc, #532]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 80028e2:	f043 0304 	orr.w	r3, r3, #4
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
 80028e8:	4b83      	ldr	r3, [pc, #524]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a82      	ldr	r2, [pc, #520]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 80028ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
 80028f4:	4b80      	ldr	r3, [pc, #512]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a7f      	ldr	r2, [pc, #508]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002900:	e011      	b.n	8002926 <HAL_RCC_OscConfig+0x592>
 8002902:	4b7d      	ldr	r3, [pc, #500]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	4a7c      	ldr	r2, [pc, #496]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6713      	str	r3, [r2, #112]	; 0x70
 800290e:	4b7a      	ldr	r3, [pc, #488]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a79      	ldr	r2, [pc, #484]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002914:	f023 0304 	bic.w	r3, r3, #4
 8002918:	6713      	str	r3, [r2, #112]	; 0x70
 800291a:	4b77      	ldr	r3, [pc, #476]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	4a76      	ldr	r2, [pc, #472]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002924:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d015      	beq.n	800295a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292e:	f7fe fd1b 	bl	8001368 <HAL_GetTick>
 8002932:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002934:	e00a      	b.n	800294c <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7fe fd17 	bl	8001368 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	; 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e121      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800294c:	4b6a      	ldr	r3, [pc, #424]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0ee      	beq.n	8002936 <HAL_RCC_OscConfig+0x5a2>
 8002958:	e014      	b.n	8002984 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295a:	f7fe fd05 	bl	8001368 <HAL_GetTick>
 800295e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002960:	e00a      	b.n	8002978 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002962:	f7fe fd01 	bl	8001368 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e10b      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002978:	4b5f      	ldr	r3, [pc, #380]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1ee      	bne.n	8002962 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8100 	beq.w	8002b8e <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800298e:	4b5a      	ldr	r3, [pc, #360]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002996:	2b18      	cmp	r3, #24
 8002998:	f000 80bb 	beq.w	8002b12 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	f040 8095 	bne.w	8002ad0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a6:	4b54      	ldr	r3, [pc, #336]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a53      	ldr	r2, [pc, #332]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 80029ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe fcd9 	bl	8001368 <HAL_GetTick>
 80029b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ba:	f7fe fcd5 	bl	8001368 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e0e1      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029cc:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f0      	bne.n	80029ba <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d8:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 80029da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029dc:	4b47      	ldr	r3, [pc, #284]	; (8002afc <HAL_RCC_OscConfig+0x768>)
 80029de:	4013      	ands	r3, r2
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029e8:	0112      	lsls	r2, r2, #4
 80029ea:	430a      	orrs	r2, r1
 80029ec:	4942      	ldr	r1, [pc, #264]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	628b      	str	r3, [r1, #40]	; 0x28
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	3b01      	subs	r3, #1
 80029f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a00:	3b01      	subs	r3, #1
 8002a02:	025b      	lsls	r3, r3, #9
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	041b      	lsls	r3, r3, #16
 8002a10:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a22:	4935      	ldr	r1, [pc, #212]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002a28:	4b33      	ldr	r3, [pc, #204]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	4a32      	ldr	r2, [pc, #200]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a34:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a38:	4b31      	ldr	r3, [pc, #196]	; (8002b00 <HAL_RCC_OscConfig+0x76c>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a40:	00d2      	lsls	r2, r2, #3
 8002a42:	492d      	ldr	r1, [pc, #180]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a48:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	f023 020c 	bic.w	r2, r3, #12
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	4928      	ldr	r1, [pc, #160]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a5a:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	f023 0202 	bic.w	r2, r3, #2
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4924      	ldr	r1, [pc, #144]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a6c:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	4a21      	ldr	r2, [pc, #132]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a78:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	4a1e      	ldr	r2, [pc, #120]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a84:	4b1c      	ldr	r3, [pc, #112]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	4a1b      	ldr	r2, [pc, #108]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002a8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	4a18      	ldr	r2, [pc, #96]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a9c:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a15      	ldr	r2, [pc, #84]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fc5e 	bl	8001368 <HAL_GetTick>
 8002aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fc5a 	bl	8001368 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e066      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x71c>
 8002ace:	e05e      	b.n	8002b8e <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a08      	ldr	r2, [pc, #32]	; (8002af8 <HAL_RCC_OscConfig+0x764>)
 8002ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe fc44 	bl	8001368 <HAL_GetTick>
 8002ae0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ae2:	e00f      	b.n	8002b04 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe fc40 	bl	8001368 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d908      	bls.n	8002b04 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e04c      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
 8002af6:	bf00      	nop
 8002af8:	58024400 	.word	0x58024400
 8002afc:	fffffc0c 	.word	0xfffffc0c
 8002b00:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b04:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <HAL_RCC_OscConfig+0x804>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1e9      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x750>
 8002b10:	e03d      	b.n	8002b8e <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b12:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <HAL_RCC_OscConfig+0x804>)
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b18:	4b1f      	ldr	r3, [pc, #124]	; (8002b98 <HAL_RCC_OscConfig+0x804>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d031      	beq.n	8002b8a <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f003 0203 	and.w	r2, r3, #3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d12a      	bne.n	8002b8a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	091b      	lsrs	r3, r3, #4
 8002b38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d122      	bne.n	8002b8a <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d11a      	bne.n	8002b8a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	0a5b      	lsrs	r3, r3, #9
 8002b58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b60:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d111      	bne.n	8002b8a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d108      	bne.n	8002b8a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	0e1b      	lsrs	r3, r3, #24
 8002b7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b84:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d001      	beq.n	8002b8e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3730      	adds	r7, #48	; 0x30
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	58024400 	.word	0x58024400

08002b9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e19c      	b.n	8002eea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b8a      	ldr	r3, [pc, #552]	; (8002ddc <HAL_RCC_ClockConfig+0x240>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d910      	bls.n	8002be0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b87      	ldr	r3, [pc, #540]	; (8002ddc <HAL_RCC_ClockConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 020f 	bic.w	r2, r3, #15
 8002bc6:	4985      	ldr	r1, [pc, #532]	; (8002ddc <HAL_RCC_ClockConfig+0x240>)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bce:	4b83      	ldr	r3, [pc, #524]	; (8002ddc <HAL_RCC_ClockConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e184      	b.n	8002eea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d010      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	4b7b      	ldr	r3, [pc, #492]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d908      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002bfc:	4b78      	ldr	r3, [pc, #480]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	4975      	ldr	r1, [pc, #468]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d010      	beq.n	8002c3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	4b70      	ldr	r3, [pc, #448]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d908      	bls.n	8002c3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c2a:	4b6d      	ldr	r3, [pc, #436]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	496a      	ldr	r1, [pc, #424]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d010      	beq.n	8002c6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699a      	ldr	r2, [r3, #24]
 8002c4c:	4b64      	ldr	r3, [pc, #400]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d908      	bls.n	8002c6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c58:	4b61      	ldr	r3, [pc, #388]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	495e      	ldr	r1, [pc, #376]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d010      	beq.n	8002c98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69da      	ldr	r2, [r3, #28]
 8002c7a:	4b59      	ldr	r3, [pc, #356]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d908      	bls.n	8002c98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002c86:	4b56      	ldr	r3, [pc, #344]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	4953      	ldr	r1, [pc, #332]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d010      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	4b4d      	ldr	r3, [pc, #308]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d908      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb4:	4b4a      	ldr	r3, [pc, #296]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	f023 020f 	bic.w	r2, r3, #15
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4947      	ldr	r1, [pc, #284]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d055      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002cd2:	4b43      	ldr	r3, [pc, #268]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	4940      	ldr	r1, [pc, #256]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d107      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cec:	4b3c      	ldr	r3, [pc, #240]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d121      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0f6      	b.n	8002eea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d04:	4b36      	ldr	r3, [pc, #216]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d115      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0ea      	b.n	8002eea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d107      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d1c:	4b30      	ldr	r3, [pc, #192]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0de      	b.n	8002eea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d2c:	4b2c      	ldr	r3, [pc, #176]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0d6      	b.n	8002eea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d3c:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f023 0207 	bic.w	r2, r3, #7
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4925      	ldr	r1, [pc, #148]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fb0b 	bl	8001368 <HAL_GetTick>
 8002d52:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d56:	f7fe fb07 	bl	8001368 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0be      	b.n	8002eea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6c:	4b1c      	ldr	r3, [pc, #112]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d1eb      	bne.n	8002d56 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d010      	beq.n	8002dac <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d208      	bcs.n	8002dac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f023 020f 	bic.w	r2, r3, #15
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	490e      	ldr	r1, [pc, #56]	; (8002de0 <HAL_RCC_ClockConfig+0x244>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_RCC_ClockConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d214      	bcs.n	8002de4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <HAL_RCC_ClockConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 020f 	bic.w	r2, r3, #15
 8002dc2:	4906      	ldr	r1, [pc, #24]	; (8002ddc <HAL_RCC_ClockConfig+0x240>)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <HAL_RCC_ClockConfig+0x240>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e086      	b.n	8002eea <HAL_RCC_ClockConfig+0x34e>
 8002ddc:	52002000 	.word	0x52002000
 8002de0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d010      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	4b3f      	ldr	r3, [pc, #252]	; (8002ef4 <HAL_RCC_ClockConfig+0x358>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d208      	bcs.n	8002e12 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e00:	4b3c      	ldr	r3, [pc, #240]	; (8002ef4 <HAL_RCC_ClockConfig+0x358>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	4939      	ldr	r1, [pc, #228]	; (8002ef4 <HAL_RCC_ClockConfig+0x358>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d010      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	4b34      	ldr	r3, [pc, #208]	; (8002ef4 <HAL_RCC_ClockConfig+0x358>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d208      	bcs.n	8002e40 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e2e:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <HAL_RCC_ClockConfig+0x358>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	492e      	ldr	r1, [pc, #184]	; (8002ef4 <HAL_RCC_ClockConfig+0x358>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d010      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699a      	ldr	r2, [r3, #24]
 8002e50:	4b28      	ldr	r3, [pc, #160]	; (8002ef4 <HAL_RCC_ClockConfig+0x358>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d208      	bcs.n	8002e6e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e5c:	4b25      	ldr	r3, [pc, #148]	; (8002ef4 <HAL_RCC_ClockConfig+0x358>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	4922      	ldr	r1, [pc, #136]	; (8002ef4 <HAL_RCC_ClockConfig+0x358>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d010      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69da      	ldr	r2, [r3, #28]
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <HAL_RCC_ClockConfig+0x358>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d208      	bcs.n	8002e9c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <HAL_RCC_ClockConfig+0x358>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	4917      	ldr	r1, [pc, #92]	; (8002ef4 <HAL_RCC_ClockConfig+0x358>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002e9c:	f000 f834 	bl	8002f08 <HAL_RCC_GetSysClockFreq>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <HAL_RCC_ClockConfig+0x358>)
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	4912      	ldr	r1, [pc, #72]	; (8002ef8 <HAL_RCC_ClockConfig+0x35c>)
 8002eae:	5ccb      	ldrb	r3, [r1, r3]
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002eba:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <HAL_RCC_ClockConfig+0x358>)
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	4a0d      	ldr	r2, [pc, #52]	; (8002ef8 <HAL_RCC_ClockConfig+0x35c>)
 8002ec4:	5cd3      	ldrb	r3, [r2, r3]
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <HAL_RCC_ClockConfig+0x360>)
 8002ed2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ed4:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <HAL_RCC_ClockConfig+0x364>)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <HAL_RCC_ClockConfig+0x368>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fe f9f8 	bl	80012d4 <HAL_InitTick>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	58024400 	.word	0x58024400
 8002ef8:	08006e78 	.word	0x08006e78
 8002efc:	24000004 	.word	0x24000004
 8002f00:	24000000 	.word	0x24000000
 8002f04:	24000008 	.word	0x24000008

08002f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b089      	sub	sp, #36	; 0x24
 8002f0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f0e:	4bb3      	ldr	r3, [pc, #716]	; (80031dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f16:	2b18      	cmp	r3, #24
 8002f18:	f200 8155 	bhi.w	80031c6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002f1c:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f89 	.word	0x08002f89
 8002f28:	080031c7 	.word	0x080031c7
 8002f2c:	080031c7 	.word	0x080031c7
 8002f30:	080031c7 	.word	0x080031c7
 8002f34:	080031c7 	.word	0x080031c7
 8002f38:	080031c7 	.word	0x080031c7
 8002f3c:	080031c7 	.word	0x080031c7
 8002f40:	080031c7 	.word	0x080031c7
 8002f44:	08002faf 	.word	0x08002faf
 8002f48:	080031c7 	.word	0x080031c7
 8002f4c:	080031c7 	.word	0x080031c7
 8002f50:	080031c7 	.word	0x080031c7
 8002f54:	080031c7 	.word	0x080031c7
 8002f58:	080031c7 	.word	0x080031c7
 8002f5c:	080031c7 	.word	0x080031c7
 8002f60:	080031c7 	.word	0x080031c7
 8002f64:	08002fb5 	.word	0x08002fb5
 8002f68:	080031c7 	.word	0x080031c7
 8002f6c:	080031c7 	.word	0x080031c7
 8002f70:	080031c7 	.word	0x080031c7
 8002f74:	080031c7 	.word	0x080031c7
 8002f78:	080031c7 	.word	0x080031c7
 8002f7c:	080031c7 	.word	0x080031c7
 8002f80:	080031c7 	.word	0x080031c7
 8002f84:	08002fbb 	.word	0x08002fbb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f88:	4b94      	ldr	r3, [pc, #592]	; (80031dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d009      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f94:	4b91      	ldr	r3, [pc, #580]	; (80031dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	08db      	lsrs	r3, r3, #3
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	4a90      	ldr	r2, [pc, #576]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002fa6:	e111      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fa8:	4b8d      	ldr	r3, [pc, #564]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002faa:	61bb      	str	r3, [r7, #24]
    break;
 8002fac:	e10e      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002fae:	4b8d      	ldr	r3, [pc, #564]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fb0:	61bb      	str	r3, [r7, #24]
    break;
 8002fb2:	e10b      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002fb4:	4b8c      	ldr	r3, [pc, #560]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002fb6:	61bb      	str	r3, [r7, #24]
    break;
 8002fb8:	e108      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fba:	4b88      	ldr	r3, [pc, #544]	; (80031dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002fc4:	4b85      	ldr	r3, [pc, #532]	; (80031dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002fd0:	4b82      	ldr	r3, [pc, #520]	; (80031dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002fda:	4b80      	ldr	r3, [pc, #512]	; (80031dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fde:	08db      	lsrs	r3, r3, #3
 8002fe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	ee07 3a90 	vmov	s15, r3
 8002fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80e1 	beq.w	80031c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b02      	cmp	r3, #2
 8003002:	f000 8083 	beq.w	800310c <HAL_RCC_GetSysClockFreq+0x204>
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b02      	cmp	r3, #2
 800300a:	f200 80a1 	bhi.w	8003150 <HAL_RCC_GetSysClockFreq+0x248>
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_RCC_GetSysClockFreq+0x114>
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d056      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800301a:	e099      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800301c:	4b6f      	ldr	r3, [pc, #444]	; (80031dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b00      	cmp	r3, #0
 8003026:	d02d      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003028:	4b6c      	ldr	r3, [pc, #432]	; (80031dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	08db      	lsrs	r3, r3, #3
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	4a6b      	ldr	r2, [pc, #428]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
 8003038:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	ee07 3a90 	vmov	s15, r3
 8003040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	ee07 3a90 	vmov	s15, r3
 800304a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800304e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003052:	4b62      	ldr	r3, [pc, #392]	; (80031dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003062:	ed97 6a02 	vldr	s12, [r7, #8]
 8003066:	eddf 5a61 	vldr	s11, [pc, #388]	; 80031ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800306a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800306e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800307a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003082:	e087      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	ee07 3a90 	vmov	s15, r3
 800308a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800308e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80031f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003096:	4b51      	ldr	r3, [pc, #324]	; (80031dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309e:	ee07 3a90 	vmov	s15, r3
 80030a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80031ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030c6:	e065      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80031f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030da:	4b40      	ldr	r3, [pc, #256]	; (80031dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e2:	ee07 3a90 	vmov	s15, r3
 80030e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80031ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80030f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800310a:	e043      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003116:	eddf 6a38 	vldr	s13, [pc, #224]	; 80031f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800311a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800311e:	4b2f      	ldr	r3, [pc, #188]	; (80031dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800312e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003132:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80031ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8003136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800313a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800313e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800314e:	e021      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80031f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800315e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003162:	4b1e      	ldr	r3, [pc, #120]	; (80031dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003172:	ed97 6a02 	vldr	s12, [r7, #8]
 8003176:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80031ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800317a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800317e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800318a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800318e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003192:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	0a5b      	lsrs	r3, r3, #9
 800319a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800319e:	3301      	adds	r3, #1
 80031a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	ee07 3a90 	vmov	s15, r3
 80031a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80031b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031b8:	ee17 3a90 	vmov	r3, s15
 80031bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80031be:	e005      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61bb      	str	r3, [r7, #24]
    break;
 80031c4:	e002      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80031c6:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031c8:	61bb      	str	r3, [r7, #24]
    break;
 80031ca:	bf00      	nop
  }

  return sysclockfreq;
 80031cc:	69bb      	ldr	r3, [r7, #24]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3724      	adds	r7, #36	; 0x24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	58024400 	.word	0x58024400
 80031e0:	03d09000 	.word	0x03d09000
 80031e4:	003d0900 	.word	0x003d0900
 80031e8:	007a1200 	.word	0x007a1200
 80031ec:	46000000 	.word	0x46000000
 80031f0:	4c742400 	.word	0x4c742400
 80031f4:	4a742400 	.word	0x4a742400
 80031f8:	4af42400 	.word	0x4af42400

080031fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003202:	f7ff fe81 	bl	8002f08 <HAL_RCC_GetSysClockFreq>
 8003206:	4602      	mov	r2, r0
 8003208:	4b10      	ldr	r3, [pc, #64]	; (800324c <HAL_RCC_GetHCLKFreq+0x50>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	0a1b      	lsrs	r3, r3, #8
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	490f      	ldr	r1, [pc, #60]	; (8003250 <HAL_RCC_GetHCLKFreq+0x54>)
 8003214:	5ccb      	ldrb	r3, [r1, r3]
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	fa22 f303 	lsr.w	r3, r2, r3
 800321e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <HAL_RCC_GetHCLKFreq+0x50>)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	4a09      	ldr	r2, [pc, #36]	; (8003250 <HAL_RCC_GetHCLKFreq+0x54>)
 800322a:	5cd3      	ldrb	r3, [r2, r3]
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	fa22 f303 	lsr.w	r3, r2, r3
 8003236:	4a07      	ldr	r2, [pc, #28]	; (8003254 <HAL_RCC_GetHCLKFreq+0x58>)
 8003238:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800323a:	4a07      	ldr	r2, [pc, #28]	; (8003258 <HAL_RCC_GetHCLKFreq+0x5c>)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003240:	4b04      	ldr	r3, [pc, #16]	; (8003254 <HAL_RCC_GetHCLKFreq+0x58>)
 8003242:	681b      	ldr	r3, [r3, #0]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	58024400 	.word	0x58024400
 8003250:	08006e78 	.word	0x08006e78
 8003254:	24000004 	.word	0x24000004
 8003258:	24000000 	.word	0x24000000

0800325c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003260:	f7ff ffcc 	bl	80031fc <HAL_RCC_GetHCLKFreq>
 8003264:	4602      	mov	r2, r0
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	4904      	ldr	r1, [pc, #16]	; (8003284 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003272:	5ccb      	ldrb	r3, [r1, r3]
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800327c:	4618      	mov	r0, r3
 800327e:	bd80      	pop	{r7, pc}
 8003280:	58024400 	.word	0x58024400
 8003284:	08006e78 	.word	0x08006e78

08003288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800328c:	f7ff ffb6 	bl	80031fc <HAL_RCC_GetHCLKFreq>
 8003290:	4602      	mov	r2, r0
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	0a1b      	lsrs	r3, r3, #8
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	4904      	ldr	r1, [pc, #16]	; (80032b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800329e:	5ccb      	ldrb	r3, [r1, r3]
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	58024400 	.word	0x58024400
 80032b0:	08006e78 	.word	0x08006e78

080032b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032bc:	2300      	movs	r3, #0
 80032be:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032c0:	2300      	movs	r3, #0
 80032c2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d03f      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032d8:	d02a      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032de:	d824      	bhi.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032e4:	d018      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032ea:	d81e      	bhi.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032f4:	d007      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032f6:	e018      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f8:	4b9f      	ldr	r3, [pc, #636]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	4a9e      	ldr	r2, [pc, #632]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003302:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003304:	e015      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3304      	adds	r3, #4
 800330a:	2102      	movs	r1, #2
 800330c:	4618      	mov	r0, r3
 800330e:	f001 f99b 	bl	8004648 <RCCEx_PLL2_Config>
 8003312:	4603      	mov	r3, r0
 8003314:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003316:	e00c      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3324      	adds	r3, #36	; 0x24
 800331c:	2102      	movs	r1, #2
 800331e:	4618      	mov	r0, r3
 8003320:	f001 fa44 	bl	80047ac <RCCEx_PLL3_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003328:	e003      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]
      break;
 800332e:	e000      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003332:	7dfb      	ldrb	r3, [r7, #23]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d109      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003338:	4b8f      	ldr	r3, [pc, #572]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800333a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800333c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003344:	498c      	ldr	r1, [pc, #560]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003346:	4313      	orrs	r3, r2
 8003348:	650b      	str	r3, [r1, #80]	; 0x50
 800334a:	e001      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800334c:	7dfb      	ldrb	r3, [r7, #23]
 800334e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d03d      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003360:	2b04      	cmp	r3, #4
 8003362:	d826      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003364:	a201      	add	r2, pc, #4	; (adr r2, 800336c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	08003381 	.word	0x08003381
 8003370:	0800338f 	.word	0x0800338f
 8003374:	080033a1 	.word	0x080033a1
 8003378:	080033b9 	.word	0x080033b9
 800337c:	080033b9 	.word	0x080033b9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003380:	4b7d      	ldr	r3, [pc, #500]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	4a7c      	ldr	r2, [pc, #496]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800338a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800338c:	e015      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3304      	adds	r3, #4
 8003392:	2100      	movs	r1, #0
 8003394:	4618      	mov	r0, r3
 8003396:	f001 f957 	bl	8004648 <RCCEx_PLL2_Config>
 800339a:	4603      	mov	r3, r0
 800339c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800339e:	e00c      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3324      	adds	r3, #36	; 0x24
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 fa00 	bl	80047ac <RCCEx_PLL3_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033b0:	e003      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
      break;
 80033b6:	e000      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80033b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ba:	7dfb      	ldrb	r3, [r7, #23]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d109      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033c0:	4b6d      	ldr	r3, [pc, #436]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c4:	f023 0207 	bic.w	r2, r3, #7
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033cc:	496a      	ldr	r1, [pc, #424]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	650b      	str	r3, [r1, #80]	; 0x50
 80033d2:	e001      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d4:	7dfb      	ldrb	r3, [r7, #23]
 80033d6:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d04a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80033ec:	d031      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80033ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80033f2:	d82b      	bhi.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80033f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f8:	d02d      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80033fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033fe:	d825      	bhi.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003400:	2bc0      	cmp	r3, #192	; 0xc0
 8003402:	d02a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003404:	2bc0      	cmp	r3, #192	; 0xc0
 8003406:	d821      	bhi.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003408:	2b80      	cmp	r3, #128	; 0x80
 800340a:	d016      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800340c:	2b80      	cmp	r3, #128	; 0x80
 800340e:	d81d      	bhi.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003414:	2b40      	cmp	r3, #64	; 0x40
 8003416:	d007      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003418:	e018      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800341a:	4b57      	ldr	r3, [pc, #348]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	4a56      	ldr	r2, [pc, #344]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003424:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003426:	e019      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3304      	adds	r3, #4
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f001 f90a 	bl	8004648 <RCCEx_PLL2_Config>
 8003434:	4603      	mov	r3, r0
 8003436:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003438:	e010      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3324      	adds	r3, #36	; 0x24
 800343e:	2100      	movs	r1, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f001 f9b3 	bl	80047ac <RCCEx_PLL3_Config>
 8003446:	4603      	mov	r3, r0
 8003448:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800344a:	e007      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	75fb      	strb	r3, [r7, #23]
      break;
 8003450:	e004      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003452:	bf00      	nop
 8003454:	e002      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003456:	bf00      	nop
 8003458:	e000      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800345a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800345c:	7dfb      	ldrb	r3, [r7, #23]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003462:	4b45      	ldr	r3, [pc, #276]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003466:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	4942      	ldr	r1, [pc, #264]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003470:	4313      	orrs	r3, r2
 8003472:	650b      	str	r3, [r1, #80]	; 0x50
 8003474:	e001      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003476:	7dfb      	ldrb	r3, [r7, #23]
 8003478:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003482:	2b00      	cmp	r3, #0
 8003484:	d04f      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800348e:	d036      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003490:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003494:	d830      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800349a:	d032      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800349c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a0:	d82a      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80034a2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80034a6:	d02e      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x252>
 80034a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80034ac:	d824      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80034ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b2:	d018      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
 80034b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b8:	d81e      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80034be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c2:	d007      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80034c4:	e018      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c6:	4b2c      	ldr	r3, [pc, #176]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	4a2b      	ldr	r2, [pc, #172]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80034d2:	e019      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3304      	adds	r3, #4
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f001 f8b4 	bl	8004648 <RCCEx_PLL2_Config>
 80034e0:	4603      	mov	r3, r0
 80034e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80034e4:	e010      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3324      	adds	r3, #36	; 0x24
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f001 f95d 	bl	80047ac <RCCEx_PLL3_Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80034f6:	e007      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	75fb      	strb	r3, [r7, #23]
      break;
 80034fc:	e004      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80034fe:	bf00      	nop
 8003500:	e002      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003502:	bf00      	nop
 8003504:	e000      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003508:	7dfb      	ldrb	r3, [r7, #23]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d109      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800350e:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003512:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351a:	4917      	ldr	r1, [pc, #92]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800351c:	4313      	orrs	r3, r2
 800351e:	650b      	str	r3, [r1, #80]	; 0x50
 8003520:	e001      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d034      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003536:	2b30      	cmp	r3, #48	; 0x30
 8003538:	d01c      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800353a:	2b30      	cmp	r3, #48	; 0x30
 800353c:	d817      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800353e:	2b20      	cmp	r3, #32
 8003540:	d00c      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003542:	2b20      	cmp	r3, #32
 8003544:	d813      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d018      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800354a:	2b10      	cmp	r3, #16
 800354c:	d10f      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354e:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	4a09      	ldr	r2, [pc, #36]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003558:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800355a:	e010      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	2102      	movs	r1, #2
 8003562:	4618      	mov	r0, r3
 8003564:	f001 f870 	bl	8004648 <RCCEx_PLL2_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800356c:	e007      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	75fb      	strb	r3, [r7, #23]
      break;
 8003572:	e004      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8003574:	bf00      	nop
 8003576:	e002      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003578:	58024400 	.word	0x58024400
      break;
 800357c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800357e:	7dfb      	ldrb	r3, [r7, #23]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d109      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003584:	4b9b      	ldr	r3, [pc, #620]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003588:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003590:	4998      	ldr	r1, [pc, #608]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003592:	4313      	orrs	r3, r2
 8003594:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003596:	e001      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d047      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035b0:	d030      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80035b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035b6:	d82a      	bhi.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80035b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035bc:	d02c      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80035be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035c2:	d824      	bhi.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80035c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c8:	d018      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x348>
 80035ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ce:	d81e      	bhi.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x328>
 80035d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d8:	d007      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x336>
 80035da:	e018      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035dc:	4b85      	ldr	r3, [pc, #532]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	4a84      	ldr	r2, [pc, #528]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80035e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80035e8:	e017      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3304      	adds	r3, #4
 80035ee:	2100      	movs	r1, #0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f001 f829 	bl	8004648 <RCCEx_PLL2_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80035fa:	e00e      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3324      	adds	r3, #36	; 0x24
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f001 f8d2 	bl	80047ac <RCCEx_PLL3_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800360c:	e005      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	75fb      	strb	r3, [r7, #23]
      break;
 8003612:	e002      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003614:	bf00      	nop
 8003616:	e000      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800361a:	7dfb      	ldrb	r3, [r7, #23]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d109      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003620:	4b74      	ldr	r3, [pc, #464]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003624:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362c:	4971      	ldr	r1, [pc, #452]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800362e:	4313      	orrs	r3, r2
 8003630:	650b      	str	r3, [r1, #80]	; 0x50
 8003632:	e001      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003634:	7dfb      	ldrb	r3, [r7, #23]
 8003636:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d049      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800364c:	d02e      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800364e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003652:	d828      	bhi.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003654:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003658:	d02a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800365a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800365e:	d822      	bhi.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003660:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003664:	d026      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003666:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800366a:	d81c      	bhi.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800366c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003670:	d010      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003676:	d816      	bhi.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01d      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800367c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003680:	d111      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	2101      	movs	r1, #1
 8003688:	4618      	mov	r0, r3
 800368a:	f000 ffdd 	bl	8004648 <RCCEx_PLL2_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003692:	e012      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3324      	adds	r3, #36	; 0x24
 8003698:	2101      	movs	r1, #1
 800369a:	4618      	mov	r0, r3
 800369c:	f001 f886 	bl	80047ac <RCCEx_PLL3_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80036a4:	e009      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	75fb      	strb	r3, [r7, #23]
      break;
 80036aa:	e006      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80036ac:	bf00      	nop
 80036ae:	e004      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80036b0:	bf00      	nop
 80036b2:	e002      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80036b4:	bf00      	nop
 80036b6:	e000      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80036b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80036c0:	4b4c      	ldr	r3, [pc, #304]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80036c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036cc:	4949      	ldr	r1, [pc, #292]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	650b      	str	r3, [r1, #80]	; 0x50
 80036d2:	e001      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d053      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036ea:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80036ee:	d034      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80036f0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80036f4:	d82e      	bhi.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80036f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036fa:	d030      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80036fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003700:	d828      	bhi.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003706:	d02c      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370c:	d822      	bhi.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800370e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003712:	d028      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003714:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003718:	d81c      	bhi.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800371a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800371e:	d010      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8003720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003724:	d816      	bhi.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d01f      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800372a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800372e:	d111      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3304      	adds	r3, #4
 8003734:	2101      	movs	r1, #1
 8003736:	4618      	mov	r0, r3
 8003738:	f000 ff86 	bl	8004648 <RCCEx_PLL2_Config>
 800373c:	4603      	mov	r3, r0
 800373e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003740:	e014      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3324      	adds	r3, #36	; 0x24
 8003746:	2101      	movs	r1, #1
 8003748:	4618      	mov	r0, r3
 800374a:	f001 f82f 	bl	80047ac <RCCEx_PLL3_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003752:	e00b      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	75fb      	strb	r3, [r7, #23]
      break;
 8003758:	e008      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800375a:	bf00      	nop
 800375c:	e006      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800375e:	bf00      	nop
 8003760:	e004      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003762:	bf00      	nop
 8003764:	e002      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003766:	bf00      	nop
 8003768:	e000      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800376a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800376c:	7dfb      	ldrb	r3, [r7, #23]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10a      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003780:	491c      	ldr	r1, [pc, #112]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003782:	4313      	orrs	r3, r2
 8003784:	658b      	str	r3, [r1, #88]	; 0x58
 8003786:	e001      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d031      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037a0:	d00e      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80037a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037a6:	d814      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d015      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80037ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037b0:	d10f      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037b2:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	4a0f      	ldr	r2, [pc, #60]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80037b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80037be:	e00c      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3304      	adds	r3, #4
 80037c4:	2101      	movs	r1, #1
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 ff3e 	bl	8004648 <RCCEx_PLL2_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80037d0:	e003      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	75fb      	strb	r3, [r7, #23]
      break;
 80037d6:	e000      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80037d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037da:	7dfb      	ldrb	r3, [r7, #23]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10b      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037e0:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80037e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ec:	4901      	ldr	r1, [pc, #4]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	650b      	str	r3, [r1, #80]	; 0x50
 80037f2:	e003      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x548>
 80037f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f8:	7dfb      	ldrb	r3, [r7, #23]
 80037fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d032      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380c:	2b03      	cmp	r3, #3
 800380e:	d81b      	bhi.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003810:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003816:	bf00      	nop
 8003818:	0800384f 	.word	0x0800384f
 800381c:	08003829 	.word	0x08003829
 8003820:	08003837 	.word	0x08003837
 8003824:	0800384f 	.word	0x0800384f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003828:	4bb2      	ldr	r3, [pc, #712]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	4ab1      	ldr	r2, [pc, #708]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800382e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003832:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003834:	e00c      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3304      	adds	r3, #4
 800383a:	2102      	movs	r1, #2
 800383c:	4618      	mov	r0, r3
 800383e:	f000 ff03 	bl	8004648 <RCCEx_PLL2_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003846:	e003      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	75fb      	strb	r3, [r7, #23]
      break;
 800384c:	e000      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800384e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003850:	7dfb      	ldrb	r3, [r7, #23]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003856:	4ba7      	ldr	r3, [pc, #668]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	f023 0203 	bic.w	r2, r3, #3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	49a4      	ldr	r1, [pc, #656]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003864:	4313      	orrs	r3, r2
 8003866:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003868:	e001      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386a:	7dfb      	ldrb	r3, [r7, #23]
 800386c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8086 	beq.w	8003988 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800387c:	4b9e      	ldr	r3, [pc, #632]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a9d      	ldr	r2, [pc, #628]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003886:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003888:	f7fd fd6e 	bl	8001368 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800388e:	e009      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003890:	f7fd fd6a 	bl	8001368 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d902      	bls.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	75fb      	strb	r3, [r7, #23]
        break;
 80038a2:	e005      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038a4:	4b94      	ldr	r3, [pc, #592]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0ef      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d166      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80038b6:	4b8f      	ldr	r3, [pc, #572]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80038b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038c0:	4053      	eors	r3, r2
 80038c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d013      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038ca:	4b8a      	ldr	r3, [pc, #552]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038d4:	4b87      	ldr	r3, [pc, #540]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d8:	4a86      	ldr	r2, [pc, #536]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80038da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038de:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038e0:	4b84      	ldr	r3, [pc, #528]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80038e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e4:	4a83      	ldr	r2, [pc, #524]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80038e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80038ec:	4a81      	ldr	r2, [pc, #516]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fc:	d115      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fd fd33 	bl	8001368 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003904:	e00b      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003906:	f7fd fd2f 	bl	8001368 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	f241 3288 	movw	r2, #5000	; 0x1388
 8003914:	4293      	cmp	r3, r2
 8003916:	d902      	bls.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	75fb      	strb	r3, [r7, #23]
            break;
 800391c:	e005      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800391e:	4b75      	ldr	r3, [pc, #468]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0ed      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 800392a:	7dfb      	ldrb	r3, [r7, #23]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d126      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800393e:	d10d      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8003940:	4b6c      	ldr	r3, [pc, #432]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800394e:	0919      	lsrs	r1, r3, #4
 8003950:	4b6a      	ldr	r3, [pc, #424]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003952:	400b      	ands	r3, r1
 8003954:	4967      	ldr	r1, [pc, #412]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003956:	4313      	orrs	r3, r2
 8003958:	610b      	str	r3, [r1, #16]
 800395a:	e005      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 800395c:	4b65      	ldr	r3, [pc, #404]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	4a64      	ldr	r2, [pc, #400]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003962:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003966:	6113      	str	r3, [r2, #16]
 8003968:	4b62      	ldr	r3, [pc, #392]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800396a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003976:	495f      	ldr	r1, [pc, #380]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003978:	4313      	orrs	r3, r2
 800397a:	670b      	str	r3, [r1, #112]	; 0x70
 800397c:	e004      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800397e:	7dfb      	ldrb	r3, [r7, #23]
 8003980:	75bb      	strb	r3, [r7, #22]
 8003982:	e001      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003984:	7dfb      	ldrb	r3, [r7, #23]
 8003986:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d07f      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800399a:	2b28      	cmp	r3, #40	; 0x28
 800399c:	d866      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 800399e:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80039a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a4:	08003a73 	.word	0x08003a73
 80039a8:	08003a6d 	.word	0x08003a6d
 80039ac:	08003a6d 	.word	0x08003a6d
 80039b0:	08003a6d 	.word	0x08003a6d
 80039b4:	08003a6d 	.word	0x08003a6d
 80039b8:	08003a6d 	.word	0x08003a6d
 80039bc:	08003a6d 	.word	0x08003a6d
 80039c0:	08003a6d 	.word	0x08003a6d
 80039c4:	08003a49 	.word	0x08003a49
 80039c8:	08003a6d 	.word	0x08003a6d
 80039cc:	08003a6d 	.word	0x08003a6d
 80039d0:	08003a6d 	.word	0x08003a6d
 80039d4:	08003a6d 	.word	0x08003a6d
 80039d8:	08003a6d 	.word	0x08003a6d
 80039dc:	08003a6d 	.word	0x08003a6d
 80039e0:	08003a6d 	.word	0x08003a6d
 80039e4:	08003a5b 	.word	0x08003a5b
 80039e8:	08003a6d 	.word	0x08003a6d
 80039ec:	08003a6d 	.word	0x08003a6d
 80039f0:	08003a6d 	.word	0x08003a6d
 80039f4:	08003a6d 	.word	0x08003a6d
 80039f8:	08003a6d 	.word	0x08003a6d
 80039fc:	08003a6d 	.word	0x08003a6d
 8003a00:	08003a6d 	.word	0x08003a6d
 8003a04:	08003a73 	.word	0x08003a73
 8003a08:	08003a6d 	.word	0x08003a6d
 8003a0c:	08003a6d 	.word	0x08003a6d
 8003a10:	08003a6d 	.word	0x08003a6d
 8003a14:	08003a6d 	.word	0x08003a6d
 8003a18:	08003a6d 	.word	0x08003a6d
 8003a1c:	08003a6d 	.word	0x08003a6d
 8003a20:	08003a6d 	.word	0x08003a6d
 8003a24:	08003a73 	.word	0x08003a73
 8003a28:	08003a6d 	.word	0x08003a6d
 8003a2c:	08003a6d 	.word	0x08003a6d
 8003a30:	08003a6d 	.word	0x08003a6d
 8003a34:	08003a6d 	.word	0x08003a6d
 8003a38:	08003a6d 	.word	0x08003a6d
 8003a3c:	08003a6d 	.word	0x08003a6d
 8003a40:	08003a6d 	.word	0x08003a6d
 8003a44:	08003a73 	.word	0x08003a73
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fdfa 	bl	8004648 <RCCEx_PLL2_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003a58:	e00c      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3324      	adds	r3, #36	; 0x24
 8003a5e:	2101      	movs	r1, #1
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fea3 	bl	80047ac <RCCEx_PLL3_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003a6a:	e003      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a70:	e000      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8003a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a7a:	4b1e      	ldr	r3, [pc, #120]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a88:	491a      	ldr	r1, [pc, #104]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	654b      	str	r3, [r1, #84]	; 0x54
 8003a8e:	e001      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d03f      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aa4:	2b05      	cmp	r3, #5
 8003aa6:	d821      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x838>
 8003aa8:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8003aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aae:	bf00      	nop
 8003ab0:	08003b01 	.word	0x08003b01
 8003ab4:	08003ac9 	.word	0x08003ac9
 8003ab8:	08003adb 	.word	0x08003adb
 8003abc:	08003b01 	.word	0x08003b01
 8003ac0:	08003b01 	.word	0x08003b01
 8003ac4:	08003b01 	.word	0x08003b01
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3304      	adds	r3, #4
 8003acc:	2101      	movs	r1, #1
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fdba 	bl	8004648 <RCCEx_PLL2_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003ad8:	e013      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3324      	adds	r3, #36	; 0x24
 8003ade:	2101      	movs	r1, #1
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fe63 	bl	80047ac <RCCEx_PLL3_Config>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003aea:	e00a      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	75fb      	strb	r3, [r7, #23]
      break;
 8003af0:	e007      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8003af2:	bf00      	nop
 8003af4:	58024400 	.word	0x58024400
 8003af8:	58024800 	.word	0x58024800
 8003afc:	00ffffcf 	.word	0x00ffffcf
      break;
 8003b00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b02:	7dfb      	ldrb	r3, [r7, #23]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d109      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b08:	4b9f      	ldr	r3, [pc, #636]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0c:	f023 0207 	bic.w	r2, r3, #7
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b14:	499c      	ldr	r1, [pc, #624]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	654b      	str	r3, [r1, #84]	; 0x54
 8003b1a:	e001      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d039      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b32:	2b05      	cmp	r3, #5
 8003b34:	d820      	bhi.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8003b36:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3c:	08003b7f 	.word	0x08003b7f
 8003b40:	08003b55 	.word	0x08003b55
 8003b44:	08003b67 	.word	0x08003b67
 8003b48:	08003b7f 	.word	0x08003b7f
 8003b4c:	08003b7f 	.word	0x08003b7f
 8003b50:	08003b7f 	.word	0x08003b7f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	2101      	movs	r1, #1
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fd74 	bl	8004648 <RCCEx_PLL2_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003b64:	e00c      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3324      	adds	r3, #36	; 0x24
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fe1d 	bl	80047ac <RCCEx_PLL3_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003b76:	e003      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b7c:	e000      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8003b7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b86:	4b80      	ldr	r3, [pc, #512]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8a:	f023 0207 	bic.w	r2, r3, #7
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b94:	497c      	ldr	r1, [pc, #496]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	658b      	str	r3, [r1, #88]	; 0x58
 8003b9a:	e001      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
 8003b9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d04b      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb6:	d02e      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8003bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bbc:	d828      	bhi.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc2:	d02a      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc8:	d822      	bhi.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003bca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bce:	d026      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003bd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bd4:	d81c      	bhi.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bda:	d010      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003be0:	d816      	bhi.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01d      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003be6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bea:	d111      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fd28 	bl	8004648 <RCCEx_PLL2_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003bfc:	e012      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3324      	adds	r3, #36	; 0x24
 8003c02:	2102      	movs	r1, #2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fdd1 	bl	80047ac <RCCEx_PLL3_Config>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003c0e:	e009      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	75fb      	strb	r3, [r7, #23]
      break;
 8003c14:	e006      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003c16:	bf00      	nop
 8003c18:	e004      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003c1a:	bf00      	nop
 8003c1c:	e002      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003c1e:	bf00      	nop
 8003c20:	e000      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c24:	7dfb      	ldrb	r3, [r7, #23]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10a      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c2a:	4b57      	ldr	r3, [pc, #348]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c38:	4953      	ldr	r1, [pc, #332]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	654b      	str	r3, [r1, #84]	; 0x54
 8003c3e:	e001      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
 8003c42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d04b      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c5a:	d02e      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003c5c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c60:	d828      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c66:	d02a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6c:	d822      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003c6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c72:	d026      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003c74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c78:	d81c      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c7e:	d010      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8003c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c84:	d816      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d01d      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8e:	d111      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3304      	adds	r3, #4
 8003c94:	2100      	movs	r1, #0
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fcd6 	bl	8004648 <RCCEx_PLL2_Config>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ca0:	e012      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3324      	adds	r3, #36	; 0x24
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fd7f 	bl	80047ac <RCCEx_PLL3_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003cb2:	e009      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb8:	e006      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003cba:	bf00      	nop
 8003cbc:	e004      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003cbe:	bf00      	nop
 8003cc0:	e002      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003cc2:	bf00      	nop
 8003cc4:	e000      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc8:	7dfb      	ldrb	r3, [r7, #23]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cce:	4b2e      	ldr	r3, [pc, #184]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cdc:	492a      	ldr	r1, [pc, #168]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	658b      	str	r3, [r1, #88]	; 0x58
 8003ce2:	e001      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
 8003ce6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d04d      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cfa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003cfe:	d02e      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8003d00:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d04:	d828      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d0a:	d02a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d10:	d822      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003d12:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d16:	d026      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003d18:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d1c:	d81c      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003d1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d22:	d010      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8003d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d28:	d816      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d01d      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d32:	d111      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fc84 	bl	8004648 <RCCEx_PLL2_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003d44:	e012      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3324      	adds	r3, #36	; 0x24
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fd2d 	bl	80047ac <RCCEx_PLL3_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003d56:	e009      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5c:	e006      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e004      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003d62:	bf00      	nop
 8003d64:	e002      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003d66:	bf00      	nop
 8003d68:	e000      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d80:	4901      	ldr	r1, [pc, #4]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	658b      	str	r3, [r1, #88]	; 0x58
 8003d86:	e003      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003d88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
 8003d8e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da6:	d10a      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3324      	adds	r3, #36	; 0x24
 8003dac:	2102      	movs	r1, #2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fcfc 	bl	80047ac <RCCEx_PLL3_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003dbe:	4b8c      	ldr	r3, [pc, #560]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dcc:	4988      	ldr	r1, [pc, #544]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d01a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de8:	d10a      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3324      	adds	r3, #36	; 0x24
 8003dee:	2102      	movs	r1, #2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fcdb 	bl	80047ac <RCCEx_PLL3_Config>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e00:	4b7b      	ldr	r3, [pc, #492]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e0e:	4978      	ldr	r1, [pc, #480]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d034      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e2a:	d01d      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003e2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e30:	d817      	bhi.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e3a:	d009      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003e3c:	e011      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3304      	adds	r3, #4
 8003e42:	2100      	movs	r1, #0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fbff 	bl	8004648 <RCCEx_PLL2_Config>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003e4e:	e00c      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3324      	adds	r3, #36	; 0x24
 8003e54:	2102      	movs	r1, #2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fca8 	bl	80047ac <RCCEx_PLL3_Config>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003e60:	e003      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	75fb      	strb	r3, [r7, #23]
      break;
 8003e66:	e000      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003e68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e6a:	7dfb      	ldrb	r3, [r7, #23]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10a      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e70:	4b5f      	ldr	r3, [pc, #380]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e7e:	495c      	ldr	r1, [pc, #368]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	658b      	str	r3, [r1, #88]	; 0x58
 8003e84:	e001      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e86:	7dfb      	ldrb	r3, [r7, #23]
 8003e88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d033      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ea0:	d01c      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003ea2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ea6:	d816      	bhi.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003ea8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eac:	d003      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003eae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eb2:	d007      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003eb4:	e00f      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb6:	4b4e      	ldr	r3, [pc, #312]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	4a4d      	ldr	r2, [pc, #308]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003ec2:	e00c      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3324      	adds	r3, #36	; 0x24
 8003ec8:	2101      	movs	r1, #1
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fc6e 	bl	80047ac <RCCEx_PLL3_Config>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003ed4:	e003      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eda:	e000      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ede:	7dfb      	ldrb	r3, [r7, #23]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ee4:	4b42      	ldr	r3, [pc, #264]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ef2:	493f      	ldr	r1, [pc, #252]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	654b      	str	r3, [r1, #84]	; 0x54
 8003ef8:	e001      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efa:	7dfb      	ldrb	r3, [r7, #23]
 8003efc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d029      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8003f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f16:	d007      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003f18:	e00f      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f1a:	4b35      	ldr	r3, [pc, #212]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	4a34      	ldr	r2, [pc, #208]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003f26:	e00b      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	2102      	movs	r1, #2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fb8a 	bl	8004648 <RCCEx_PLL2_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003f38:	e002      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f40:	7dfb      	ldrb	r3, [r7, #23]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d109      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f46:	4b2a      	ldr	r3, [pc, #168]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f52:	4927      	ldr	r1, [pc, #156]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f58:	e001      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
 8003f5c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3324      	adds	r3, #36	; 0x24
 8003f6e:	2102      	movs	r1, #2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fc1b 	bl	80047ac <RCCEx_PLL3_Config>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d035      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f96:	d017      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f9c:	d811      	bhi.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa2:	d013      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8003fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa8:	d80b      	bhi.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d010      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8003fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb2:	d106      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb4:	4b0e      	ldr	r3, [pc, #56]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	4a0d      	ldr	r2, [pc, #52]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003fc0:	e007      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8003fc6:	e004      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003fc8:	bf00      	nop
 8003fca:	e002      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003fcc:	bf00      	nop
 8003fce:	e000      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10d      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe6:	4902      	ldr	r1, [pc, #8]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	654b      	str	r3, [r1, #84]	; 0x54
 8003fec:	e004      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003fee:	bf00      	nop
 8003ff0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
 8003ff6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004004:	4b30      	ldr	r3, [pc, #192]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004008:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004010:	492d      	ldr	r1, [pc, #180]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004012:	4313      	orrs	r3, r2
 8004014:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004022:	4b29      	ldr	r3, [pc, #164]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004026:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800402e:	4926      	ldr	r1, [pc, #152]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004030:	4313      	orrs	r3, r2
 8004032:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004040:	4b21      	ldr	r3, [pc, #132]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004044:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404c:	491e      	ldr	r1, [pc, #120]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800404e:	4313      	orrs	r3, r2
 8004050:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00d      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800405e:	4b1a      	ldr	r3, [pc, #104]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	4a19      	ldr	r2, [pc, #100]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004064:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004068:	6113      	str	r3, [r2, #16]
 800406a:	4b17      	ldr	r3, [pc, #92]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004074:	4914      	ldr	r1, [pc, #80]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004076:	4313      	orrs	r3, r2
 8004078:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	da08      	bge.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004082:	4b11      	ldr	r3, [pc, #68]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004086:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408e:	490e      	ldr	r1, [pc, #56]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004090:	4313      	orrs	r3, r2
 8004092:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d009      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040a0:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ae:	4906      	ldr	r1, [pc, #24]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80040b4:	7dbb      	ldrb	r3, [r7, #22]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e000      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	58024400 	.word	0x58024400

080040cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80040d0:	f7ff f894 	bl	80031fc <HAL_RCC_GetHCLKFreq>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	091b      	lsrs	r3, r3, #4
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	4904      	ldr	r1, [pc, #16]	; (80040f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80040e2:	5ccb      	ldrb	r3, [r1, r3]
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	58024400 	.word	0x58024400
 80040f4:	08006e78 	.word	0x08006e78

080040f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b089      	sub	sp, #36	; 0x24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004100:	4ba1      	ldr	r3, [pc, #644]	; (8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800410a:	4b9f      	ldr	r3, [pc, #636]	; (8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	0b1b      	lsrs	r3, r3, #12
 8004110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004114:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004116:	4b9c      	ldr	r3, [pc, #624]	; (8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	091b      	lsrs	r3, r3, #4
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004122:	4b99      	ldr	r3, [pc, #612]	; (8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	08db      	lsrs	r3, r3, #3
 8004128:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	fb02 f303 	mul.w	r3, r2, r3
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800413a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 8111 	beq.w	8004368 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b02      	cmp	r3, #2
 800414a:	f000 8083 	beq.w	8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	2b02      	cmp	r3, #2
 8004152:	f200 80a1 	bhi.w	8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d056      	beq.n	8004210 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004162:	e099      	b.n	8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004164:	4b88      	ldr	r3, [pc, #544]	; (8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b00      	cmp	r3, #0
 800416e:	d02d      	beq.n	80041cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004170:	4b85      	ldr	r3, [pc, #532]	; (8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	08db      	lsrs	r3, r3, #3
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	4a84      	ldr	r2, [pc, #528]	; (800438c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800417c:	fa22 f303 	lsr.w	r3, r2, r3
 8004180:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	ee07 3a90 	vmov	s15, r3
 8004188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800419a:	4b7b      	ldr	r3, [pc, #492]	; (8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80041ca:	e087      	b.n	80042dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	ee07 3a90 	vmov	s15, r3
 80041d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80041da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041de:	4b6a      	ldr	r3, [pc, #424]	; (8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e6:	ee07 3a90 	vmov	s15, r3
 80041ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80041f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800420a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800420e:	e065      	b.n	80042dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	ee07 3a90 	vmov	s15, r3
 8004216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800421a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800421e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004222:	4b59      	ldr	r3, [pc, #356]	; (8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004232:	ed97 6a03 	vldr	s12, [r7, #12]
 8004236:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800423a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800423e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800424a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800424e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004252:	e043      	b.n	80042dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800439c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004266:	4b48      	ldr	r3, [pc, #288]	; (8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004276:	ed97 6a03 	vldr	s12, [r7, #12]
 800427a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800427e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800428a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800428e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004292:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004296:	e021      	b.n	80042dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	ee07 3a90 	vmov	s15, r3
 800429e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80042a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042aa:	4b37      	ldr	r3, [pc, #220]	; (8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b2:	ee07 3a90 	vmov	s15, r3
 80042b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80042be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80042dc:	4b2a      	ldr	r3, [pc, #168]	; (8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	0a5b      	lsrs	r3, r3, #9
 80042e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80042fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004302:	ee17 2a90 	vmov	r2, s15
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800430a:	4b1f      	ldr	r3, [pc, #124]	; (8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	0c1b      	lsrs	r3, r3, #16
 8004310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004314:	ee07 3a90 	vmov	s15, r3
 8004318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004320:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004324:	edd7 6a07 	vldr	s13, [r7, #28]
 8004328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800432c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004330:	ee17 2a90 	vmov	r2, s15
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004338:	4b13      	ldr	r3, [pc, #76]	; (8004388 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	0e1b      	lsrs	r3, r3, #24
 800433e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004342:	ee07 3a90 	vmov	s15, r3
 8004346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800434e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004352:	edd7 6a07 	vldr	s13, [r7, #28]
 8004356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800435a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800435e:	ee17 2a90 	vmov	r2, s15
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004366:	e008      	b.n	800437a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	609a      	str	r2, [r3, #8]
}
 800437a:	bf00      	nop
 800437c:	3724      	adds	r7, #36	; 0x24
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	58024400 	.word	0x58024400
 800438c:	03d09000 	.word	0x03d09000
 8004390:	46000000 	.word	0x46000000
 8004394:	4c742400 	.word	0x4c742400
 8004398:	4a742400 	.word	0x4a742400
 800439c:	4af42400 	.word	0x4af42400

080043a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b089      	sub	sp, #36	; 0x24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043a8:	4ba1      	ldr	r3, [pc, #644]	; (8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80043b2:	4b9f      	ldr	r3, [pc, #636]	; (8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b6:	0d1b      	lsrs	r3, r3, #20
 80043b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80043be:	4b9c      	ldr	r3, [pc, #624]	; (8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	0a1b      	lsrs	r3, r3, #8
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80043ca:	4b99      	ldr	r3, [pc, #612]	; (8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ce:	08db      	lsrs	r3, r3, #3
 80043d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	fb02 f303 	mul.w	r3, r2, r3
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8111 	beq.w	8004610 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	f000 8083 	beq.w	80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	f200 80a1 	bhi.w	8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d056      	beq.n	80044b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800440a:	e099      	b.n	8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800440c:	4b88      	ldr	r3, [pc, #544]	; (8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b00      	cmp	r3, #0
 8004416:	d02d      	beq.n	8004474 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004418:	4b85      	ldr	r3, [pc, #532]	; (8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	08db      	lsrs	r3, r3, #3
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	4a84      	ldr	r2, [pc, #528]	; (8004634 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
 8004428:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	ee07 3a90 	vmov	s15, r3
 8004430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004442:	4b7b      	ldr	r3, [pc, #492]	; (8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004452:	ed97 6a03 	vldr	s12, [r7, #12]
 8004456:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800445a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800445e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004472:	e087      	b.n	8004584 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800463c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004486:	4b6a      	ldr	r3, [pc, #424]	; (8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800448e:	ee07 3a90 	vmov	s15, r3
 8004492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004496:	ed97 6a03 	vldr	s12, [r7, #12]
 800449a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800449e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044b6:	e065      	b.n	8004584 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80044c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ca:	4b59      	ldr	r3, [pc, #356]	; (8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044da:	ed97 6a03 	vldr	s12, [r7, #12]
 80044de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044fa:	e043      	b.n	8004584 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004506:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004644 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800450a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800450e:	4b48      	ldr	r3, [pc, #288]	; (8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800451e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004522:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800452a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800452e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800453e:	e021      	b.n	8004584 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800454e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004552:	4b37      	ldr	r3, [pc, #220]	; (8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455a:	ee07 3a90 	vmov	s15, r3
 800455e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004562:	ed97 6a03 	vldr	s12, [r7, #12]
 8004566:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800456a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800456e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800457a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800457e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004582:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004584:	4b2a      	ldr	r3, [pc, #168]	; (8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	0a5b      	lsrs	r3, r3, #9
 800458a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800459a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800459e:	edd7 6a07 	vldr	s13, [r7, #28]
 80045a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045aa:	ee17 2a90 	vmov	r2, s15
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80045b2:	4b1f      	ldr	r3, [pc, #124]	; (8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	0c1b      	lsrs	r3, r3, #16
 80045b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045bc:	ee07 3a90 	vmov	s15, r3
 80045c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80045d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045d8:	ee17 2a90 	vmov	r2, s15
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80045e0:	4b13      	ldr	r3, [pc, #76]	; (8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	0e1b      	lsrs	r3, r3, #24
 80045e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80045fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004606:	ee17 2a90 	vmov	r2, s15
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800460e:	e008      	b.n	8004622 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	609a      	str	r2, [r3, #8]
}
 8004622:	bf00      	nop
 8004624:	3724      	adds	r7, #36	; 0x24
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	58024400 	.word	0x58024400
 8004634:	03d09000 	.word	0x03d09000
 8004638:	46000000 	.word	0x46000000
 800463c:	4c742400 	.word	0x4c742400
 8004640:	4a742400 	.word	0x4a742400
 8004644:	4af42400 	.word	0x4af42400

08004648 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004656:	4b53      	ldr	r3, [pc, #332]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b03      	cmp	r3, #3
 8004660:	d101      	bne.n	8004666 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e099      	b.n	800479a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004666:	4b4f      	ldr	r3, [pc, #316]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a4e      	ldr	r2, [pc, #312]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 800466c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004672:	f7fc fe79 	bl	8001368 <HAL_GetTick>
 8004676:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004678:	e008      	b.n	800468c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800467a:	f7fc fe75 	bl	8001368 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e086      	b.n	800479a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800468c:	4b45      	ldr	r3, [pc, #276]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f0      	bne.n	800467a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004698:	4b42      	ldr	r3, [pc, #264]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	031b      	lsls	r3, r3, #12
 80046a6:	493f      	ldr	r1, [pc, #252]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	628b      	str	r3, [r1, #40]	; 0x28
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	025b      	lsls	r3, r3, #9
 80046be:	b29b      	uxth	r3, r3
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	041b      	lsls	r3, r3, #16
 80046ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	061b      	lsls	r3, r3, #24
 80046d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046dc:	4931      	ldr	r1, [pc, #196]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80046e2:	4b30      	ldr	r3, [pc, #192]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	492d      	ldr	r1, [pc, #180]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80046f4:	4b2b      	ldr	r3, [pc, #172]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	f023 0220 	bic.w	r2, r3, #32
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	4928      	ldr	r1, [pc, #160]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 8004702:	4313      	orrs	r3, r2
 8004704:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004706:	4b27      	ldr	r3, [pc, #156]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	4a26      	ldr	r2, [pc, #152]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 800470c:	f023 0310 	bic.w	r3, r3, #16
 8004710:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004712:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 8004714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004716:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <RCCEx_PLL2_Config+0x160>)
 8004718:	4013      	ands	r3, r2
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	69d2      	ldr	r2, [r2, #28]
 800471e:	00d2      	lsls	r2, r2, #3
 8004720:	4920      	ldr	r1, [pc, #128]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 8004722:	4313      	orrs	r3, r2
 8004724:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004726:	4b1f      	ldr	r3, [pc, #124]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	4a1e      	ldr	r2, [pc, #120]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 800472c:	f043 0310 	orr.w	r3, r3, #16
 8004730:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d106      	bne.n	8004746 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004738:	4b1a      	ldr	r3, [pc, #104]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	4a19      	ldr	r2, [pc, #100]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 800473e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004742:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004744:	e00f      	b.n	8004766 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d106      	bne.n	800475a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800474c:	4b15      	ldr	r3, [pc, #84]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	4a14      	ldr	r2, [pc, #80]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 8004752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004756:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004758:	e005      	b.n	8004766 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800475a:	4b12      	ldr	r3, [pc, #72]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	4a11      	ldr	r2, [pc, #68]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 8004760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004764:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004766:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a0e      	ldr	r2, [pc, #56]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 800476c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004772:	f7fc fdf9 	bl	8001368 <HAL_GetTick>
 8004776:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004778:	e008      	b.n	800478c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800477a:	f7fc fdf5 	bl	8001368 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e006      	b.n	800479a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <RCCEx_PLL2_Config+0x15c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004798:	7bfb      	ldrb	r3, [r7, #15]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	58024400 	.word	0x58024400
 80047a8:	ffff0007 	.word	0xffff0007

080047ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047ba:	4b53      	ldr	r3, [pc, #332]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d101      	bne.n	80047ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e099      	b.n	80048fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80047ca:	4b4f      	ldr	r3, [pc, #316]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a4e      	ldr	r2, [pc, #312]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 80047d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d6:	f7fc fdc7 	bl	8001368 <HAL_GetTick>
 80047da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047dc:	e008      	b.n	80047f0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80047de:	f7fc fdc3 	bl	8001368 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e086      	b.n	80048fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047f0:	4b45      	ldr	r3, [pc, #276]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f0      	bne.n	80047de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80047fc:	4b42      	ldr	r3, [pc, #264]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	051b      	lsls	r3, r3, #20
 800480a:	493f      	ldr	r1, [pc, #252]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 800480c:	4313      	orrs	r3, r2
 800480e:	628b      	str	r3, [r1, #40]	; 0x28
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	3b01      	subs	r3, #1
 8004816:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	3b01      	subs	r3, #1
 8004820:	025b      	lsls	r3, r3, #9
 8004822:	b29b      	uxth	r3, r3
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	3b01      	subs	r3, #1
 800482c:	041b      	lsls	r3, r3, #16
 800482e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	3b01      	subs	r3, #1
 800483a:	061b      	lsls	r3, r3, #24
 800483c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004840:	4931      	ldr	r1, [pc, #196]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 8004842:	4313      	orrs	r3, r2
 8004844:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004846:	4b30      	ldr	r3, [pc, #192]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	492d      	ldr	r1, [pc, #180]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 8004854:	4313      	orrs	r3, r2
 8004856:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004858:	4b2b      	ldr	r3, [pc, #172]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	4928      	ldr	r1, [pc, #160]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 8004866:	4313      	orrs	r3, r2
 8004868:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800486a:	4b27      	ldr	r3, [pc, #156]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	4a26      	ldr	r2, [pc, #152]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 8004870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004874:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004876:	4b24      	ldr	r3, [pc, #144]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 8004878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800487a:	4b24      	ldr	r3, [pc, #144]	; (800490c <RCCEx_PLL3_Config+0x160>)
 800487c:	4013      	ands	r3, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	69d2      	ldr	r2, [r2, #28]
 8004882:	00d2      	lsls	r2, r2, #3
 8004884:	4920      	ldr	r1, [pc, #128]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 8004886:	4313      	orrs	r3, r2
 8004888:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800488a:	4b1f      	ldr	r3, [pc, #124]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	4a1e      	ldr	r2, [pc, #120]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 8004890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004894:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800489c:	4b1a      	ldr	r3, [pc, #104]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	4a19      	ldr	r2, [pc, #100]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 80048a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048a8:	e00f      	b.n	80048ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d106      	bne.n	80048be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80048b0:	4b15      	ldr	r3, [pc, #84]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	4a14      	ldr	r2, [pc, #80]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 80048b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048bc:	e005      	b.n	80048ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80048be:	4b12      	ldr	r3, [pc, #72]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	4a11      	ldr	r2, [pc, #68]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 80048c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80048ca:	4b0f      	ldr	r3, [pc, #60]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a0e      	ldr	r2, [pc, #56]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 80048d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d6:	f7fc fd47 	bl	8001368 <HAL_GetTick>
 80048da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048dc:	e008      	b.n	80048f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80048de:	f7fc fd43 	bl	8001368 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e006      	b.n	80048fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <RCCEx_PLL3_Config+0x15c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	58024400 	.word	0x58024400
 800490c:	ffff0007 	.word	0xffff0007

08004910 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e042      	b.n	80049a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004928:	2b00      	cmp	r3, #0
 800492a:	d106      	bne.n	800493a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7fc fbf9 	bl	800112c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2224      	movs	r2, #36	; 0x24
 800493e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0201 	bic.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f8c2 	bl	8004adc <UART_SetConfig>
 8004958:	4603      	mov	r3, r0
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e022      	b.n	80049a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 ff22 	bl	80057b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800497e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800498e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 ffa9 	bl	80058f8 <UART_CheckIdleState>
 80049a6:	4603      	mov	r3, r0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	4613      	mov	r3, r2
 80049be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	f040 8083 	bne.w	8004ad2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <HAL_UART_Transmit+0x28>
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e07b      	b.n	8004ad4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_UART_Transmit+0x3a>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e074      	b.n	8004ad4 <HAL_UART_Transmit+0x124>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2221      	movs	r2, #33	; 0x21
 80049fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a02:	f7fc fcb1 	bl	8001368 <HAL_GetTick>
 8004a06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	88fa      	ldrh	r2, [r7, #6]
 8004a0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	88fa      	ldrh	r2, [r7, #6]
 8004a14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a20:	d108      	bne.n	8004a34 <HAL_UART_Transmit+0x84>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d104      	bne.n	8004a34 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	61bb      	str	r3, [r7, #24]
 8004a32:	e003      	b.n	8004a3c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004a44:	e02c      	b.n	8004aa0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2180      	movs	r1, #128	; 0x80
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 ff9c 	bl	800598e <UART_WaitOnFlagUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e039      	b.n	8004ad4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10b      	bne.n	8004a7e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	3302      	adds	r3, #2
 8004a7a:	61bb      	str	r3, [r7, #24]
 8004a7c:	e007      	b.n	8004a8e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	781a      	ldrb	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1cc      	bne.n	8004a46 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	2140      	movs	r1, #64	; 0x40
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 ff69 	bl	800598e <UART_WaitOnFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e006      	b.n	8004ad4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	e000      	b.n	8004ad4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004ad2:	2302      	movs	r3, #2
  }
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3720      	adds	r7, #32
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ae0:	b092      	sub	sp, #72	; 0x48
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	431a      	orrs	r2, r3
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	4bbe      	ldr	r3, [pc, #760]	; (8004e04 <UART_SetConfig+0x328>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	6812      	ldr	r2, [r2, #0]
 8004b12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b14:	430b      	orrs	r3, r1
 8004b16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4ab3      	ldr	r2, [pc, #716]	; (8004e08 <UART_SetConfig+0x32c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d004      	beq.n	8004b48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b44:	4313      	orrs	r3, r2
 8004b46:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	4baf      	ldr	r3, [pc, #700]	; (8004e0c <UART_SetConfig+0x330>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	6812      	ldr	r2, [r2, #0]
 8004b56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	f023 010f 	bic.w	r1, r3, #15
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4aa6      	ldr	r2, [pc, #664]	; (8004e10 <UART_SetConfig+0x334>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d177      	bne.n	8004c6c <UART_SetConfig+0x190>
 8004b7c:	4ba5      	ldr	r3, [pc, #660]	; (8004e14 <UART_SetConfig+0x338>)
 8004b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b84:	2b28      	cmp	r3, #40	; 0x28
 8004b86:	d86d      	bhi.n	8004c64 <UART_SetConfig+0x188>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <UART_SetConfig+0xb4>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004c35 	.word	0x08004c35
 8004b94:	08004c65 	.word	0x08004c65
 8004b98:	08004c65 	.word	0x08004c65
 8004b9c:	08004c65 	.word	0x08004c65
 8004ba0:	08004c65 	.word	0x08004c65
 8004ba4:	08004c65 	.word	0x08004c65
 8004ba8:	08004c65 	.word	0x08004c65
 8004bac:	08004c65 	.word	0x08004c65
 8004bb0:	08004c3d 	.word	0x08004c3d
 8004bb4:	08004c65 	.word	0x08004c65
 8004bb8:	08004c65 	.word	0x08004c65
 8004bbc:	08004c65 	.word	0x08004c65
 8004bc0:	08004c65 	.word	0x08004c65
 8004bc4:	08004c65 	.word	0x08004c65
 8004bc8:	08004c65 	.word	0x08004c65
 8004bcc:	08004c65 	.word	0x08004c65
 8004bd0:	08004c45 	.word	0x08004c45
 8004bd4:	08004c65 	.word	0x08004c65
 8004bd8:	08004c65 	.word	0x08004c65
 8004bdc:	08004c65 	.word	0x08004c65
 8004be0:	08004c65 	.word	0x08004c65
 8004be4:	08004c65 	.word	0x08004c65
 8004be8:	08004c65 	.word	0x08004c65
 8004bec:	08004c65 	.word	0x08004c65
 8004bf0:	08004c4d 	.word	0x08004c4d
 8004bf4:	08004c65 	.word	0x08004c65
 8004bf8:	08004c65 	.word	0x08004c65
 8004bfc:	08004c65 	.word	0x08004c65
 8004c00:	08004c65 	.word	0x08004c65
 8004c04:	08004c65 	.word	0x08004c65
 8004c08:	08004c65 	.word	0x08004c65
 8004c0c:	08004c65 	.word	0x08004c65
 8004c10:	08004c55 	.word	0x08004c55
 8004c14:	08004c65 	.word	0x08004c65
 8004c18:	08004c65 	.word	0x08004c65
 8004c1c:	08004c65 	.word	0x08004c65
 8004c20:	08004c65 	.word	0x08004c65
 8004c24:	08004c65 	.word	0x08004c65
 8004c28:	08004c65 	.word	0x08004c65
 8004c2c:	08004c65 	.word	0x08004c65
 8004c30:	08004c5d 	.word	0x08004c5d
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c3a:	e326      	b.n	800528a <UART_SetConfig+0x7ae>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c42:	e322      	b.n	800528a <UART_SetConfig+0x7ae>
 8004c44:	2308      	movs	r3, #8
 8004c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c4a:	e31e      	b.n	800528a <UART_SetConfig+0x7ae>
 8004c4c:	2310      	movs	r3, #16
 8004c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c52:	e31a      	b.n	800528a <UART_SetConfig+0x7ae>
 8004c54:	2320      	movs	r3, #32
 8004c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c5a:	e316      	b.n	800528a <UART_SetConfig+0x7ae>
 8004c5c:	2340      	movs	r3, #64	; 0x40
 8004c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c62:	e312      	b.n	800528a <UART_SetConfig+0x7ae>
 8004c64:	2380      	movs	r3, #128	; 0x80
 8004c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c6a:	e30e      	b.n	800528a <UART_SetConfig+0x7ae>
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a69      	ldr	r2, [pc, #420]	; (8004e18 <UART_SetConfig+0x33c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d130      	bne.n	8004cd8 <UART_SetConfig+0x1fc>
 8004c76:	4b67      	ldr	r3, [pc, #412]	; (8004e14 <UART_SetConfig+0x338>)
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	2b05      	cmp	r3, #5
 8004c80:	d826      	bhi.n	8004cd0 <UART_SetConfig+0x1f4>
 8004c82:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <UART_SetConfig+0x1ac>)
 8004c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c88:	08004ca1 	.word	0x08004ca1
 8004c8c:	08004ca9 	.word	0x08004ca9
 8004c90:	08004cb1 	.word	0x08004cb1
 8004c94:	08004cb9 	.word	0x08004cb9
 8004c98:	08004cc1 	.word	0x08004cc1
 8004c9c:	08004cc9 	.word	0x08004cc9
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ca6:	e2f0      	b.n	800528a <UART_SetConfig+0x7ae>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cae:	e2ec      	b.n	800528a <UART_SetConfig+0x7ae>
 8004cb0:	2308      	movs	r3, #8
 8004cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cb6:	e2e8      	b.n	800528a <UART_SetConfig+0x7ae>
 8004cb8:	2310      	movs	r3, #16
 8004cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cbe:	e2e4      	b.n	800528a <UART_SetConfig+0x7ae>
 8004cc0:	2320      	movs	r3, #32
 8004cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cc6:	e2e0      	b.n	800528a <UART_SetConfig+0x7ae>
 8004cc8:	2340      	movs	r3, #64	; 0x40
 8004cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cce:	e2dc      	b.n	800528a <UART_SetConfig+0x7ae>
 8004cd0:	2380      	movs	r3, #128	; 0x80
 8004cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cd6:	e2d8      	b.n	800528a <UART_SetConfig+0x7ae>
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a4f      	ldr	r2, [pc, #316]	; (8004e1c <UART_SetConfig+0x340>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d130      	bne.n	8004d44 <UART_SetConfig+0x268>
 8004ce2:	4b4c      	ldr	r3, [pc, #304]	; (8004e14 <UART_SetConfig+0x338>)
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	2b05      	cmp	r3, #5
 8004cec:	d826      	bhi.n	8004d3c <UART_SetConfig+0x260>
 8004cee:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <UART_SetConfig+0x218>)
 8004cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf4:	08004d0d 	.word	0x08004d0d
 8004cf8:	08004d15 	.word	0x08004d15
 8004cfc:	08004d1d 	.word	0x08004d1d
 8004d00:	08004d25 	.word	0x08004d25
 8004d04:	08004d2d 	.word	0x08004d2d
 8004d08:	08004d35 	.word	0x08004d35
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d12:	e2ba      	b.n	800528a <UART_SetConfig+0x7ae>
 8004d14:	2304      	movs	r3, #4
 8004d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d1a:	e2b6      	b.n	800528a <UART_SetConfig+0x7ae>
 8004d1c:	2308      	movs	r3, #8
 8004d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d22:	e2b2      	b.n	800528a <UART_SetConfig+0x7ae>
 8004d24:	2310      	movs	r3, #16
 8004d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d2a:	e2ae      	b.n	800528a <UART_SetConfig+0x7ae>
 8004d2c:	2320      	movs	r3, #32
 8004d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d32:	e2aa      	b.n	800528a <UART_SetConfig+0x7ae>
 8004d34:	2340      	movs	r3, #64	; 0x40
 8004d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d3a:	e2a6      	b.n	800528a <UART_SetConfig+0x7ae>
 8004d3c:	2380      	movs	r3, #128	; 0x80
 8004d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d42:	e2a2      	b.n	800528a <UART_SetConfig+0x7ae>
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a35      	ldr	r2, [pc, #212]	; (8004e20 <UART_SetConfig+0x344>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d130      	bne.n	8004db0 <UART_SetConfig+0x2d4>
 8004d4e:	4b31      	ldr	r3, [pc, #196]	; (8004e14 <UART_SetConfig+0x338>)
 8004d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	2b05      	cmp	r3, #5
 8004d58:	d826      	bhi.n	8004da8 <UART_SetConfig+0x2cc>
 8004d5a:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <UART_SetConfig+0x284>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004d79 	.word	0x08004d79
 8004d64:	08004d81 	.word	0x08004d81
 8004d68:	08004d89 	.word	0x08004d89
 8004d6c:	08004d91 	.word	0x08004d91
 8004d70:	08004d99 	.word	0x08004d99
 8004d74:	08004da1 	.word	0x08004da1
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d7e:	e284      	b.n	800528a <UART_SetConfig+0x7ae>
 8004d80:	2304      	movs	r3, #4
 8004d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d86:	e280      	b.n	800528a <UART_SetConfig+0x7ae>
 8004d88:	2308      	movs	r3, #8
 8004d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d8e:	e27c      	b.n	800528a <UART_SetConfig+0x7ae>
 8004d90:	2310      	movs	r3, #16
 8004d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d96:	e278      	b.n	800528a <UART_SetConfig+0x7ae>
 8004d98:	2320      	movs	r3, #32
 8004d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d9e:	e274      	b.n	800528a <UART_SetConfig+0x7ae>
 8004da0:	2340      	movs	r3, #64	; 0x40
 8004da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004da6:	e270      	b.n	800528a <UART_SetConfig+0x7ae>
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dae:	e26c      	b.n	800528a <UART_SetConfig+0x7ae>
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1b      	ldr	r2, [pc, #108]	; (8004e24 <UART_SetConfig+0x348>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d142      	bne.n	8004e40 <UART_SetConfig+0x364>
 8004dba:	4b16      	ldr	r3, [pc, #88]	; (8004e14 <UART_SetConfig+0x338>)
 8004dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	2b05      	cmp	r3, #5
 8004dc4:	d838      	bhi.n	8004e38 <UART_SetConfig+0x35c>
 8004dc6:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <UART_SetConfig+0x2f0>)
 8004dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dcc:	08004de5 	.word	0x08004de5
 8004dd0:	08004ded 	.word	0x08004ded
 8004dd4:	08004df5 	.word	0x08004df5
 8004dd8:	08004dfd 	.word	0x08004dfd
 8004ddc:	08004e29 	.word	0x08004e29
 8004de0:	08004e31 	.word	0x08004e31
 8004de4:	2300      	movs	r3, #0
 8004de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dea:	e24e      	b.n	800528a <UART_SetConfig+0x7ae>
 8004dec:	2304      	movs	r3, #4
 8004dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004df2:	e24a      	b.n	800528a <UART_SetConfig+0x7ae>
 8004df4:	2308      	movs	r3, #8
 8004df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dfa:	e246      	b.n	800528a <UART_SetConfig+0x7ae>
 8004dfc:	2310      	movs	r3, #16
 8004dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e02:	e242      	b.n	800528a <UART_SetConfig+0x7ae>
 8004e04:	cfff69f3 	.word	0xcfff69f3
 8004e08:	58000c00 	.word	0x58000c00
 8004e0c:	11fff4ff 	.word	0x11fff4ff
 8004e10:	40011000 	.word	0x40011000
 8004e14:	58024400 	.word	0x58024400
 8004e18:	40004400 	.word	0x40004400
 8004e1c:	40004800 	.word	0x40004800
 8004e20:	40004c00 	.word	0x40004c00
 8004e24:	40005000 	.word	0x40005000
 8004e28:	2320      	movs	r3, #32
 8004e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e2e:	e22c      	b.n	800528a <UART_SetConfig+0x7ae>
 8004e30:	2340      	movs	r3, #64	; 0x40
 8004e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e36:	e228      	b.n	800528a <UART_SetConfig+0x7ae>
 8004e38:	2380      	movs	r3, #128	; 0x80
 8004e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e3e:	e224      	b.n	800528a <UART_SetConfig+0x7ae>
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4ab1      	ldr	r2, [pc, #708]	; (800510c <UART_SetConfig+0x630>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d176      	bne.n	8004f38 <UART_SetConfig+0x45c>
 8004e4a:	4bb1      	ldr	r3, [pc, #708]	; (8005110 <UART_SetConfig+0x634>)
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e52:	2b28      	cmp	r3, #40	; 0x28
 8004e54:	d86c      	bhi.n	8004f30 <UART_SetConfig+0x454>
 8004e56:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <UART_SetConfig+0x380>)
 8004e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5c:	08004f01 	.word	0x08004f01
 8004e60:	08004f31 	.word	0x08004f31
 8004e64:	08004f31 	.word	0x08004f31
 8004e68:	08004f31 	.word	0x08004f31
 8004e6c:	08004f31 	.word	0x08004f31
 8004e70:	08004f31 	.word	0x08004f31
 8004e74:	08004f31 	.word	0x08004f31
 8004e78:	08004f31 	.word	0x08004f31
 8004e7c:	08004f09 	.word	0x08004f09
 8004e80:	08004f31 	.word	0x08004f31
 8004e84:	08004f31 	.word	0x08004f31
 8004e88:	08004f31 	.word	0x08004f31
 8004e8c:	08004f31 	.word	0x08004f31
 8004e90:	08004f31 	.word	0x08004f31
 8004e94:	08004f31 	.word	0x08004f31
 8004e98:	08004f31 	.word	0x08004f31
 8004e9c:	08004f11 	.word	0x08004f11
 8004ea0:	08004f31 	.word	0x08004f31
 8004ea4:	08004f31 	.word	0x08004f31
 8004ea8:	08004f31 	.word	0x08004f31
 8004eac:	08004f31 	.word	0x08004f31
 8004eb0:	08004f31 	.word	0x08004f31
 8004eb4:	08004f31 	.word	0x08004f31
 8004eb8:	08004f31 	.word	0x08004f31
 8004ebc:	08004f19 	.word	0x08004f19
 8004ec0:	08004f31 	.word	0x08004f31
 8004ec4:	08004f31 	.word	0x08004f31
 8004ec8:	08004f31 	.word	0x08004f31
 8004ecc:	08004f31 	.word	0x08004f31
 8004ed0:	08004f31 	.word	0x08004f31
 8004ed4:	08004f31 	.word	0x08004f31
 8004ed8:	08004f31 	.word	0x08004f31
 8004edc:	08004f21 	.word	0x08004f21
 8004ee0:	08004f31 	.word	0x08004f31
 8004ee4:	08004f31 	.word	0x08004f31
 8004ee8:	08004f31 	.word	0x08004f31
 8004eec:	08004f31 	.word	0x08004f31
 8004ef0:	08004f31 	.word	0x08004f31
 8004ef4:	08004f31 	.word	0x08004f31
 8004ef8:	08004f31 	.word	0x08004f31
 8004efc:	08004f29 	.word	0x08004f29
 8004f00:	2301      	movs	r3, #1
 8004f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f06:	e1c0      	b.n	800528a <UART_SetConfig+0x7ae>
 8004f08:	2304      	movs	r3, #4
 8004f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f0e:	e1bc      	b.n	800528a <UART_SetConfig+0x7ae>
 8004f10:	2308      	movs	r3, #8
 8004f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f16:	e1b8      	b.n	800528a <UART_SetConfig+0x7ae>
 8004f18:	2310      	movs	r3, #16
 8004f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f1e:	e1b4      	b.n	800528a <UART_SetConfig+0x7ae>
 8004f20:	2320      	movs	r3, #32
 8004f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f26:	e1b0      	b.n	800528a <UART_SetConfig+0x7ae>
 8004f28:	2340      	movs	r3, #64	; 0x40
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f2e:	e1ac      	b.n	800528a <UART_SetConfig+0x7ae>
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f36:	e1a8      	b.n	800528a <UART_SetConfig+0x7ae>
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a75      	ldr	r2, [pc, #468]	; (8005114 <UART_SetConfig+0x638>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d130      	bne.n	8004fa4 <UART_SetConfig+0x4c8>
 8004f42:	4b73      	ldr	r3, [pc, #460]	; (8005110 <UART_SetConfig+0x634>)
 8004f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	2b05      	cmp	r3, #5
 8004f4c:	d826      	bhi.n	8004f9c <UART_SetConfig+0x4c0>
 8004f4e:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <UART_SetConfig+0x478>)
 8004f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f54:	08004f6d 	.word	0x08004f6d
 8004f58:	08004f75 	.word	0x08004f75
 8004f5c:	08004f7d 	.word	0x08004f7d
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004f8d 	.word	0x08004f8d
 8004f68:	08004f95 	.word	0x08004f95
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f72:	e18a      	b.n	800528a <UART_SetConfig+0x7ae>
 8004f74:	2304      	movs	r3, #4
 8004f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f7a:	e186      	b.n	800528a <UART_SetConfig+0x7ae>
 8004f7c:	2308      	movs	r3, #8
 8004f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f82:	e182      	b.n	800528a <UART_SetConfig+0x7ae>
 8004f84:	2310      	movs	r3, #16
 8004f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f8a:	e17e      	b.n	800528a <UART_SetConfig+0x7ae>
 8004f8c:	2320      	movs	r3, #32
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f92:	e17a      	b.n	800528a <UART_SetConfig+0x7ae>
 8004f94:	2340      	movs	r3, #64	; 0x40
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9a:	e176      	b.n	800528a <UART_SetConfig+0x7ae>
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa2:	e172      	b.n	800528a <UART_SetConfig+0x7ae>
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a5b      	ldr	r2, [pc, #364]	; (8005118 <UART_SetConfig+0x63c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d130      	bne.n	8005010 <UART_SetConfig+0x534>
 8004fae:	4b58      	ldr	r3, [pc, #352]	; (8005110 <UART_SetConfig+0x634>)
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	2b05      	cmp	r3, #5
 8004fb8:	d826      	bhi.n	8005008 <UART_SetConfig+0x52c>
 8004fba:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <UART_SetConfig+0x4e4>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08004fd9 	.word	0x08004fd9
 8004fc4:	08004fe1 	.word	0x08004fe1
 8004fc8:	08004fe9 	.word	0x08004fe9
 8004fcc:	08004ff1 	.word	0x08004ff1
 8004fd0:	08004ff9 	.word	0x08004ff9
 8004fd4:	08005001 	.word	0x08005001
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fde:	e154      	b.n	800528a <UART_SetConfig+0x7ae>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fe6:	e150      	b.n	800528a <UART_SetConfig+0x7ae>
 8004fe8:	2308      	movs	r3, #8
 8004fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fee:	e14c      	b.n	800528a <UART_SetConfig+0x7ae>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ff6:	e148      	b.n	800528a <UART_SetConfig+0x7ae>
 8004ff8:	2320      	movs	r3, #32
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ffe:	e144      	b.n	800528a <UART_SetConfig+0x7ae>
 8005000:	2340      	movs	r3, #64	; 0x40
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005006:	e140      	b.n	800528a <UART_SetConfig+0x7ae>
 8005008:	2380      	movs	r3, #128	; 0x80
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500e:	e13c      	b.n	800528a <UART_SetConfig+0x7ae>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a41      	ldr	r2, [pc, #260]	; (800511c <UART_SetConfig+0x640>)
 8005016:	4293      	cmp	r3, r2
 8005018:	f040 8082 	bne.w	8005120 <UART_SetConfig+0x644>
 800501c:	4b3c      	ldr	r3, [pc, #240]	; (8005110 <UART_SetConfig+0x634>)
 800501e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005020:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005024:	2b28      	cmp	r3, #40	; 0x28
 8005026:	d86d      	bhi.n	8005104 <UART_SetConfig+0x628>
 8005028:	a201      	add	r2, pc, #4	; (adr r2, 8005030 <UART_SetConfig+0x554>)
 800502a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502e:	bf00      	nop
 8005030:	080050d5 	.word	0x080050d5
 8005034:	08005105 	.word	0x08005105
 8005038:	08005105 	.word	0x08005105
 800503c:	08005105 	.word	0x08005105
 8005040:	08005105 	.word	0x08005105
 8005044:	08005105 	.word	0x08005105
 8005048:	08005105 	.word	0x08005105
 800504c:	08005105 	.word	0x08005105
 8005050:	080050dd 	.word	0x080050dd
 8005054:	08005105 	.word	0x08005105
 8005058:	08005105 	.word	0x08005105
 800505c:	08005105 	.word	0x08005105
 8005060:	08005105 	.word	0x08005105
 8005064:	08005105 	.word	0x08005105
 8005068:	08005105 	.word	0x08005105
 800506c:	08005105 	.word	0x08005105
 8005070:	080050e5 	.word	0x080050e5
 8005074:	08005105 	.word	0x08005105
 8005078:	08005105 	.word	0x08005105
 800507c:	08005105 	.word	0x08005105
 8005080:	08005105 	.word	0x08005105
 8005084:	08005105 	.word	0x08005105
 8005088:	08005105 	.word	0x08005105
 800508c:	08005105 	.word	0x08005105
 8005090:	080050ed 	.word	0x080050ed
 8005094:	08005105 	.word	0x08005105
 8005098:	08005105 	.word	0x08005105
 800509c:	08005105 	.word	0x08005105
 80050a0:	08005105 	.word	0x08005105
 80050a4:	08005105 	.word	0x08005105
 80050a8:	08005105 	.word	0x08005105
 80050ac:	08005105 	.word	0x08005105
 80050b0:	080050f5 	.word	0x080050f5
 80050b4:	08005105 	.word	0x08005105
 80050b8:	08005105 	.word	0x08005105
 80050bc:	08005105 	.word	0x08005105
 80050c0:	08005105 	.word	0x08005105
 80050c4:	08005105 	.word	0x08005105
 80050c8:	08005105 	.word	0x08005105
 80050cc:	08005105 	.word	0x08005105
 80050d0:	080050fd 	.word	0x080050fd
 80050d4:	2301      	movs	r3, #1
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050da:	e0d6      	b.n	800528a <UART_SetConfig+0x7ae>
 80050dc:	2304      	movs	r3, #4
 80050de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050e2:	e0d2      	b.n	800528a <UART_SetConfig+0x7ae>
 80050e4:	2308      	movs	r3, #8
 80050e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ea:	e0ce      	b.n	800528a <UART_SetConfig+0x7ae>
 80050ec:	2310      	movs	r3, #16
 80050ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050f2:	e0ca      	b.n	800528a <UART_SetConfig+0x7ae>
 80050f4:	2320      	movs	r3, #32
 80050f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fa:	e0c6      	b.n	800528a <UART_SetConfig+0x7ae>
 80050fc:	2340      	movs	r3, #64	; 0x40
 80050fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005102:	e0c2      	b.n	800528a <UART_SetConfig+0x7ae>
 8005104:	2380      	movs	r3, #128	; 0x80
 8005106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800510a:	e0be      	b.n	800528a <UART_SetConfig+0x7ae>
 800510c:	40011400 	.word	0x40011400
 8005110:	58024400 	.word	0x58024400
 8005114:	40007800 	.word	0x40007800
 8005118:	40007c00 	.word	0x40007c00
 800511c:	40011800 	.word	0x40011800
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4aad      	ldr	r2, [pc, #692]	; (80053dc <UART_SetConfig+0x900>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d176      	bne.n	8005218 <UART_SetConfig+0x73c>
 800512a:	4bad      	ldr	r3, [pc, #692]	; (80053e0 <UART_SetConfig+0x904>)
 800512c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005132:	2b28      	cmp	r3, #40	; 0x28
 8005134:	d86c      	bhi.n	8005210 <UART_SetConfig+0x734>
 8005136:	a201      	add	r2, pc, #4	; (adr r2, 800513c <UART_SetConfig+0x660>)
 8005138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513c:	080051e1 	.word	0x080051e1
 8005140:	08005211 	.word	0x08005211
 8005144:	08005211 	.word	0x08005211
 8005148:	08005211 	.word	0x08005211
 800514c:	08005211 	.word	0x08005211
 8005150:	08005211 	.word	0x08005211
 8005154:	08005211 	.word	0x08005211
 8005158:	08005211 	.word	0x08005211
 800515c:	080051e9 	.word	0x080051e9
 8005160:	08005211 	.word	0x08005211
 8005164:	08005211 	.word	0x08005211
 8005168:	08005211 	.word	0x08005211
 800516c:	08005211 	.word	0x08005211
 8005170:	08005211 	.word	0x08005211
 8005174:	08005211 	.word	0x08005211
 8005178:	08005211 	.word	0x08005211
 800517c:	080051f1 	.word	0x080051f1
 8005180:	08005211 	.word	0x08005211
 8005184:	08005211 	.word	0x08005211
 8005188:	08005211 	.word	0x08005211
 800518c:	08005211 	.word	0x08005211
 8005190:	08005211 	.word	0x08005211
 8005194:	08005211 	.word	0x08005211
 8005198:	08005211 	.word	0x08005211
 800519c:	080051f9 	.word	0x080051f9
 80051a0:	08005211 	.word	0x08005211
 80051a4:	08005211 	.word	0x08005211
 80051a8:	08005211 	.word	0x08005211
 80051ac:	08005211 	.word	0x08005211
 80051b0:	08005211 	.word	0x08005211
 80051b4:	08005211 	.word	0x08005211
 80051b8:	08005211 	.word	0x08005211
 80051bc:	08005201 	.word	0x08005201
 80051c0:	08005211 	.word	0x08005211
 80051c4:	08005211 	.word	0x08005211
 80051c8:	08005211 	.word	0x08005211
 80051cc:	08005211 	.word	0x08005211
 80051d0:	08005211 	.word	0x08005211
 80051d4:	08005211 	.word	0x08005211
 80051d8:	08005211 	.word	0x08005211
 80051dc:	08005209 	.word	0x08005209
 80051e0:	2301      	movs	r3, #1
 80051e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051e6:	e050      	b.n	800528a <UART_SetConfig+0x7ae>
 80051e8:	2304      	movs	r3, #4
 80051ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ee:	e04c      	b.n	800528a <UART_SetConfig+0x7ae>
 80051f0:	2308      	movs	r3, #8
 80051f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f6:	e048      	b.n	800528a <UART_SetConfig+0x7ae>
 80051f8:	2310      	movs	r3, #16
 80051fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fe:	e044      	b.n	800528a <UART_SetConfig+0x7ae>
 8005200:	2320      	movs	r3, #32
 8005202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005206:	e040      	b.n	800528a <UART_SetConfig+0x7ae>
 8005208:	2340      	movs	r3, #64	; 0x40
 800520a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800520e:	e03c      	b.n	800528a <UART_SetConfig+0x7ae>
 8005210:	2380      	movs	r3, #128	; 0x80
 8005212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005216:	e038      	b.n	800528a <UART_SetConfig+0x7ae>
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a71      	ldr	r2, [pc, #452]	; (80053e4 <UART_SetConfig+0x908>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d130      	bne.n	8005284 <UART_SetConfig+0x7a8>
 8005222:	4b6f      	ldr	r3, [pc, #444]	; (80053e0 <UART_SetConfig+0x904>)
 8005224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	2b05      	cmp	r3, #5
 800522c:	d826      	bhi.n	800527c <UART_SetConfig+0x7a0>
 800522e:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <UART_SetConfig+0x758>)
 8005230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005234:	0800524d 	.word	0x0800524d
 8005238:	08005255 	.word	0x08005255
 800523c:	0800525d 	.word	0x0800525d
 8005240:	08005265 	.word	0x08005265
 8005244:	0800526d 	.word	0x0800526d
 8005248:	08005275 	.word	0x08005275
 800524c:	2302      	movs	r3, #2
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005252:	e01a      	b.n	800528a <UART_SetConfig+0x7ae>
 8005254:	2304      	movs	r3, #4
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525a:	e016      	b.n	800528a <UART_SetConfig+0x7ae>
 800525c:	2308      	movs	r3, #8
 800525e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005262:	e012      	b.n	800528a <UART_SetConfig+0x7ae>
 8005264:	2310      	movs	r3, #16
 8005266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800526a:	e00e      	b.n	800528a <UART_SetConfig+0x7ae>
 800526c:	2320      	movs	r3, #32
 800526e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005272:	e00a      	b.n	800528a <UART_SetConfig+0x7ae>
 8005274:	2340      	movs	r3, #64	; 0x40
 8005276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800527a:	e006      	b.n	800528a <UART_SetConfig+0x7ae>
 800527c:	2380      	movs	r3, #128	; 0x80
 800527e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005282:	e002      	b.n	800528a <UART_SetConfig+0x7ae>
 8005284:	2380      	movs	r3, #128	; 0x80
 8005286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a55      	ldr	r2, [pc, #340]	; (80053e4 <UART_SetConfig+0x908>)
 8005290:	4293      	cmp	r3, r2
 8005292:	f040 80f8 	bne.w	8005486 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005296:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800529a:	2b20      	cmp	r3, #32
 800529c:	dc46      	bgt.n	800532c <UART_SetConfig+0x850>
 800529e:	2b02      	cmp	r3, #2
 80052a0:	db75      	blt.n	800538e <UART_SetConfig+0x8b2>
 80052a2:	3b02      	subs	r3, #2
 80052a4:	2b1e      	cmp	r3, #30
 80052a6:	d872      	bhi.n	800538e <UART_SetConfig+0x8b2>
 80052a8:	a201      	add	r2, pc, #4	; (adr r2, 80052b0 <UART_SetConfig+0x7d4>)
 80052aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ae:	bf00      	nop
 80052b0:	08005333 	.word	0x08005333
 80052b4:	0800538f 	.word	0x0800538f
 80052b8:	0800533b 	.word	0x0800533b
 80052bc:	0800538f 	.word	0x0800538f
 80052c0:	0800538f 	.word	0x0800538f
 80052c4:	0800538f 	.word	0x0800538f
 80052c8:	0800534b 	.word	0x0800534b
 80052cc:	0800538f 	.word	0x0800538f
 80052d0:	0800538f 	.word	0x0800538f
 80052d4:	0800538f 	.word	0x0800538f
 80052d8:	0800538f 	.word	0x0800538f
 80052dc:	0800538f 	.word	0x0800538f
 80052e0:	0800538f 	.word	0x0800538f
 80052e4:	0800538f 	.word	0x0800538f
 80052e8:	0800535b 	.word	0x0800535b
 80052ec:	0800538f 	.word	0x0800538f
 80052f0:	0800538f 	.word	0x0800538f
 80052f4:	0800538f 	.word	0x0800538f
 80052f8:	0800538f 	.word	0x0800538f
 80052fc:	0800538f 	.word	0x0800538f
 8005300:	0800538f 	.word	0x0800538f
 8005304:	0800538f 	.word	0x0800538f
 8005308:	0800538f 	.word	0x0800538f
 800530c:	0800538f 	.word	0x0800538f
 8005310:	0800538f 	.word	0x0800538f
 8005314:	0800538f 	.word	0x0800538f
 8005318:	0800538f 	.word	0x0800538f
 800531c:	0800538f 	.word	0x0800538f
 8005320:	0800538f 	.word	0x0800538f
 8005324:	0800538f 	.word	0x0800538f
 8005328:	08005381 	.word	0x08005381
 800532c:	2b40      	cmp	r3, #64	; 0x40
 800532e:	d02a      	beq.n	8005386 <UART_SetConfig+0x8aa>
 8005330:	e02d      	b.n	800538e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005332:	f7fe fecb 	bl	80040cc <HAL_RCCEx_GetD3PCLK1Freq>
 8005336:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005338:	e02f      	b.n	800539a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800533a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800533e:	4618      	mov	r0, r3
 8005340:	f7fe feda 	bl	80040f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005348:	e027      	b.n	800539a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800534a:	f107 0318 	add.w	r3, r7, #24
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff f826 	bl	80043a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005358:	e01f      	b.n	800539a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800535a:	4b21      	ldr	r3, [pc, #132]	; (80053e0 <UART_SetConfig+0x904>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b00      	cmp	r3, #0
 8005364:	d009      	beq.n	800537a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005366:	4b1e      	ldr	r3, [pc, #120]	; (80053e0 <UART_SetConfig+0x904>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	08db      	lsrs	r3, r3, #3
 800536c:	f003 0303 	and.w	r3, r3, #3
 8005370:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <UART_SetConfig+0x90c>)
 8005372:	fa22 f303 	lsr.w	r3, r2, r3
 8005376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005378:	e00f      	b.n	800539a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800537a:	4b1b      	ldr	r3, [pc, #108]	; (80053e8 <UART_SetConfig+0x90c>)
 800537c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800537e:	e00c      	b.n	800539a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005380:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <UART_SetConfig+0x910>)
 8005382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005384:	e009      	b.n	800539a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800538a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800538c:	e005      	b.n	800539a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005398:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800539a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 81ee 	beq.w	800577e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	4a12      	ldr	r2, [pc, #72]	; (80053f0 <UART_SetConfig+0x914>)
 80053a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053ac:	461a      	mov	r2, r3
 80053ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80053b4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	4613      	mov	r3, r2
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	4413      	add	r3, r2
 80053c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d305      	bcc.n	80053d2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d910      	bls.n	80053f4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80053d8:	e1d1      	b.n	800577e <UART_SetConfig+0xca2>
 80053da:	bf00      	nop
 80053dc:	40011c00 	.word	0x40011c00
 80053e0:	58024400 	.word	0x58024400
 80053e4:	58000c00 	.word	0x58000c00
 80053e8:	03d09000 	.word	0x03d09000
 80053ec:	003d0900 	.word	0x003d0900
 80053f0:	08006e88 	.word	0x08006e88
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f6:	2200      	movs	r2, #0
 80053f8:	60bb      	str	r3, [r7, #8]
 80053fa:	60fa      	str	r2, [r7, #12]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	4ac0      	ldr	r2, [pc, #768]	; (8005704 <UART_SetConfig+0xc28>)
 8005402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005406:	b29b      	uxth	r3, r3
 8005408:	2200      	movs	r2, #0
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	607a      	str	r2, [r7, #4]
 800540e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005412:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005416:	f7fa ffbb 	bl	8000390 <__aeabi_uldivmod>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4610      	mov	r0, r2
 8005420:	4619      	mov	r1, r3
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	020b      	lsls	r3, r1, #8
 800542c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005430:	0202      	lsls	r2, r0, #8
 8005432:	6979      	ldr	r1, [r7, #20]
 8005434:	6849      	ldr	r1, [r1, #4]
 8005436:	0849      	lsrs	r1, r1, #1
 8005438:	2000      	movs	r0, #0
 800543a:	460c      	mov	r4, r1
 800543c:	4605      	mov	r5, r0
 800543e:	eb12 0804 	adds.w	r8, r2, r4
 8005442:	eb43 0905 	adc.w	r9, r3, r5
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	469a      	mov	sl, r3
 800544e:	4693      	mov	fp, r2
 8005450:	4652      	mov	r2, sl
 8005452:	465b      	mov	r3, fp
 8005454:	4640      	mov	r0, r8
 8005456:	4649      	mov	r1, r9
 8005458:	f7fa ff9a 	bl	8000390 <__aeabi_uldivmod>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4613      	mov	r3, r2
 8005462:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800546a:	d308      	bcc.n	800547e <UART_SetConfig+0x9a2>
 800546c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005472:	d204      	bcs.n	800547e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800547a:	60da      	str	r2, [r3, #12]
 800547c:	e17f      	b.n	800577e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005484:	e17b      	b.n	800577e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800548e:	f040 80bd 	bne.w	800560c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005492:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005496:	2b20      	cmp	r3, #32
 8005498:	dc48      	bgt.n	800552c <UART_SetConfig+0xa50>
 800549a:	2b00      	cmp	r3, #0
 800549c:	db7b      	blt.n	8005596 <UART_SetConfig+0xaba>
 800549e:	2b20      	cmp	r3, #32
 80054a0:	d879      	bhi.n	8005596 <UART_SetConfig+0xaba>
 80054a2:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <UART_SetConfig+0x9cc>)
 80054a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a8:	08005533 	.word	0x08005533
 80054ac:	0800553b 	.word	0x0800553b
 80054b0:	08005597 	.word	0x08005597
 80054b4:	08005597 	.word	0x08005597
 80054b8:	08005543 	.word	0x08005543
 80054bc:	08005597 	.word	0x08005597
 80054c0:	08005597 	.word	0x08005597
 80054c4:	08005597 	.word	0x08005597
 80054c8:	08005553 	.word	0x08005553
 80054cc:	08005597 	.word	0x08005597
 80054d0:	08005597 	.word	0x08005597
 80054d4:	08005597 	.word	0x08005597
 80054d8:	08005597 	.word	0x08005597
 80054dc:	08005597 	.word	0x08005597
 80054e0:	08005597 	.word	0x08005597
 80054e4:	08005597 	.word	0x08005597
 80054e8:	08005563 	.word	0x08005563
 80054ec:	08005597 	.word	0x08005597
 80054f0:	08005597 	.word	0x08005597
 80054f4:	08005597 	.word	0x08005597
 80054f8:	08005597 	.word	0x08005597
 80054fc:	08005597 	.word	0x08005597
 8005500:	08005597 	.word	0x08005597
 8005504:	08005597 	.word	0x08005597
 8005508:	08005597 	.word	0x08005597
 800550c:	08005597 	.word	0x08005597
 8005510:	08005597 	.word	0x08005597
 8005514:	08005597 	.word	0x08005597
 8005518:	08005597 	.word	0x08005597
 800551c:	08005597 	.word	0x08005597
 8005520:	08005597 	.word	0x08005597
 8005524:	08005597 	.word	0x08005597
 8005528:	08005589 	.word	0x08005589
 800552c:	2b40      	cmp	r3, #64	; 0x40
 800552e:	d02e      	beq.n	800558e <UART_SetConfig+0xab2>
 8005530:	e031      	b.n	8005596 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005532:	f7fd fe93 	bl	800325c <HAL_RCC_GetPCLK1Freq>
 8005536:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005538:	e033      	b.n	80055a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800553a:	f7fd fea5 	bl	8003288 <HAL_RCC_GetPCLK2Freq>
 800553e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005540:	e02f      	b.n	80055a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005546:	4618      	mov	r0, r3
 8005548:	f7fe fdd6 	bl	80040f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005550:	e027      	b.n	80055a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005552:	f107 0318 	add.w	r3, r7, #24
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe ff22 	bl	80043a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005560:	e01f      	b.n	80055a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005562:	4b69      	ldr	r3, [pc, #420]	; (8005708 <UART_SetConfig+0xc2c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	d009      	beq.n	8005582 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800556e:	4b66      	ldr	r3, [pc, #408]	; (8005708 <UART_SetConfig+0xc2c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	08db      	lsrs	r3, r3, #3
 8005574:	f003 0303 	and.w	r3, r3, #3
 8005578:	4a64      	ldr	r2, [pc, #400]	; (800570c <UART_SetConfig+0xc30>)
 800557a:	fa22 f303 	lsr.w	r3, r2, r3
 800557e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005580:	e00f      	b.n	80055a2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005582:	4b62      	ldr	r3, [pc, #392]	; (800570c <UART_SetConfig+0xc30>)
 8005584:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005586:	e00c      	b.n	80055a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005588:	4b61      	ldr	r3, [pc, #388]	; (8005710 <UART_SetConfig+0xc34>)
 800558a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800558c:	e009      	b.n	80055a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005594:	e005      	b.n	80055a2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80055a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80ea 	beq.w	800577e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	4a55      	ldr	r2, [pc, #340]	; (8005704 <UART_SetConfig+0xc28>)
 80055b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055b4:	461a      	mov	r2, r3
 80055b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80055bc:	005a      	lsls	r2, r3, #1
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	085b      	lsrs	r3, r3, #1
 80055c4:	441a      	add	r2, r3
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d2:	2b0f      	cmp	r3, #15
 80055d4:	d916      	bls.n	8005604 <UART_SetConfig+0xb28>
 80055d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055dc:	d212      	bcs.n	8005604 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f023 030f 	bic.w	r3, r3, #15
 80055e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	085b      	lsrs	r3, r3, #1
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055f6:	4313      	orrs	r3, r2
 80055f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005600:	60da      	str	r2, [r3, #12]
 8005602:	e0bc      	b.n	800577e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800560a:	e0b8      	b.n	800577e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800560c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005610:	2b20      	cmp	r3, #32
 8005612:	dc4b      	bgt.n	80056ac <UART_SetConfig+0xbd0>
 8005614:	2b00      	cmp	r3, #0
 8005616:	f2c0 8087 	blt.w	8005728 <UART_SetConfig+0xc4c>
 800561a:	2b20      	cmp	r3, #32
 800561c:	f200 8084 	bhi.w	8005728 <UART_SetConfig+0xc4c>
 8005620:	a201      	add	r2, pc, #4	; (adr r2, 8005628 <UART_SetConfig+0xb4c>)
 8005622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005626:	bf00      	nop
 8005628:	080056b3 	.word	0x080056b3
 800562c:	080056bb 	.word	0x080056bb
 8005630:	08005729 	.word	0x08005729
 8005634:	08005729 	.word	0x08005729
 8005638:	080056c3 	.word	0x080056c3
 800563c:	08005729 	.word	0x08005729
 8005640:	08005729 	.word	0x08005729
 8005644:	08005729 	.word	0x08005729
 8005648:	080056d3 	.word	0x080056d3
 800564c:	08005729 	.word	0x08005729
 8005650:	08005729 	.word	0x08005729
 8005654:	08005729 	.word	0x08005729
 8005658:	08005729 	.word	0x08005729
 800565c:	08005729 	.word	0x08005729
 8005660:	08005729 	.word	0x08005729
 8005664:	08005729 	.word	0x08005729
 8005668:	080056e3 	.word	0x080056e3
 800566c:	08005729 	.word	0x08005729
 8005670:	08005729 	.word	0x08005729
 8005674:	08005729 	.word	0x08005729
 8005678:	08005729 	.word	0x08005729
 800567c:	08005729 	.word	0x08005729
 8005680:	08005729 	.word	0x08005729
 8005684:	08005729 	.word	0x08005729
 8005688:	08005729 	.word	0x08005729
 800568c:	08005729 	.word	0x08005729
 8005690:	08005729 	.word	0x08005729
 8005694:	08005729 	.word	0x08005729
 8005698:	08005729 	.word	0x08005729
 800569c:	08005729 	.word	0x08005729
 80056a0:	08005729 	.word	0x08005729
 80056a4:	08005729 	.word	0x08005729
 80056a8:	0800571b 	.word	0x0800571b
 80056ac:	2b40      	cmp	r3, #64	; 0x40
 80056ae:	d037      	beq.n	8005720 <UART_SetConfig+0xc44>
 80056b0:	e03a      	b.n	8005728 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b2:	f7fd fdd3 	bl	800325c <HAL_RCC_GetPCLK1Freq>
 80056b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80056b8:	e03c      	b.n	8005734 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056ba:	f7fd fde5 	bl	8003288 <HAL_RCC_GetPCLK2Freq>
 80056be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80056c0:	e038      	b.n	8005734 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe fd16 	bl	80040f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056d0:	e030      	b.n	8005734 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056d2:	f107 0318 	add.w	r3, r7, #24
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe fe62 	bl	80043a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056e0:	e028      	b.n	8005734 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056e2:	4b09      	ldr	r3, [pc, #36]	; (8005708 <UART_SetConfig+0xc2c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0320 	and.w	r3, r3, #32
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d012      	beq.n	8005714 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80056ee:	4b06      	ldr	r3, [pc, #24]	; (8005708 <UART_SetConfig+0xc2c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	08db      	lsrs	r3, r3, #3
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	4a04      	ldr	r2, [pc, #16]	; (800570c <UART_SetConfig+0xc30>)
 80056fa:	fa22 f303 	lsr.w	r3, r2, r3
 80056fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005700:	e018      	b.n	8005734 <UART_SetConfig+0xc58>
 8005702:	bf00      	nop
 8005704:	08006e88 	.word	0x08006e88
 8005708:	58024400 	.word	0x58024400
 800570c:	03d09000 	.word	0x03d09000
 8005710:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005714:	4b24      	ldr	r3, [pc, #144]	; (80057a8 <UART_SetConfig+0xccc>)
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005718:	e00c      	b.n	8005734 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800571a:	4b24      	ldr	r3, [pc, #144]	; (80057ac <UART_SetConfig+0xcd0>)
 800571c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800571e:	e009      	b.n	8005734 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005724:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005726:	e005      	b.n	8005734 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005732:	bf00      	nop
    }

    if (pclk != 0U)
 8005734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d021      	beq.n	800577e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	4a1c      	ldr	r2, [pc, #112]	; (80057b0 <UART_SetConfig+0xcd4>)
 8005740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005744:	461a      	mov	r2, r3
 8005746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005748:	fbb3 f2f2 	udiv	r2, r3, r2
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	085b      	lsrs	r3, r3, #1
 8005752:	441a      	add	r2, r3
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	fbb2 f3f3 	udiv	r3, r2, r3
 800575c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005760:	2b0f      	cmp	r3, #15
 8005762:	d909      	bls.n	8005778 <UART_SetConfig+0xc9c>
 8005764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800576a:	d205      	bcs.n	8005778 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576e:	b29a      	uxth	r2, r3
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60da      	str	r2, [r3, #12]
 8005776:	e002      	b.n	800577e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2201      	movs	r2, #1
 8005782:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2201      	movs	r2, #1
 800578a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2200      	movs	r2, #0
 8005792:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2200      	movs	r2, #0
 8005798:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800579a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3748      	adds	r7, #72	; 0x48
 80057a2:	46bd      	mov	sp, r7
 80057a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057a8:	03d09000 	.word	0x03d09000
 80057ac:	003d0900 	.word	0x003d0900
 80057b0:	08006e88 	.word	0x08006e88

080057b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00a      	beq.n	80057de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005826:	f003 0308 	and.w	r3, r3, #8
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005848:	f003 0310 	and.w	r3, r3, #16
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586a:	f003 0320 	and.w	r3, r3, #32
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01a      	beq.n	80058ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058b2:	d10a      	bne.n	80058ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	605a      	str	r2, [r3, #4]
  }
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005908:	f7fb fd2e 	bl	8001368 <HAL_GetTick>
 800590c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b08      	cmp	r3, #8
 800591a:	d10e      	bne.n	800593a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800591c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f82f 	bl	800598e <UART_WaitOnFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e025      	b.n	8005986 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b04      	cmp	r3, #4
 8005946:	d10e      	bne.n	8005966 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005948:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f819 	bl	800598e <UART_WaitOnFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e00f      	b.n	8005986 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b09c      	sub	sp, #112	; 0x70
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	603b      	str	r3, [r7, #0]
 800599a:	4613      	mov	r3, r2
 800599c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800599e:	e0a9      	b.n	8005af4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a6:	f000 80a5 	beq.w	8005af4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059aa:	f7fb fcdd 	bl	8001368 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d302      	bcc.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80059ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d140      	bne.n	8005a42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c8:	e853 3f00 	ldrex	r3, [r3]
 80059cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059d4:	667b      	str	r3, [r7, #100]	; 0x64
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	461a      	mov	r2, r3
 80059dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059e6:	e841 2300 	strex	r3, r2, [r1]
 80059ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e6      	bne.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3308      	adds	r3, #8
 80059f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	663b      	str	r3, [r7, #96]	; 0x60
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3308      	adds	r3, #8
 8005a10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a12:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e5      	bne.n	80059f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e069      	b.n	8005b16 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d051      	beq.n	8005af4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5e:	d149      	bne.n	8005af4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a88:	637b      	str	r3, [r7, #52]	; 0x34
 8005a8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e6      	bne.n	8005a6a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f023 0301 	bic.w	r3, r3, #1
 8005ab2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3308      	adds	r3, #8
 8005aba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005abc:	623a      	str	r2, [r7, #32]
 8005abe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	69f9      	ldr	r1, [r7, #28]
 8005ac2:	6a3a      	ldr	r2, [r7, #32]
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e5      	bne.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e010      	b.n	8005b16 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	69da      	ldr	r2, [r3, #28]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	4013      	ands	r3, r2
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	bf0c      	ite	eq
 8005b04:	2301      	moveq	r3, #1
 8005b06:	2300      	movne	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	79fb      	ldrb	r3, [r7, #7]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	f43f af46 	beq.w	80059a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3770      	adds	r7, #112	; 0x70
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b30:	2302      	movs	r3, #2
 8005b32:	e027      	b.n	8005b84 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2224      	movs	r2, #36	; 0x24
 8005b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0201 	bic.w	r2, r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e02d      	b.n	8005c04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2224      	movs	r2, #36	; 0x24
 8005bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0201 	bic.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f84f 	bl	8005c88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e02d      	b.n	8005c80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2224      	movs	r2, #36	; 0x24
 8005c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0201 	bic.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f811 	bl	8005c88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d108      	bne.n	8005caa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ca8:	e031      	b.n	8005d0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005caa:	2310      	movs	r3, #16
 8005cac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cae:	2310      	movs	r3, #16
 8005cb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	0e5b      	lsrs	r3, r3, #25
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	0f5b      	lsrs	r3, r3, #29
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cd2:	7bbb      	ldrb	r3, [r7, #14]
 8005cd4:	7b3a      	ldrb	r2, [r7, #12]
 8005cd6:	4911      	ldr	r1, [pc, #68]	; (8005d1c <UARTEx_SetNbDataToProcess+0x94>)
 8005cd8:	5c8a      	ldrb	r2, [r1, r2]
 8005cda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cde:	7b3a      	ldrb	r2, [r7, #12]
 8005ce0:	490f      	ldr	r1, [pc, #60]	; (8005d20 <UARTEx_SetNbDataToProcess+0x98>)
 8005ce2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ce4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	7b7a      	ldrb	r2, [r7, #13]
 8005cf4:	4909      	ldr	r1, [pc, #36]	; (8005d1c <UARTEx_SetNbDataToProcess+0x94>)
 8005cf6:	5c8a      	ldrb	r2, [r1, r2]
 8005cf8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cfc:	7b7a      	ldrb	r2, [r7, #13]
 8005cfe:	4908      	ldr	r1, [pc, #32]	; (8005d20 <UARTEx_SetNbDataToProcess+0x98>)
 8005d00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d02:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	08006ea0 	.word	0x08006ea0
 8005d20:	08006ea8 	.word	0x08006ea8

08005d24 <__errno>:
 8005d24:	4b01      	ldr	r3, [pc, #4]	; (8005d2c <__errno+0x8>)
 8005d26:	6818      	ldr	r0, [r3, #0]
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	24000010 	.word	0x24000010

08005d30 <__libc_init_array>:
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	4d0d      	ldr	r5, [pc, #52]	; (8005d68 <__libc_init_array+0x38>)
 8005d34:	4c0d      	ldr	r4, [pc, #52]	; (8005d6c <__libc_init_array+0x3c>)
 8005d36:	1b64      	subs	r4, r4, r5
 8005d38:	10a4      	asrs	r4, r4, #2
 8005d3a:	2600      	movs	r6, #0
 8005d3c:	42a6      	cmp	r6, r4
 8005d3e:	d109      	bne.n	8005d54 <__libc_init_array+0x24>
 8005d40:	4d0b      	ldr	r5, [pc, #44]	; (8005d70 <__libc_init_array+0x40>)
 8005d42:	4c0c      	ldr	r4, [pc, #48]	; (8005d74 <__libc_init_array+0x44>)
 8005d44:	f001 f824 	bl	8006d90 <_init>
 8005d48:	1b64      	subs	r4, r4, r5
 8005d4a:	10a4      	asrs	r4, r4, #2
 8005d4c:	2600      	movs	r6, #0
 8005d4e:	42a6      	cmp	r6, r4
 8005d50:	d105      	bne.n	8005d5e <__libc_init_array+0x2e>
 8005d52:	bd70      	pop	{r4, r5, r6, pc}
 8005d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d58:	4798      	blx	r3
 8005d5a:	3601      	adds	r6, #1
 8005d5c:	e7ee      	b.n	8005d3c <__libc_init_array+0xc>
 8005d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d62:	4798      	blx	r3
 8005d64:	3601      	adds	r6, #1
 8005d66:	e7f2      	b.n	8005d4e <__libc_init_array+0x1e>
 8005d68:	08006f50 	.word	0x08006f50
 8005d6c:	08006f50 	.word	0x08006f50
 8005d70:	08006f50 	.word	0x08006f50
 8005d74:	08006f54 	.word	0x08006f54

08005d78 <memset>:
 8005d78:	4402      	add	r2, r0
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d100      	bne.n	8005d82 <memset+0xa>
 8005d80:	4770      	bx	lr
 8005d82:	f803 1b01 	strb.w	r1, [r3], #1
 8005d86:	e7f9      	b.n	8005d7c <memset+0x4>

08005d88 <iprintf>:
 8005d88:	b40f      	push	{r0, r1, r2, r3}
 8005d8a:	4b0a      	ldr	r3, [pc, #40]	; (8005db4 <iprintf+0x2c>)
 8005d8c:	b513      	push	{r0, r1, r4, lr}
 8005d8e:	681c      	ldr	r4, [r3, #0]
 8005d90:	b124      	cbz	r4, 8005d9c <iprintf+0x14>
 8005d92:	69a3      	ldr	r3, [r4, #24]
 8005d94:	b913      	cbnz	r3, 8005d9c <iprintf+0x14>
 8005d96:	4620      	mov	r0, r4
 8005d98:	f000 f894 	bl	8005ec4 <__sinit>
 8005d9c:	ab05      	add	r3, sp, #20
 8005d9e:	9a04      	ldr	r2, [sp, #16]
 8005da0:	68a1      	ldr	r1, [r4, #8]
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	4620      	mov	r0, r4
 8005da6:	f000 f9eb 	bl	8006180 <_vfiprintf_r>
 8005daa:	b002      	add	sp, #8
 8005dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005db0:	b004      	add	sp, #16
 8005db2:	4770      	bx	lr
 8005db4:	24000010 	.word	0x24000010

08005db8 <putchar>:
 8005db8:	4b09      	ldr	r3, [pc, #36]	; (8005de0 <putchar+0x28>)
 8005dba:	b513      	push	{r0, r1, r4, lr}
 8005dbc:	681c      	ldr	r4, [r3, #0]
 8005dbe:	4601      	mov	r1, r0
 8005dc0:	b134      	cbz	r4, 8005dd0 <putchar+0x18>
 8005dc2:	69a3      	ldr	r3, [r4, #24]
 8005dc4:	b923      	cbnz	r3, 8005dd0 <putchar+0x18>
 8005dc6:	9001      	str	r0, [sp, #4]
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f000 f87b 	bl	8005ec4 <__sinit>
 8005dce:	9901      	ldr	r1, [sp, #4]
 8005dd0:	68a2      	ldr	r2, [r4, #8]
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	b002      	add	sp, #8
 8005dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dda:	f000 bc95 	b.w	8006708 <_putc_r>
 8005dde:	bf00      	nop
 8005de0:	24000010 	.word	0x24000010

08005de4 <viprintf>:
 8005de4:	b513      	push	{r0, r1, r4, lr}
 8005de6:	460b      	mov	r3, r1
 8005de8:	4909      	ldr	r1, [pc, #36]	; (8005e10 <viprintf+0x2c>)
 8005dea:	680c      	ldr	r4, [r1, #0]
 8005dec:	4602      	mov	r2, r0
 8005dee:	b144      	cbz	r4, 8005e02 <viprintf+0x1e>
 8005df0:	69a1      	ldr	r1, [r4, #24]
 8005df2:	b931      	cbnz	r1, 8005e02 <viprintf+0x1e>
 8005df4:	e9cd 0300 	strd	r0, r3, [sp]
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f000 f863 	bl	8005ec4 <__sinit>
 8005dfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e02:	68a1      	ldr	r1, [r4, #8]
 8005e04:	4620      	mov	r0, r4
 8005e06:	b002      	add	sp, #8
 8005e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e0c:	f000 b9b8 	b.w	8006180 <_vfiprintf_r>
 8005e10:	24000010 	.word	0x24000010

08005e14 <std>:
 8005e14:	2300      	movs	r3, #0
 8005e16:	b510      	push	{r4, lr}
 8005e18:	4604      	mov	r4, r0
 8005e1a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e22:	6083      	str	r3, [r0, #8]
 8005e24:	8181      	strh	r1, [r0, #12]
 8005e26:	6643      	str	r3, [r0, #100]	; 0x64
 8005e28:	81c2      	strh	r2, [r0, #14]
 8005e2a:	6183      	str	r3, [r0, #24]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	2208      	movs	r2, #8
 8005e30:	305c      	adds	r0, #92	; 0x5c
 8005e32:	f7ff ffa1 	bl	8005d78 <memset>
 8005e36:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <std+0x38>)
 8005e38:	6263      	str	r3, [r4, #36]	; 0x24
 8005e3a:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <std+0x3c>)
 8005e3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e3e:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <std+0x40>)
 8005e40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e42:	4b05      	ldr	r3, [pc, #20]	; (8005e58 <std+0x44>)
 8005e44:	6224      	str	r4, [r4, #32]
 8005e46:	6323      	str	r3, [r4, #48]	; 0x30
 8005e48:	bd10      	pop	{r4, pc}
 8005e4a:	bf00      	nop
 8005e4c:	080067b9 	.word	0x080067b9
 8005e50:	080067db 	.word	0x080067db
 8005e54:	08006813 	.word	0x08006813
 8005e58:	08006837 	.word	0x08006837

08005e5c <_cleanup_r>:
 8005e5c:	4901      	ldr	r1, [pc, #4]	; (8005e64 <_cleanup_r+0x8>)
 8005e5e:	f000 b8af 	b.w	8005fc0 <_fwalk_reent>
 8005e62:	bf00      	nop
 8005e64:	08006b11 	.word	0x08006b11

08005e68 <__sfmoreglue>:
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	2268      	movs	r2, #104	; 0x68
 8005e6c:	1e4d      	subs	r5, r1, #1
 8005e6e:	4355      	muls	r5, r2
 8005e70:	460e      	mov	r6, r1
 8005e72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e76:	f000 f8e5 	bl	8006044 <_malloc_r>
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	b140      	cbz	r0, 8005e90 <__sfmoreglue+0x28>
 8005e7e:	2100      	movs	r1, #0
 8005e80:	e9c0 1600 	strd	r1, r6, [r0]
 8005e84:	300c      	adds	r0, #12
 8005e86:	60a0      	str	r0, [r4, #8]
 8005e88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e8c:	f7ff ff74 	bl	8005d78 <memset>
 8005e90:	4620      	mov	r0, r4
 8005e92:	bd70      	pop	{r4, r5, r6, pc}

08005e94 <__sfp_lock_acquire>:
 8005e94:	4801      	ldr	r0, [pc, #4]	; (8005e9c <__sfp_lock_acquire+0x8>)
 8005e96:	f000 b8b3 	b.w	8006000 <__retarget_lock_acquire_recursive>
 8005e9a:	bf00      	nop
 8005e9c:	240001a5 	.word	0x240001a5

08005ea0 <__sfp_lock_release>:
 8005ea0:	4801      	ldr	r0, [pc, #4]	; (8005ea8 <__sfp_lock_release+0x8>)
 8005ea2:	f000 b8ae 	b.w	8006002 <__retarget_lock_release_recursive>
 8005ea6:	bf00      	nop
 8005ea8:	240001a5 	.word	0x240001a5

08005eac <__sinit_lock_acquire>:
 8005eac:	4801      	ldr	r0, [pc, #4]	; (8005eb4 <__sinit_lock_acquire+0x8>)
 8005eae:	f000 b8a7 	b.w	8006000 <__retarget_lock_acquire_recursive>
 8005eb2:	bf00      	nop
 8005eb4:	240001a6 	.word	0x240001a6

08005eb8 <__sinit_lock_release>:
 8005eb8:	4801      	ldr	r0, [pc, #4]	; (8005ec0 <__sinit_lock_release+0x8>)
 8005eba:	f000 b8a2 	b.w	8006002 <__retarget_lock_release_recursive>
 8005ebe:	bf00      	nop
 8005ec0:	240001a6 	.word	0x240001a6

08005ec4 <__sinit>:
 8005ec4:	b510      	push	{r4, lr}
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	f7ff fff0 	bl	8005eac <__sinit_lock_acquire>
 8005ecc:	69a3      	ldr	r3, [r4, #24]
 8005ece:	b11b      	cbz	r3, 8005ed8 <__sinit+0x14>
 8005ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ed4:	f7ff bff0 	b.w	8005eb8 <__sinit_lock_release>
 8005ed8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005edc:	6523      	str	r3, [r4, #80]	; 0x50
 8005ede:	4b13      	ldr	r3, [pc, #76]	; (8005f2c <__sinit+0x68>)
 8005ee0:	4a13      	ldr	r2, [pc, #76]	; (8005f30 <__sinit+0x6c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ee6:	42a3      	cmp	r3, r4
 8005ee8:	bf04      	itt	eq
 8005eea:	2301      	moveq	r3, #1
 8005eec:	61a3      	streq	r3, [r4, #24]
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f000 f820 	bl	8005f34 <__sfp>
 8005ef4:	6060      	str	r0, [r4, #4]
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f000 f81c 	bl	8005f34 <__sfp>
 8005efc:	60a0      	str	r0, [r4, #8]
 8005efe:	4620      	mov	r0, r4
 8005f00:	f000 f818 	bl	8005f34 <__sfp>
 8005f04:	2200      	movs	r2, #0
 8005f06:	60e0      	str	r0, [r4, #12]
 8005f08:	2104      	movs	r1, #4
 8005f0a:	6860      	ldr	r0, [r4, #4]
 8005f0c:	f7ff ff82 	bl	8005e14 <std>
 8005f10:	68a0      	ldr	r0, [r4, #8]
 8005f12:	2201      	movs	r2, #1
 8005f14:	2109      	movs	r1, #9
 8005f16:	f7ff ff7d 	bl	8005e14 <std>
 8005f1a:	68e0      	ldr	r0, [r4, #12]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	2112      	movs	r1, #18
 8005f20:	f7ff ff78 	bl	8005e14 <std>
 8005f24:	2301      	movs	r3, #1
 8005f26:	61a3      	str	r3, [r4, #24]
 8005f28:	e7d2      	b.n	8005ed0 <__sinit+0xc>
 8005f2a:	bf00      	nop
 8005f2c:	08006eb0 	.word	0x08006eb0
 8005f30:	08005e5d 	.word	0x08005e5d

08005f34 <__sfp>:
 8005f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f36:	4607      	mov	r7, r0
 8005f38:	f7ff ffac 	bl	8005e94 <__sfp_lock_acquire>
 8005f3c:	4b1e      	ldr	r3, [pc, #120]	; (8005fb8 <__sfp+0x84>)
 8005f3e:	681e      	ldr	r6, [r3, #0]
 8005f40:	69b3      	ldr	r3, [r6, #24]
 8005f42:	b913      	cbnz	r3, 8005f4a <__sfp+0x16>
 8005f44:	4630      	mov	r0, r6
 8005f46:	f7ff ffbd 	bl	8005ec4 <__sinit>
 8005f4a:	3648      	adds	r6, #72	; 0x48
 8005f4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f50:	3b01      	subs	r3, #1
 8005f52:	d503      	bpl.n	8005f5c <__sfp+0x28>
 8005f54:	6833      	ldr	r3, [r6, #0]
 8005f56:	b30b      	cbz	r3, 8005f9c <__sfp+0x68>
 8005f58:	6836      	ldr	r6, [r6, #0]
 8005f5a:	e7f7      	b.n	8005f4c <__sfp+0x18>
 8005f5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f60:	b9d5      	cbnz	r5, 8005f98 <__sfp+0x64>
 8005f62:	4b16      	ldr	r3, [pc, #88]	; (8005fbc <__sfp+0x88>)
 8005f64:	60e3      	str	r3, [r4, #12]
 8005f66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f6a:	6665      	str	r5, [r4, #100]	; 0x64
 8005f6c:	f000 f847 	bl	8005ffe <__retarget_lock_init_recursive>
 8005f70:	f7ff ff96 	bl	8005ea0 <__sfp_lock_release>
 8005f74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f7c:	6025      	str	r5, [r4, #0]
 8005f7e:	61a5      	str	r5, [r4, #24]
 8005f80:	2208      	movs	r2, #8
 8005f82:	4629      	mov	r1, r5
 8005f84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f88:	f7ff fef6 	bl	8005d78 <memset>
 8005f8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f94:	4620      	mov	r0, r4
 8005f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f98:	3468      	adds	r4, #104	; 0x68
 8005f9a:	e7d9      	b.n	8005f50 <__sfp+0x1c>
 8005f9c:	2104      	movs	r1, #4
 8005f9e:	4638      	mov	r0, r7
 8005fa0:	f7ff ff62 	bl	8005e68 <__sfmoreglue>
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	6030      	str	r0, [r6, #0]
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	d1d5      	bne.n	8005f58 <__sfp+0x24>
 8005fac:	f7ff ff78 	bl	8005ea0 <__sfp_lock_release>
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	603b      	str	r3, [r7, #0]
 8005fb4:	e7ee      	b.n	8005f94 <__sfp+0x60>
 8005fb6:	bf00      	nop
 8005fb8:	08006eb0 	.word	0x08006eb0
 8005fbc:	ffff0001 	.word	0xffff0001

08005fc0 <_fwalk_reent>:
 8005fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fc4:	4606      	mov	r6, r0
 8005fc6:	4688      	mov	r8, r1
 8005fc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005fcc:	2700      	movs	r7, #0
 8005fce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fd2:	f1b9 0901 	subs.w	r9, r9, #1
 8005fd6:	d505      	bpl.n	8005fe4 <_fwalk_reent+0x24>
 8005fd8:	6824      	ldr	r4, [r4, #0]
 8005fda:	2c00      	cmp	r4, #0
 8005fdc:	d1f7      	bne.n	8005fce <_fwalk_reent+0xe>
 8005fde:	4638      	mov	r0, r7
 8005fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fe4:	89ab      	ldrh	r3, [r5, #12]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d907      	bls.n	8005ffa <_fwalk_reent+0x3a>
 8005fea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	d003      	beq.n	8005ffa <_fwalk_reent+0x3a>
 8005ff2:	4629      	mov	r1, r5
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	47c0      	blx	r8
 8005ff8:	4307      	orrs	r7, r0
 8005ffa:	3568      	adds	r5, #104	; 0x68
 8005ffc:	e7e9      	b.n	8005fd2 <_fwalk_reent+0x12>

08005ffe <__retarget_lock_init_recursive>:
 8005ffe:	4770      	bx	lr

08006000 <__retarget_lock_acquire_recursive>:
 8006000:	4770      	bx	lr

08006002 <__retarget_lock_release_recursive>:
 8006002:	4770      	bx	lr

08006004 <sbrk_aligned>:
 8006004:	b570      	push	{r4, r5, r6, lr}
 8006006:	4e0e      	ldr	r6, [pc, #56]	; (8006040 <sbrk_aligned+0x3c>)
 8006008:	460c      	mov	r4, r1
 800600a:	6831      	ldr	r1, [r6, #0]
 800600c:	4605      	mov	r5, r0
 800600e:	b911      	cbnz	r1, 8006016 <sbrk_aligned+0x12>
 8006010:	f000 fbc2 	bl	8006798 <_sbrk_r>
 8006014:	6030      	str	r0, [r6, #0]
 8006016:	4621      	mov	r1, r4
 8006018:	4628      	mov	r0, r5
 800601a:	f000 fbbd 	bl	8006798 <_sbrk_r>
 800601e:	1c43      	adds	r3, r0, #1
 8006020:	d00a      	beq.n	8006038 <sbrk_aligned+0x34>
 8006022:	1cc4      	adds	r4, r0, #3
 8006024:	f024 0403 	bic.w	r4, r4, #3
 8006028:	42a0      	cmp	r0, r4
 800602a:	d007      	beq.n	800603c <sbrk_aligned+0x38>
 800602c:	1a21      	subs	r1, r4, r0
 800602e:	4628      	mov	r0, r5
 8006030:	f000 fbb2 	bl	8006798 <_sbrk_r>
 8006034:	3001      	adds	r0, #1
 8006036:	d101      	bne.n	800603c <sbrk_aligned+0x38>
 8006038:	f04f 34ff 	mov.w	r4, #4294967295
 800603c:	4620      	mov	r0, r4
 800603e:	bd70      	pop	{r4, r5, r6, pc}
 8006040:	240001ac 	.word	0x240001ac

08006044 <_malloc_r>:
 8006044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006048:	1ccd      	adds	r5, r1, #3
 800604a:	f025 0503 	bic.w	r5, r5, #3
 800604e:	3508      	adds	r5, #8
 8006050:	2d0c      	cmp	r5, #12
 8006052:	bf38      	it	cc
 8006054:	250c      	movcc	r5, #12
 8006056:	2d00      	cmp	r5, #0
 8006058:	4607      	mov	r7, r0
 800605a:	db01      	blt.n	8006060 <_malloc_r+0x1c>
 800605c:	42a9      	cmp	r1, r5
 800605e:	d905      	bls.n	800606c <_malloc_r+0x28>
 8006060:	230c      	movs	r3, #12
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	2600      	movs	r6, #0
 8006066:	4630      	mov	r0, r6
 8006068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800606c:	4e2e      	ldr	r6, [pc, #184]	; (8006128 <_malloc_r+0xe4>)
 800606e:	f000 fe03 	bl	8006c78 <__malloc_lock>
 8006072:	6833      	ldr	r3, [r6, #0]
 8006074:	461c      	mov	r4, r3
 8006076:	bb34      	cbnz	r4, 80060c6 <_malloc_r+0x82>
 8006078:	4629      	mov	r1, r5
 800607a:	4638      	mov	r0, r7
 800607c:	f7ff ffc2 	bl	8006004 <sbrk_aligned>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	4604      	mov	r4, r0
 8006084:	d14d      	bne.n	8006122 <_malloc_r+0xde>
 8006086:	6834      	ldr	r4, [r6, #0]
 8006088:	4626      	mov	r6, r4
 800608a:	2e00      	cmp	r6, #0
 800608c:	d140      	bne.n	8006110 <_malloc_r+0xcc>
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	4631      	mov	r1, r6
 8006092:	4638      	mov	r0, r7
 8006094:	eb04 0803 	add.w	r8, r4, r3
 8006098:	f000 fb7e 	bl	8006798 <_sbrk_r>
 800609c:	4580      	cmp	r8, r0
 800609e:	d13a      	bne.n	8006116 <_malloc_r+0xd2>
 80060a0:	6821      	ldr	r1, [r4, #0]
 80060a2:	3503      	adds	r5, #3
 80060a4:	1a6d      	subs	r5, r5, r1
 80060a6:	f025 0503 	bic.w	r5, r5, #3
 80060aa:	3508      	adds	r5, #8
 80060ac:	2d0c      	cmp	r5, #12
 80060ae:	bf38      	it	cc
 80060b0:	250c      	movcc	r5, #12
 80060b2:	4629      	mov	r1, r5
 80060b4:	4638      	mov	r0, r7
 80060b6:	f7ff ffa5 	bl	8006004 <sbrk_aligned>
 80060ba:	3001      	adds	r0, #1
 80060bc:	d02b      	beq.n	8006116 <_malloc_r+0xd2>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	442b      	add	r3, r5
 80060c2:	6023      	str	r3, [r4, #0]
 80060c4:	e00e      	b.n	80060e4 <_malloc_r+0xa0>
 80060c6:	6822      	ldr	r2, [r4, #0]
 80060c8:	1b52      	subs	r2, r2, r5
 80060ca:	d41e      	bmi.n	800610a <_malloc_r+0xc6>
 80060cc:	2a0b      	cmp	r2, #11
 80060ce:	d916      	bls.n	80060fe <_malloc_r+0xba>
 80060d0:	1961      	adds	r1, r4, r5
 80060d2:	42a3      	cmp	r3, r4
 80060d4:	6025      	str	r5, [r4, #0]
 80060d6:	bf18      	it	ne
 80060d8:	6059      	strne	r1, [r3, #4]
 80060da:	6863      	ldr	r3, [r4, #4]
 80060dc:	bf08      	it	eq
 80060de:	6031      	streq	r1, [r6, #0]
 80060e0:	5162      	str	r2, [r4, r5]
 80060e2:	604b      	str	r3, [r1, #4]
 80060e4:	4638      	mov	r0, r7
 80060e6:	f104 060b 	add.w	r6, r4, #11
 80060ea:	f000 fdcb 	bl	8006c84 <__malloc_unlock>
 80060ee:	f026 0607 	bic.w	r6, r6, #7
 80060f2:	1d23      	adds	r3, r4, #4
 80060f4:	1af2      	subs	r2, r6, r3
 80060f6:	d0b6      	beq.n	8006066 <_malloc_r+0x22>
 80060f8:	1b9b      	subs	r3, r3, r6
 80060fa:	50a3      	str	r3, [r4, r2]
 80060fc:	e7b3      	b.n	8006066 <_malloc_r+0x22>
 80060fe:	6862      	ldr	r2, [r4, #4]
 8006100:	42a3      	cmp	r3, r4
 8006102:	bf0c      	ite	eq
 8006104:	6032      	streq	r2, [r6, #0]
 8006106:	605a      	strne	r2, [r3, #4]
 8006108:	e7ec      	b.n	80060e4 <_malloc_r+0xa0>
 800610a:	4623      	mov	r3, r4
 800610c:	6864      	ldr	r4, [r4, #4]
 800610e:	e7b2      	b.n	8006076 <_malloc_r+0x32>
 8006110:	4634      	mov	r4, r6
 8006112:	6876      	ldr	r6, [r6, #4]
 8006114:	e7b9      	b.n	800608a <_malloc_r+0x46>
 8006116:	230c      	movs	r3, #12
 8006118:	603b      	str	r3, [r7, #0]
 800611a:	4638      	mov	r0, r7
 800611c:	f000 fdb2 	bl	8006c84 <__malloc_unlock>
 8006120:	e7a1      	b.n	8006066 <_malloc_r+0x22>
 8006122:	6025      	str	r5, [r4, #0]
 8006124:	e7de      	b.n	80060e4 <_malloc_r+0xa0>
 8006126:	bf00      	nop
 8006128:	240001a8 	.word	0x240001a8

0800612c <__sfputc_r>:
 800612c:	6893      	ldr	r3, [r2, #8]
 800612e:	3b01      	subs	r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	b410      	push	{r4}
 8006134:	6093      	str	r3, [r2, #8]
 8006136:	da08      	bge.n	800614a <__sfputc_r+0x1e>
 8006138:	6994      	ldr	r4, [r2, #24]
 800613a:	42a3      	cmp	r3, r4
 800613c:	db01      	blt.n	8006142 <__sfputc_r+0x16>
 800613e:	290a      	cmp	r1, #10
 8006140:	d103      	bne.n	800614a <__sfputc_r+0x1e>
 8006142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006146:	f000 bb7b 	b.w	8006840 <__swbuf_r>
 800614a:	6813      	ldr	r3, [r2, #0]
 800614c:	1c58      	adds	r0, r3, #1
 800614e:	6010      	str	r0, [r2, #0]
 8006150:	7019      	strb	r1, [r3, #0]
 8006152:	4608      	mov	r0, r1
 8006154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006158:	4770      	bx	lr

0800615a <__sfputs_r>:
 800615a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615c:	4606      	mov	r6, r0
 800615e:	460f      	mov	r7, r1
 8006160:	4614      	mov	r4, r2
 8006162:	18d5      	adds	r5, r2, r3
 8006164:	42ac      	cmp	r4, r5
 8006166:	d101      	bne.n	800616c <__sfputs_r+0x12>
 8006168:	2000      	movs	r0, #0
 800616a:	e007      	b.n	800617c <__sfputs_r+0x22>
 800616c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006170:	463a      	mov	r2, r7
 8006172:	4630      	mov	r0, r6
 8006174:	f7ff ffda 	bl	800612c <__sfputc_r>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	d1f3      	bne.n	8006164 <__sfputs_r+0xa>
 800617c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006180 <_vfiprintf_r>:
 8006180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006184:	460d      	mov	r5, r1
 8006186:	b09d      	sub	sp, #116	; 0x74
 8006188:	4614      	mov	r4, r2
 800618a:	4698      	mov	r8, r3
 800618c:	4606      	mov	r6, r0
 800618e:	b118      	cbz	r0, 8006198 <_vfiprintf_r+0x18>
 8006190:	6983      	ldr	r3, [r0, #24]
 8006192:	b90b      	cbnz	r3, 8006198 <_vfiprintf_r+0x18>
 8006194:	f7ff fe96 	bl	8005ec4 <__sinit>
 8006198:	4b89      	ldr	r3, [pc, #548]	; (80063c0 <_vfiprintf_r+0x240>)
 800619a:	429d      	cmp	r5, r3
 800619c:	d11b      	bne.n	80061d6 <_vfiprintf_r+0x56>
 800619e:	6875      	ldr	r5, [r6, #4]
 80061a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061a2:	07d9      	lsls	r1, r3, #31
 80061a4:	d405      	bmi.n	80061b2 <_vfiprintf_r+0x32>
 80061a6:	89ab      	ldrh	r3, [r5, #12]
 80061a8:	059a      	lsls	r2, r3, #22
 80061aa:	d402      	bmi.n	80061b2 <_vfiprintf_r+0x32>
 80061ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061ae:	f7ff ff27 	bl	8006000 <__retarget_lock_acquire_recursive>
 80061b2:	89ab      	ldrh	r3, [r5, #12]
 80061b4:	071b      	lsls	r3, r3, #28
 80061b6:	d501      	bpl.n	80061bc <_vfiprintf_r+0x3c>
 80061b8:	692b      	ldr	r3, [r5, #16]
 80061ba:	b9eb      	cbnz	r3, 80061f8 <_vfiprintf_r+0x78>
 80061bc:	4629      	mov	r1, r5
 80061be:	4630      	mov	r0, r6
 80061c0:	f000 fba2 	bl	8006908 <__swsetup_r>
 80061c4:	b1c0      	cbz	r0, 80061f8 <_vfiprintf_r+0x78>
 80061c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061c8:	07dc      	lsls	r4, r3, #31
 80061ca:	d50e      	bpl.n	80061ea <_vfiprintf_r+0x6a>
 80061cc:	f04f 30ff 	mov.w	r0, #4294967295
 80061d0:	b01d      	add	sp, #116	; 0x74
 80061d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d6:	4b7b      	ldr	r3, [pc, #492]	; (80063c4 <_vfiprintf_r+0x244>)
 80061d8:	429d      	cmp	r5, r3
 80061da:	d101      	bne.n	80061e0 <_vfiprintf_r+0x60>
 80061dc:	68b5      	ldr	r5, [r6, #8]
 80061de:	e7df      	b.n	80061a0 <_vfiprintf_r+0x20>
 80061e0:	4b79      	ldr	r3, [pc, #484]	; (80063c8 <_vfiprintf_r+0x248>)
 80061e2:	429d      	cmp	r5, r3
 80061e4:	bf08      	it	eq
 80061e6:	68f5      	ldreq	r5, [r6, #12]
 80061e8:	e7da      	b.n	80061a0 <_vfiprintf_r+0x20>
 80061ea:	89ab      	ldrh	r3, [r5, #12]
 80061ec:	0598      	lsls	r0, r3, #22
 80061ee:	d4ed      	bmi.n	80061cc <_vfiprintf_r+0x4c>
 80061f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061f2:	f7ff ff06 	bl	8006002 <__retarget_lock_release_recursive>
 80061f6:	e7e9      	b.n	80061cc <_vfiprintf_r+0x4c>
 80061f8:	2300      	movs	r3, #0
 80061fa:	9309      	str	r3, [sp, #36]	; 0x24
 80061fc:	2320      	movs	r3, #32
 80061fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006202:	f8cd 800c 	str.w	r8, [sp, #12]
 8006206:	2330      	movs	r3, #48	; 0x30
 8006208:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80063cc <_vfiprintf_r+0x24c>
 800620c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006210:	f04f 0901 	mov.w	r9, #1
 8006214:	4623      	mov	r3, r4
 8006216:	469a      	mov	sl, r3
 8006218:	f813 2b01 	ldrb.w	r2, [r3], #1
 800621c:	b10a      	cbz	r2, 8006222 <_vfiprintf_r+0xa2>
 800621e:	2a25      	cmp	r2, #37	; 0x25
 8006220:	d1f9      	bne.n	8006216 <_vfiprintf_r+0x96>
 8006222:	ebba 0b04 	subs.w	fp, sl, r4
 8006226:	d00b      	beq.n	8006240 <_vfiprintf_r+0xc0>
 8006228:	465b      	mov	r3, fp
 800622a:	4622      	mov	r2, r4
 800622c:	4629      	mov	r1, r5
 800622e:	4630      	mov	r0, r6
 8006230:	f7ff ff93 	bl	800615a <__sfputs_r>
 8006234:	3001      	adds	r0, #1
 8006236:	f000 80aa 	beq.w	800638e <_vfiprintf_r+0x20e>
 800623a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800623c:	445a      	add	r2, fp
 800623e:	9209      	str	r2, [sp, #36]	; 0x24
 8006240:	f89a 3000 	ldrb.w	r3, [sl]
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 80a2 	beq.w	800638e <_vfiprintf_r+0x20e>
 800624a:	2300      	movs	r3, #0
 800624c:	f04f 32ff 	mov.w	r2, #4294967295
 8006250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006254:	f10a 0a01 	add.w	sl, sl, #1
 8006258:	9304      	str	r3, [sp, #16]
 800625a:	9307      	str	r3, [sp, #28]
 800625c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006260:	931a      	str	r3, [sp, #104]	; 0x68
 8006262:	4654      	mov	r4, sl
 8006264:	2205      	movs	r2, #5
 8006266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800626a:	4858      	ldr	r0, [pc, #352]	; (80063cc <_vfiprintf_r+0x24c>)
 800626c:	f7fa f840 	bl	80002f0 <memchr>
 8006270:	9a04      	ldr	r2, [sp, #16]
 8006272:	b9d8      	cbnz	r0, 80062ac <_vfiprintf_r+0x12c>
 8006274:	06d1      	lsls	r1, r2, #27
 8006276:	bf44      	itt	mi
 8006278:	2320      	movmi	r3, #32
 800627a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800627e:	0713      	lsls	r3, r2, #28
 8006280:	bf44      	itt	mi
 8006282:	232b      	movmi	r3, #43	; 0x2b
 8006284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006288:	f89a 3000 	ldrb.w	r3, [sl]
 800628c:	2b2a      	cmp	r3, #42	; 0x2a
 800628e:	d015      	beq.n	80062bc <_vfiprintf_r+0x13c>
 8006290:	9a07      	ldr	r2, [sp, #28]
 8006292:	4654      	mov	r4, sl
 8006294:	2000      	movs	r0, #0
 8006296:	f04f 0c0a 	mov.w	ip, #10
 800629a:	4621      	mov	r1, r4
 800629c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062a0:	3b30      	subs	r3, #48	; 0x30
 80062a2:	2b09      	cmp	r3, #9
 80062a4:	d94e      	bls.n	8006344 <_vfiprintf_r+0x1c4>
 80062a6:	b1b0      	cbz	r0, 80062d6 <_vfiprintf_r+0x156>
 80062a8:	9207      	str	r2, [sp, #28]
 80062aa:	e014      	b.n	80062d6 <_vfiprintf_r+0x156>
 80062ac:	eba0 0308 	sub.w	r3, r0, r8
 80062b0:	fa09 f303 	lsl.w	r3, r9, r3
 80062b4:	4313      	orrs	r3, r2
 80062b6:	9304      	str	r3, [sp, #16]
 80062b8:	46a2      	mov	sl, r4
 80062ba:	e7d2      	b.n	8006262 <_vfiprintf_r+0xe2>
 80062bc:	9b03      	ldr	r3, [sp, #12]
 80062be:	1d19      	adds	r1, r3, #4
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	9103      	str	r1, [sp, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	bfbb      	ittet	lt
 80062c8:	425b      	neglt	r3, r3
 80062ca:	f042 0202 	orrlt.w	r2, r2, #2
 80062ce:	9307      	strge	r3, [sp, #28]
 80062d0:	9307      	strlt	r3, [sp, #28]
 80062d2:	bfb8      	it	lt
 80062d4:	9204      	strlt	r2, [sp, #16]
 80062d6:	7823      	ldrb	r3, [r4, #0]
 80062d8:	2b2e      	cmp	r3, #46	; 0x2e
 80062da:	d10c      	bne.n	80062f6 <_vfiprintf_r+0x176>
 80062dc:	7863      	ldrb	r3, [r4, #1]
 80062de:	2b2a      	cmp	r3, #42	; 0x2a
 80062e0:	d135      	bne.n	800634e <_vfiprintf_r+0x1ce>
 80062e2:	9b03      	ldr	r3, [sp, #12]
 80062e4:	1d1a      	adds	r2, r3, #4
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	9203      	str	r2, [sp, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	bfb8      	it	lt
 80062ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80062f2:	3402      	adds	r4, #2
 80062f4:	9305      	str	r3, [sp, #20]
 80062f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80063dc <_vfiprintf_r+0x25c>
 80062fa:	7821      	ldrb	r1, [r4, #0]
 80062fc:	2203      	movs	r2, #3
 80062fe:	4650      	mov	r0, sl
 8006300:	f7f9 fff6 	bl	80002f0 <memchr>
 8006304:	b140      	cbz	r0, 8006318 <_vfiprintf_r+0x198>
 8006306:	2340      	movs	r3, #64	; 0x40
 8006308:	eba0 000a 	sub.w	r0, r0, sl
 800630c:	fa03 f000 	lsl.w	r0, r3, r0
 8006310:	9b04      	ldr	r3, [sp, #16]
 8006312:	4303      	orrs	r3, r0
 8006314:	3401      	adds	r4, #1
 8006316:	9304      	str	r3, [sp, #16]
 8006318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800631c:	482c      	ldr	r0, [pc, #176]	; (80063d0 <_vfiprintf_r+0x250>)
 800631e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006322:	2206      	movs	r2, #6
 8006324:	f7f9 ffe4 	bl	80002f0 <memchr>
 8006328:	2800      	cmp	r0, #0
 800632a:	d03f      	beq.n	80063ac <_vfiprintf_r+0x22c>
 800632c:	4b29      	ldr	r3, [pc, #164]	; (80063d4 <_vfiprintf_r+0x254>)
 800632e:	bb1b      	cbnz	r3, 8006378 <_vfiprintf_r+0x1f8>
 8006330:	9b03      	ldr	r3, [sp, #12]
 8006332:	3307      	adds	r3, #7
 8006334:	f023 0307 	bic.w	r3, r3, #7
 8006338:	3308      	adds	r3, #8
 800633a:	9303      	str	r3, [sp, #12]
 800633c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800633e:	443b      	add	r3, r7
 8006340:	9309      	str	r3, [sp, #36]	; 0x24
 8006342:	e767      	b.n	8006214 <_vfiprintf_r+0x94>
 8006344:	fb0c 3202 	mla	r2, ip, r2, r3
 8006348:	460c      	mov	r4, r1
 800634a:	2001      	movs	r0, #1
 800634c:	e7a5      	b.n	800629a <_vfiprintf_r+0x11a>
 800634e:	2300      	movs	r3, #0
 8006350:	3401      	adds	r4, #1
 8006352:	9305      	str	r3, [sp, #20]
 8006354:	4619      	mov	r1, r3
 8006356:	f04f 0c0a 	mov.w	ip, #10
 800635a:	4620      	mov	r0, r4
 800635c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006360:	3a30      	subs	r2, #48	; 0x30
 8006362:	2a09      	cmp	r2, #9
 8006364:	d903      	bls.n	800636e <_vfiprintf_r+0x1ee>
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0c5      	beq.n	80062f6 <_vfiprintf_r+0x176>
 800636a:	9105      	str	r1, [sp, #20]
 800636c:	e7c3      	b.n	80062f6 <_vfiprintf_r+0x176>
 800636e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006372:	4604      	mov	r4, r0
 8006374:	2301      	movs	r3, #1
 8006376:	e7f0      	b.n	800635a <_vfiprintf_r+0x1da>
 8006378:	ab03      	add	r3, sp, #12
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	462a      	mov	r2, r5
 800637e:	4b16      	ldr	r3, [pc, #88]	; (80063d8 <_vfiprintf_r+0x258>)
 8006380:	a904      	add	r1, sp, #16
 8006382:	4630      	mov	r0, r6
 8006384:	f3af 8000 	nop.w
 8006388:	4607      	mov	r7, r0
 800638a:	1c78      	adds	r0, r7, #1
 800638c:	d1d6      	bne.n	800633c <_vfiprintf_r+0x1bc>
 800638e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006390:	07d9      	lsls	r1, r3, #31
 8006392:	d405      	bmi.n	80063a0 <_vfiprintf_r+0x220>
 8006394:	89ab      	ldrh	r3, [r5, #12]
 8006396:	059a      	lsls	r2, r3, #22
 8006398:	d402      	bmi.n	80063a0 <_vfiprintf_r+0x220>
 800639a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800639c:	f7ff fe31 	bl	8006002 <__retarget_lock_release_recursive>
 80063a0:	89ab      	ldrh	r3, [r5, #12]
 80063a2:	065b      	lsls	r3, r3, #25
 80063a4:	f53f af12 	bmi.w	80061cc <_vfiprintf_r+0x4c>
 80063a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063aa:	e711      	b.n	80061d0 <_vfiprintf_r+0x50>
 80063ac:	ab03      	add	r3, sp, #12
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	462a      	mov	r2, r5
 80063b2:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <_vfiprintf_r+0x258>)
 80063b4:	a904      	add	r1, sp, #16
 80063b6:	4630      	mov	r0, r6
 80063b8:	f000 f880 	bl	80064bc <_printf_i>
 80063bc:	e7e4      	b.n	8006388 <_vfiprintf_r+0x208>
 80063be:	bf00      	nop
 80063c0:	08006ed4 	.word	0x08006ed4
 80063c4:	08006ef4 	.word	0x08006ef4
 80063c8:	08006eb4 	.word	0x08006eb4
 80063cc:	08006f14 	.word	0x08006f14
 80063d0:	08006f1e 	.word	0x08006f1e
 80063d4:	00000000 	.word	0x00000000
 80063d8:	0800615b 	.word	0x0800615b
 80063dc:	08006f1a 	.word	0x08006f1a

080063e0 <_printf_common>:
 80063e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e4:	4616      	mov	r6, r2
 80063e6:	4699      	mov	r9, r3
 80063e8:	688a      	ldr	r2, [r1, #8]
 80063ea:	690b      	ldr	r3, [r1, #16]
 80063ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063f0:	4293      	cmp	r3, r2
 80063f2:	bfb8      	it	lt
 80063f4:	4613      	movlt	r3, r2
 80063f6:	6033      	str	r3, [r6, #0]
 80063f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063fc:	4607      	mov	r7, r0
 80063fe:	460c      	mov	r4, r1
 8006400:	b10a      	cbz	r2, 8006406 <_printf_common+0x26>
 8006402:	3301      	adds	r3, #1
 8006404:	6033      	str	r3, [r6, #0]
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	0699      	lsls	r1, r3, #26
 800640a:	bf42      	ittt	mi
 800640c:	6833      	ldrmi	r3, [r6, #0]
 800640e:	3302      	addmi	r3, #2
 8006410:	6033      	strmi	r3, [r6, #0]
 8006412:	6825      	ldr	r5, [r4, #0]
 8006414:	f015 0506 	ands.w	r5, r5, #6
 8006418:	d106      	bne.n	8006428 <_printf_common+0x48>
 800641a:	f104 0a19 	add.w	sl, r4, #25
 800641e:	68e3      	ldr	r3, [r4, #12]
 8006420:	6832      	ldr	r2, [r6, #0]
 8006422:	1a9b      	subs	r3, r3, r2
 8006424:	42ab      	cmp	r3, r5
 8006426:	dc26      	bgt.n	8006476 <_printf_common+0x96>
 8006428:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800642c:	1e13      	subs	r3, r2, #0
 800642e:	6822      	ldr	r2, [r4, #0]
 8006430:	bf18      	it	ne
 8006432:	2301      	movne	r3, #1
 8006434:	0692      	lsls	r2, r2, #26
 8006436:	d42b      	bmi.n	8006490 <_printf_common+0xb0>
 8006438:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800643c:	4649      	mov	r1, r9
 800643e:	4638      	mov	r0, r7
 8006440:	47c0      	blx	r8
 8006442:	3001      	adds	r0, #1
 8006444:	d01e      	beq.n	8006484 <_printf_common+0xa4>
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	68e5      	ldr	r5, [r4, #12]
 800644a:	6832      	ldr	r2, [r6, #0]
 800644c:	f003 0306 	and.w	r3, r3, #6
 8006450:	2b04      	cmp	r3, #4
 8006452:	bf08      	it	eq
 8006454:	1aad      	subeq	r5, r5, r2
 8006456:	68a3      	ldr	r3, [r4, #8]
 8006458:	6922      	ldr	r2, [r4, #16]
 800645a:	bf0c      	ite	eq
 800645c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006460:	2500      	movne	r5, #0
 8006462:	4293      	cmp	r3, r2
 8006464:	bfc4      	itt	gt
 8006466:	1a9b      	subgt	r3, r3, r2
 8006468:	18ed      	addgt	r5, r5, r3
 800646a:	2600      	movs	r6, #0
 800646c:	341a      	adds	r4, #26
 800646e:	42b5      	cmp	r5, r6
 8006470:	d11a      	bne.n	80064a8 <_printf_common+0xc8>
 8006472:	2000      	movs	r0, #0
 8006474:	e008      	b.n	8006488 <_printf_common+0xa8>
 8006476:	2301      	movs	r3, #1
 8006478:	4652      	mov	r2, sl
 800647a:	4649      	mov	r1, r9
 800647c:	4638      	mov	r0, r7
 800647e:	47c0      	blx	r8
 8006480:	3001      	adds	r0, #1
 8006482:	d103      	bne.n	800648c <_printf_common+0xac>
 8006484:	f04f 30ff 	mov.w	r0, #4294967295
 8006488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800648c:	3501      	adds	r5, #1
 800648e:	e7c6      	b.n	800641e <_printf_common+0x3e>
 8006490:	18e1      	adds	r1, r4, r3
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	2030      	movs	r0, #48	; 0x30
 8006496:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800649a:	4422      	add	r2, r4
 800649c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064a4:	3302      	adds	r3, #2
 80064a6:	e7c7      	b.n	8006438 <_printf_common+0x58>
 80064a8:	2301      	movs	r3, #1
 80064aa:	4622      	mov	r2, r4
 80064ac:	4649      	mov	r1, r9
 80064ae:	4638      	mov	r0, r7
 80064b0:	47c0      	blx	r8
 80064b2:	3001      	adds	r0, #1
 80064b4:	d0e6      	beq.n	8006484 <_printf_common+0xa4>
 80064b6:	3601      	adds	r6, #1
 80064b8:	e7d9      	b.n	800646e <_printf_common+0x8e>
	...

080064bc <_printf_i>:
 80064bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064c0:	7e0f      	ldrb	r7, [r1, #24]
 80064c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064c4:	2f78      	cmp	r7, #120	; 0x78
 80064c6:	4691      	mov	r9, r2
 80064c8:	4680      	mov	r8, r0
 80064ca:	460c      	mov	r4, r1
 80064cc:	469a      	mov	sl, r3
 80064ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064d2:	d807      	bhi.n	80064e4 <_printf_i+0x28>
 80064d4:	2f62      	cmp	r7, #98	; 0x62
 80064d6:	d80a      	bhi.n	80064ee <_printf_i+0x32>
 80064d8:	2f00      	cmp	r7, #0
 80064da:	f000 80d8 	beq.w	800668e <_printf_i+0x1d2>
 80064de:	2f58      	cmp	r7, #88	; 0x58
 80064e0:	f000 80a3 	beq.w	800662a <_printf_i+0x16e>
 80064e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064ec:	e03a      	b.n	8006564 <_printf_i+0xa8>
 80064ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064f2:	2b15      	cmp	r3, #21
 80064f4:	d8f6      	bhi.n	80064e4 <_printf_i+0x28>
 80064f6:	a101      	add	r1, pc, #4	; (adr r1, 80064fc <_printf_i+0x40>)
 80064f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064fc:	08006555 	.word	0x08006555
 8006500:	08006569 	.word	0x08006569
 8006504:	080064e5 	.word	0x080064e5
 8006508:	080064e5 	.word	0x080064e5
 800650c:	080064e5 	.word	0x080064e5
 8006510:	080064e5 	.word	0x080064e5
 8006514:	08006569 	.word	0x08006569
 8006518:	080064e5 	.word	0x080064e5
 800651c:	080064e5 	.word	0x080064e5
 8006520:	080064e5 	.word	0x080064e5
 8006524:	080064e5 	.word	0x080064e5
 8006528:	08006675 	.word	0x08006675
 800652c:	08006599 	.word	0x08006599
 8006530:	08006657 	.word	0x08006657
 8006534:	080064e5 	.word	0x080064e5
 8006538:	080064e5 	.word	0x080064e5
 800653c:	08006697 	.word	0x08006697
 8006540:	080064e5 	.word	0x080064e5
 8006544:	08006599 	.word	0x08006599
 8006548:	080064e5 	.word	0x080064e5
 800654c:	080064e5 	.word	0x080064e5
 8006550:	0800665f 	.word	0x0800665f
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	1d1a      	adds	r2, r3, #4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	602a      	str	r2, [r5, #0]
 800655c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006564:	2301      	movs	r3, #1
 8006566:	e0a3      	b.n	80066b0 <_printf_i+0x1f4>
 8006568:	6820      	ldr	r0, [r4, #0]
 800656a:	6829      	ldr	r1, [r5, #0]
 800656c:	0606      	lsls	r6, r0, #24
 800656e:	f101 0304 	add.w	r3, r1, #4
 8006572:	d50a      	bpl.n	800658a <_printf_i+0xce>
 8006574:	680e      	ldr	r6, [r1, #0]
 8006576:	602b      	str	r3, [r5, #0]
 8006578:	2e00      	cmp	r6, #0
 800657a:	da03      	bge.n	8006584 <_printf_i+0xc8>
 800657c:	232d      	movs	r3, #45	; 0x2d
 800657e:	4276      	negs	r6, r6
 8006580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006584:	485e      	ldr	r0, [pc, #376]	; (8006700 <_printf_i+0x244>)
 8006586:	230a      	movs	r3, #10
 8006588:	e019      	b.n	80065be <_printf_i+0x102>
 800658a:	680e      	ldr	r6, [r1, #0]
 800658c:	602b      	str	r3, [r5, #0]
 800658e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006592:	bf18      	it	ne
 8006594:	b236      	sxthne	r6, r6
 8006596:	e7ef      	b.n	8006578 <_printf_i+0xbc>
 8006598:	682b      	ldr	r3, [r5, #0]
 800659a:	6820      	ldr	r0, [r4, #0]
 800659c:	1d19      	adds	r1, r3, #4
 800659e:	6029      	str	r1, [r5, #0]
 80065a0:	0601      	lsls	r1, r0, #24
 80065a2:	d501      	bpl.n	80065a8 <_printf_i+0xec>
 80065a4:	681e      	ldr	r6, [r3, #0]
 80065a6:	e002      	b.n	80065ae <_printf_i+0xf2>
 80065a8:	0646      	lsls	r6, r0, #25
 80065aa:	d5fb      	bpl.n	80065a4 <_printf_i+0xe8>
 80065ac:	881e      	ldrh	r6, [r3, #0]
 80065ae:	4854      	ldr	r0, [pc, #336]	; (8006700 <_printf_i+0x244>)
 80065b0:	2f6f      	cmp	r7, #111	; 0x6f
 80065b2:	bf0c      	ite	eq
 80065b4:	2308      	moveq	r3, #8
 80065b6:	230a      	movne	r3, #10
 80065b8:	2100      	movs	r1, #0
 80065ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065be:	6865      	ldr	r5, [r4, #4]
 80065c0:	60a5      	str	r5, [r4, #8]
 80065c2:	2d00      	cmp	r5, #0
 80065c4:	bfa2      	ittt	ge
 80065c6:	6821      	ldrge	r1, [r4, #0]
 80065c8:	f021 0104 	bicge.w	r1, r1, #4
 80065cc:	6021      	strge	r1, [r4, #0]
 80065ce:	b90e      	cbnz	r6, 80065d4 <_printf_i+0x118>
 80065d0:	2d00      	cmp	r5, #0
 80065d2:	d04d      	beq.n	8006670 <_printf_i+0x1b4>
 80065d4:	4615      	mov	r5, r2
 80065d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80065da:	fb03 6711 	mls	r7, r3, r1, r6
 80065de:	5dc7      	ldrb	r7, [r0, r7]
 80065e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065e4:	4637      	mov	r7, r6
 80065e6:	42bb      	cmp	r3, r7
 80065e8:	460e      	mov	r6, r1
 80065ea:	d9f4      	bls.n	80065d6 <_printf_i+0x11a>
 80065ec:	2b08      	cmp	r3, #8
 80065ee:	d10b      	bne.n	8006608 <_printf_i+0x14c>
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	07de      	lsls	r6, r3, #31
 80065f4:	d508      	bpl.n	8006608 <_printf_i+0x14c>
 80065f6:	6923      	ldr	r3, [r4, #16]
 80065f8:	6861      	ldr	r1, [r4, #4]
 80065fa:	4299      	cmp	r1, r3
 80065fc:	bfde      	ittt	le
 80065fe:	2330      	movle	r3, #48	; 0x30
 8006600:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006604:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006608:	1b52      	subs	r2, r2, r5
 800660a:	6122      	str	r2, [r4, #16]
 800660c:	f8cd a000 	str.w	sl, [sp]
 8006610:	464b      	mov	r3, r9
 8006612:	aa03      	add	r2, sp, #12
 8006614:	4621      	mov	r1, r4
 8006616:	4640      	mov	r0, r8
 8006618:	f7ff fee2 	bl	80063e0 <_printf_common>
 800661c:	3001      	adds	r0, #1
 800661e:	d14c      	bne.n	80066ba <_printf_i+0x1fe>
 8006620:	f04f 30ff 	mov.w	r0, #4294967295
 8006624:	b004      	add	sp, #16
 8006626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800662a:	4835      	ldr	r0, [pc, #212]	; (8006700 <_printf_i+0x244>)
 800662c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006630:	6829      	ldr	r1, [r5, #0]
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	f851 6b04 	ldr.w	r6, [r1], #4
 8006638:	6029      	str	r1, [r5, #0]
 800663a:	061d      	lsls	r5, r3, #24
 800663c:	d514      	bpl.n	8006668 <_printf_i+0x1ac>
 800663e:	07df      	lsls	r7, r3, #31
 8006640:	bf44      	itt	mi
 8006642:	f043 0320 	orrmi.w	r3, r3, #32
 8006646:	6023      	strmi	r3, [r4, #0]
 8006648:	b91e      	cbnz	r6, 8006652 <_printf_i+0x196>
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	f023 0320 	bic.w	r3, r3, #32
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	2310      	movs	r3, #16
 8006654:	e7b0      	b.n	80065b8 <_printf_i+0xfc>
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	f043 0320 	orr.w	r3, r3, #32
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	2378      	movs	r3, #120	; 0x78
 8006660:	4828      	ldr	r0, [pc, #160]	; (8006704 <_printf_i+0x248>)
 8006662:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006666:	e7e3      	b.n	8006630 <_printf_i+0x174>
 8006668:	0659      	lsls	r1, r3, #25
 800666a:	bf48      	it	mi
 800666c:	b2b6      	uxthmi	r6, r6
 800666e:	e7e6      	b.n	800663e <_printf_i+0x182>
 8006670:	4615      	mov	r5, r2
 8006672:	e7bb      	b.n	80065ec <_printf_i+0x130>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	6826      	ldr	r6, [r4, #0]
 8006678:	6961      	ldr	r1, [r4, #20]
 800667a:	1d18      	adds	r0, r3, #4
 800667c:	6028      	str	r0, [r5, #0]
 800667e:	0635      	lsls	r5, r6, #24
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	d501      	bpl.n	8006688 <_printf_i+0x1cc>
 8006684:	6019      	str	r1, [r3, #0]
 8006686:	e002      	b.n	800668e <_printf_i+0x1d2>
 8006688:	0670      	lsls	r0, r6, #25
 800668a:	d5fb      	bpl.n	8006684 <_printf_i+0x1c8>
 800668c:	8019      	strh	r1, [r3, #0]
 800668e:	2300      	movs	r3, #0
 8006690:	6123      	str	r3, [r4, #16]
 8006692:	4615      	mov	r5, r2
 8006694:	e7ba      	b.n	800660c <_printf_i+0x150>
 8006696:	682b      	ldr	r3, [r5, #0]
 8006698:	1d1a      	adds	r2, r3, #4
 800669a:	602a      	str	r2, [r5, #0]
 800669c:	681d      	ldr	r5, [r3, #0]
 800669e:	6862      	ldr	r2, [r4, #4]
 80066a0:	2100      	movs	r1, #0
 80066a2:	4628      	mov	r0, r5
 80066a4:	f7f9 fe24 	bl	80002f0 <memchr>
 80066a8:	b108      	cbz	r0, 80066ae <_printf_i+0x1f2>
 80066aa:	1b40      	subs	r0, r0, r5
 80066ac:	6060      	str	r0, [r4, #4]
 80066ae:	6863      	ldr	r3, [r4, #4]
 80066b0:	6123      	str	r3, [r4, #16]
 80066b2:	2300      	movs	r3, #0
 80066b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b8:	e7a8      	b.n	800660c <_printf_i+0x150>
 80066ba:	6923      	ldr	r3, [r4, #16]
 80066bc:	462a      	mov	r2, r5
 80066be:	4649      	mov	r1, r9
 80066c0:	4640      	mov	r0, r8
 80066c2:	47d0      	blx	sl
 80066c4:	3001      	adds	r0, #1
 80066c6:	d0ab      	beq.n	8006620 <_printf_i+0x164>
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	079b      	lsls	r3, r3, #30
 80066cc:	d413      	bmi.n	80066f6 <_printf_i+0x23a>
 80066ce:	68e0      	ldr	r0, [r4, #12]
 80066d0:	9b03      	ldr	r3, [sp, #12]
 80066d2:	4298      	cmp	r0, r3
 80066d4:	bfb8      	it	lt
 80066d6:	4618      	movlt	r0, r3
 80066d8:	e7a4      	b.n	8006624 <_printf_i+0x168>
 80066da:	2301      	movs	r3, #1
 80066dc:	4632      	mov	r2, r6
 80066de:	4649      	mov	r1, r9
 80066e0:	4640      	mov	r0, r8
 80066e2:	47d0      	blx	sl
 80066e4:	3001      	adds	r0, #1
 80066e6:	d09b      	beq.n	8006620 <_printf_i+0x164>
 80066e8:	3501      	adds	r5, #1
 80066ea:	68e3      	ldr	r3, [r4, #12]
 80066ec:	9903      	ldr	r1, [sp, #12]
 80066ee:	1a5b      	subs	r3, r3, r1
 80066f0:	42ab      	cmp	r3, r5
 80066f2:	dcf2      	bgt.n	80066da <_printf_i+0x21e>
 80066f4:	e7eb      	b.n	80066ce <_printf_i+0x212>
 80066f6:	2500      	movs	r5, #0
 80066f8:	f104 0619 	add.w	r6, r4, #25
 80066fc:	e7f5      	b.n	80066ea <_printf_i+0x22e>
 80066fe:	bf00      	nop
 8006700:	08006f25 	.word	0x08006f25
 8006704:	08006f36 	.word	0x08006f36

08006708 <_putc_r>:
 8006708:	b570      	push	{r4, r5, r6, lr}
 800670a:	460d      	mov	r5, r1
 800670c:	4614      	mov	r4, r2
 800670e:	4606      	mov	r6, r0
 8006710:	b118      	cbz	r0, 800671a <_putc_r+0x12>
 8006712:	6983      	ldr	r3, [r0, #24]
 8006714:	b90b      	cbnz	r3, 800671a <_putc_r+0x12>
 8006716:	f7ff fbd5 	bl	8005ec4 <__sinit>
 800671a:	4b1c      	ldr	r3, [pc, #112]	; (800678c <_putc_r+0x84>)
 800671c:	429c      	cmp	r4, r3
 800671e:	d124      	bne.n	800676a <_putc_r+0x62>
 8006720:	6874      	ldr	r4, [r6, #4]
 8006722:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006724:	07d8      	lsls	r0, r3, #31
 8006726:	d405      	bmi.n	8006734 <_putc_r+0x2c>
 8006728:	89a3      	ldrh	r3, [r4, #12]
 800672a:	0599      	lsls	r1, r3, #22
 800672c:	d402      	bmi.n	8006734 <_putc_r+0x2c>
 800672e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006730:	f7ff fc66 	bl	8006000 <__retarget_lock_acquire_recursive>
 8006734:	68a3      	ldr	r3, [r4, #8]
 8006736:	3b01      	subs	r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	60a3      	str	r3, [r4, #8]
 800673c:	da05      	bge.n	800674a <_putc_r+0x42>
 800673e:	69a2      	ldr	r2, [r4, #24]
 8006740:	4293      	cmp	r3, r2
 8006742:	db1c      	blt.n	800677e <_putc_r+0x76>
 8006744:	b2eb      	uxtb	r3, r5
 8006746:	2b0a      	cmp	r3, #10
 8006748:	d019      	beq.n	800677e <_putc_r+0x76>
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	6022      	str	r2, [r4, #0]
 8006750:	701d      	strb	r5, [r3, #0]
 8006752:	b2ed      	uxtb	r5, r5
 8006754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006756:	07da      	lsls	r2, r3, #31
 8006758:	d405      	bmi.n	8006766 <_putc_r+0x5e>
 800675a:	89a3      	ldrh	r3, [r4, #12]
 800675c:	059b      	lsls	r3, r3, #22
 800675e:	d402      	bmi.n	8006766 <_putc_r+0x5e>
 8006760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006762:	f7ff fc4e 	bl	8006002 <__retarget_lock_release_recursive>
 8006766:	4628      	mov	r0, r5
 8006768:	bd70      	pop	{r4, r5, r6, pc}
 800676a:	4b09      	ldr	r3, [pc, #36]	; (8006790 <_putc_r+0x88>)
 800676c:	429c      	cmp	r4, r3
 800676e:	d101      	bne.n	8006774 <_putc_r+0x6c>
 8006770:	68b4      	ldr	r4, [r6, #8]
 8006772:	e7d6      	b.n	8006722 <_putc_r+0x1a>
 8006774:	4b07      	ldr	r3, [pc, #28]	; (8006794 <_putc_r+0x8c>)
 8006776:	429c      	cmp	r4, r3
 8006778:	bf08      	it	eq
 800677a:	68f4      	ldreq	r4, [r6, #12]
 800677c:	e7d1      	b.n	8006722 <_putc_r+0x1a>
 800677e:	4629      	mov	r1, r5
 8006780:	4622      	mov	r2, r4
 8006782:	4630      	mov	r0, r6
 8006784:	f000 f85c 	bl	8006840 <__swbuf_r>
 8006788:	4605      	mov	r5, r0
 800678a:	e7e3      	b.n	8006754 <_putc_r+0x4c>
 800678c:	08006ed4 	.word	0x08006ed4
 8006790:	08006ef4 	.word	0x08006ef4
 8006794:	08006eb4 	.word	0x08006eb4

08006798 <_sbrk_r>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	4d06      	ldr	r5, [pc, #24]	; (80067b4 <_sbrk_r+0x1c>)
 800679c:	2300      	movs	r3, #0
 800679e:	4604      	mov	r4, r0
 80067a0:	4608      	mov	r0, r1
 80067a2:	602b      	str	r3, [r5, #0]
 80067a4:	f7fa fbc8 	bl	8000f38 <_sbrk>
 80067a8:	1c43      	adds	r3, r0, #1
 80067aa:	d102      	bne.n	80067b2 <_sbrk_r+0x1a>
 80067ac:	682b      	ldr	r3, [r5, #0]
 80067ae:	b103      	cbz	r3, 80067b2 <_sbrk_r+0x1a>
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	bd38      	pop	{r3, r4, r5, pc}
 80067b4:	240001b0 	.word	0x240001b0

080067b8 <__sread>:
 80067b8:	b510      	push	{r4, lr}
 80067ba:	460c      	mov	r4, r1
 80067bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c0:	f000 fab2 	bl	8006d28 <_read_r>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	bfab      	itete	ge
 80067c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067ca:	89a3      	ldrhlt	r3, [r4, #12]
 80067cc:	181b      	addge	r3, r3, r0
 80067ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067d2:	bfac      	ite	ge
 80067d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80067d6:	81a3      	strhlt	r3, [r4, #12]
 80067d8:	bd10      	pop	{r4, pc}

080067da <__swrite>:
 80067da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067de:	461f      	mov	r7, r3
 80067e0:	898b      	ldrh	r3, [r1, #12]
 80067e2:	05db      	lsls	r3, r3, #23
 80067e4:	4605      	mov	r5, r0
 80067e6:	460c      	mov	r4, r1
 80067e8:	4616      	mov	r6, r2
 80067ea:	d505      	bpl.n	80067f8 <__swrite+0x1e>
 80067ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f0:	2302      	movs	r3, #2
 80067f2:	2200      	movs	r2, #0
 80067f4:	f000 f9c8 	bl	8006b88 <_lseek_r>
 80067f8:	89a3      	ldrh	r3, [r4, #12]
 80067fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006802:	81a3      	strh	r3, [r4, #12]
 8006804:	4632      	mov	r2, r6
 8006806:	463b      	mov	r3, r7
 8006808:	4628      	mov	r0, r5
 800680a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800680e:	f000 b869 	b.w	80068e4 <_write_r>

08006812 <__sseek>:
 8006812:	b510      	push	{r4, lr}
 8006814:	460c      	mov	r4, r1
 8006816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800681a:	f000 f9b5 	bl	8006b88 <_lseek_r>
 800681e:	1c43      	adds	r3, r0, #1
 8006820:	89a3      	ldrh	r3, [r4, #12]
 8006822:	bf15      	itete	ne
 8006824:	6560      	strne	r0, [r4, #84]	; 0x54
 8006826:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800682a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800682e:	81a3      	strheq	r3, [r4, #12]
 8006830:	bf18      	it	ne
 8006832:	81a3      	strhne	r3, [r4, #12]
 8006834:	bd10      	pop	{r4, pc}

08006836 <__sclose>:
 8006836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683a:	f000 b8d3 	b.w	80069e4 <_close_r>
	...

08006840 <__swbuf_r>:
 8006840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006842:	460e      	mov	r6, r1
 8006844:	4614      	mov	r4, r2
 8006846:	4605      	mov	r5, r0
 8006848:	b118      	cbz	r0, 8006852 <__swbuf_r+0x12>
 800684a:	6983      	ldr	r3, [r0, #24]
 800684c:	b90b      	cbnz	r3, 8006852 <__swbuf_r+0x12>
 800684e:	f7ff fb39 	bl	8005ec4 <__sinit>
 8006852:	4b21      	ldr	r3, [pc, #132]	; (80068d8 <__swbuf_r+0x98>)
 8006854:	429c      	cmp	r4, r3
 8006856:	d12b      	bne.n	80068b0 <__swbuf_r+0x70>
 8006858:	686c      	ldr	r4, [r5, #4]
 800685a:	69a3      	ldr	r3, [r4, #24]
 800685c:	60a3      	str	r3, [r4, #8]
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	071a      	lsls	r2, r3, #28
 8006862:	d52f      	bpl.n	80068c4 <__swbuf_r+0x84>
 8006864:	6923      	ldr	r3, [r4, #16]
 8006866:	b36b      	cbz	r3, 80068c4 <__swbuf_r+0x84>
 8006868:	6923      	ldr	r3, [r4, #16]
 800686a:	6820      	ldr	r0, [r4, #0]
 800686c:	1ac0      	subs	r0, r0, r3
 800686e:	6963      	ldr	r3, [r4, #20]
 8006870:	b2f6      	uxtb	r6, r6
 8006872:	4283      	cmp	r3, r0
 8006874:	4637      	mov	r7, r6
 8006876:	dc04      	bgt.n	8006882 <__swbuf_r+0x42>
 8006878:	4621      	mov	r1, r4
 800687a:	4628      	mov	r0, r5
 800687c:	f000 f948 	bl	8006b10 <_fflush_r>
 8006880:	bb30      	cbnz	r0, 80068d0 <__swbuf_r+0x90>
 8006882:	68a3      	ldr	r3, [r4, #8]
 8006884:	3b01      	subs	r3, #1
 8006886:	60a3      	str	r3, [r4, #8]
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	6022      	str	r2, [r4, #0]
 800688e:	701e      	strb	r6, [r3, #0]
 8006890:	6963      	ldr	r3, [r4, #20]
 8006892:	3001      	adds	r0, #1
 8006894:	4283      	cmp	r3, r0
 8006896:	d004      	beq.n	80068a2 <__swbuf_r+0x62>
 8006898:	89a3      	ldrh	r3, [r4, #12]
 800689a:	07db      	lsls	r3, r3, #31
 800689c:	d506      	bpl.n	80068ac <__swbuf_r+0x6c>
 800689e:	2e0a      	cmp	r6, #10
 80068a0:	d104      	bne.n	80068ac <__swbuf_r+0x6c>
 80068a2:	4621      	mov	r1, r4
 80068a4:	4628      	mov	r0, r5
 80068a6:	f000 f933 	bl	8006b10 <_fflush_r>
 80068aa:	b988      	cbnz	r0, 80068d0 <__swbuf_r+0x90>
 80068ac:	4638      	mov	r0, r7
 80068ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068b0:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <__swbuf_r+0x9c>)
 80068b2:	429c      	cmp	r4, r3
 80068b4:	d101      	bne.n	80068ba <__swbuf_r+0x7a>
 80068b6:	68ac      	ldr	r4, [r5, #8]
 80068b8:	e7cf      	b.n	800685a <__swbuf_r+0x1a>
 80068ba:	4b09      	ldr	r3, [pc, #36]	; (80068e0 <__swbuf_r+0xa0>)
 80068bc:	429c      	cmp	r4, r3
 80068be:	bf08      	it	eq
 80068c0:	68ec      	ldreq	r4, [r5, #12]
 80068c2:	e7ca      	b.n	800685a <__swbuf_r+0x1a>
 80068c4:	4621      	mov	r1, r4
 80068c6:	4628      	mov	r0, r5
 80068c8:	f000 f81e 	bl	8006908 <__swsetup_r>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d0cb      	beq.n	8006868 <__swbuf_r+0x28>
 80068d0:	f04f 37ff 	mov.w	r7, #4294967295
 80068d4:	e7ea      	b.n	80068ac <__swbuf_r+0x6c>
 80068d6:	bf00      	nop
 80068d8:	08006ed4 	.word	0x08006ed4
 80068dc:	08006ef4 	.word	0x08006ef4
 80068e0:	08006eb4 	.word	0x08006eb4

080068e4 <_write_r>:
 80068e4:	b538      	push	{r3, r4, r5, lr}
 80068e6:	4d07      	ldr	r5, [pc, #28]	; (8006904 <_write_r+0x20>)
 80068e8:	4604      	mov	r4, r0
 80068ea:	4608      	mov	r0, r1
 80068ec:	4611      	mov	r1, r2
 80068ee:	2200      	movs	r2, #0
 80068f0:	602a      	str	r2, [r5, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	f7fa facf 	bl	8000e96 <_write>
 80068f8:	1c43      	adds	r3, r0, #1
 80068fa:	d102      	bne.n	8006902 <_write_r+0x1e>
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	b103      	cbz	r3, 8006902 <_write_r+0x1e>
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	bd38      	pop	{r3, r4, r5, pc}
 8006904:	240001b0 	.word	0x240001b0

08006908 <__swsetup_r>:
 8006908:	4b32      	ldr	r3, [pc, #200]	; (80069d4 <__swsetup_r+0xcc>)
 800690a:	b570      	push	{r4, r5, r6, lr}
 800690c:	681d      	ldr	r5, [r3, #0]
 800690e:	4606      	mov	r6, r0
 8006910:	460c      	mov	r4, r1
 8006912:	b125      	cbz	r5, 800691e <__swsetup_r+0x16>
 8006914:	69ab      	ldr	r3, [r5, #24]
 8006916:	b913      	cbnz	r3, 800691e <__swsetup_r+0x16>
 8006918:	4628      	mov	r0, r5
 800691a:	f7ff fad3 	bl	8005ec4 <__sinit>
 800691e:	4b2e      	ldr	r3, [pc, #184]	; (80069d8 <__swsetup_r+0xd0>)
 8006920:	429c      	cmp	r4, r3
 8006922:	d10f      	bne.n	8006944 <__swsetup_r+0x3c>
 8006924:	686c      	ldr	r4, [r5, #4]
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800692c:	0719      	lsls	r1, r3, #28
 800692e:	d42c      	bmi.n	800698a <__swsetup_r+0x82>
 8006930:	06dd      	lsls	r5, r3, #27
 8006932:	d411      	bmi.n	8006958 <__swsetup_r+0x50>
 8006934:	2309      	movs	r3, #9
 8006936:	6033      	str	r3, [r6, #0]
 8006938:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800693c:	81a3      	strh	r3, [r4, #12]
 800693e:	f04f 30ff 	mov.w	r0, #4294967295
 8006942:	e03e      	b.n	80069c2 <__swsetup_r+0xba>
 8006944:	4b25      	ldr	r3, [pc, #148]	; (80069dc <__swsetup_r+0xd4>)
 8006946:	429c      	cmp	r4, r3
 8006948:	d101      	bne.n	800694e <__swsetup_r+0x46>
 800694a:	68ac      	ldr	r4, [r5, #8]
 800694c:	e7eb      	b.n	8006926 <__swsetup_r+0x1e>
 800694e:	4b24      	ldr	r3, [pc, #144]	; (80069e0 <__swsetup_r+0xd8>)
 8006950:	429c      	cmp	r4, r3
 8006952:	bf08      	it	eq
 8006954:	68ec      	ldreq	r4, [r5, #12]
 8006956:	e7e6      	b.n	8006926 <__swsetup_r+0x1e>
 8006958:	0758      	lsls	r0, r3, #29
 800695a:	d512      	bpl.n	8006982 <__swsetup_r+0x7a>
 800695c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800695e:	b141      	cbz	r1, 8006972 <__swsetup_r+0x6a>
 8006960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006964:	4299      	cmp	r1, r3
 8006966:	d002      	beq.n	800696e <__swsetup_r+0x66>
 8006968:	4630      	mov	r0, r6
 800696a:	f000 f991 	bl	8006c90 <_free_r>
 800696e:	2300      	movs	r3, #0
 8006970:	6363      	str	r3, [r4, #52]	; 0x34
 8006972:	89a3      	ldrh	r3, [r4, #12]
 8006974:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006978:	81a3      	strh	r3, [r4, #12]
 800697a:	2300      	movs	r3, #0
 800697c:	6063      	str	r3, [r4, #4]
 800697e:	6923      	ldr	r3, [r4, #16]
 8006980:	6023      	str	r3, [r4, #0]
 8006982:	89a3      	ldrh	r3, [r4, #12]
 8006984:	f043 0308 	orr.w	r3, r3, #8
 8006988:	81a3      	strh	r3, [r4, #12]
 800698a:	6923      	ldr	r3, [r4, #16]
 800698c:	b94b      	cbnz	r3, 80069a2 <__swsetup_r+0x9a>
 800698e:	89a3      	ldrh	r3, [r4, #12]
 8006990:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006998:	d003      	beq.n	80069a2 <__swsetup_r+0x9a>
 800699a:	4621      	mov	r1, r4
 800699c:	4630      	mov	r0, r6
 800699e:	f000 f92b 	bl	8006bf8 <__smakebuf_r>
 80069a2:	89a0      	ldrh	r0, [r4, #12]
 80069a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069a8:	f010 0301 	ands.w	r3, r0, #1
 80069ac:	d00a      	beq.n	80069c4 <__swsetup_r+0xbc>
 80069ae:	2300      	movs	r3, #0
 80069b0:	60a3      	str	r3, [r4, #8]
 80069b2:	6963      	ldr	r3, [r4, #20]
 80069b4:	425b      	negs	r3, r3
 80069b6:	61a3      	str	r3, [r4, #24]
 80069b8:	6923      	ldr	r3, [r4, #16]
 80069ba:	b943      	cbnz	r3, 80069ce <__swsetup_r+0xc6>
 80069bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069c0:	d1ba      	bne.n	8006938 <__swsetup_r+0x30>
 80069c2:	bd70      	pop	{r4, r5, r6, pc}
 80069c4:	0781      	lsls	r1, r0, #30
 80069c6:	bf58      	it	pl
 80069c8:	6963      	ldrpl	r3, [r4, #20]
 80069ca:	60a3      	str	r3, [r4, #8]
 80069cc:	e7f4      	b.n	80069b8 <__swsetup_r+0xb0>
 80069ce:	2000      	movs	r0, #0
 80069d0:	e7f7      	b.n	80069c2 <__swsetup_r+0xba>
 80069d2:	bf00      	nop
 80069d4:	24000010 	.word	0x24000010
 80069d8:	08006ed4 	.word	0x08006ed4
 80069dc:	08006ef4 	.word	0x08006ef4
 80069e0:	08006eb4 	.word	0x08006eb4

080069e4 <_close_r>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4d06      	ldr	r5, [pc, #24]	; (8006a00 <_close_r+0x1c>)
 80069e8:	2300      	movs	r3, #0
 80069ea:	4604      	mov	r4, r0
 80069ec:	4608      	mov	r0, r1
 80069ee:	602b      	str	r3, [r5, #0]
 80069f0:	f7fa fa6d 	bl	8000ece <_close>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	d102      	bne.n	80069fe <_close_r+0x1a>
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	b103      	cbz	r3, 80069fe <_close_r+0x1a>
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	bd38      	pop	{r3, r4, r5, pc}
 8006a00:	240001b0 	.word	0x240001b0

08006a04 <__sflush_r>:
 8006a04:	898a      	ldrh	r2, [r1, #12]
 8006a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0a:	4605      	mov	r5, r0
 8006a0c:	0710      	lsls	r0, r2, #28
 8006a0e:	460c      	mov	r4, r1
 8006a10:	d458      	bmi.n	8006ac4 <__sflush_r+0xc0>
 8006a12:	684b      	ldr	r3, [r1, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	dc05      	bgt.n	8006a24 <__sflush_r+0x20>
 8006a18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	dc02      	bgt.n	8006a24 <__sflush_r+0x20>
 8006a1e:	2000      	movs	r0, #0
 8006a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a26:	2e00      	cmp	r6, #0
 8006a28:	d0f9      	beq.n	8006a1e <__sflush_r+0x1a>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a30:	682f      	ldr	r7, [r5, #0]
 8006a32:	602b      	str	r3, [r5, #0]
 8006a34:	d032      	beq.n	8006a9c <__sflush_r+0x98>
 8006a36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a38:	89a3      	ldrh	r3, [r4, #12]
 8006a3a:	075a      	lsls	r2, r3, #29
 8006a3c:	d505      	bpl.n	8006a4a <__sflush_r+0x46>
 8006a3e:	6863      	ldr	r3, [r4, #4]
 8006a40:	1ac0      	subs	r0, r0, r3
 8006a42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a44:	b10b      	cbz	r3, 8006a4a <__sflush_r+0x46>
 8006a46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a48:	1ac0      	subs	r0, r0, r3
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a50:	6a21      	ldr	r1, [r4, #32]
 8006a52:	4628      	mov	r0, r5
 8006a54:	47b0      	blx	r6
 8006a56:	1c43      	adds	r3, r0, #1
 8006a58:	89a3      	ldrh	r3, [r4, #12]
 8006a5a:	d106      	bne.n	8006a6a <__sflush_r+0x66>
 8006a5c:	6829      	ldr	r1, [r5, #0]
 8006a5e:	291d      	cmp	r1, #29
 8006a60:	d82c      	bhi.n	8006abc <__sflush_r+0xb8>
 8006a62:	4a2a      	ldr	r2, [pc, #168]	; (8006b0c <__sflush_r+0x108>)
 8006a64:	40ca      	lsrs	r2, r1
 8006a66:	07d6      	lsls	r6, r2, #31
 8006a68:	d528      	bpl.n	8006abc <__sflush_r+0xb8>
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	6062      	str	r2, [r4, #4]
 8006a6e:	04d9      	lsls	r1, r3, #19
 8006a70:	6922      	ldr	r2, [r4, #16]
 8006a72:	6022      	str	r2, [r4, #0]
 8006a74:	d504      	bpl.n	8006a80 <__sflush_r+0x7c>
 8006a76:	1c42      	adds	r2, r0, #1
 8006a78:	d101      	bne.n	8006a7e <__sflush_r+0x7a>
 8006a7a:	682b      	ldr	r3, [r5, #0]
 8006a7c:	b903      	cbnz	r3, 8006a80 <__sflush_r+0x7c>
 8006a7e:	6560      	str	r0, [r4, #84]	; 0x54
 8006a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a82:	602f      	str	r7, [r5, #0]
 8006a84:	2900      	cmp	r1, #0
 8006a86:	d0ca      	beq.n	8006a1e <__sflush_r+0x1a>
 8006a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a8c:	4299      	cmp	r1, r3
 8006a8e:	d002      	beq.n	8006a96 <__sflush_r+0x92>
 8006a90:	4628      	mov	r0, r5
 8006a92:	f000 f8fd 	bl	8006c90 <_free_r>
 8006a96:	2000      	movs	r0, #0
 8006a98:	6360      	str	r0, [r4, #52]	; 0x34
 8006a9a:	e7c1      	b.n	8006a20 <__sflush_r+0x1c>
 8006a9c:	6a21      	ldr	r1, [r4, #32]
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	47b0      	blx	r6
 8006aa4:	1c41      	adds	r1, r0, #1
 8006aa6:	d1c7      	bne.n	8006a38 <__sflush_r+0x34>
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0c4      	beq.n	8006a38 <__sflush_r+0x34>
 8006aae:	2b1d      	cmp	r3, #29
 8006ab0:	d001      	beq.n	8006ab6 <__sflush_r+0xb2>
 8006ab2:	2b16      	cmp	r3, #22
 8006ab4:	d101      	bne.n	8006aba <__sflush_r+0xb6>
 8006ab6:	602f      	str	r7, [r5, #0]
 8006ab8:	e7b1      	b.n	8006a1e <__sflush_r+0x1a>
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ac0:	81a3      	strh	r3, [r4, #12]
 8006ac2:	e7ad      	b.n	8006a20 <__sflush_r+0x1c>
 8006ac4:	690f      	ldr	r7, [r1, #16]
 8006ac6:	2f00      	cmp	r7, #0
 8006ac8:	d0a9      	beq.n	8006a1e <__sflush_r+0x1a>
 8006aca:	0793      	lsls	r3, r2, #30
 8006acc:	680e      	ldr	r6, [r1, #0]
 8006ace:	bf08      	it	eq
 8006ad0:	694b      	ldreq	r3, [r1, #20]
 8006ad2:	600f      	str	r7, [r1, #0]
 8006ad4:	bf18      	it	ne
 8006ad6:	2300      	movne	r3, #0
 8006ad8:	eba6 0807 	sub.w	r8, r6, r7
 8006adc:	608b      	str	r3, [r1, #8]
 8006ade:	f1b8 0f00 	cmp.w	r8, #0
 8006ae2:	dd9c      	ble.n	8006a1e <__sflush_r+0x1a>
 8006ae4:	6a21      	ldr	r1, [r4, #32]
 8006ae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ae8:	4643      	mov	r3, r8
 8006aea:	463a      	mov	r2, r7
 8006aec:	4628      	mov	r0, r5
 8006aee:	47b0      	blx	r6
 8006af0:	2800      	cmp	r0, #0
 8006af2:	dc06      	bgt.n	8006b02 <__sflush_r+0xfe>
 8006af4:	89a3      	ldrh	r3, [r4, #12]
 8006af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006afa:	81a3      	strh	r3, [r4, #12]
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295
 8006b00:	e78e      	b.n	8006a20 <__sflush_r+0x1c>
 8006b02:	4407      	add	r7, r0
 8006b04:	eba8 0800 	sub.w	r8, r8, r0
 8006b08:	e7e9      	b.n	8006ade <__sflush_r+0xda>
 8006b0a:	bf00      	nop
 8006b0c:	20400001 	.word	0x20400001

08006b10 <_fflush_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	690b      	ldr	r3, [r1, #16]
 8006b14:	4605      	mov	r5, r0
 8006b16:	460c      	mov	r4, r1
 8006b18:	b913      	cbnz	r3, 8006b20 <_fflush_r+0x10>
 8006b1a:	2500      	movs	r5, #0
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	bd38      	pop	{r3, r4, r5, pc}
 8006b20:	b118      	cbz	r0, 8006b2a <_fflush_r+0x1a>
 8006b22:	6983      	ldr	r3, [r0, #24]
 8006b24:	b90b      	cbnz	r3, 8006b2a <_fflush_r+0x1a>
 8006b26:	f7ff f9cd 	bl	8005ec4 <__sinit>
 8006b2a:	4b14      	ldr	r3, [pc, #80]	; (8006b7c <_fflush_r+0x6c>)
 8006b2c:	429c      	cmp	r4, r3
 8006b2e:	d11b      	bne.n	8006b68 <_fflush_r+0x58>
 8006b30:	686c      	ldr	r4, [r5, #4]
 8006b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0ef      	beq.n	8006b1a <_fflush_r+0xa>
 8006b3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b3c:	07d0      	lsls	r0, r2, #31
 8006b3e:	d404      	bmi.n	8006b4a <_fflush_r+0x3a>
 8006b40:	0599      	lsls	r1, r3, #22
 8006b42:	d402      	bmi.n	8006b4a <_fflush_r+0x3a>
 8006b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b46:	f7ff fa5b 	bl	8006000 <__retarget_lock_acquire_recursive>
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	f7ff ff59 	bl	8006a04 <__sflush_r>
 8006b52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b54:	07da      	lsls	r2, r3, #31
 8006b56:	4605      	mov	r5, r0
 8006b58:	d4e0      	bmi.n	8006b1c <_fflush_r+0xc>
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	059b      	lsls	r3, r3, #22
 8006b5e:	d4dd      	bmi.n	8006b1c <_fflush_r+0xc>
 8006b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b62:	f7ff fa4e 	bl	8006002 <__retarget_lock_release_recursive>
 8006b66:	e7d9      	b.n	8006b1c <_fflush_r+0xc>
 8006b68:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <_fflush_r+0x70>)
 8006b6a:	429c      	cmp	r4, r3
 8006b6c:	d101      	bne.n	8006b72 <_fflush_r+0x62>
 8006b6e:	68ac      	ldr	r4, [r5, #8]
 8006b70:	e7df      	b.n	8006b32 <_fflush_r+0x22>
 8006b72:	4b04      	ldr	r3, [pc, #16]	; (8006b84 <_fflush_r+0x74>)
 8006b74:	429c      	cmp	r4, r3
 8006b76:	bf08      	it	eq
 8006b78:	68ec      	ldreq	r4, [r5, #12]
 8006b7a:	e7da      	b.n	8006b32 <_fflush_r+0x22>
 8006b7c:	08006ed4 	.word	0x08006ed4
 8006b80:	08006ef4 	.word	0x08006ef4
 8006b84:	08006eb4 	.word	0x08006eb4

08006b88 <_lseek_r>:
 8006b88:	b538      	push	{r3, r4, r5, lr}
 8006b8a:	4d07      	ldr	r5, [pc, #28]	; (8006ba8 <_lseek_r+0x20>)
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	4608      	mov	r0, r1
 8006b90:	4611      	mov	r1, r2
 8006b92:	2200      	movs	r2, #0
 8006b94:	602a      	str	r2, [r5, #0]
 8006b96:	461a      	mov	r2, r3
 8006b98:	f7fa f9c0 	bl	8000f1c <_lseek>
 8006b9c:	1c43      	adds	r3, r0, #1
 8006b9e:	d102      	bne.n	8006ba6 <_lseek_r+0x1e>
 8006ba0:	682b      	ldr	r3, [r5, #0]
 8006ba2:	b103      	cbz	r3, 8006ba6 <_lseek_r+0x1e>
 8006ba4:	6023      	str	r3, [r4, #0]
 8006ba6:	bd38      	pop	{r3, r4, r5, pc}
 8006ba8:	240001b0 	.word	0x240001b0

08006bac <__swhatbuf_r>:
 8006bac:	b570      	push	{r4, r5, r6, lr}
 8006bae:	460e      	mov	r6, r1
 8006bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb4:	2900      	cmp	r1, #0
 8006bb6:	b096      	sub	sp, #88	; 0x58
 8006bb8:	4614      	mov	r4, r2
 8006bba:	461d      	mov	r5, r3
 8006bbc:	da08      	bge.n	8006bd0 <__swhatbuf_r+0x24>
 8006bbe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	602a      	str	r2, [r5, #0]
 8006bc6:	061a      	lsls	r2, r3, #24
 8006bc8:	d410      	bmi.n	8006bec <__swhatbuf_r+0x40>
 8006bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bce:	e00e      	b.n	8006bee <__swhatbuf_r+0x42>
 8006bd0:	466a      	mov	r2, sp
 8006bd2:	f000 f8bb 	bl	8006d4c <_fstat_r>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	dbf1      	blt.n	8006bbe <__swhatbuf_r+0x12>
 8006bda:	9a01      	ldr	r2, [sp, #4]
 8006bdc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006be0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006be4:	425a      	negs	r2, r3
 8006be6:	415a      	adcs	r2, r3
 8006be8:	602a      	str	r2, [r5, #0]
 8006bea:	e7ee      	b.n	8006bca <__swhatbuf_r+0x1e>
 8006bec:	2340      	movs	r3, #64	; 0x40
 8006bee:	2000      	movs	r0, #0
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	b016      	add	sp, #88	; 0x58
 8006bf4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006bf8 <__smakebuf_r>:
 8006bf8:	898b      	ldrh	r3, [r1, #12]
 8006bfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bfc:	079d      	lsls	r5, r3, #30
 8006bfe:	4606      	mov	r6, r0
 8006c00:	460c      	mov	r4, r1
 8006c02:	d507      	bpl.n	8006c14 <__smakebuf_r+0x1c>
 8006c04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	6123      	str	r3, [r4, #16]
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	6163      	str	r3, [r4, #20]
 8006c10:	b002      	add	sp, #8
 8006c12:	bd70      	pop	{r4, r5, r6, pc}
 8006c14:	ab01      	add	r3, sp, #4
 8006c16:	466a      	mov	r2, sp
 8006c18:	f7ff ffc8 	bl	8006bac <__swhatbuf_r>
 8006c1c:	9900      	ldr	r1, [sp, #0]
 8006c1e:	4605      	mov	r5, r0
 8006c20:	4630      	mov	r0, r6
 8006c22:	f7ff fa0f 	bl	8006044 <_malloc_r>
 8006c26:	b948      	cbnz	r0, 8006c3c <__smakebuf_r+0x44>
 8006c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c2c:	059a      	lsls	r2, r3, #22
 8006c2e:	d4ef      	bmi.n	8006c10 <__smakebuf_r+0x18>
 8006c30:	f023 0303 	bic.w	r3, r3, #3
 8006c34:	f043 0302 	orr.w	r3, r3, #2
 8006c38:	81a3      	strh	r3, [r4, #12]
 8006c3a:	e7e3      	b.n	8006c04 <__smakebuf_r+0xc>
 8006c3c:	4b0d      	ldr	r3, [pc, #52]	; (8006c74 <__smakebuf_r+0x7c>)
 8006c3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	6020      	str	r0, [r4, #0]
 8006c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c48:	81a3      	strh	r3, [r4, #12]
 8006c4a:	9b00      	ldr	r3, [sp, #0]
 8006c4c:	6163      	str	r3, [r4, #20]
 8006c4e:	9b01      	ldr	r3, [sp, #4]
 8006c50:	6120      	str	r0, [r4, #16]
 8006c52:	b15b      	cbz	r3, 8006c6c <__smakebuf_r+0x74>
 8006c54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c58:	4630      	mov	r0, r6
 8006c5a:	f000 f889 	bl	8006d70 <_isatty_r>
 8006c5e:	b128      	cbz	r0, 8006c6c <__smakebuf_r+0x74>
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	f023 0303 	bic.w	r3, r3, #3
 8006c66:	f043 0301 	orr.w	r3, r3, #1
 8006c6a:	81a3      	strh	r3, [r4, #12]
 8006c6c:	89a0      	ldrh	r0, [r4, #12]
 8006c6e:	4305      	orrs	r5, r0
 8006c70:	81a5      	strh	r5, [r4, #12]
 8006c72:	e7cd      	b.n	8006c10 <__smakebuf_r+0x18>
 8006c74:	08005e5d 	.word	0x08005e5d

08006c78 <__malloc_lock>:
 8006c78:	4801      	ldr	r0, [pc, #4]	; (8006c80 <__malloc_lock+0x8>)
 8006c7a:	f7ff b9c1 	b.w	8006000 <__retarget_lock_acquire_recursive>
 8006c7e:	bf00      	nop
 8006c80:	240001a4 	.word	0x240001a4

08006c84 <__malloc_unlock>:
 8006c84:	4801      	ldr	r0, [pc, #4]	; (8006c8c <__malloc_unlock+0x8>)
 8006c86:	f7ff b9bc 	b.w	8006002 <__retarget_lock_release_recursive>
 8006c8a:	bf00      	nop
 8006c8c:	240001a4 	.word	0x240001a4

08006c90 <_free_r>:
 8006c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c92:	2900      	cmp	r1, #0
 8006c94:	d044      	beq.n	8006d20 <_free_r+0x90>
 8006c96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c9a:	9001      	str	r0, [sp, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f1a1 0404 	sub.w	r4, r1, #4
 8006ca2:	bfb8      	it	lt
 8006ca4:	18e4      	addlt	r4, r4, r3
 8006ca6:	f7ff ffe7 	bl	8006c78 <__malloc_lock>
 8006caa:	4a1e      	ldr	r2, [pc, #120]	; (8006d24 <_free_r+0x94>)
 8006cac:	9801      	ldr	r0, [sp, #4]
 8006cae:	6813      	ldr	r3, [r2, #0]
 8006cb0:	b933      	cbnz	r3, 8006cc0 <_free_r+0x30>
 8006cb2:	6063      	str	r3, [r4, #4]
 8006cb4:	6014      	str	r4, [r2, #0]
 8006cb6:	b003      	add	sp, #12
 8006cb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cbc:	f7ff bfe2 	b.w	8006c84 <__malloc_unlock>
 8006cc0:	42a3      	cmp	r3, r4
 8006cc2:	d908      	bls.n	8006cd6 <_free_r+0x46>
 8006cc4:	6825      	ldr	r5, [r4, #0]
 8006cc6:	1961      	adds	r1, r4, r5
 8006cc8:	428b      	cmp	r3, r1
 8006cca:	bf01      	itttt	eq
 8006ccc:	6819      	ldreq	r1, [r3, #0]
 8006cce:	685b      	ldreq	r3, [r3, #4]
 8006cd0:	1949      	addeq	r1, r1, r5
 8006cd2:	6021      	streq	r1, [r4, #0]
 8006cd4:	e7ed      	b.n	8006cb2 <_free_r+0x22>
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	b10b      	cbz	r3, 8006ce0 <_free_r+0x50>
 8006cdc:	42a3      	cmp	r3, r4
 8006cde:	d9fa      	bls.n	8006cd6 <_free_r+0x46>
 8006ce0:	6811      	ldr	r1, [r2, #0]
 8006ce2:	1855      	adds	r5, r2, r1
 8006ce4:	42a5      	cmp	r5, r4
 8006ce6:	d10b      	bne.n	8006d00 <_free_r+0x70>
 8006ce8:	6824      	ldr	r4, [r4, #0]
 8006cea:	4421      	add	r1, r4
 8006cec:	1854      	adds	r4, r2, r1
 8006cee:	42a3      	cmp	r3, r4
 8006cf0:	6011      	str	r1, [r2, #0]
 8006cf2:	d1e0      	bne.n	8006cb6 <_free_r+0x26>
 8006cf4:	681c      	ldr	r4, [r3, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	6053      	str	r3, [r2, #4]
 8006cfa:	4421      	add	r1, r4
 8006cfc:	6011      	str	r1, [r2, #0]
 8006cfe:	e7da      	b.n	8006cb6 <_free_r+0x26>
 8006d00:	d902      	bls.n	8006d08 <_free_r+0x78>
 8006d02:	230c      	movs	r3, #12
 8006d04:	6003      	str	r3, [r0, #0]
 8006d06:	e7d6      	b.n	8006cb6 <_free_r+0x26>
 8006d08:	6825      	ldr	r5, [r4, #0]
 8006d0a:	1961      	adds	r1, r4, r5
 8006d0c:	428b      	cmp	r3, r1
 8006d0e:	bf04      	itt	eq
 8006d10:	6819      	ldreq	r1, [r3, #0]
 8006d12:	685b      	ldreq	r3, [r3, #4]
 8006d14:	6063      	str	r3, [r4, #4]
 8006d16:	bf04      	itt	eq
 8006d18:	1949      	addeq	r1, r1, r5
 8006d1a:	6021      	streq	r1, [r4, #0]
 8006d1c:	6054      	str	r4, [r2, #4]
 8006d1e:	e7ca      	b.n	8006cb6 <_free_r+0x26>
 8006d20:	b003      	add	sp, #12
 8006d22:	bd30      	pop	{r4, r5, pc}
 8006d24:	240001a8 	.word	0x240001a8

08006d28 <_read_r>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	4d07      	ldr	r5, [pc, #28]	; (8006d48 <_read_r+0x20>)
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	4608      	mov	r0, r1
 8006d30:	4611      	mov	r1, r2
 8006d32:	2200      	movs	r2, #0
 8006d34:	602a      	str	r2, [r5, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	f7fa f890 	bl	8000e5c <_read>
 8006d3c:	1c43      	adds	r3, r0, #1
 8006d3e:	d102      	bne.n	8006d46 <_read_r+0x1e>
 8006d40:	682b      	ldr	r3, [r5, #0]
 8006d42:	b103      	cbz	r3, 8006d46 <_read_r+0x1e>
 8006d44:	6023      	str	r3, [r4, #0]
 8006d46:	bd38      	pop	{r3, r4, r5, pc}
 8006d48:	240001b0 	.word	0x240001b0

08006d4c <_fstat_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	4d07      	ldr	r5, [pc, #28]	; (8006d6c <_fstat_r+0x20>)
 8006d50:	2300      	movs	r3, #0
 8006d52:	4604      	mov	r4, r0
 8006d54:	4608      	mov	r0, r1
 8006d56:	4611      	mov	r1, r2
 8006d58:	602b      	str	r3, [r5, #0]
 8006d5a:	f7fa f8c4 	bl	8000ee6 <_fstat>
 8006d5e:	1c43      	adds	r3, r0, #1
 8006d60:	d102      	bne.n	8006d68 <_fstat_r+0x1c>
 8006d62:	682b      	ldr	r3, [r5, #0]
 8006d64:	b103      	cbz	r3, 8006d68 <_fstat_r+0x1c>
 8006d66:	6023      	str	r3, [r4, #0]
 8006d68:	bd38      	pop	{r3, r4, r5, pc}
 8006d6a:	bf00      	nop
 8006d6c:	240001b0 	.word	0x240001b0

08006d70 <_isatty_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	4d06      	ldr	r5, [pc, #24]	; (8006d8c <_isatty_r+0x1c>)
 8006d74:	2300      	movs	r3, #0
 8006d76:	4604      	mov	r4, r0
 8006d78:	4608      	mov	r0, r1
 8006d7a:	602b      	str	r3, [r5, #0]
 8006d7c:	f7fa f8c3 	bl	8000f06 <_isatty>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d102      	bne.n	8006d8a <_isatty_r+0x1a>
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	b103      	cbz	r3, 8006d8a <_isatty_r+0x1a>
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	bd38      	pop	{r3, r4, r5, pc}
 8006d8c:	240001b0 	.word	0x240001b0

08006d90 <_init>:
 8006d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d92:	bf00      	nop
 8006d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d96:	bc08      	pop	{r3}
 8006d98:	469e      	mov	lr, r3
 8006d9a:	4770      	bx	lr

08006d9c <_fini>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	bf00      	nop
 8006da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da2:	bc08      	pop	{r3}
 8006da4:	469e      	mov	lr, r3
 8006da6:	4770      	bx	lr
